# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Pipeline(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'env_config': 'object',
        'exp_config': 'object',
        'workspace_id': 'int',
        'datasource_id': 'int',
        'id': 'int',
        'uuid': 'str',
        'user_id': 'int',
        'pipeline_run': 'PipelineRun'
    }

    attribute_map = {
        'name': 'name',
        'env_config': 'env_config',
        'exp_config': 'exp_config',
        'workspace_id': 'workspace_id',
        'datasource_id': 'datasource_id',
        'id': 'id',
        'uuid': 'uuid',
        'user_id': 'user_id',
        'pipeline_run': 'pipeline_run'
    }

    def __init__(self, name=None, env_config=None, exp_config=None, workspace_id=None, datasource_id=None, id=None, uuid=None, user_id=None, pipeline_run=None):  # noqa: E501
        """Pipeline - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._env_config = None
        self._exp_config = None
        self._workspace_id = None
        self._datasource_id = None
        self._id = None
        self._uuid = None
        self._user_id = None
        self._pipeline_run = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if env_config is not None:
            self.env_config = env_config
        if exp_config is not None:
            self.exp_config = exp_config
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if datasource_id is not None:
            self.datasource_id = datasource_id
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if user_id is not None:
            self.user_id = user_id
        if pipeline_run is not None:
            self.pipeline_run = pipeline_run

    @property
    def name(self):
        """Gets the name of this Pipeline.  # noqa: E501


        :return: The name of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pipeline.


        :param name: The name of this Pipeline.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def env_config(self):
        """Gets the env_config of this Pipeline.  # noqa: E501


        :return: The env_config of this Pipeline.  # noqa: E501
        :rtype: object
        """
        return self._env_config

    @env_config.setter
    def env_config(self, env_config):
        """Sets the env_config of this Pipeline.


        :param env_config: The env_config of this Pipeline.  # noqa: E501
        :type: object
        """

        self._env_config = env_config

    @property
    def exp_config(self):
        """Gets the exp_config of this Pipeline.  # noqa: E501


        :return: The exp_config of this Pipeline.  # noqa: E501
        :rtype: object
        """
        return self._exp_config

    @exp_config.setter
    def exp_config(self, exp_config):
        """Sets the exp_config of this Pipeline.


        :param exp_config: The exp_config of this Pipeline.  # noqa: E501
        :type: object
        """

        self._exp_config = exp_config

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Pipeline.  # noqa: E501


        :return: The workspace_id of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Pipeline.


        :param workspace_id: The workspace_id of this Pipeline.  # noqa: E501
        :type: int
        """

        self._workspace_id = workspace_id

    @property
    def datasource_id(self):
        """Gets the datasource_id of this Pipeline.  # noqa: E501


        :return: The datasource_id of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._datasource_id

    @datasource_id.setter
    def datasource_id(self, datasource_id):
        """Sets the datasource_id of this Pipeline.


        :param datasource_id: The datasource_id of this Pipeline.  # noqa: E501
        :type: int
        """

        self._datasource_id = datasource_id

    @property
    def id(self):
        """Gets the id of this Pipeline.  # noqa: E501


        :return: The id of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pipeline.


        :param id: The id of this Pipeline.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this Pipeline.  # noqa: E501


        :return: The uuid of this Pipeline.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Pipeline.


        :param uuid: The uuid of this Pipeline.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def user_id(self):
        """Gets the user_id of this Pipeline.  # noqa: E501


        :return: The user_id of this Pipeline.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Pipeline.


        :param user_id: The user_id of this Pipeline.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def pipeline_run(self):
        """Gets the pipeline_run of this Pipeline.  # noqa: E501


        :return: The pipeline_run of this Pipeline.  # noqa: E501
        :rtype: PipelineRun
        """
        return self._pipeline_run

    @pipeline_run.setter
    def pipeline_run(self, pipeline_run):
        """Sets the pipeline_run of this Pipeline.


        :param pipeline_run: The pipeline_run of this Pipeline.  # noqa: E501
        :type: PipelineRun
        """

        self._pipeline_run = pipeline_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Pipeline, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pipeline):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
