# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'full_name': 'str',
        'role_id': 'int',
        'organization_id': 'int',
        'n_pipelines_created': 'int',
        'n_pipelines_executed': 'int',
        'id': 'int',
        'uuid': 'str',
        'firebase_id': 'str',
        'credit_remaining': 'float',
        'credit_start_time': 'datetime',
        'credit_end_time': 'datetime'
    }

    attribute_map = {
        'email': 'email',
        'full_name': 'full_name',
        'role_id': 'role_id',
        'organization_id': 'organization_id',
        'n_pipelines_created': 'n_pipelines_created',
        'n_pipelines_executed': 'n_pipelines_executed',
        'id': 'id',
        'uuid': 'uuid',
        'firebase_id': 'firebase_id',
        'credit_remaining': 'credit_remaining',
        'credit_start_time': 'credit_start_time',
        'credit_end_time': 'credit_end_time'
    }

    def __init__(self, email=None, full_name=None, role_id=None, organization_id=None, n_pipelines_created=0, n_pipelines_executed=0, id=None, uuid=None, firebase_id=None, credit_remaining=None, credit_start_time=None, credit_end_time=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._full_name = None
        self._role_id = None
        self._organization_id = None
        self._n_pipelines_created = None
        self._n_pipelines_executed = None
        self._id = None
        self._uuid = None
        self._firebase_id = None
        self._credit_remaining = None
        self._credit_start_time = None
        self._credit_end_time = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if full_name is not None:
            self.full_name = full_name
        if role_id is not None:
            self.role_id = role_id
        if organization_id is not None:
            self.organization_id = organization_id
        if n_pipelines_created is not None:
            self.n_pipelines_created = n_pipelines_created
        if n_pipelines_executed is not None:
            self.n_pipelines_executed = n_pipelines_executed
        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if firebase_id is not None:
            self.firebase_id = firebase_id
        if credit_remaining is not None:
            self.credit_remaining = credit_remaining
        if credit_start_time is not None:
            self.credit_start_time = credit_start_time
        if credit_end_time is not None:
            self.credit_end_time = credit_end_time

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def full_name(self):
        """Gets the full_name of this User.  # noqa: E501


        :return: The full_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this User.


        :param full_name: The full_name of this User.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def role_id(self):
        """Gets the role_id of this User.  # noqa: E501


        :return: The role_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this User.


        :param role_id: The role_id of this User.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def organization_id(self):
        """Gets the organization_id of this User.  # noqa: E501


        :return: The organization_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this User.


        :param organization_id: The organization_id of this User.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def n_pipelines_created(self):
        """Gets the n_pipelines_created of this User.  # noqa: E501


        :return: The n_pipelines_created of this User.  # noqa: E501
        :rtype: int
        """
        return self._n_pipelines_created

    @n_pipelines_created.setter
    def n_pipelines_created(self, n_pipelines_created):
        """Sets the n_pipelines_created of this User.


        :param n_pipelines_created: The n_pipelines_created of this User.  # noqa: E501
        :type: int
        """

        self._n_pipelines_created = n_pipelines_created

    @property
    def n_pipelines_executed(self):
        """Gets the n_pipelines_executed of this User.  # noqa: E501


        :return: The n_pipelines_executed of this User.  # noqa: E501
        :rtype: int
        """
        return self._n_pipelines_executed

    @n_pipelines_executed.setter
    def n_pipelines_executed(self, n_pipelines_executed):
        """Sets the n_pipelines_executed of this User.


        :param n_pipelines_executed: The n_pipelines_executed of this User.  # noqa: E501
        :type: int
        """

        self._n_pipelines_executed = n_pipelines_executed

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this User.  # noqa: E501


        :return: The uuid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this User.


        :param uuid: The uuid of this User.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def firebase_id(self):
        """Gets the firebase_id of this User.  # noqa: E501


        :return: The firebase_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._firebase_id

    @firebase_id.setter
    def firebase_id(self, firebase_id):
        """Sets the firebase_id of this User.


        :param firebase_id: The firebase_id of this User.  # noqa: E501
        :type: str
        """

        self._firebase_id = firebase_id

    @property
    def credit_remaining(self):
        """Gets the credit_remaining of this User.  # noqa: E501


        :return: The credit_remaining of this User.  # noqa: E501
        :rtype: float
        """
        return self._credit_remaining

    @credit_remaining.setter
    def credit_remaining(self, credit_remaining):
        """Sets the credit_remaining of this User.


        :param credit_remaining: The credit_remaining of this User.  # noqa: E501
        :type: float
        """

        self._credit_remaining = credit_remaining

    @property
    def credit_start_time(self):
        """Gets the credit_start_time of this User.  # noqa: E501


        :return: The credit_start_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._credit_start_time

    @credit_start_time.setter
    def credit_start_time(self, credit_start_time):
        """Sets the credit_start_time of this User.


        :param credit_start_time: The credit_start_time of this User.  # noqa: E501
        :type: datetime
        """

        self._credit_start_time = credit_start_time

    @property
    def credit_end_time(self):
        """Gets the credit_end_time of this User.  # noqa: E501


        :return: The credit_end_time of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._credit_end_time

    @credit_end_time.setter
    def credit_end_time(self, credit_end_time):
        """Sets the credit_end_time of this User.


        :param credit_end_time: The credit_end_time of this User.  # noqa: E501
        :type: datetime
        """

        self._credit_end_time = credit_end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
