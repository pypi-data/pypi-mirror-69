# coding: utf-8

"""
    maiot Core Engine API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ce_api.api_client import ApiClient


class WorkspacesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_workspace_api_v1_workspaces_post(self, body, **kwargs):  # noqa: E501
        """Create Workspace  # noqa: E501

        Create new workspace for logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_api_v1_workspaces_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIn body: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_workspace_api_v1_workspaces_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_workspace_api_v1_workspaces_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_workspace_api_v1_workspaces_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Workspace  # noqa: E501

        Create new workspace for logged in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_workspace_api_v1_workspaces_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WorkspaceIn body: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workspace_api_v1_workspaces_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_workspace_api_v1_workspaces_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get(self, workspace_id, **kwargs):  # noqa: E501
        """Get Eval Artifacts  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get Eval Artifacts  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_eval_artifacts_api_v1_workspaces_workspace_id_artifacts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/{workspace_id}/artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get(self, workspace_id, **kwargs):  # noqa: E501
        """Get Eval Contexts  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get Eval Contexts  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_eval_contexts_api_v1_workspaces_workspace_id_contexts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/{workspace_id}/contexts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get(self, workspace_id, context_id, **kwargs):  # noqa: E501
        """Get Eval Executions  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get(workspace_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :param int context_id: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get_with_http_info(workspace_id, context_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get_with_http_info(workspace_id, context_id, **kwargs)  # noqa: E501
            return data

    def get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get_with_http_info(self, workspace_id, context_id, **kwargs):  # noqa: E501
        """Get Eval Executions  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get_with_http_info(workspace_id, context_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :param int context_id: (required)
        :return: Object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'context_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get`")  # noqa: E501
        # verify the required parameter 'context_id' is set
        if ('context_id' not in params or
                params['context_id'] is None):
            raise ValueError("Missing the required parameter `context_id` when calling `get_eval_executions_api_v1_workspaces_workspace_id_context_id_executions_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'context_id' in params:
            path_params['context_id'] = params['context_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/{workspace_id}/{context_id}/executions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_loggedin_workspaces_api_v1_workspaces_get(self, **kwargs):  # noqa: E501
        """Get Loggedin Workspaces  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loggedin_workspaces_api_v1_workspaces_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Workspace]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_loggedin_workspaces_api_v1_workspaces_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_loggedin_workspaces_api_v1_workspaces_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_loggedin_workspaces_api_v1_workspaces_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get Loggedin Workspaces  # noqa: E501

        Gets the logged in users workspace details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_loggedin_workspaces_api_v1_workspaces_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Workspace]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_loggedin_workspaces_api_v1_workspaces_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Workspace]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspace_api_v1_workspaces_workspace_id_get(self, workspace_id, **kwargs):  # noqa: E501
        """Get Workspace  # noqa: E501

        Gets the workspace specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_api_v1_workspaces_workspace_id_get(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspace_api_v1_workspaces_workspace_id_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspace_api_v1_workspaces_workspace_id_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspace_api_v1_workspaces_workspace_id_get_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get Workspace  # noqa: E501

        Gets the workspace specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspace_api_v1_workspaces_workspace_id_get_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: Workspace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_api_v1_workspaces_workspace_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspace_api_v1_workspaces_workspace_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/{workspace_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Workspace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get(self, workspace_id, pipeline_id, **kwargs):  # noqa: E501
        """Get Workspaces Pipeline By Id  # noqa: E501

        Gets the pipeline specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get(workspace_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get_with_http_info(workspace_id, pipeline_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get_with_http_info(workspace_id, pipeline_id, **kwargs)  # noqa: E501
            return data

    def get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get_with_http_info(self, workspace_id, pipeline_id, **kwargs):  # noqa: E501
        """Get Workspaces Pipeline By Id  # noqa: E501

        Gets the pipeline specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get_with_http_info(workspace_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :param str pipeline_id: (required)
        :return: Pipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id', 'pipeline_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get`")  # noqa: E501
        # verify the required parameter 'pipeline_id' is set
        if ('pipeline_id' not in params or
                params['pipeline_id'] is None):
            raise ValueError("Missing the required parameter `pipeline_id` when calling `get_workspaces_pipeline_by_id_api_v1_workspaces_workspace_id_pipelines_pipeline_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501
        if 'pipeline_id' in params:
            path_params['pipeline_id'] = params['pipeline_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/{workspace_id}/pipelines/{pipeline_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pipeline',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get(self, workspace_id, **kwargs):  # noqa: E501
        """Get Workspaces Pipelines  # noqa: E501

        Gets the pipeline specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get_with_http_info(workspace_id, **kwargs)  # noqa: E501
            return data

    def get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get_with_http_info(self, workspace_id, **kwargs):  # noqa: E501
        """Get Workspaces Pipelines  # noqa: E501

        Gets the pipeline specified by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get_with_http_info(workspace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str workspace_id: (required)
        :return: list[Pipeline]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workspace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'workspace_id' is set
        if ('workspace_id' not in params or
                params['workspace_id'] is None):
            raise ValueError("Missing the required parameter `workspace_id` when calling `get_workspaces_pipelines_api_v1_workspaces_workspace_id_pipelines_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'workspace_id' in params:
            path_params['workspace_id'] = params['workspace_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/workspaces/{workspace_id}/pipelines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Pipeline]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
