####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("835b6ed7568f58957873b088189ea05ea6b38eb46288b774c9be7b71c0802905dfba244d307cd1ef7e3b7cd21e84f2e8c37c84235732b04db5fcb221c26836664e5c3e8f0c9ff85a5fb1e20aac0f4895554b5b328bedd97bda0d72acf3ba45c684697e5955ce5c49a750aab0e5c1eb5e44815cafbbc7225f0c9317e1b896e9bb75d2d0ae7d871310e8bce4fee118d97f1a00cfb7367b845b79245d5962e8c076c7ca142ed2d858ccc976e585fa2f36daa64fcedaad651b36ed27deb19c75f882c7941a0a700829b0ea6f873c2451d629d11c914604165e4eac061070e78f80e81ee58e97e7789fc452e011d38b9b3ceecb70512da0b23854826c5d9c8c3861178c8211f51a6c7b66e8ba9d5199118e77f86f4b228164227bd8db65669ca09e677cd1bafc54cb03164e24ac59a12e45fcf571d48122a7c8b8e5c138e0e4cc78ac6acb776033d2f6e9c8baaac041e0bd8bc24645b3b9b15ae9b3abffa9a314008ccd896a231a7f892a84f19b736f5d3d41096df6d730672f514546f09f2e954e23add83c744f7918d9523346c2e5f8ba278c0d42fcf94ac56ace1ea50d37ed5cdd36d368345c6d166ab24f830409cd0de5|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|27|1080",key),locals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
