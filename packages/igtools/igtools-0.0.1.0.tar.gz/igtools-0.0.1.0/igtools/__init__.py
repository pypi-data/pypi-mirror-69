####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("2ff2bbfe54a014214eb4eb098c37a74a930bab467e09f8ac66ec2cd1b8711abc989af4e339b2ce9091e4b282ad6788d8c5cb9986bc5604a6ebd92ba95c20a5e61e3763987a9d25ecc78b07a57fc4be4b0c5312a623b237dd25354d0a138c229174a7edc63710ffd0da746cd76f7f1bc33e75874f61efb3520ae3a67d4289b95615c2aa617376809073df3d06ffe8dbe51670422875a6e132fa7e52b8b1aa6353b8c628d41c861f53a2f59514bb26387323375375dd464b79af51b471e3314d52085a0f40e3cbec8e4d8f7412b26f0d25489715ef2b6d8386814f3bb68a952e6f649a47147bfee228868656472990||17|1226",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
