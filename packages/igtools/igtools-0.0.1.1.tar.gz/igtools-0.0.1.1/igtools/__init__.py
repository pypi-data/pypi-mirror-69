####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("fc70180746ec7007d30e844bef08dc1321ce0a646c92d0dd4a8a44bc335df0f3bcc3c08dcbdb0c243e599e4cd2e3f07de306a6e5dbfd8246408f3fcd1ac88574b026e34669047356d870b6c4ac59f2833f5fa1f0bc5629d5190e3de56e1c51e78f8398a1bb6dcc68eece2a4f7bebb1c6f8af0c7bdb82299c770423271de65690174f28cf5e815a2f5c1b08f6b427700cb3b9ffbcd17893b562a9d18f61223742ecb8bd7497f16533d3fce300d2732fe023edbd629a8e2c0e6d7eb7538dbe2244dfbdfeda11ef9cd7858da82ff985c8cc1e87ca1b06c870d4a33b2c834035279878895b3455c709e743a4b3a0cf1fc9d359f7e1d2b8493895a424811bda091c277d533e0da737c80fa492c22e8888812d81bf354bcb5bc3f0e868af04fd1c05753bc9fd1073b3b13ba4e803f7f184bac2df99080729832506efe099f47a1094b28e81c559b8a17cc17a6082e111edf9515832a0662ba72250827467a32e85a4833a60eed4b4c055cafab8744d227ff9e1ab57f1e537e0||17|780",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
