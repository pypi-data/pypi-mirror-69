####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("76b5675ccd1b1fdcba0c3fafb92eba6627c987a535a0684b532d96fe51ff3cfd64eb859eb6aee9b9e5802a6f9f8beebdc912c2c759ae05fd7ddc27caf7158d798f77d41de0f90641671c2b196ed7de1318e3af269f49c3f77404020a597510b1e2866fa1561fe44ea7e38b2d32fd5a9af38aa05712e781f0268d9e0ff4e02fd953383294f146c583558012e0fd95efd8821e934d9992eebf23eca973f0f48cced1a6e44f22f03f5fb07918b3a868c4352973987a3a23b8acdbcb6af7fd7a8429a2f11220c2704bb12f3f9cdf9eed8aeabd2a0d49320b7b8332aa8832bceea672b10bb23cf36213f431d439840b4682b0183e99ab967eb35b4667be69d1abdcfb09a3d4f9fee6c8b9593adb031c3a0b7a362a5d058ed936c1bc0bb1f9f3756012a155dc70f60157da41091bdd625f6c88d9f0d4426502601df87134a97794812b2a3eacf7fe7d9b5a222fc812e905af196dc1209f15cf1be8eb01016cd5e5cd126a9c1462ad32c74ae5b94315631a5d28f2f3693f3353bbd6f9e5b1fcdc5a5161696789051c559cb6cded61191632a91c45754c6e1f14b16d4308d3fd74b708b01327ee3386154b5a7378fcfb3614fb5501f618dc9bf05e2757c6545559831fdbc0844d3fed79299d46bdb04e6d6ade58c15393e022de3a245449d8f6||17|619",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
