####    How To Open This Script?    ####
###     Use unlock Function         ####
import getpass,hashlib,base64
def hasher(text,length,key):
    if length > 64:
       raise ValueError("hash length should be lower than 64")
    result = hashlib.sha256(text+key+text).hexdigest()[:length][::-1]
    return result #return final result


def separator(text,length):
    return [text[i:i+length] for i in range(0,len(text),int(length))]

def decrypt(text,key):
    textsplit = text.split("!-!")
    encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
    encrypted = separator(encrypted,int(hash_length))
    encrypted2 = separator("".join(encrypted),int(hash_length))
    shuffled = separator(shuffled,int(separate_length))
    primary_key_is_true = True
    for i in shuffled:
        hashed = hasher(i,int(hash_length),key)
        if hashed in encrypted:
           encrypted[encrypted.index(hashed)] = i

    for i in encrypted:
        if i in encrypted2 and len(textsplit) == 1:
           raise KeyError("Wrong Key")
        elif i in encrypted2:
           primary_key_is_true = False
           break

    if primary_key_is_true:
       result = base64.b64decode("".join(encrypted)[::-1])

    if len(textsplit) >= 2 and primary_key_is_true == False:
       master_key = separator(textsplit[1],int(hash_length))
       master_key2 = separator("".join(master_key),int(hash_length))
       for i in shuffled:
           hashed = hasher(i,int(hash_length),key)
           if hashed in master_key:
              master_key[master_key.index(hashed)] = i

       for i in master_key:
           if i in master_key2:
              raise KeyError("Wrong Key")
       result = base64.b64decode("".join(master_key)[::-1])
    return result

def unlock(key):
    exec (decrypt("70bd4a918df664ae7b4c2f6038c853e4a205e28969052b41beda878c13d8c131b197945e3fdd09b26b3bd9c0af956ad649aa8000797ee76b2b125cb01f01debd53c9a1559accece3ab79bc87960c1036fe9852493f71654d53c193e9b9a66e0eba6fac56d9964e4f8c9f1e7eca023afca30946b50954e06ffbc1da9d66e61f7dcce7725427ae2e6c66880b632ca216032456f2c20c4175027afe9a7133877804c8b773872d63976549b602401b0c36d9edae33b75308cd3582ec73f94c88a310f4705a7e6e2516172cb8fee3||17|1429",key),globals())

if "__main__" == __name__:
   unlock(getpass.getpass("Key : "))
