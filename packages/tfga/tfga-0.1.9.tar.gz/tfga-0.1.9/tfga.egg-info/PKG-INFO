Metadata-Version: 2.1
Name: tfga
Version: 0.1.9
Summary: Clifford and Geometric Algebra with TensorFlow
Home-page: https://github.com/RobinKa/tfga
Author: Robin 'Tora' Kahlow
Author-email: tora@warlock.ai
License: MIT
Description: # TFGA - TensorFlow Geometric Algebra
        [![Build status](https://github.com/RobinKa/tfga/workflows/Build%20Test%20Publish/badge.svg)](https://github.com/RobinKa/tfga/actions) [![PyPI](https://badge.fury.io/py/tfga.svg)](https://badge.fury.io/py/tfga)
        
        [GitHub](https://github.com/RobinKa/tfga) | [Docs](https://tfga.warlock.ai) | [Benchmarks](https://github.com/RobinKa/tfga/tree/master/benchmarks)
        
        Python package for Geometric / Clifford Algebra with TensorFlow 2.
        
        This project is a work in progress. Its API may change and the examples aren't polished yet.
        Pull requests and suggestions either by opening an issue or by [sending me an email](mailto:tora@warlock.ai) are welcome.
        
        ## Installation
        Install using pip: `pip install tfga`
        
        Requirements:
        - Python 3
        - tensorflow 2
        - numpy
        
        ## Basic usage
        ```python
        from tfga import GeometricAlgebra
        
        # Create an algebra with 3 basis vectors given their metric.
        # Used to create MultiVector instances.
        ga = GeometricAlgebra(metric=[1, 1, 1])
        
        # 1 e_0 + 1 e_1 + 1 e_2
        ordinary_vector = ga.ones(batch_shape=[], kind="vector")
        
        # 5 + 5 e_01 + 5 e_02 + 5 e_12
        quaternion = ga.fill(batch_shape=[], fill_value=5.0, kind="even")
        
        # 5 + 1 e_0 + 1 e_1 + 1 e_2 + 5 e_01 + 5 e_02 + 5 e_12
        multivector = ordinary_vector + quaternion
        
        # Inner product e_0 | 1 e_0 + 1 e_1 + 1 e_2 = 1
        print(ga.basis_mvs[0] | ordinary_vector)
        
        # Exterior product e_0 ^ e_1 = e_01
        print(ga.basis_mvs[0] ^ ga.basis_mvs[1])
        
        # Grade reversal ~(5 + 5 e_01 + 5 e_02 + 5 e_12)
        # = 5 + 5 e_10 + 5 e_20 + 5 e_21
        # = 5 - 5 e_01 - 5 e_02 - 5 e_12
        print(~quaternion)
        
        # tf.Tensor 5
        print(quaternion.scalar)
        
        # tf.Tensor -5 (ie. reversed sign of e_01 component)
        print(quaternion.tensor("10"))
        
        # MultiVector with only e_01: 5 e_01
        print(quaternion["10"])
        ```
        
        ## Notebooks
        [Generic examples](https://github.com/RobinKa/tfga/tree/master/notebooks/tfga.ipynb)
        
        [Quantum Electrodynamics using Geometric Algebra](https://github.com/RobinKa/tfga/tree/master/notebooks/qed.ipynb)
        
        [Projective Geometric Algebra](https://github.com/RobinKa/tfga/tree/master/notebooks/pga.ipynb)
Keywords: geometric-algebra clifford-algebra tensorflow multi-vector para-vector mathematics machine-learning
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/markdown
Provides-Extra: tf
Provides-Extra: tf_gpu
Provides-Extra: tf_nightly
Provides-Extra: tf_nightly_gpu
