{"version":3,"sources":["libraries/apiclient/sync/serversync.js"],"names":["define","performSync","connectionManager","server","options","console","debug","Id","cameraUploadServers","JSON","stringify","uploadPhotos","indexOf","uploadContent","Promise","reject","resolve","then","syncMedia","require","MediaSync","apiClient","getApiClient","sync","ServerSync","prototype","AccessToken","ExchangeToken","connectToServer","updateDateLastAccessed","enableWebSocket","reportCapabilities","enableAutomaticBitrateDetection","result","State","error","err"],"mappings":"AAAA,aAAAA,OAAO,IAAI,WAGP,SAASC,YAAYC,kBAAmBC,OAAQC,SAC5CC,QAAQC,MAAM,qCAAuCH,OAAOI,IAC5D,IAAIC,qBAD6DJ,QAAUA,SAAW,IACpDI,qBAAuB,GACzDH,QAAQC,MAAM,mCAAqCG,KAAKC,UAAUF,sBAClE,IAAIG,cAAgB,IAAMH,oBAAoBI,QAAQT,OAAOI,IAC7D,OAAOF,QAAQC,MAAM,4BAA8BK,eAAgBA,aAKvE,SAASE,cAAcX,kBAAmBC,OAAQC,SAC9C,OAAO,IAAIU,SAAUC,SAN6DF,GAAoDC,QAAQE,WAAWC,MAAK,WAC1J,OAQR,SAASC,UAAUhB,kBAAmBC,OAAQC,SAC1C,OAAO,IAAIU,SAAQ,SAASE,QAASD,QACjCI,QAAQ,CAAC,cAAc,SAASC,WAC5B,IAAIC,UAAYnB,kBAAkBoB,aAAanB,OAAOI,KACrD,IAAIa,WAAWG,KAAKF,UAAWlB,OAAQC,SAASa,KAAKD,QAASD,cAZ5DG,CAAUhB,kBAAmBC,OAAQC,YAiBpD,SAASoB,cACT,OAAOA,WAAWC,UAAUF,KAAO,SAASrB,kBAAmBC,OAAQC,SACnE,IAAKD,OAAOuB,cAAgBvB,OAAOwB,cAAe,OAAOtB,QAAQC,MAAM,2BAA6BH,OAAOI,GAAK,0DAA2DO,QAAQE,UAOnL,OAAOd,kBAAkB0B,gBAAgBzB,OANjB,CACpB0B,wBAAwB,EACxBC,iBAAiB,EACjBC,oBAAoB,EACpBC,iCAAiC,IAE+Bf,MAAK,SAASgB,QAC9E,MAAO,aAAeA,OAAOC,MAAQjC,YAAYC,kBAAmBC,OAAQC,UAAYC,QAAQ8B,MAAM,mCAAqChC,OAAOI,IAAKO,QAAQC,aAChK,SAASqB,KACR,MAAM/B,QAAQ8B,MAAM,mCAAqChC,OAAOI,IAAK6B,QAE1EZ","file":"serversync.js","sourcesContent":["define([], function() {\n    \"use strict\";\n\n    function performSync(connectionManager, server, options) {\n        console.debug(\"ServerSync.performSync to server: \" + server.Id), options = options || {};\n        var cameraUploadServers = options.cameraUploadServers || [];\n        console.debug(\"ServerSync cameraUploadServers: \" + JSON.stringify(cameraUploadServers));\n        var uploadPhotos = -1 !== cameraUploadServers.indexOf(server.Id);\n        return console.debug(\"ServerSync uploadPhotos: \" + uploadPhotos), (uploadPhotos ? uploadContent(connectionManager, server, options) : Promise.resolve()).then(function() {\n            return syncMedia(connectionManager, server, options)\n        })\n    }\n\n    function uploadContent(connectionManager, server, options) {\n        return new Promise().reject();\n    }\n\n    function syncMedia(connectionManager, server, options) {\n        return new Promise(function(resolve, reject) {\n            require([\"mediasync\"], function(MediaSync) {\n                var apiClient = connectionManager.getApiClient(server.Id);\n                (new MediaSync).sync(apiClient, server, options).then(resolve, reject)\n            })\n        })\n    }\n\n    function ServerSync() {}\n    return ServerSync.prototype.sync = function(connectionManager, server, options) {\n        if (!server.AccessToken && !server.ExchangeToken) return console.debug(\"Skipping sync to server \" + server.Id + \" because there is no saved authentication information.\"), Promise.resolve();\n        var connectionOptions = {\n            updateDateLastAccessed: !1,\n            enableWebSocket: !1,\n            reportCapabilities: !1,\n            enableAutomaticBitrateDetection: !1\n        };\n        return connectionManager.connectToServer(server, connectionOptions).then(function(result) {\n            return \"SignedIn\" === result.State ? performSync(connectionManager, server, options) : (console.error(\"Unable to connect to server id: \" + server.Id), Promise.reject())\n        }, function(err) {\n            throw console.error(\"Unable to connect to server id: \" + server.Id), err\n        })\n    }, ServerSync\n});\n"]}