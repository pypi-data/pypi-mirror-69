{"version":3,"sources":["libraries/apiclient/sync/itemrepository.js"],"names":["define","ServerDatabase","dbName","readyCallback","request","indexedDB","open","dbVersion","onerror","event","onupgradeneeded","db","target","result","createObjectStore","transaction","oncomplete","onsuccess","getDbName","serverId","getDb","callback","databases","getAll","userId","Promise","resolve","reject","storeName","objectStore","results","openCursor","cursor","push","value","continue","filterDistinct","index","self","indexOf","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","get","key","set","val","put","remove","delete","clear","getServerItemTypes","then","all","map","item2","Item","Type","filter"],"mappings":"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","file":"itemrepository.js","sourcesContent":["define([], function() {\n    \"use strict\";\n\n    function ServerDatabase(dbName, readyCallback) {\n        var request = indexedDB.open(dbName, dbVersion);\n        request.onerror = function(event) {}, request.onupgradeneeded = function(event) {\n            var db = event.target.result;\n            db.createObjectStore(dbName).transaction.oncomplete = function(event) {\n                readyCallback(db)\n            }\n        }, request.onsuccess = function(event) {\n            var db = event.target.result;\n            readyCallback(db)\n        }\n    }\n\n    function getDbName(serverId) {\n        return \"items_\" + serverId\n    }\n\n    function getDb(serverId, callback) {\n        var dbName = getDbName(serverId),\n            db = databases[dbName];\n        if (db) return void callback(db);\n        new ServerDatabase(dbName, function(db) {\n            databases[dbName] = db, callback(db)\n        })\n    }\n\n    function getServerItemTypes(serverId, userId) {\n        return getAll(serverId, userId).then(function(all) {\n            return all.map(function(item2) {\n                return item2.Item.Type || \"\"\n            }).filter(filterDistinct)\n        })\n    }\n\n    function getAll(serverId, userId) {\n        return new Promise(function(resolve, reject) {\n            getDb(serverId, function(db) {\n                var request, storeName = getDbName(serverId),\n                    transaction = db.transaction([storeName], \"readonly\"),\n                    objectStore = transaction.objectStore(storeName);\n                if (\"getAll\" in objectStore) request = objectStore.getAll(null, 1e4), request.onsuccess = function(event) {\n                    resolve(event.target.result)\n                };\n                else {\n                    var results = [];\n                    request = objectStore.openCursor(), request.onsuccess = function(event) {\n                        var cursor = event.target.result;\n                        cursor ? (results.push(cursor.value), cursor.continue()) : resolve(results)\n                    }\n                }\n                request.onerror = reject\n            })\n        })\n    }\n\n    function get(serverId, key) {\n        return new Promise(function(resolve, reject) {\n            getDb(serverId, function(db) {\n                var storeName = getDbName(serverId),\n                    transaction = db.transaction([storeName], \"readonly\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.get(key);\n                request.onerror = reject, request.onsuccess = function(event) {\n                    resolve(request.result)\n                }\n            })\n        })\n    }\n\n    function set(serverId, key, val) {\n        return new Promise(function(resolve, reject) {\n            getDb(serverId, function(db) {\n                var storeName = getDbName(serverId),\n                    transaction = db.transaction([storeName], \"readwrite\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.put(val, key);\n                request.onerror = reject, request.onsuccess = resolve\n            })\n        })\n    }\n\n    function remove(serverId, key) {\n        return new Promise(function(resolve, reject) {\n            getDb(serverId, function(db) {\n                var storeName = getDbName(serverId),\n                    transaction = db.transaction([storeName], \"readwrite\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.delete(key);\n                request.onerror = reject, request.onsuccess = resolve\n            })\n        })\n    }\n\n    function clear(serverId) {\n        return new Promise(function(resolve, reject) {\n            getDb(serverId, function(db) {\n                var storeName = getDbName(serverId),\n                    transaction = db.transaction([storeName], \"readwrite\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.clear();\n                request.onerror = reject, request.onsuccess = resolve\n            })\n        })\n    }\n\n    function filterDistinct(value, index, self) {\n        return self.indexOf(value) === index\n    }\n    var indexedDB = self.indexedDB || self.mozIndexedDB || self.webkitIndexedDB || self.msIndexedDB,\n        dbVersion = (self.IDBTransaction || self.webkitIDBTransaction || self.msIDBTransaction, self.IDBKeyRange || self.webkitIDBKeyRange || self.msIDBKeyRange, 1),\n        databases = {};\n    return {\n        get: get,\n        set: set,\n        remove: remove,\n        clear: clear,\n        getAll: getAll,\n        getServerItemTypes: getServerItemTypes\n    }\n});\n"]}