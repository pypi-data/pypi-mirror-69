{"version":3,"sources":["libraries/apiclient/sync/useractionrepository.js"],"names":["define","getDb","callback","request","indexedDB","open","dbName","dbVersion","onerror","event","onupgradeneeded","db","target","result","createObjectStore","transaction","oncomplete","onsuccess","getAll","Promise","resolve","reject","storeName","objectStore","results","openCursor","cursor","push","value","continue","self","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","get","key","set","val","put","remove","delete","clear","getByServerId","serverId","then","items","filter","item","ServerId"],"mappings":"AAAA,aAAAA,OAAO,IAAI,WAGP,SAASC,MAAMC,UAGX,IAAIC,QAAUC,UAAUC,KAAKC,OAAQC,WACrCJ,QAAQK,QAAU,SAASC,SAAWN,QAAQO,gBAAkB,SAASD,OACrE,IAAIE,GAAKF,MAAMG,OAAOC,OACtBF,GAAGG,kBAAkBR,QAAQS,YAAYC,WAAa,SAASP,OAC3DP,SAASS,MAEdR,QAAQc,UAAY,SAASR,OAC5B,IAAIE,GAAKF,MAAMG,OAAOC,OACtBX,SAASS,KAYjB,SAASO,SACL,OAAO,IAAIC,SAAQ,SAASC,QAASC,QACjCpB,OAAM,SAASU,IACX,IAAIR,QAASmB,UAAYhB,OAErBiB,YADcZ,GAAGI,YAAY,CAACO,WAAY,YAChBC,YAAYD,WAC1C,GAAI,WAAYC,aAAapB,QAAUoB,YAAYL,OAAO,KAAM,MAAcD,UAAY,SAASR,OAC/FW,QAAQX,MAAMG,OAAOC,aAEpB,CACD,IAAIW,QAAU,IACdrB,QAAUoB,YAAYE,cAAsBR,UAAY,SAASR,OAC7D,IAAIiB,OAASjB,MAAMG,OAAOC,OAC1Ba,QAAUF,QAAQG,KAAKD,OAAOE,OAAQF,OAAOG,YAAcT,QAAQI,UAG3ErB,QAAQK,QAAUa,aAsD9B,IAAsBjB,UAAY0B,KAAK1B,WAAa0B,KAAKC,cAAgBD,KAAKE,iBAAmBF,KAAKG,YAClG3B,QAAUwB,KAAKI,gBAAkBJ,KAAKK,sBAAwBL,KAAKM,iBAAkBN,KAAKO,aAAeP,KAAKQ,mBAAqBR,KAAKS,cAAe,eACvJhC,UAAY,EAChB,MAAO,CACHiC,IArDJ,SAASA,IAAIC,KACT,OAAO,IAAItB,SAAQ,SAASC,QAASC,QACjCpB,OAAM,SAASU,IACX,IAAIW,UAAYhB,OAGZH,QAFcQ,GAAGI,YAAY,CAACO,WAAY,YAChBC,YAAYD,WAChBkB,IAAIC,KAC9BtC,QAAQK,QAAUa,OAAQlB,QAAQc,UAAY,SAASR,OACnDW,QAAQjB,QAAQU,gBA8C5B6B,IAxCJ,SAASA,IAAID,IAAKE,KACd,OAAO,IAAIxB,SAAQ,SAASC,QAASC,QACjCpB,OAAM,SAASU,IACX,IAAIW,UAAYhB,OAGZH,QAFcQ,GAAGI,YAAY,CAACO,WAAY,aAChBC,YAAYD,WAChBsB,IAAID,IAAKF,KACnCtC,QAAQK,QAAUa,OAAQlB,QAAQc,UAAYG,eAkCtDyB,OA7BJ,SAASA,OAAOJ,KACZ,OAAO,IAAItB,SAAQ,SAASC,QAASC,QACjCpB,OAAM,SAASU,IACX,IAAIW,UAAYhB,OAGZH,QAFcQ,GAAGI,YAAY,CAACO,WAAY,aAChBC,YAAYD,WAChBwB,OAAOL,KACjCtC,QAAQK,QAAUa,OAAQlB,QAAQc,UAAYG,eAuBtD2B,MAlBJ,SAASA,QACL,OAAO,IAAI5B,SAAQ,SAASC,QAASC,QACjCpB,OAAM,SAASU,IACX,IAAIW,UAAYhB,OAGZH,QAFcQ,GAAGI,YAAY,CAACO,WAAY,aAChBC,YAAYD,WAChByB,QAC1B5C,QAAQK,QAAUa,OAAQlB,QAAQc,UAAYG,eAYtDF,OAAQA,OACR8B,cAvFJ,SAASA,cAAcC,UACnB,OAAO/B,SAASgC,MAAK,SAASC,OAC1B,OAAOA,MAAMC,QAAO,SAASC,MACzB,OAAOA,KAAKC,WAAaL","file":"useractionrepository.js","sourcesContent":["define([], function() {\n    \"use strict\";\n\n    function getDb(callback) {\n        var db = databaseInstance;\n        if (db) return void callback(db);\n        var request = indexedDB.open(dbName, dbVersion);\n        request.onerror = function(event) {}, request.onupgradeneeded = function(event) {\n            var db = event.target.result;\n            db.createObjectStore(dbName).transaction.oncomplete = function(event) {\n                callback(db)\n            }\n        }, request.onsuccess = function(event) {\n            var db = event.target.result;\n            callback(db)\n        }\n    }\n\n    function getByServerId(serverId) {\n        return getAll().then(function(items) {\n            return items.filter(function(item) {\n                return item.ServerId === serverId\n            })\n        })\n    }\n\n    function getAll() {\n        return new Promise(function(resolve, reject) {\n            getDb(function(db) {\n                var request, storeName = dbName,\n                    transaction = db.transaction([storeName], \"readonly\"),\n                    objectStore = transaction.objectStore(storeName);\n                if (\"getAll\" in objectStore) request = objectStore.getAll(null, 1e4), request.onsuccess = function(event) {\n                    resolve(event.target.result)\n                };\n                else {\n                    var results = [];\n                    request = objectStore.openCursor(), request.onsuccess = function(event) {\n                        var cursor = event.target.result;\n                        cursor ? (results.push(cursor.value), cursor.continue()) : resolve(results)\n                    }\n                }\n                request.onerror = reject\n            })\n        })\n    }\n\n    function get(key) {\n        return new Promise(function(resolve, reject) {\n            getDb(function(db) {\n                var storeName = dbName,\n                    transaction = db.transaction([storeName], \"readonly\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.get(key);\n                request.onerror = reject, request.onsuccess = function(event) {\n                    resolve(request.result)\n                }\n            })\n        })\n    }\n\n    function set(key, val) {\n        return new Promise(function(resolve, reject) {\n            getDb(function(db) {\n                var storeName = dbName,\n                    transaction = db.transaction([storeName], \"readwrite\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.put(val, key);\n                request.onerror = reject, request.onsuccess = resolve\n            })\n        })\n    }\n\n    function remove(key) {\n        return new Promise(function(resolve, reject) {\n            getDb(function(db) {\n                var storeName = dbName,\n                    transaction = db.transaction([storeName], \"readwrite\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.delete(key);\n                request.onerror = reject, request.onsuccess = resolve\n            })\n        })\n    }\n\n    function clear() {\n        return new Promise(function(resolve, reject) {\n            getDb(function(db) {\n                var storeName = dbName,\n                    transaction = db.transaction([storeName], \"readwrite\"),\n                    objectStore = transaction.objectStore(storeName),\n                    request = objectStore.clear();\n                request.onerror = reject, request.onsuccess = resolve\n            })\n        })\n    }\n    var databaseInstance, indexedDB = self.indexedDB || self.mozIndexedDB || self.webkitIndexedDB || self.msIndexedDB,\n        dbName = (self.IDBTransaction || self.webkitIDBTransaction || self.msIDBTransaction, self.IDBKeyRange || self.webkitIDBKeyRange || self.msIDBKeyRange, \"useractions\"),\n        dbVersion = 1;\n    return {\n        get: get,\n        set: set,\n        remove: remove,\n        clear: clear,\n        getAll: getAll,\n        getByServerId: getByServerId\n    }\n});\n"]}