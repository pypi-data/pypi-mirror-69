{"version":3,"sources":["scripts/settings/appSettings.js"],"names":["define","appStorage","events","getKey","name","userId","AppSettings","prototype","enableAutoLogin","val","this","set","toString","get","enableAutomaticBitrateDetection","isInNetwork","mediaType","key","maxStreamingBitrate","parseInt","maxStaticMusicBitrate","undefined","maxChromecastBitrate","syncOnlyOnWifi","syncPath","cameraUploadServers","join","split","runAtStartup","value","currentValue","setItem","trigger","getItem","enableSystemExternalPlayers"],"mappings":"AAAA,aAAAA,OAAO,CAAC,aAAc,WAAW,SAAUC,WAAYC,QAGnD,SAASC,OAAOC,KAAMC,QAKlB,OAJIA,SACAD,KAAOC,OAAS,IAAMD,MAGnBA,KAGX,SAASE,eA0HT,OAvHAA,YAAYC,UAAUC,gBAAkB,SAAUC,KAK9C,OAJW,MAAPA,KACAC,KAAKC,IAAI,kBAAmBF,IAAIG,YAGG,UAAhCF,KAAKG,IAAI,oBAGpBP,YAAYC,UAAUO,gCAAkC,SAAUC,YAAaC,UAAWP,KACtF,IAAIQ,IAAM,4BAA8BD,UAAY,IAAMD,YAS1D,OARW,MAAPN,MACIM,aAA6B,UAAdC,YACfP,KAAM,GAGVC,KAAKC,IAAIM,IAAKR,IAAIG,gBAGlBG,aAA6B,UAAdC,YAGU,UAAlBN,KAAKG,IAAII,MAIxBX,YAAYC,UAAUW,oBAAsB,SAAUH,YAAaC,UAAWP,KAC1E,IAAIQ,IAAM,cAAgBD,UAAY,IAAMD,YAS5C,OARW,MAAPN,MACIM,aAA6B,UAAdC,WAGfN,KAAKC,IAAIM,IAAKR,MAIlBM,aAA6B,UAAdC,UAER,KAEAG,SAAST,KAAKG,IAAII,MAAQ,MAAQ,MAIjDX,YAAYC,UAAUa,sBAAwB,SAAUX,UACxCY,IAARZ,KACAC,KAAKC,IAAI,wBAAyBF,KAItC,OAAOU,SAAST,KAAKG,IAAI,0BADN,KAC+CD,aAD/C,MAIvBN,YAAYC,UAAUe,qBAAuB,SAAUb,KAMnD,OALW,MAAPA,KACAC,KAAKC,IAAI,qBAAsBF,MAGnCA,IAAMC,KAAKG,IAAI,uBACFM,SAASV,KAAO,MAGjCH,YAAYC,UAAUgB,eAAiB,SAAUd,KAK7C,OAJW,MAAPA,KACAC,KAAKC,IAAI,iBAAkBF,IAAIG,YAGG,UAA/BF,KAAKG,IAAI,mBAGpBP,YAAYC,UAAUiB,SAAW,SAAUf,KAKvC,OAJW,MAAPA,KACAC,KAAKC,IAAI,WAAYF,KAGlBC,KAAKG,IAAI,aAGpBP,YAAYC,UAAUkB,oBAAsB,SAAUhB,KAMlD,OALW,MAAPA,KACAC,KAAKC,IAAI,sBAAuBF,IAAIiB,KAAK,OAG7CjB,IAAMC,KAAKG,IAAI,wBAEJJ,IAAIkB,MAAM,KAGd,IAGXrB,YAAYC,UAAUqB,aAAe,SAAUnB,KAK3C,OAJW,MAAPA,KACAC,KAAKC,IAAI,eAAgBF,IAAIG,YAGG,SAA7BF,KAAKG,IAAI,iBAGpBP,YAAYC,UAAUI,IAAM,SAAUP,KAAMyB,MAAOxB,QAC/C,IAAIyB,aAAepB,KAAKG,IAAIT,KAAMC,QAClCJ,WAAW8B,QAAQ5B,OAAOC,KAAMC,QAASwB,OAErCC,eAAiBD,OACjB3B,OAAO8B,QAAQtB,KAAM,SAAU,CAACN,QAIxCE,YAAYC,UAAUM,IAAM,SAAUT,KAAMC,QACxC,OAAOJ,WAAWgC,QAAQ9B,OAAOC,KAAMC,UAG3CC,YAAYC,UAAU2B,4BAA8B,SAAUzB,KAK1D,OAJW,MAAPA,KACAC,KAAKC,IAAI,8BAA+BF,IAAIG,YAGG,SAA5CF,KAAKG,IAAI,gCAGb,IAAIP","file":"appSettings.js","sourcesContent":["define(['appStorage', 'events'], function (appStorage, events) {\n    'use strict';\n\n    function getKey(name, userId) {\n        if (userId) {\n            name = userId + '-' + name;\n        }\n\n        return name;\n    }\n\n    function AppSettings() {\n    }\n\n    AppSettings.prototype.enableAutoLogin = function (val) {\n        if (val != null) {\n            this.set('enableAutoLogin', val.toString());\n        }\n\n        return this.get('enableAutoLogin') !== 'false';\n    };\n\n    AppSettings.prototype.enableAutomaticBitrateDetection = function (isInNetwork, mediaType, val) {\n        var key = 'enableautobitratebitrate-' + mediaType + '-' + isInNetwork;\n        if (val != null) {\n            if (isInNetwork && mediaType === 'Audio') {\n                val = true;\n            }\n\n            this.set(key, val.toString());\n        }\n\n        if (isInNetwork && mediaType === 'Audio') {\n            return true;\n        } else {\n            return this.get(key) !== 'false';\n        }\n    };\n\n    AppSettings.prototype.maxStreamingBitrate = function (isInNetwork, mediaType, val) {\n        var key = 'maxbitrate-' + mediaType + '-' + isInNetwork;\n        if (val != null) {\n            if (isInNetwork && mediaType === 'Audio') {\n                //  nothing to do, this is always a max value\n            } else {\n                this.set(key, val);\n            }\n        }\n\n        if (isInNetwork && mediaType === 'Audio') {\n            // return a huge number so that it always direct plays\n            return 150000000;\n        } else {\n            return parseInt(this.get(key) || '0') || 1500000;\n        }\n    };\n\n    AppSettings.prototype.maxStaticMusicBitrate = function (val) {\n        if (val !== undefined) {\n            this.set('maxStaticMusicBitrate', val);\n        }\n\n        var defaultValue = 320000;\n        return parseInt(this.get('maxStaticMusicBitrate') || defaultValue.toString()) || defaultValue;\n    };\n\n    AppSettings.prototype.maxChromecastBitrate = function (val) {\n        if (val != null) {\n            this.set('chromecastBitrate1', val);\n        }\n\n        val = this.get('chromecastBitrate1');\n        return val ? parseInt(val) : null;\n    };\n\n    AppSettings.prototype.syncOnlyOnWifi = function (val) {\n        if (val != null) {\n            this.set('syncOnlyOnWifi', val.toString());\n        }\n\n        return this.get('syncOnlyOnWifi') !== 'false';\n    };\n\n    AppSettings.prototype.syncPath = function (val) {\n        if (val != null) {\n            this.set('syncPath', val);\n        }\n\n        return this.get('syncPath');\n    };\n\n    AppSettings.prototype.cameraUploadServers = function (val) {\n        if (val != null) {\n            this.set('cameraUploadServers', val.join(','));\n        }\n\n        val = this.get('cameraUploadServers');\n        if (val) {\n            return val.split(',');\n        }\n\n        return [];\n    };\n\n    AppSettings.prototype.runAtStartup = function (val) {\n        if (val != null) {\n            this.set('runatstartup', val.toString());\n        }\n\n        return this.get('runatstartup') === 'true';\n    };\n\n    AppSettings.prototype.set = function (name, value, userId) {\n        var currentValue = this.get(name, userId);\n        appStorage.setItem(getKey(name, userId), value);\n\n        if (currentValue !== value) {\n            events.trigger(this, 'change', [name]);\n        }\n    };\n\n    AppSettings.prototype.get = function (name, userId) {\n        return appStorage.getItem(getKey(name, userId));\n    };\n\n    AppSettings.prototype.enableSystemExternalPlayers = function (val) {\n        if (val != null) {\n            this.set('enableSystemExternalPlayers', val.toString());\n        }\n\n        return this.get('enableSystemExternalPlayers') === 'true';\n    };\n\n    return new AppSettings();\n});\n"]}