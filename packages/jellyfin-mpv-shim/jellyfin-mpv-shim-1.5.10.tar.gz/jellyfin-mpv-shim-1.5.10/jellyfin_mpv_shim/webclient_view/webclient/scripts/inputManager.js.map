{"version":3,"sources":["scripts/inputManager.js"],"names":["define","playbackManager","focusManager","appRouter","dom","appHost","lastInputTime","Date","getTime","notify","handleCommand","eventListenerCount","commandTimes","name","options","sourceElement","focusableParent","document","activeElement","window","dlg","querySelector","contains","customEvent","CustomEvent","detail","command","bubbles","cancelable","dispatchEvent","moveUp","moveDown","moveLeft","moveRight","goHome","showSettings","canGoBack","back","supports","exit","select","click","nextChapter","nextTrack","previousTrack","previousChapter","showGuide","showRecordedTV","showLiveTV","setMute","toggleMute","channelUp","channelDown","volumeDown","volumeUp","unpause","pause","playPause","checkCommandTime","last","now","stop","toggleAspectRatio","changeAudioStream","changeSubtitleStream","showSearch","showFavorites","fastForward","rewind","toggleFullscreen","enableDisplayMirroring","toggleDisplayMirroring","showNowPlaying","setRepeatMode","addEventListener","passive","trigger","handle","notifyMouseMove","idleTime","on","scope","fn","off","removeEventListener"],"mappings":"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","file":"inputManager.js","sourcesContent":["define(['playbackManager', 'focusManager', 'appRouter', 'dom', 'apphost'], function (playbackManager, focusManager, appRouter, dom, appHost) {\n    'use strict';\n\n    var lastInputTime = new Date().getTime();\n\n    function notify() {\n        lastInputTime = new Date().getTime();\n        handleCommand('unknown');\n    }\n\n    function notifyMouseMove() {\n        lastInputTime = new Date().getTime();\n    }\n\n    function idleTime() {\n        return new Date().getTime() - lastInputTime;\n    }\n\n    function select(sourceElement) {\n        sourceElement.click();\n    }\n\n    var eventListenerCount = 0;\n    function on(scope, fn) {\n        eventListenerCount++;\n        dom.addEventListener(scope, 'command', fn, {});\n    }\n\n    function off(scope, fn) {\n        if (eventListenerCount) {\n            eventListenerCount--;\n        }\n        dom.removeEventListener(scope, 'command', fn, {});\n    }\n\n    var commandTimes = {};\n\n    function checkCommandTime(command) {\n\n        var last = commandTimes[command] || 0;\n        var now = new Date().getTime();\n\n        if ((now - last) < 1000) {\n            return false;\n        }\n\n        commandTimes[command] = now;\n        return true;\n    }\n\n    function handleCommand(name, options) {\n\n        lastInputTime = new Date().getTime();\n\n        var sourceElement = (options ? options.sourceElement : null);\n\n        if (sourceElement) {\n            sourceElement = focusManager.focusableParent(sourceElement);\n        }\n\n        if (!sourceElement) {\n            sourceElement = document.activeElement || window;\n\n            var dlg = document.querySelector('.dialogContainer .dialog.opened');\n\n            if (dlg && (!sourceElement || !dlg.contains(sourceElement))) {\n                sourceElement = dlg;\n            }\n        }\n\n        if (eventListenerCount) {\n            var customEvent = new CustomEvent(\"command\", {\n                detail: {\n                    command: name\n                },\n                bubbles: true,\n                cancelable: true\n            });\n\n            var eventResult = sourceElement.dispatchEvent(customEvent);\n            if (!eventResult) {\n                // event cancelled\n                return;\n            }\n        }\n\n        switch (name) {\n            case 'up':\n                focusManager.moveUp(sourceElement);\n                break;\n            case 'down':\n                focusManager.moveDown(sourceElement);\n                break;\n            case 'left':\n                focusManager.moveLeft(sourceElement);\n                break;\n            case 'right':\n                focusManager.moveRight(sourceElement);\n                break;\n            case 'home':\n                appRouter.goHome();\n                break;\n            case 'settings':\n                appRouter.showSettings();\n                break;\n            case 'back':\n                if (appRouter.canGoBack()) {\n                    appRouter.back();\n                } else if (appHost.supports('exit')) {\n                    appHost.exit();\n                }\n                break;\n            case 'forward':\n                break;\n            case 'select':\n                select(sourceElement);\n                break;\n            case 'pageup':\n                break;\n            case 'pagedown':\n                break;\n            case 'end':\n                break;\n            case 'menu':\n                break;\n            case 'info':\n                break;\n            case 'nextchapter':\n                playbackManager.nextChapter();\n                break;\n            case 'next':\n            case 'nexttrack':\n                playbackManager.nextTrack();\n                break;\n            case 'previous':\n            case 'previoustrack':\n                playbackManager.previousTrack();\n                break;\n            case 'previouschapter':\n                playbackManager.previousChapter();\n                break;\n            case 'guide':\n                appRouter.showGuide();\n                break;\n            case 'recordedtv':\n                appRouter.showRecordedTV();\n                break;\n            case 'record':\n                break;\n            case 'livetv':\n                appRouter.showLiveTV();\n                break;\n            case 'mute':\n                playbackManager.setMute(true);\n                break;\n            case 'unmute':\n                playbackManager.setMute(false);\n                break;\n            case 'togglemute':\n                playbackManager.toggleMute();\n                break;\n            case 'channelup':\n                playbackManager.channelUp();\n                break;\n            case 'channeldown':\n                playbackManager.channelDown();\n                break;\n            case 'volumedown':\n                playbackManager.volumeDown();\n                break;\n            case 'volumeup':\n                playbackManager.volumeUp();\n                break;\n            case 'play':\n                playbackManager.unpause();\n                break;\n            case 'pause':\n                playbackManager.pause();\n                break;\n            case 'playpause':\n                playbackManager.playPause();\n                break;\n            case 'stop':\n                if (checkCommandTime('stop')) {\n                    playbackManager.stop();\n                }\n                break;\n            case 'changezoom':\n                playbackManager.toggleAspectRatio();\n                break;\n            case 'changeaudiotrack':\n                playbackManager.changeAudioStream();\n                break;\n            case 'changesubtitletrack':\n                playbackManager.changeSubtitleStream();\n                break;\n            case 'search':\n                appRouter.showSearch();\n                break;\n            case 'favorites':\n                appRouter.showFavorites();\n                break;\n            case 'fastforward':\n                playbackManager.fastForward();\n                break;\n            case 'rewind':\n                playbackManager.rewind();\n                break;\n            case 'togglefullscreen':\n                playbackManager.toggleFullscreen();\n                break;\n            case 'disabledisplaymirror':\n                playbackManager.enableDisplayMirroring(false);\n                break;\n            case 'enabledisplaymirror':\n                playbackManager.enableDisplayMirroring(true);\n                break;\n            case 'toggledisplaymirror':\n                playbackManager.toggleDisplayMirroring();\n                break;\n            case 'nowplaying':\n                appRouter.showNowPlaying();\n                break;\n            case 'repeatnone':\n                playbackManager.setRepeatMode('RepeatNone');\n                break;\n            case 'repeatall':\n                playbackManager.setRepeatMode('RepeatAll');\n                break;\n            case 'repeatone':\n                playbackManager.setRepeatMode('RepeatOne');\n                break;\n            default:\n                break;\n        }\n    }\n\n    dom.addEventListener(document, 'click', notify, {\n        passive: true\n    });\n\n    return {\n        trigger: handleCommand,\n        handle: handleCommand,\n        notify: notify,\n        notifyMouseMove: notifyMouseMove,\n        idleTime: idleTime,\n        on: on,\n        off: off\n    };\n});\n"]}