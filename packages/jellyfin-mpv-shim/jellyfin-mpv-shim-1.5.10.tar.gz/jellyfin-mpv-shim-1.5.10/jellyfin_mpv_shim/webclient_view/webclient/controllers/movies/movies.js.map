{"version":3,"sources":["controllers/movies/movies.js"],"names":["define","loading","layoutManager","userSettings","events","libraryBrowser","alphaPicker","listView","cardBuilder","view","params","tabContent","options","onViewStyleChange","self","getCurrentViewStyle","itemsContainer","classList","add","remove","innerHTML","updateFilterControls","value","query","NameStartsWithOrGreater","fetchData","isLoading","show","ApiClient","getItems","getCurrentUserId","afterRefresh","result","onNextPageClick","StartIndex","Limit","refreshItems","onPreviousPageClick","window","scrollTo","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","elems","querySelectorAll","addEventListener","hide","require","autoFocuser","autoFocus","getItemsHtml","items","viewStyle","getCardsHtml","shape","preferThumb","context","lazy","overlayPlayButton","showTitle","showYear","centerText","cardLayout","preferBanner","getListViewHtml","sortBy","SortBy","this","querySelector","savedQueryKey","topParentId","mode","savedViewKey","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","ParentId","IsFavorite","loadQuerySettings","showFilterMenu","filterDialogFactory","filterDialog","serverId","on","get","initTab","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","btnFilter","btnSort","showSortMenu","name","Globalize","translate","id","callback","saveQuerySettings","button","target","btnSelectView","showLayoutMenu","split","set","renderTab","destroy"],"mappings":"AAAA,aAAAA,OAAO,CAAC,UAAW,gBAAiB,eAAgB,SAAU,iBAAkB,cAAe,WAAY,cAAe,wBAAwB,SAAUC,QAASC,cAAeC,aAAcC,OAAQC,eAAgBC,YAAaC,SAAUC,aAG7O,OAAO,SAAUC,KAAMC,OAAQC,WAAYC,SACvC,SAASC,oBAC6B,QAA9BC,KAAKC,uBACLC,eAAeC,UAAUC,IAAI,iBAC7BF,eAAeC,UAAUE,OAAO,mBAEhCH,eAAeC,UAAUE,OAAO,iBAChCH,eAAeC,UAAUC,IAAI,kBAGjCF,eAAeI,UAAY,GAG/B,SAASC,uBACDP,KAAKR,aACLQ,KAAKR,YAAYgB,MAAMC,MAAMC,yBAIrC,SAASC,YAGL,OAFAC,WAAY,EACZzB,QAAQ0B,OACDC,UAAUC,SAASD,UAAUE,mBAAoBP,OAG5D,SAASQ,aAAaC,QAClB,SAASC,kBACDP,YAIJH,MAAMW,YAAcX,MAAMY,MAC1BnB,eAAeoB,gBAGnB,SAASC,sBACDX,YAIJH,MAAMW,YAAcX,MAAMY,MAC1BnB,eAAeoB,gBAGnBE,OAAOC,SAAS,EAAG,GACnBlB,uBACA,IAUImB,EACAC,OAXAC,WAAarC,eAAesC,mBAAmB,CAC/CC,WAAYrB,MAAMW,WAClBW,MAAOtB,MAAMY,MACbW,iBAAkBd,OAAOe,iBACzBC,WAAW,EACXC,uBAAuB,EACvBC,iBAAiB,EACjBC,YAAY,EACZC,cAAc,IAIdC,MAAQ1C,WAAW2C,iBAAiB,WAExC,IAAKd,EAAI,EAAGC,OAASY,MAAMZ,OAAQD,EAAIC,OAAQD,IAC3Ca,MAAMb,GAAGpB,UAAYsB,WAIzB,IAAKF,EAAI,EAAGC,QADZY,MAAQ1C,WAAW2C,iBAAiB,iBACTb,OAAQD,EAAIC,OAAQD,IAC3Ca,MAAMb,GAAGe,iBAAiB,QAAStB,iBAIvC,IAAKO,EAAI,EAAGC,QADZY,MAAQ1C,WAAW2C,iBAAiB,qBACTb,OAAQD,EAAIC,OAAQD,IAC3Ca,MAAMb,GAAGe,iBAAiB,QAASlB,qBAGvCX,WAAY,EACZzB,QAAQuD,OAERC,QAAQ,CAAC,gBAAgB,SAAUC,aAC/BA,YAAYC,UAAUhD,eAI9B,SAASiD,aAAaC,OAClB,IACIC,UAAYhD,KAAKC,sBA+DrB,MA7DiB,SAAb+C,UACOtD,YAAYuD,aAAa,CAC5BF,MAAOA,MACPG,MAAO,WACPC,aAAa,EACbC,QAAS,SACTC,MAAM,EACNC,mBAAmB,EACnBC,WAAW,EACXC,UAAU,EACVC,YAAY,IAEI,aAAbT,UACAtD,YAAYuD,aAAa,CAC5BF,MAAOA,MACPG,MAAO,WACPC,aAAa,EACbC,QAAS,SACTC,MAAM,EACNK,YAAY,EACZH,WAAW,EACXC,UAAU,EACVC,YAAY,IAEI,UAAbT,UACAtD,YAAYuD,aAAa,CAC5BF,MAAOA,MACPG,MAAO,SACPS,cAAc,EACdP,QAAS,SACTC,MAAM,IAEU,QAAbL,UACAvD,SAASmE,gBAAgB,CAC5Bb,MAAOA,MACPK,QAAS,SACTS,OAAQpD,MAAMqD,SAEE,cAAbd,UACAtD,YAAYuD,aAAa,CAC5BF,MAAOA,MACPG,MAAO,WACPE,QAAS,SACTG,WAAW,EACXC,UAAU,EACVC,YAAY,EACZJ,MAAM,EACNK,YAAY,IAGThE,YAAYuD,aAAa,CAC5BF,MAAOA,MACPG,MAAO,WACPE,QAAS,SACTE,mBAAmB,EACnBC,WAAW,EACXC,UAAU,EACVC,YAAY,IA6FxB,IAAIzD,KAAO+D,KACP7D,eAAiBL,WAAWmE,cAAc,mBAC1CC,cAAgBrE,OAAOsE,YAAc,IAAMpE,QAAQqE,KACnDC,aAAeH,cAAgB,QAC/BxD,MAAQ,CACRqD,OAAQ,0BACRO,UAAW,YACXC,iBAAkB,QAClBC,WAAW,EACXC,OAAQ,yDACRC,eAAgB,EAChBC,iBAAkB,gCAClBtD,WAAY,EACZC,MAAO,IACPsD,SAAU/E,OAAOsE,aAEjBtD,WAAY,EAEK,cAAjBd,QAAQqE,OACR1D,MAAMmE,YAAa,GAGvBnE,MAAQpB,aAAawF,kBAAkBZ,cAAexD,OAEtDT,KAAK8E,eAAiB,WAClBnC,QAAQ,CAAC,yCAAyC,SAAUoC,qBACxD,IAAIC,aAAe,IAAID,oBAAoB,CACvCtE,MAAOA,MACP0D,KAAM,SACNc,SAAUnE,UAAUmE,aAExB3F,OAAO4F,GAAGF,aAAc,gBAAgB,WACpCvE,MAAMW,WAAa,EACnBlB,eAAeoB,kBAEnB0D,aAAanE,WAIrBb,KAAKC,oBAAsB,WACvB,OAAOZ,aAAa8F,IAAIf,eAAiB,UAG7CpE,KAAKoF,QAAU,YAjIf,SAASC,SAASxF,YACdK,eAAeS,UAAYA,UAC3BT,eAAe4C,aAAeA,aAC9B5C,eAAee,aAAeA,aAC9B,IAAIqE,mBAAqBzF,WAAWmE,cAAc,gBAE9CsB,qBACAA,mBAAmB7C,iBAAiB,qBAAqB,SAAU8C,GAC/D,IAAIC,SAAWD,EAAEE,OAAOjF,MACxBC,MAAMC,wBAA0B8E,SAChC/E,MAAMW,WAAa,EACnBlB,eAAeoB,kBAEnBtB,KAAKR,YAAc,IAAIA,YAAY,CAC/BkG,QAASJ,mBACTK,iBAAkB,UAGtB9F,WAAWmE,cAAc,gBAAgB7D,UAAUC,IAAI,wBACvDkF,mBAAmBnF,UAAUC,IAAI,2BACjCF,eAAeC,UAAUC,IAAI,iCAGjC,IAAIwF,UAAY/F,WAAWmE,cAAc,cAErC4B,WACAA,UAAUnD,iBAAiB,SAAS,WAChCzC,KAAK8E,oBAGb,IAAIe,QAAUhG,WAAWmE,cAAc,YAEnC6B,SACAA,QAAQpD,iBAAiB,SAAS,SAAU8C,GACxChG,eAAeuG,aAAa,CACxB/C,MAAO,CAAC,CACJgD,KAAMC,UAAUC,UAAU,kBAC1BC,GAAI,2BACL,CACCH,KAAMC,UAAUC,UAAU,oBAC1BC,GAAI,2CACL,CACCH,KAAMC,UAAUC,UAAU,sBAC1BC,GAAI,wCACL,CACCH,KAAMC,UAAUC,UAAU,mBAC1BC,GAAI,uCACL,CACCH,KAAMC,UAAUC,UAAU,oBAC1BC,GAAI,sCACL,CACCH,KAAMC,UAAUC,UAAU,wBAC1BC,GAAI,0CACL,CACCH,KAAMC,UAAUC,UAAU,mBAC1BC,GAAI,qCACL,CACCH,KAAMC,UAAUC,UAAU,qBAC1BC,GAAI,wCACL,CACCH,KAAMC,UAAUC,UAAU,iBAC1BC,GAAI,oCAERC,SAAU,SAAAA,WACN1F,MAAMW,WAAa,EACnB/B,aAAa+G,kBAAkBnC,cAAexD,OAC9CP,eAAeoB,gBAEnBb,MAAOA,MACP4F,OAAQd,EAAEe,YAItB,IAAIC,cAAgB1G,WAAWmE,cAAc,kBAC7CuC,cAAc9D,iBAAiB,SAAS,SAAU8C,GAC9ChG,eAAeiH,eAAejB,EAAEe,OAAQtG,KAAKC,sBAAuB,gDAAgDwG,MAAM,SAE9HF,cAAc9D,iBAAiB,gBAAgB,SAAU8C,GACrD,IAAIvC,UAAYuC,EAAEE,OAAOzC,UACzB3D,aAAaqH,IAAItC,aAAcpB,WAC/BvC,MAAMW,WAAa,EACnBrB,oBACAG,eAAeoB,kBAgDnB+D,CAASxF,YACTE,qBAGJC,KAAK2G,UAAY,WACbzG,eAAeoB,eACff,wBAGJP,KAAK4G,QAAU,WACX1G,eAAiB","file":"movies.js","sourcesContent":["define([\"loading\", \"layoutManager\", \"userSettings\", \"events\", \"libraryBrowser\", \"alphaPicker\", \"listView\", \"cardBuilder\", \"emby-itemscontainer\"], function (loading, layoutManager, userSettings, events, libraryBrowser, alphaPicker, listView, cardBuilder) {\n    \"use strict\";\n\n    return function (view, params, tabContent, options) {\n        function onViewStyleChange() {\n            if (self.getCurrentViewStyle() == \"List\") {\n                itemsContainer.classList.add(\"vertical-list\");\n                itemsContainer.classList.remove(\"vertical-wrap\");\n            } else {\n                itemsContainer.classList.remove(\"vertical-list\");\n                itemsContainer.classList.add(\"vertical-wrap\");\n            }\n\n            itemsContainer.innerHTML = \"\";\n        }\n\n        function updateFilterControls() {\n            if (self.alphaPicker) {\n                self.alphaPicker.value(query.NameStartsWithOrGreater);\n            }\n        }\n\n        function fetchData() {\n            isLoading = true;\n            loading.show();\n            return ApiClient.getItems(ApiClient.getCurrentUserId(), query);\n        }\n\n        function afterRefresh(result) {\n            function onNextPageClick() {\n                if (isLoading) {\n                    return;\n                }\n\n                query.StartIndex += query.Limit;\n                itemsContainer.refreshItems();\n            }\n\n            function onPreviousPageClick() {\n                if (isLoading) {\n                    return;\n                }\n\n                query.StartIndex -= query.Limit;\n                itemsContainer.refreshItems();\n            }\n\n            window.scrollTo(0, 0);\n            updateFilterControls();\n            var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                startIndex: query.StartIndex,\n                limit: query.Limit,\n                totalRecordCount: result.TotalRecordCount,\n                showLimit: false,\n                updatePageSizeSetting: false,\n                addLayoutButton: false,\n                sortButton: false,\n                filterButton: false\n            });\n            var i;\n            var length;\n            var elems = tabContent.querySelectorAll(\".paging\");\n\n            for (i = 0, length = elems.length; i < length; i++) {\n                elems[i].innerHTML = pagingHtml;\n            }\n\n            elems = tabContent.querySelectorAll(\".btnNextPage\");\n            for (i = 0, length = elems.length; i < length; i++) {\n                elems[i].addEventListener(\"click\", onNextPageClick);\n            }\n\n            elems = tabContent.querySelectorAll(\".btnPreviousPage\");\n            for (i = 0, length = elems.length; i < length; i++) {\n                elems[i].addEventListener(\"click\", onPreviousPageClick);\n            }\n\n            isLoading = false;\n            loading.hide();\n\n            require([\"autoFocuser\"], function (autoFocuser) {\n                autoFocuser.autoFocus(tabContent);\n            });\n        }\n\n        function getItemsHtml(items) {\n            var html;\n            var viewStyle = self.getCurrentViewStyle();\n\n            if (viewStyle == \"Thumb\") {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: \"backdrop\",\n                    preferThumb: true,\n                    context: \"movies\",\n                    lazy: true,\n                    overlayPlayButton: true,\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true\n                });\n            } else if (viewStyle == \"ThumbCard\") {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: \"backdrop\",\n                    preferThumb: true,\n                    context: \"movies\",\n                    lazy: true,\n                    cardLayout: true,\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true\n                });\n            } else if (viewStyle == \"Banner\") {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: \"banner\",\n                    preferBanner: true,\n                    context: \"movies\",\n                    lazy: true\n                });\n            } else if (viewStyle == \"List\") {\n                html = listView.getListViewHtml({\n                    items: items,\n                    context: \"movies\",\n                    sortBy: query.SortBy\n                });\n            } else if (viewStyle == \"PosterCard\") {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: \"portrait\",\n                    context: \"movies\",\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true,\n                    lazy: true,\n                    cardLayout: true\n                });\n            } else {\n                html = cardBuilder.getCardsHtml({\n                    items: items,\n                    shape: \"portrait\",\n                    context: \"movies\",\n                    overlayPlayButton: true,\n                    showTitle: true,\n                    showYear: true,\n                    centerText: true\n                });\n            }\n\n            return html;\n        }\n\n        function initPage(tabContent) {\n            itemsContainer.fetchData = fetchData;\n            itemsContainer.getItemsHtml = getItemsHtml;\n            itemsContainer.afterRefresh = afterRefresh;\n            var alphaPickerElement = tabContent.querySelector(\".alphaPicker\");\n\n            if (alphaPickerElement) {\n                alphaPickerElement.addEventListener(\"alphavaluechanged\", function (e) {\n                    var newValue = e.detail.value;\n                    query.NameStartsWithOrGreater = newValue;\n                    query.StartIndex = 0;\n                    itemsContainer.refreshItems();\n                });\n                self.alphaPicker = new alphaPicker({\n                    element: alphaPickerElement,\n                    valueChangeEvent: \"click\"\n                });\n\n                tabContent.querySelector(\".alphaPicker\").classList.add(\"alphabetPicker-right\");\n                alphaPickerElement.classList.add(\"alphaPicker-fixed-right\");\n                itemsContainer.classList.add(\"padded-right-withalphapicker\");\n            }\n\n            var btnFilter = tabContent.querySelector(\".btnFilter\");\n\n            if (btnFilter) {\n                btnFilter.addEventListener(\"click\", function () {\n                    self.showFilterMenu();\n                });\n            }\n            var btnSort = tabContent.querySelector(\".btnSort\");\n\n            if (btnSort) {\n                btnSort.addEventListener(\"click\", function (e) {\n                    libraryBrowser.showSortMenu({\n                        items: [{\n                            name: Globalize.translate(\"OptionNameSort\"),\n                            id: \"SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionImdbRating\"),\n                            id: \"CommunityRating,SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionCriticRating\"),\n                            id: \"CriticRating,SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionDateAdded\"),\n                            id: \"DateCreated,SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionDatePlayed\"),\n                            id: \"DatePlayed,SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionParentalRating\"),\n                            id: \"OfficialRating,SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionPlayCount\"),\n                            id: \"PlayCount,SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionReleaseDate\"),\n                            id: \"PremiereDate,SortName,ProductionYear\"\n                        }, {\n                            name: Globalize.translate(\"OptionRuntime\"),\n                            id: \"Runtime,SortName,ProductionYear\"\n                        }],\n                        callback: function () {\n                            query.StartIndex = 0;\n                            userSettings.saveQuerySettings(savedQueryKey, query);\n                            itemsContainer.refreshItems();\n                        },\n                        query: query,\n                        button: e.target\n                    });\n                });\n            }\n            var btnSelectView = tabContent.querySelector(\".btnSelectView\");\n            btnSelectView.addEventListener(\"click\", function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), \"Banner,List,Poster,PosterCard,Thumb,ThumbCard\".split(\",\"));\n            });\n            btnSelectView.addEventListener(\"layoutchange\", function (e) {\n                var viewStyle = e.detail.viewStyle;\n                userSettings.set(savedViewKey, viewStyle);\n                query.StartIndex = 0;\n                onViewStyleChange();\n                itemsContainer.refreshItems();\n            });\n        }\n\n        var self = this;\n        var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n        var savedQueryKey = params.topParentId + \"-\" + options.mode;\n        var savedViewKey = savedQueryKey + \"-view\";\n        var query = {\n            SortBy: \"SortName,ProductionYear\",\n            SortOrder: \"Ascending\",\n            IncludeItemTypes: \"Movie\",\n            Recursive: true,\n            Fields: \"PrimaryImageAspectRatio,MediaSourceCount,BasicSyncInfo\",\n            ImageTypeLimit: 1,\n            EnableImageTypes: \"Primary,Backdrop,Banner,Thumb\",\n            StartIndex: 0,\n            Limit: 100,\n            ParentId: params.topParentId\n        };\n        var isLoading = false;\n\n        if (options.mode === \"favorites\") {\n            query.IsFavorite = true;\n        }\n\n        query = userSettings.loadQuerySettings(savedQueryKey, query);\n\n        self.showFilterMenu = function () {\n            require([\"components/filterdialog/filterdialog\"], function (filterDialogFactory) {\n                var filterDialog = new filterDialogFactory({\n                    query: query,\n                    mode: \"movies\",\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, \"filterchange\", function () {\n                    query.StartIndex = 0;\n                    itemsContainer.refreshItems();\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return userSettings.get(savedViewKey) || \"Poster\";\n        };\n\n        self.initTab = function () {\n            initPage(tabContent);\n            onViewStyleChange();\n        };\n\n        self.renderTab = function () {\n            itemsContainer.refreshItems();\n            updateFilterControls();\n        };\n\n        self.destroy = function () {\n            itemsContainer = null;\n        };\n    };\n});\n"]}