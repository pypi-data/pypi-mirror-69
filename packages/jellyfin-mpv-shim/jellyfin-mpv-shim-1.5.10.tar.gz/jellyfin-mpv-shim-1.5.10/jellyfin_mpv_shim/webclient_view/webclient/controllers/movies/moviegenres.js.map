{"version":3,"sources":["controllers/movies/moviegenres.js"],"names":["define","layoutManager","loading","libraryBrowser","cardBuilder","lazyLoader","appHost","globalize","appRouter","dom","view","params","tabContent","getPageData","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","EnableTotalRecordCount","ParentId","topParentId","loadSavedQueryValues","getQuery","enableScrollX","desktop","getThumbShape","getPortraitShape","fillItemsContainer","elem","id","getAttribute","viewStyle","self","getCurrentViewStyle","limit","Fields","ImageTypeLimit","EnableImageTypes","Limit","GenreIds","ApiClient","getItems","getCurrentUserId","then","result","supports","buildCards","Items","itemsContainer","shape","preferThumb","showTitle","scalable","centerText","overlayMoreButton","allowBottomPadding","cardLayout","showYear","length","querySelector","classList","remove","promise","this","getViewStyles","split","setCurrentViewStyle","saveViewSetting","fullyReload","preRender","renderTab","enableViewSelection","getPromise","show","getGenres","reloadItems","context","html","items","i","item","getRouteUrl","parentId","Id","Name","scrollXClass","tv","innerHTML","lazyChildren","saveQueryValues","hide"],"mappings":"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","file":"moviegenres.js","sourcesContent":["define([\"layoutManager\", \"loading\", \"libraryBrowser\", \"cardBuilder\", \"lazyLoader\", \"apphost\", \"globalize\", \"appRouter\", \"dom\", \"emby-button\"], function (layoutManager, loading, libraryBrowser, cardBuilder, lazyLoader, appHost, globalize, appRouter, dom) {\n    \"use strict\";\n\n    return function (view, params, tabContent) {\n        function getPageData() {\n            var key = getSavedQueryKey();\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: \"SortName\",\n                        SortOrder: \"Ascending\",\n                        IncludeItemTypes: \"Movie\",\n                        Recursive: true,\n                        EnableTotalRecordCount: false\n                    },\n                    view: \"Poster\"\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            return libraryBrowser.getSavedQueryKey(\"moviegenres\");\n        }\n\n        function getPromise() {\n            loading.show();\n            var query = getQuery();\n            return ApiClient.getGenres(ApiClient.getCurrentUserId(), query);\n        }\n\n        function enableScrollX() {\n            return !layoutManager.desktop;\n        }\n\n        function getThumbShape() {\n            return enableScrollX() ? \"overflowBackdrop\" : \"backdrop\";\n        }\n\n        function getPortraitShape() {\n            return enableScrollX() ? \"overflowPortrait\" : \"portrait\";\n        }\n\n        function fillItemsContainer(elem) {\n            var id = elem.getAttribute(\"data-id\");\n            var viewStyle = self.getCurrentViewStyle();\n            var limit = \"Thumb\" == viewStyle || \"ThumbCard\" == viewStyle ? 5 : 9;\n\n            if (enableScrollX()) {\n                limit = 10;\n            }\n\n            var enableImageTypes = \"Thumb\" == viewStyle || \"ThumbCard\" == viewStyle ? \"Primary,Backdrop,Thumb\" : \"Primary\";\n            var query = {\n                SortBy: \"SortName\",\n                SortOrder: \"Ascending\",\n                IncludeItemTypes: \"Movie\",\n                Recursive: true,\n                Fields: \"PrimaryImageAspectRatio,MediaSourceCount,BasicSyncInfo\",\n                ImageTypeLimit: 1,\n                EnableImageTypes: enableImageTypes,\n                Limit: limit,\n                GenreIds: id,\n                EnableTotalRecordCount: false,\n                ParentId: params.topParentId\n            };\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                var supportsImageAnalysis = appHost.supports(\"imageanalysis\");\n\n                if (viewStyle == \"Thumb\") {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: false\n                    });\n                } else if (viewStyle == \"ThumbCard\") {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getThumbShape(),\n                        preferThumb: true,\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == \"PosterCard\") {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        showTitle: true,\n                        scalable: true,\n                        centerText: false,\n                        cardLayout: true,\n                        showYear: true\n                    });\n                } else if (viewStyle == \"Poster\") {\n                    cardBuilder.buildCards(result.Items, {\n                        itemsContainer: elem,\n                        shape: getPortraitShape(),\n                        scalable: true,\n                        overlayMoreButton: true,\n                        allowBottomPadding: true,\n                        showTitle: true,\n                        centerText: true,\n                        showYear: true\n                    });\n                }\n                if (result.Items.length >= query.Limit) {\n                    tabContent.querySelector(\".btnMoreFromGenre\" + id + \" i\").classList.remove(\"hide\");\n                }\n            });\n        }\n\n        function reloadItems(context, promise) {\n            var query = getQuery();\n            promise.then(function (result) {\n                var elem = context.querySelector(\"#items\");\n                var html = \"\";\n                var items = result.Items;\n\n                for (var i = 0, length = items.length; i < length; i++) {\n                    var item = items[i];\n\n                    html += '<div class=\"verticalSection\">';\n                    html += '<div class=\"sectionTitleContainer sectionTitleContainer-cards padded-left\">';\n                    html += '<a is=\"emby-linkbutton\" href=\"' + appRouter.getRouteUrl(item, {\n                        context: \"movies\",\n                        parentId: params.topParentId\n                    }) + '\" class=\"more button-flat button-flat-mini sectionTitleTextButton btnMoreFromGenre' + item.Id + '\">';\n                    html += '<h2 class=\"sectionTitle sectionTitle-cards\">';\n                    html += item.Name;\n                    html += \"</h2>\";\n                    html += '<i class=\"material-icons hide chevron_right\"></i>';\n                    html += \"</a>\";\n                    html += \"</div>\";\n                    if (enableScrollX()) {\n                        var scrollXClass = \"scrollX hiddenScrollX\";\n\n                        if (layoutManager.tv) {\n                            scrollXClass += \"smoothScrollX padded-top-focusscale padded-bottom-focusscale\";\n                        }\n\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer ' + scrollXClass + ' lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    } else {\n                        html += '<div is=\"emby-itemscontainer\" class=\"itemsContainer vertical-wrap lazy padded-left padded-right\" data-id=\"' + item.Id + '\">';\n                    }\n\n                    html += \"</div>\";\n                    html += \"</div>\";\n                }\n\n                elem.innerHTML = html;\n                lazyLoader.lazyChildren(elem, fillItemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n            });\n        }\n\n        function fullyReload() {\n            self.preRender();\n            self.renderTab();\n        }\n\n        var self = this;\n        var data = {};\n\n        self.getViewStyles = function () {\n            return \"Poster,PosterCard,Thumb,ThumbCard\".split(\",\");\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        self.setCurrentViewStyle = function (viewStyle) {\n            getPageData(tabContent).view = viewStyle;\n            libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n            fullyReload();\n        };\n\n        self.enableViewSelection = true;\n        var promise;\n\n        self.preRender = function () {\n            promise = getPromise();\n        };\n\n        self.renderTab = function () {\n            reloadItems(tabContent, promise);\n        };\n    };\n});\n"]}