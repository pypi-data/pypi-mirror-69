{"version":3,"sources":["controllers/dashboard/notifications/notification.js"],"names":["define","$","fillItems","elem","items","cssClass","idPrefix","currentList","isEnabledList","html","map","u","checkedHtml","indexOf","Id","Name","join","trigger","onSubmit","save","page","type","getParameterByName","promise1","ApiClient","getNamedConfiguration","notificationsConfigurationKey","promise2","getJSON","getUrl","Promise","all","then","responses","notificationOptions","types","notificationConfig","Options","filter","n","Type","push","Enabled","checked","SendToUserMode","val","DisabledMonitorUsers","get","c","getAttribute","SendToUsers","DisabledServices","updateNamedConfiguration","r","Dashboard","processServerConfigurationUpdateResult","navigate","this","parents","document","on","value","show","hide","off","reload","getUsers","promise3","promise4","users","services","typeInfo","IsBasedOnUserEvent"],"mappings":"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","file":"notification.js","sourcesContent":["define([\"jQuery\", \"emby-checkbox\", \"fnchecked\"], function ($) {\n    \"use strict\";\n\n    function fillItems(elem, items, cssClass, idPrefix, currentList, isEnabledList) {\n        var html = '<div class=\"checkboxList paperList\" style=\"padding: .5em 1em;\">';\n        html += items.map(function (u) {\n            var isChecked = isEnabledList ? currentList.indexOf(u.Id) != -1 : currentList.indexOf(u.Id) == -1;\n            var checkedHtml = isChecked ? ' checked=\"checked\"' : \"\";\n            return '<label><input is=\"emby-checkbox\" class=\"' + cssClass + '\" type=\"checkbox\" data-itemid=\"' + u.Id + '\"' + checkedHtml + \"/><span>\" + u.Name + \"</span></label>\";\n        }).join(\"\");\n        html += \"</div>\";\n        elem.html(html).trigger(\"create\");\n    }\n\n    function reload(page) {\n        var type = getParameterByName(\"type\");\n        var promise1 = ApiClient.getUsers();\n        var promise2 = ApiClient.getNamedConfiguration(notificationsConfigurationKey);\n        var promise3 = ApiClient.getJSON(ApiClient.getUrl(\"Notifications/Types\"));\n        var promise4 = ApiClient.getJSON(ApiClient.getUrl(\"Notifications/Services\"));\n        Promise.all([promise1, promise2, promise3, promise4]).then(function (responses) {\n            var users = responses[0];\n            var notificationOptions = responses[1];\n            var types = responses[2];\n            var services = responses[3];\n            var notificationConfig = notificationOptions.Options.filter(function (n) {\n                return n.Type == type;\n            })[0];\n            var typeInfo = types.filter(function (n) {\n                return n.Type == type;\n            })[0] || {};\n\n            if (typeInfo.IsBasedOnUserEvent) {\n                $(\".monitorUsers\", page).show();\n            } else {\n                $(\".monitorUsers\", page).hide();\n            }\n\n            $(\".notificationType\", page).html(typeInfo.Name || \"Unknown Notification\");\n\n            if (!notificationConfig) {\n                notificationConfig = {\n                    DisabledMonitorUsers: [],\n                    SendToUsers: [],\n                    DisabledServices: [],\n                    SendToUserMode: \"Admins\"\n                };\n            }\n\n            fillItems($(\".monitorUsersList\", page), users, \"chkMonitor\", \"chkMonitor\", notificationConfig.DisabledMonitorUsers);\n            fillItems($(\".sendToUsersList\", page), users, \"chkSendTo\", \"chkSendTo\", notificationConfig.SendToUsers, true);\n            fillItems($(\".servicesList\", page), services, \"chkService\", \"chkService\", notificationConfig.DisabledServices);\n            $(\"#chkEnabled\", page).checked(notificationConfig.Enabled || false);\n            $(\"#selectUsers\", page).val(notificationConfig.SendToUserMode).trigger(\"change\");\n        });\n    }\n\n    function save(page) {\n        var type = getParameterByName(\"type\");\n        var promise1 = ApiClient.getNamedConfiguration(notificationsConfigurationKey);\n        var promise2 = ApiClient.getJSON(ApiClient.getUrl(\"Notifications/Types\"));\n        Promise.all([promise1, promise2]).then(function (responses) {\n            var notificationOptions = responses[0];\n            var types = responses[1];\n            var notificationConfig = notificationOptions.Options.filter(function (n) {\n                return n.Type == type;\n            })[0];\n\n            if (!notificationConfig) {\n                notificationConfig = {\n                    Type: type\n                };\n                notificationOptions.Options.push(notificationConfig);\n            }\n\n            types.filter(function (n) {\n                return n.Type == type;\n            })[0];\n            notificationConfig.Enabled = $(\"#chkEnabled\", page).checked();\n            notificationConfig.SendToUserMode = $(\"#selectUsers\", page).val();\n            notificationConfig.DisabledMonitorUsers = $(\".chkMonitor\", page).get().filter(function (c) {\n                return !c.checked;\n            }).map(function (c) {\n                return c.getAttribute(\"data-itemid\");\n            });\n            notificationConfig.SendToUsers = $(\".chkSendTo\", page).get().filter(function (c) {\n                return c.checked;\n            }).map(function (c) {\n                return c.getAttribute(\"data-itemid\");\n            });\n            notificationConfig.DisabledServices = $(\".chkService\", page).get().filter(function (c) {\n                return !c.checked;\n            }).map(function (c) {\n                return c.getAttribute(\"data-itemid\");\n            });\n            ApiClient.updateNamedConfiguration(notificationsConfigurationKey, notificationOptions).then(function (r) {\n                Dashboard.processServerConfigurationUpdateResult();\n                Dashboard.navigate(\"notificationsettings.html\");\n            });\n        });\n    }\n\n    function onSubmit() {\n        save($(this).parents(\".page\"));\n        return false;\n    }\n\n    var notificationsConfigurationKey = \"notifications\";\n    $(document).on(\"pageinit\", \"#notificationSettingPage\", function () {\n        var page = this;\n        $(\"#selectUsers\", page).on(\"change\", function () {\n            if (\"Custom\" == this.value) {\n                $(\".selectCustomUsers\", page).show();\n            } else {\n                $(\".selectCustomUsers\", page).hide();\n            }\n        });\n        $(\".notificationSettingForm\").off(\"submit\", onSubmit).on(\"submit\", onSubmit);\n    }).on(\"pageshow\", \"#notificationSettingPage\", function () {\n        reload(this);\n    });\n});\n"]}