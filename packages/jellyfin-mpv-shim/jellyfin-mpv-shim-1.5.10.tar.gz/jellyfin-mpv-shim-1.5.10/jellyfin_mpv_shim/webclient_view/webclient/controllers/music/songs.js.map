{"version":3,"sources":["controllers/music/songs.js"],"names":["define","events","libraryBrowser","imageLoader","listView","loading","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","Limit","StartIndex","ImageTypeLimit","EnableImageTypes","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","reloadItems","page","show","isLoading","ApiClient","getItems","Dashboard","getCurrentUserId","then","result","onNextPageClick","onPreviousPageClick","i","length","window","scrollTo","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","html","getListViewHtml","items","Items","action","smallIcon","artist","addToListButton","elems","querySelectorAll","innerHTML","addEventListener","itemsContainer","querySelector","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","self","this","showFilterMenu","filterDialogFactory","filterDialog","mode","serverId","on","getCurrentViewStyle","initPage","e","showSortMenu","name","Globalize","translate","id","callback","button","target","renderTab","destroy"],"mappings":"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","file":"songs.js","sourcesContent":["define([\"events\", \"libraryBrowser\", \"imageLoader\", \"listView\", \"loading\", \"emby-itemscontainer\"], function (events, libraryBrowser, imageLoader, listView, loading) {\n    \"use strict\";\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: \"Album,SortName\",\n                        SortOrder: \"Ascending\",\n                        IncludeItemTypes: \"Audio\",\n                        Recursive: true,\n                        Fields: \"AudioInfo,ParentId\",\n                        Limit: 100,\n                        StartIndex: 0,\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: \"Primary\"\n                    }\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey(\"songs\");\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(page);\n            ApiClient.getItems(Dashboard.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex += query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex -= query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                var i;\n                var length;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var html = listView.getListViewHtml({\n                    items: result.Items,\n                    action: \"playallfromhere\",\n                    smallIcon: true,\n                    artist: true,\n                    addToListButton: true\n                });\n                var elems = tabContent.querySelectorAll(\".paging\");\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll(\".btnNextPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll(\".btnPreviousPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onPreviousPageClick);\n                }\n\n                var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                require([\"autoFocuser\"], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        }\n\n        var self = this;\n        var data = {};\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require([\"components/filterdialog/filterdialog\"], function (filterDialogFactory) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: \"songs\",\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, \"filterchange\", function () {\n                    getQuery(tabContent).StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            tabContent.querySelector(\".btnFilter\").addEventListener(\"click\", function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector(\".btnSort\").addEventListener(\"click\", function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: Globalize.translate(\"OptionTrackName\"),\n                        id: \"Name\"\n                    }, {\n                        name: Globalize.translate(\"OptionAlbum\"),\n                        id: \"Album,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionAlbumArtist\"),\n                        id: \"AlbumArtist,Album,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionArtist\"),\n                        id: \"Artist,Album,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionDateAdded\"),\n                        id: \"DateCreated,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionDatePlayed\"),\n                        id: \"DatePlayed,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionPlayCount\"),\n                        id: \"PlayCount,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionReleaseDate\"),\n                        id: \"PremiereDate,AlbumArtist,Album,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionRuntime\"),\n                        id: \"Runtime,AlbumArtist,Album,SortName\"\n                    }],\n                    callback: function () {\n                        getQuery(tabContent).StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n        }\n\n        initPage(tabContent);\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}