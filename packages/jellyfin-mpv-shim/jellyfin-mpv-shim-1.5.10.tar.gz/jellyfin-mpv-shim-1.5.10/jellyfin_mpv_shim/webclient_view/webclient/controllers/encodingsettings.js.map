{"version":3,"sources":["controllers/encodingsettings.js"],"names":["define","$","loading","globalize","dom","libraryMenu","onSaveEncodingPathFailure","response","hide","msg","translate","require","alert","onSubmit","form","this","onDecoderConfirmed","show","ApiClient","getNamedConfiguration","then","config","DownMixAudioBoost","val","TranscodingTempPath","EncodingThreadCount","HardwareAccelerationType","VaapiDevice","EncoderPreset","querySelector","value","H264Crf","parseInt","EnableSubtitleExtraction","checked","EnableThrottling","HardwareDecodingCodecs","Array","prototype","map","call","filter","querySelectorAll","c","getAttribute","EnableHardwareEncoding","updateNamedConfiguration","updateEncoder","getSystemInfo","systemInfo","ajax","url","getUrl","type","data","Path","PathType","Dashboard","processServerConfigurationUpdateResult","title","text","getTabs","href","name","Globalize","document","on","page","addEventListener","classList","remove","setAttribute","add","removeAttribute","setDecodingCodecsVisible","context","any","forEach","split","indexOf","parentWithTag","directoryBrowser","picker","includeFiles","callback","path","close","validateWriteable","header","instruction","off","setTabs","loadPage","EncoderAppPathDisplay","dispatchEvent","CustomEvent","bubbles"],"mappings":"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","file":"encodingsettings.js","sourcesContent":["define([\"jQuery\", \"loading\", \"globalize\", \"dom\", \"libraryMenu\"], function ($, loading, globalize, dom, libraryMenu) {\n    \"use strict\";\n\n    function loadPage(page, config, systemInfo) {\n        Array.prototype.forEach.call(page.querySelectorAll(\".chkDecodeCodec\"), function (c) {\n            c.checked = -1 !== (config.HardwareDecodingCodecs || []).indexOf(c.getAttribute(\"data-codec\"));\n        });\n        page.querySelector(\"#chkHardwareEncoding\").checked = config.EnableHardwareEncoding;\n        $(\"#selectVideoDecoder\", page).val(config.HardwareAccelerationType);\n        $(\"#selectThreadCount\", page).val(config.EncodingThreadCount);\n        $(\"#txtDownMixAudioBoost\", page).val(config.DownMixAudioBoost);\n        page.querySelector(\".txtEncoderPath\").value = config.EncoderAppPathDisplay || \"\";\n        $(\"#txtTranscodingTempPath\", page).val(systemInfo.TranscodingTempPath || \"\");\n        $(\"#txtVaapiDevice\", page).val(config.VaapiDevice || \"\");\n        page.querySelector(\"#selectEncoderPreset\").value = config.EncoderPreset || \"\";\n        page.querySelector(\"#txtH264Crf\").value = config.H264Crf || \"\";\n        page.querySelector(\"#chkEnableSubtitleExtraction\").checked = config.EnableSubtitleExtraction || false;\n        page.querySelector(\"#chkEnableThrottling\").checked = config.EnableThrottling || false;\n        page.querySelector(\"#selectVideoDecoder\").dispatchEvent(new CustomEvent(\"change\", {\n            bubbles: true\n        }));\n        loading.hide();\n    }\n\n    function onSaveEncodingPathFailure(response) {\n        loading.hide();\n        var msg = \"\";\n        msg = globalize.translate(\"FFmpegSavePathNotFound\");\n\n        require([\"alert\"], function (alert) {\n            alert(msg);\n        });\n    }\n\n    function updateEncoder(form) {\n        return ApiClient.getSystemInfo().then(function (systemInfo) {\n            return ApiClient.ajax({\n                url: ApiClient.getUrl(\"System/MediaEncoder/Path\"),\n                type: \"POST\",\n                data: {\n                    Path: form.querySelector(\".txtEncoderPath\").value,\n                    PathType: \"Custom\"\n                }\n            }).then(Dashboard.processServerConfigurationUpdateResult, onSaveEncodingPathFailure);\n        });\n    }\n\n    function onSubmit() {\n        var form = this;\n\n        var onDecoderConfirmed = function () {\n            loading.show();\n            ApiClient.getNamedConfiguration(\"encoding\").then(function (config) {\n                config.DownMixAudioBoost = $(\"#txtDownMixAudioBoost\", form).val();\n                config.TranscodingTempPath = $(\"#txtTranscodingTempPath\", form).val();\n                config.EncodingThreadCount = $(\"#selectThreadCount\", form).val();\n                config.HardwareAccelerationType = $(\"#selectVideoDecoder\", form).val();\n                config.VaapiDevice = $(\"#txtVaapiDevice\", form).val();\n                config.EncoderPreset = form.querySelector(\"#selectEncoderPreset\").value;\n                config.H264Crf = parseInt(form.querySelector(\"#txtH264Crf\").value || \"0\");\n                config.EnableSubtitleExtraction = form.querySelector(\"#chkEnableSubtitleExtraction\").checked;\n                config.EnableThrottling = form.querySelector(\"#chkEnableThrottling\").checked;\n                config.HardwareDecodingCodecs = Array.prototype.map.call(Array.prototype.filter.call(form.querySelectorAll(\".chkDecodeCodec\"), function (c) {\n                    return c.checked;\n                }), function (c) {\n                    return c.getAttribute(\"data-codec\");\n                });\n                config.EnableHardwareEncoding = form.querySelector(\"#chkHardwareEncoding\").checked;\n                ApiClient.updateNamedConfiguration(\"encoding\", config).then(function () {\n                    updateEncoder(form);\n                }, function () {\n                    require([\"alert\"], function (alert) {\n                        alert(globalize.translate(\"DefaultErrorMessage\"));\n                    });\n\n                    Dashboard.processServerConfigurationUpdateResult();\n                });\n            });\n        };\n\n        if ($(\"#selectVideoDecoder\", form).val()) {\n            require([\"alert\"], function (alert) {\n                alert({\n                    title: globalize.translate(\"TitleHardwareAcceleration\"),\n                    text: globalize.translate(\"HardwareAccelerationWarning\")\n                }).then(onDecoderConfirmed);\n            });\n        } else {\n            onDecoderConfirmed();\n        }\n\n        return false;\n    }\n\n    function setDecodingCodecsVisible(context, value) {\n        value = value || \"\";\n        var any;\n        Array.prototype.forEach.call(context.querySelectorAll(\".chkDecodeCodec\"), function (c) {\n            if (-1 === c.getAttribute(\"data-types\").split(\",\").indexOf(value)) {\n                dom.parentWithTag(c, \"LABEL\").classList.add(\"hide\");\n            } else {\n                dom.parentWithTag(c, \"LABEL\").classList.remove(\"hide\");\n                any = true;\n            }\n        });\n\n        if (any) {\n            context.querySelector(\".decodingCodecsList\").classList.remove(\"hide\");\n        } else {\n            context.querySelector(\".decodingCodecsList\").classList.add(\"hide\");\n        }\n    }\n\n    function getTabs() {\n        return [{\n            href: \"encodingsettings.html\",\n            name: Globalize.translate(\"Transcoding\")\n        }, {\n            href: \"playbackconfiguration.html\",\n            name: Globalize.translate(\"TabResumeSettings\")\n        }, {\n            href: \"streamingsettings.html\",\n            name: Globalize.translate(\"TabStreaming\")\n        }];\n    }\n\n    $(document).on(\"pageinit\", \"#encodingSettingsPage\", function () {\n        var page = this;\n        page.querySelector(\"#selectVideoDecoder\").addEventListener(\"change\", function () {\n            if (\"vaapi\" == this.value) {\n                page.querySelector(\".fldVaapiDevice\").classList.remove(\"hide\");\n                page.querySelector(\"#txtVaapiDevice\").setAttribute(\"required\", \"required\");\n            } else {\n                page.querySelector(\".fldVaapiDevice\").classList.add(\"hide\");\n                page.querySelector(\"#txtVaapiDevice\").removeAttribute(\"required\");\n            }\n\n            if (this.value) {\n                page.querySelector(\".hardwareAccelerationOptions\").classList.remove(\"hide\");\n            } else {\n                page.querySelector(\".hardwareAccelerationOptions\").classList.add(\"hide\");\n            }\n\n            setDecodingCodecsVisible(page, this.value);\n        });\n        $(\"#btnSelectEncoderPath\", page).on(\"click.selectDirectory\", function () {\n            require([\"directorybrowser\"], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    includeFiles: true,\n                    callback: function (path) {\n                        if (path) {\n                            $(\".txtEncoderPath\", page).val(path);\n                        }\n\n                        picker.close();\n                    }\n                });\n            });\n        });\n        $(\"#btnSelectTranscodingTempPath\", page).on(\"click.selectDirectory\", function () {\n            require([\"directorybrowser\"], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    callback: function (path) {\n                        if (path) {\n                            $(\"#txtTranscodingTempPath\", page).val(path);\n                        }\n\n                        picker.close();\n                    },\n                    validateWriteable: true,\n                    header: globalize.translate(\"HeaderSelectTranscodingPath\"),\n                    instruction: globalize.translate(\"HeaderSelectTranscodingPathHelp\")\n                });\n            });\n        });\n        $(\".encodingSettingsForm\").off(\"submit\", onSubmit).on(\"submit\", onSubmit);\n    }).on(\"pageshow\", \"#encodingSettingsPage\", function () {\n        loading.show();\n        libraryMenu.setTabs(\"playback\", 0, getTabs);\n        var page = this;\n        ApiClient.getNamedConfiguration(\"encoding\").then(function (config) {\n            ApiClient.getSystemInfo().then(function (systemInfo) {\n                loadPage(page, config, systemInfo);\n            });\n        });\n    });\n});\n"]}