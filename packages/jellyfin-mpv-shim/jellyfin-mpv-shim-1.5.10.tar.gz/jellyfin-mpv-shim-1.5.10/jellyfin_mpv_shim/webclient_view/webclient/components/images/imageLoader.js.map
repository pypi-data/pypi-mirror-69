{"version":3,"sources":["components/images/imageLoader.js"],"names":["define","lazyLoader","imageFetcher","layoutManager","browser","appSettings","userSettings","require","window","requestIdleCallback","self","fillImage","elem","source","enableEffects","Error","getAttribute","fillImageElement","loadImage","then","fadeIn","enableFastFadein","classList","add","removeAttribute","fillImages","elems","i","length","lazyImage","lazyChildren","getPrimaryImageAspectRatio","items","values","ratio","PrimaryImageAspectRatio","sort","a","b","result","half","Math","floor","abs"],"mappings":"AAAA,aAAAA,OAAO,CAAC,aAAc,eAAgB,gBAAiB,UAAW,cAAe,eAAgB,UAAW,gBAAgB,SAAUC,WAAYC,aAAcC,cAAeC,QAASC,YAAaC,aAAcC,SAGrLC,OAAOC,oBAAjC,IAIIC,KAAO,GAEX,SAASC,UAAUC,KAAMC,OAAQC,eAE7B,IAAKF,KACD,MAAM,IAAIG,MAAM,uBAGfF,SACDA,OAASD,KAAKI,aAAa,aAG1BH,QAOT,SAASI,iBAAiBL,KAAMC,OAAQC,eACpCZ,aAAagB,UAAUN,KAAMC,QAAQM,MAAK,YAEhB,IAAlBL,eAQZ,SAASM,OAAOR,MACRN,aAAae,mBACbT,KAAKU,UAAUC,IAAI,0BAEnBX,KAAKU,UAAUC,IAAI,qBAXfH,CAAOR,MAGXA,KAAKY,gBAAgB,eAVzBP,CAAiBL,KAAMC,OAAQC,eAoGnC,OALAJ,KAAKe,WARL,SAASA,WAAWC,OAEhB,IAAK,IAAIC,EAAI,EAAGC,OAASF,MAAME,OAAQD,EAAIC,OAAQD,IAAK,CAEpDhB,UADWe,MAAM,MAMzBhB,KAAKmB,UAAYlB,UACjBD,KAAKoB,aA3EL,SAASA,aAAalB,MAElBX,WAAW6B,aAAalB,KAAMD,YA0ElCD,KAAKqB,2BAvEL,SAASA,2BAA2BC,OAIhC,IAFA,IAAIC,OAAS,GAEJN,EAAI,EAAGC,OAASI,MAAMJ,OAAQD,EAAIC,OAAQD,IAAK,CAEpD,IAAIO,MAAQF,MAAML,GAAGQ,yBAA2B,EAE3CD,QAILD,OAAOA,OAAOL,QAAUM,OAG5B,IAAKD,OAAOL,OACR,OAAO,KAIXK,OAAOG,MAAK,SAAUC,EAAGC,GACrB,OAAOD,EAAIC,KAGf,IAEIC,OAFAC,KAAOC,KAAKC,MAAMT,OAAOL,OAAS,GAYtC,OAPIW,OADAN,OAAOL,OAAS,EACPK,OAAOO,OAENP,OAAOO,KAAO,GAAKP,OAAOO,OAAS,EAK7CC,KAAKE,IADO,EAAI,EACKJ,SAAW,IADpB,EAAI,EAOhBE,KAAKE,IADQ,GAAK,EACIJ,SAAW,GADpB,GAAK,EAMlBE,KAAKE,IAAI,EAAIJ,SAAW,IACjB,EAKPE,KAAKE,IADO,EAAI,EACKJ,SAAW,IADpB,EAAI,EAKbA,QAgBJ7B","file":"imageLoader.js","sourcesContent":["define(['lazyLoader', 'imageFetcher', 'layoutManager', 'browser', 'appSettings', 'userSettings', 'require', 'css!./style'], function (lazyLoader, imageFetcher, layoutManager, browser, appSettings, userSettings, require) {\n    'use strict';\n\n    var requestIdleCallback = window.requestIdleCallback || function (fn) {\n        fn();\n    };\n\n    var self = {};\n\n    function fillImage(elem, source, enableEffects) {\n\n        if (!elem) {\n            throw new Error('elem cannot be null');\n        }\n\n        if (!source) {\n            source = elem.getAttribute('data-src');\n        }\n\n        if (!source) {\n            return;\n        }\n\n        fillImageElement(elem, source, enableEffects);\n    }\n\n    function fillImageElement(elem, source, enableEffects) {\n        imageFetcher.loadImage(elem, source).then(function () {\n\n            if (enableEffects !== false) {\n                fadeIn(elem);\n            }\n\n            elem.removeAttribute(\"data-src\");\n        });\n    }\n\n    function fadeIn(elem) {\n        if (userSettings.enableFastFadein()) {\n            elem.classList.add('lazy-image-fadein-fast');\n        } else {\n            elem.classList.add('lazy-image-fadein');\n        }\n    }\n\n    function lazyChildren(elem) {\n\n        lazyLoader.lazyChildren(elem, fillImage);\n    }\n\n    function getPrimaryImageAspectRatio(items) {\n\n        var values = [];\n\n        for (var i = 0, length = items.length; i < length; i++) {\n\n            var ratio = items[i].PrimaryImageAspectRatio || 0;\n\n            if (!ratio) {\n                continue;\n            }\n\n            values[values.length] = ratio;\n        }\n\n        if (!values.length) {\n            return null;\n        }\n\n        // Use the median\n        values.sort(function (a, b) {\n            return a - b;\n        });\n\n        var half = Math.floor(values.length / 2);\n\n        var result;\n\n        if (values.length % 2) {\n            result = values[half];\n        } else {\n            result = (values[half - 1] + values[half]) / 2.0;\n        }\n\n        // If really close to 2:3 (poster image), just return 2:3\n        var aspect2x3 = 2 / 3;\n        if (Math.abs(aspect2x3 - result) <= 0.15) {\n            return aspect2x3;\n        }\n\n        // If really close to 16:9 (episode image), just return 16:9\n        var aspect16x9 = 16 / 9;\n        if (Math.abs(aspect16x9 - result) <= 0.2) {\n            return aspect16x9;\n        }\n\n        // If really close to 1 (square image), just return 1\n        if (Math.abs(1 - result) <= 0.15) {\n            return 1;\n        }\n\n        // If really close to 4:3 (poster image), just return 2:3\n        var aspect4x3 = 4 / 3;\n        if (Math.abs(aspect4x3 - result) <= 0.15) {\n            return aspect4x3;\n        }\n\n        return result;\n    }\n\n    function fillImages(elems) {\n\n        for (var i = 0, length = elems.length; i < length; i++) {\n            var elem = elems[0];\n            fillImage(elem);\n        }\n    }\n\n    self.fillImages = fillImages;\n    self.lazyImage = fillImage;\n    self.lazyChildren = lazyChildren;\n    self.getPrimaryImageAspectRatio = getPrimaryImageAspectRatio;\n\n    return self;\n});\n"]}