{"version":3,"sources":["components/remotecontrol/remotecontrol.js"],"names":["define","browser","datetime","backdrop","libraryBrowser","listView","imageLoader","playbackManager","nowPlayingHelper","events","connectionManager","appHost","globalize","layoutManager","userSettings","updateNowPlayingInfo","context","state","item","NowPlayingItem","displayName","getNowPlayingNameHtml","nowPlayingItem","includeNonNameInfo","getNowPlayingNames","map","i","text","join","replace","querySelector","innerHTML","length","classList","remove","add","url","seriesImageUrl","options","Type","type","SeriesPrimaryImageTag","tag","getApiClient","ServerId","getScaledImageUrl","SeriesId","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","maxHeight","imageUrl","ImageTags","PrimaryImageItemId","Id","AlbumId","AlbumPrimaryImageTag","console","debug","setImageUrl","imgContainer","setBackdrops","apiClient","getItem","getCurrentUserId","then","fullItem","userData","UserData","likes","Likes","IsFavorite","clear","buttonVisible","btn","enabled","updatePlayerState","player","lastPlayerState","supportedCommands","getPlayerInfo","currentPlayerSupportedCommands","playState","PlayState","MediaType","indexOf","updateAudioTracksDisplay","audioTracks","updateSubtitleTracksDisplay","subtitleTracks","currentPlayer","isLocalPlayer","positionSlider","RunTimeTicks","setKeyboardSteps","skipBackLength","skipForwardLength","dragging","disabled","CanSeek","isProgressClear","MediaSource","setIsClear","updatePlayPauseState","IsPaused","updateTimeDisplay","PositionTicks","updatePlayerVolumeState","IsMuted","VolumeLevel","updateRepeatModeDisplay","RepeatMode","repeatMode","toggleRepeatButton","dlg","isMuted","volumeLevel","view","showMuteButton","showVolumeSlider","supports","setAttribute","translate","nowPlayingVolumeSlider","nowPlayingVolumeSliderContainer","value","isPaused","isActive","btnPlayPause","positionTicks","runtimeTicks","pct","getDisplayRunningTime","getPlaylistItems","getPlaylist","loadPlaylist","items","html","getListViewHtml","smallIcon","action","enableUserDataButtons","rightButtons","icon","title","id","dragHandle","itemsContainer","playlistItemId","getCurrentPlaylistItemId","img","lazyChildren","onPlaybackStart","e","onStateChanged","call","this","onRepeatModeChange","getRepeatMode","onPlaylistUpdate","onPlaylistItemRemoved","info","playlistItemIds","listItem","parentNode","removeChild","onPlaybackStopped","NextMediaType","Emby","Page","back","onPlayPauseStateChanged","paused","event","onTimeUpdate","now","Date","getTime","lastUpdateTime","currentRuntimeTicks","duration","currentTime","onVolumeChanged","getVolume","releaseCurrentPlayer","off","bindToPlayer","getPlayerState","on","updateSupportedCommands","commands","all","querySelectorAll","enableButton","getAttribute","onBtnCommandClick","contains","toggleRepeat","setRepeatMode","sendCommand","Name","savePlaylist","require","playlistEditor","getSaveablePlaylistItems","filter","serverId","ApiClient","show","enableAddToPlayQueue","defaultValue","bindEvents","volumeSliderTimer","btnCommand","addEventListener","setVolume","clearTimeout","setVolumeDelayed","that","setTimeout","target","showAudioMenu","button","currentIndex","getAudioStreamIndex","menuItems","s","menuItem","name","DisplayTitle","Index","selected","actionsheet","positionTo","callback","setAudioStreamIndex","parseInt","showSubtitleMenu","getSubtitleStreamIndex","unshift","setSubtitleStreamIndex","stop","playPause","nextTrack","rewind","fastForward","previousTrack","newPercent","parseFloat","seekPercent","getBubbleText","ticks","toggleMute","playlistContainer","removeFromPlaylist","detail","newIndex","movePlaylistItem","onPlayerChange","getCurrentPlayer","onMessageSubmit","form","Arguments","Header","Text","toast","preventDefault","stopPropagation","onSendStringSubmit","String","init","ownerView","tv","enableKeyboardDragging","onShow","tab","window","location","hash","destroy","onDialogClosed"],"mappings":"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","file":"remotecontrol.js","sourcesContent":["define([\"browser\", \"datetime\", \"backdrop\", \"libraryBrowser\", \"listView\", \"imageLoader\", \"playbackManager\", \"nowPlayingHelper\", \"events\", \"connectionManager\", \"apphost\", \"globalize\", \"layoutManager\", \"userSettings\", \"cardStyle\", \"emby-itemscontainer\", \"css!./remotecontrol.css\", \"emby-ratingbutton\"], function (browser, datetime, backdrop, libraryBrowser, listView, imageLoader, playbackManager, nowPlayingHelper, events, connectionManager, appHost, globalize, layoutManager, userSettings) {\n    \"use strict\";\n\n    function showAudioMenu(context, player, button, item) {\n        var currentIndex = playbackManager.getAudioStreamIndex(player);\n        var streams = playbackManager.audioTracks(player);\n        var menuItems = streams.map(function (s) {\n            var menuItem = {\n                name: s.DisplayTitle,\n                id: s.Index\n            };\n\n            if (s.Index == currentIndex) {\n                menuItem.selected = true;\n            }\n\n            return menuItem;\n        });\n\n        require([\"actionsheet\"], function (actionsheet) {\n            actionsheet.show({\n                items: menuItems,\n                positionTo: button,\n                callback: function (id) {\n                    playbackManager.setAudioStreamIndex(parseInt(id), player);\n                }\n            });\n        });\n    }\n\n    function showSubtitleMenu(context, player, button, item) {\n        var currentIndex = playbackManager.getSubtitleStreamIndex(player);\n        var streams = playbackManager.subtitleTracks(player);\n        var menuItems = streams.map(function (s) {\n            var menuItem = {\n                name: s.DisplayTitle,\n                id: s.Index\n            };\n\n            if (s.Index == currentIndex) {\n                menuItem.selected = true;\n            }\n\n            return menuItem;\n        });\n        menuItems.unshift({\n            id: -1,\n            name: globalize.translate(\"ButtonOff\"),\n            selected: null == currentIndex\n        });\n\n        require([\"actionsheet\"], function (actionsheet) {\n            actionsheet.show({\n                items: menuItems,\n                positionTo: button,\n                callback: function (id) {\n                    playbackManager.setSubtitleStreamIndex(parseInt(id), player);\n                }\n            });\n        });\n    }\n\n    function getNowPlayingNameHtml(nowPlayingItem, includeNonNameInfo) {\n        return nowPlayingHelper.getNowPlayingNames(nowPlayingItem, includeNonNameInfo).map(function (i) {\n            return i.text;\n        }).join(\"<br/>\");\n    }\n\n    function seriesImageUrl(item, options) {\n        if (\"Episode\" !== item.Type) {\n            return null;\n        }\n\n        options = options || {};\n        options.type = options.type || \"Primary\";\n        if (\"Primary\" === options.type && item.SeriesPrimaryImageTag) {\n            options.tag = item.SeriesPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n        }\n\n        if (\"Thumb\" === options.type) {\n            if (item.SeriesThumbImageTag) {\n                options.tag = item.SeriesThumbImageTag;\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n\n            if (item.ParentThumbImageTag) {\n                options.tag = item.ParentThumbImageTag;\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n            }\n        }\n\n        return null;\n    }\n\n    function imageUrl(item, options) {\n        options = options || {};\n        options.type = options.type || \"Primary\";\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n            options.tag = item.ImageTags[options.type];\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.PrimaryImageItemId || item.Id, options);\n        }\n\n        if (item.AlbumId && item.AlbumPrimaryImageTag) {\n            options.tag = item.AlbumPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n        }\n\n        return null;\n    }\n\n    function updateNowPlayingInfo(context, state) {\n        var item = state.NowPlayingItem;\n        var displayName = item ? getNowPlayingNameHtml(item).replace(\"<br/>\", \" - \") : \"\";\n        context.querySelector(\".nowPlayingPageTitle\").innerHTML = displayName;\n\n        if (displayName.length > 0) {\n            context.querySelector(\".nowPlayingPageTitle\").classList.remove(\"hide\");\n        } else {\n            context.querySelector(\".nowPlayingPageTitle\").classList.add(\"hide\");\n        }\n\n        var url = item ? seriesImageUrl(item, {\n            maxHeight: 300 * 2\n        }) || imageUrl(item, {\n            maxHeight: 300 * 2\n        }) : null;\n\n        console.debug(\"updateNowPlayingInfo\");\n        setImageUrl(context, url);\n        if (item) {\n            backdrop.setBackdrops([item]);\n            var apiClient = connectionManager.getApiClient(item.ServerId);\n            apiClient.getItem(apiClient.getCurrentUserId(), item.Id).then(function (fullItem) {\n                var userData = fullItem.UserData || {};\n                var likes = null == userData.Likes ? \"\" : userData.Likes;\n                context.querySelector(\".nowPlayingPageUserDataButtons\").innerHTML = '<button is=\"emby-ratingbutton\" type=\"button\" class=\"listItemButton paper-icon-button-light\" data-id=\"' + fullItem.Id + '\" data-serverid=\"' + fullItem.ServerId + '\" data-itemtype=\"' + fullItem.Type + '\" data-likes=\"' + likes + '\" data-isfavorite=\"' + userData.IsFavorite + '\"><i class=\"material-icons\">favorite</i></button>';\n            });\n        } else {\n            backdrop.clear();\n            context.querySelector(\".nowPlayingPageUserDataButtons\").innerHTML = \"\";\n        }\n    }\n\n    function setImageUrl(context, url) {\n        currentImgUrl = url;\n        var imgContainer = context.querySelector(\".nowPlayingPageImageContainer\");\n\n        if (url) {\n            imgContainer.innerHTML = '<img class=\"nowPlayingPageImage\" src=\"' + url + '\" />';\n            imgContainer.classList.remove(\"hide\");\n        } else {\n            imgContainer.classList.add(\"hide\");\n            imgContainer.innerHTML = \"\";\n        }\n    }\n\n    function buttonVisible(btn, enabled) {\n        if (enabled) {\n            btn.classList.remove(\"hide\");\n        } else {\n            btn.classList.add(\"hide\");\n        }\n    }\n\n    function updateSupportedCommands(context, commands) {\n        var all = context.querySelectorAll(\".btnCommand\");\n\n        for (var i = 0, length = all.length; i < length; i++) {\n            var enableButton = -1 !== commands.indexOf(all[i].getAttribute(\"data-command\"));\n            all[i].disabled = !enableButton;\n        }\n    }\n\n    var currentImgUrl;\n    return function () {\n        function toggleRepeat(player) {\n            if (player) {\n                switch (playbackManager.getRepeatMode(player)) {\n                    case \"RepeatNone\":\n                        playbackManager.setRepeatMode(\"RepeatAll\", player);\n                        break;\n\n                    case \"RepeatAll\":\n                        playbackManager.setRepeatMode(\"RepeatOne\", player);\n                        break;\n\n                    case \"RepeatOne\":\n                        playbackManager.setRepeatMode(\"RepeatNone\", player);\n                }\n            }\n        }\n\n        function updatePlayerState(player, context, state) {\n            lastPlayerState = state;\n            var item = state.NowPlayingItem;\n            var playerInfo = playbackManager.getPlayerInfo();\n            var supportedCommands = playerInfo.supportedCommands;\n            currentPlayerSupportedCommands = supportedCommands;\n            var playState = state.PlayState || {};\n            buttonVisible(context.querySelector(\".btnToggleFullscreen\"), item && \"Video\" == item.MediaType && -1 != supportedCommands.indexOf(\"ToggleFullscreen\"));\n            updateAudioTracksDisplay(player, context);\n            updateSubtitleTracksDisplay(player, context);\n\n            if (-1 != supportedCommands.indexOf(\"DisplayMessage\") && !currentPlayer.isLocalPlayer) {\n                context.querySelector(\".sendMessageSection\").classList.remove(\"hide\");\n            } else {\n                context.querySelector(\".sendMessageSection\").classList.add(\"hide\");\n            }\n\n            if (-1 != supportedCommands.indexOf(\"SendString\") && !currentPlayer.isLocalPlayer) {\n                context.querySelector(\".sendTextSection\").classList.remove(\"hide\");\n            } else {\n                context.querySelector(\".sendTextSection\").classList.add(\"hide\");\n            }\n\n            if (-1 != supportedCommands.indexOf(\"Select\") && !currentPlayer.isLocalPlayer) {\n                context.querySelector(\".navigationSection\").classList.remove(\"hide\");\n            } else {\n                context.querySelector(\".navigationSection\").classList.add(\"hide\");\n            }\n\n            buttonVisible(context.querySelector(\".btnStop\"), null != item);\n            buttonVisible(context.querySelector(\".btnNextTrack\"), null != item);\n            buttonVisible(context.querySelector(\".btnPreviousTrack\"), null != item);\n            buttonVisible(context.querySelector(\".btnRewind\"), null != item);\n            buttonVisible(context.querySelector(\".btnFastForward\"), null != item);\n            var positionSlider = context.querySelector(\".nowPlayingPositionSlider\");\n\n            if (positionSlider && item && item.RunTimeTicks) {\n                positionSlider.setKeyboardSteps(userSettings.skipBackLength() * 1000000 / item.RunTimeTicks,\n                    userSettings.skipForwardLength() * 1000000 / item.RunTimeTicks);\n            }\n\n            if (positionSlider && !positionSlider.dragging) {\n                positionSlider.disabled = !playState.CanSeek;\n                var isProgressClear = state.MediaSource && null == state.MediaSource.RunTimeTicks;\n                positionSlider.setIsClear(isProgressClear);\n            }\n\n            updatePlayPauseState(playState.IsPaused, null != item);\n            updateTimeDisplay(playState.PositionTicks, item ? item.RunTimeTicks : null);\n            updatePlayerVolumeState(context, playState.IsMuted, playState.VolumeLevel);\n\n            if (item && \"Video\" == item.MediaType) {\n                context.classList.remove(\"hideVideoButtons\");\n            } else {\n                context.classList.add(\"hideVideoButtons\");\n            }\n\n            updateRepeatModeDisplay(playState.RepeatMode);\n            updateNowPlayingInfo(context, state);\n        }\n\n        function updateAudioTracksDisplay(player, context) {\n            var supportedCommands = currentPlayerSupportedCommands;\n            buttonVisible(context.querySelector(\".btnAudioTracks\"), playbackManager.audioTracks(player).length > 1 && -1 != supportedCommands.indexOf(\"SetAudioStreamIndex\"));\n        }\n\n        function updateSubtitleTracksDisplay(player, context) {\n            var supportedCommands = currentPlayerSupportedCommands;\n            buttonVisible(context.querySelector(\".btnSubtitles\"), playbackManager.subtitleTracks(player).length && -1 != supportedCommands.indexOf(\"SetSubtitleStreamIndex\"));\n        }\n\n        function updateRepeatModeDisplay(repeatMode) {\n            var context = dlg;\n            var toggleRepeatButton = context.querySelector(\".repeatToggleButton\");\n\n            if (\"RepeatAll\" == repeatMode) {\n                toggleRepeatButton.innerHTML = \"<i class='material-icons'>repeat</i>\";\n                toggleRepeatButton.classList.add(\"repeatButton-active\");\n            } else if (\"RepeatOne\" == repeatMode) {\n                toggleRepeatButton.innerHTML = \"<i class='material-icons repeat_one'></i>\";\n                toggleRepeatButton.classList.add(\"repeatButton-active\");\n            } else {\n                toggleRepeatButton.innerHTML = \"<i class='material-icons'>repeat</i>\";\n                toggleRepeatButton.classList.remove(\"repeatButton-active\");\n            }\n        }\n\n        function updatePlayerVolumeState(context, isMuted, volumeLevel) {\n            var view = context;\n            var supportedCommands = currentPlayerSupportedCommands;\n            var showMuteButton = true;\n            var showVolumeSlider = true;\n\n            if (-1 === supportedCommands.indexOf(\"Mute\")) {\n                showMuteButton = false;\n            }\n\n            if (-1 === supportedCommands.indexOf(\"SetVolume\")) {\n                showVolumeSlider = false;\n            }\n\n            if (currentPlayer.isLocalPlayer && appHost.supports(\"physicalvolumecontrol\")) {\n                showMuteButton = false;\n                showVolumeSlider = false;\n            }\n\n            if (isMuted) {\n                view.querySelector(\".buttonMute\").setAttribute(\"title\", globalize.translate(\"Unmute\"));\n                view.querySelector(\".buttonMute i\").innerHTML = \"&#xE04F;\";\n            } else {\n                view.querySelector(\".buttonMute\").setAttribute(\"title\", globalize.translate(\"Mute\"));\n                view.querySelector(\".buttonMute i\").innerHTML = \"&#xE050;\";\n            }\n\n            if (showMuteButton) {\n                view.querySelector(\".buttonMute\").classList.remove(\"hide\");\n            } else {\n                view.querySelector(\".buttonMute\").classList.add(\"hide\");\n            }\n\n            var nowPlayingVolumeSlider = context.querySelector(\".nowPlayingVolumeSlider\");\n            var nowPlayingVolumeSliderContainer = context.querySelector(\".nowPlayingVolumeSliderContainer\");\n\n            if (nowPlayingVolumeSlider) {\n                if (showVolumeSlider) {\n                    nowPlayingVolumeSliderContainer.classList.remove(\"hide\");\n                } else {\n                    nowPlayingVolumeSliderContainer.classList.add(\"hide\");\n                }\n\n                if (!nowPlayingVolumeSlider.dragging) {\n                    nowPlayingVolumeSlider.value = volumeLevel || 0;\n                }\n            }\n        }\n\n        function updatePlayPauseState(isPaused, isActive) {\n            var context = dlg;\n            var btnPlayPause = context.querySelector(\".btnPlayPause\");\n            btnPlayPause.querySelector(\"i\").innerHTML = isPaused ? \"&#xE037;\" : \"pause\";\n            buttonVisible(btnPlayPause, isActive);\n        }\n\n        function updateTimeDisplay(positionTicks, runtimeTicks) {\n            var context = dlg;\n            var positionSlider = context.querySelector(\".nowPlayingPositionSlider\");\n\n            if (positionSlider && !positionSlider.dragging) {\n                if (runtimeTicks) {\n                    var pct = positionTicks / runtimeTicks;\n                    pct *= 100;\n                    positionSlider.value = pct;\n                } else {\n                    positionSlider.value = 0;\n                }\n            }\n\n            context.querySelector(\".positionTime\").innerHTML = null == positionTicks ? \"--:--\" : datetime.getDisplayRunningTime(positionTicks);\n            context.querySelector(\".runtime\").innerHTML = null != runtimeTicks ? datetime.getDisplayRunningTime(runtimeTicks) : \"--:--\";\n        }\n\n        function getPlaylistItems(player) {\n            return playbackManager.getPlaylist(player);\n        }\n\n        function loadPlaylist(context, player) {\n            getPlaylistItems(player).then(function (items) {\n                var html = \"\";\n                html += listView.getListViewHtml({\n                    items: items,\n                    smallIcon: true,\n                    action: \"setplaylistindex\",\n                    enableUserDataButtons: false,\n                    rightButtons: [{\n                        icon: \"&#xE15D;\",\n                        title: globalize.translate(\"ButtonRemove\"),\n                        id: \"remove\"\n                    }],\n                    dragHandle: true\n                });\n\n                if (items.length) {\n                    context.querySelector(\".playlistSection\").classList.remove(\"hide\");\n                } else {\n                    context.querySelector(\".playlistSection\").classList.add(\"hide\");\n                }\n\n                var itemsContainer = context.querySelector(\".playlist\");\n                itemsContainer.innerHTML = html;\n                var playlistItemId = playbackManager.getCurrentPlaylistItemId(player);\n\n                if (playlistItemId) {\n                    var img = itemsContainer.querySelector('.listItem[data-playlistItemId=\"' + playlistItemId + '\"] .listItemImage');\n\n                    if (img) {\n                        img.classList.remove(\"lazy\");\n                        img.classList.add(\"playlistIndexIndicatorImage\");\n                    }\n                }\n\n                imageLoader.lazyChildren(itemsContainer);\n            });\n        }\n\n        function onPlaybackStart(e, state) {\n            console.debug(\"remotecontrol event: \" + e.type);\n            var player = this;\n            onStateChanged.call(player, e, state);\n        }\n\n        function onRepeatModeChange(e) {\n            var player = this;\n            updateRepeatModeDisplay(playbackManager.getRepeatMode(player));\n        }\n\n        function onPlaylistUpdate(e) {\n            loadPlaylist(dlg, this);\n        }\n\n        function onPlaylistItemRemoved(e, info) {\n            var context = dlg;\n            var playlistItemIds = info.playlistItemIds;\n\n            for (var i = 0, length = playlistItemIds.length; i < length; i++) {\n                var listItem = context.querySelector('.listItem[data-playlistItemId=\"' + playlistItemIds[i] + '\"]');\n\n                if (listItem) {\n                    listItem.parentNode.removeChild(listItem);\n                }\n            }\n        }\n\n        function onPlaybackStopped(e, state) {\n            console.debug(\"remotecontrol event: \" + e.type);\n            var player = this;\n\n            if (!state.NextMediaType) {\n                updatePlayerState(player, dlg, {});\n                loadPlaylist(dlg);\n                Emby.Page.back();\n            }\n        }\n\n        function onPlayPauseStateChanged(e) {\n            updatePlayPauseState(this.paused(), true);\n        }\n\n        function onStateChanged(event, state) {\n            var player = this;\n            updatePlayerState(player, dlg, state);\n            loadPlaylist(dlg, player);\n        }\n\n        function onTimeUpdate(e) {\n            var now = new Date().getTime();\n\n            if (!(now - lastUpdateTime < 700)) {\n                lastUpdateTime = now;\n                var player = this;\n                currentRuntimeTicks = playbackManager.duration(player);\n                updateTimeDisplay(playbackManager.currentTime(player), currentRuntimeTicks);\n            }\n        }\n\n        function onVolumeChanged(e) {\n            var player = this;\n            updatePlayerVolumeState(dlg, player.isMuted(), player.getVolume());\n        }\n\n        function releaseCurrentPlayer() {\n            var player = currentPlayer;\n\n            if (player) {\n                events.off(player, \"playbackstart\", onPlaybackStart);\n                events.off(player, \"statechange\", onStateChanged);\n                events.off(player, \"repeatmodechange\", onRepeatModeChange);\n                events.off(player, \"playlistitemremove\", onPlaylistUpdate);\n                events.off(player, \"playlistitemmove\", onPlaylistUpdate);\n                events.off(player, \"playbackstop\", onPlaybackStopped);\n                events.off(player, \"volumechange\", onVolumeChanged);\n                events.off(player, \"pause\", onPlayPauseStateChanged);\n                events.off(player, \"unpause\", onPlayPauseStateChanged);\n                events.off(player, \"timeupdate\", onTimeUpdate);\n                currentPlayer = null;\n            }\n        }\n\n        function bindToPlayer(context, player) {\n            if (releaseCurrentPlayer(), currentPlayer = player, player) {\n                var state = playbackManager.getPlayerState(player);\n                onStateChanged.call(player, {\n                    type: \"init\"\n                }, state);\n                events.on(player, \"playbackstart\", onPlaybackStart);\n                events.on(player, \"statechange\", onStateChanged);\n                events.on(player, \"repeatmodechange\", onRepeatModeChange);\n                events.on(player, \"playlistitemremove\", onPlaylistItemRemoved);\n                events.on(player, \"playlistitemmove\", onPlaylistUpdate);\n                events.on(player, \"playbackstop\", onPlaybackStopped);\n                events.on(player, \"volumechange\", onVolumeChanged);\n                events.on(player, \"pause\", onPlayPauseStateChanged);\n                events.on(player, \"unpause\", onPlayPauseStateChanged);\n                events.on(player, \"timeupdate\", onTimeUpdate);\n                var playerInfo = playbackManager.getPlayerInfo();\n                var supportedCommands = playerInfo.supportedCommands;\n                currentPlayerSupportedCommands = supportedCommands;\n                updateSupportedCommands(context, supportedCommands);\n            }\n        }\n\n        function onBtnCommandClick() {\n            if (currentPlayer) {\n                if (this.classList.contains(\"repeatToggleButton\")) {\n                    toggleRepeat(currentPlayer);\n                } else {\n                    playbackManager.sendCommand({\n                        Name: this.getAttribute(\"data-command\")\n                    }, currentPlayer);\n                }\n            }\n        }\n\n        function getSaveablePlaylistItems() {\n            return getPlaylistItems(currentPlayer).then(function (items) {\n                return items.filter(function (i) {\n                    return i.Id && i.ServerId;\n                });\n            });\n        }\n\n        function savePlaylist() {\n            require([\"playlistEditor\"], function (playlistEditor) {\n                getSaveablePlaylistItems().then(function (items) {\n                    var serverId = items.length ? items[0].ServerId : ApiClient.serverId();\n                    new playlistEditor().show({\n                        items: items.map(function (i) {\n                            return i.Id;\n                        }),\n                        serverId: serverId,\n                        enableAddToPlayQueue: false,\n                        defaultValue: \"new\"\n                    });\n                });\n            });\n        }\n\n        function bindEvents(context) {\n            var btnCommand = context.querySelectorAll(\".btnCommand\");\n\n            for (var i = 0, length = btnCommand.length; i < length; i++) {\n                btnCommand[i].addEventListener(\"click\", onBtnCommandClick);\n            }\n\n            context.querySelector(\".btnToggleFullscreen\").addEventListener(\"click\", function (e) {\n                if (currentPlayer) {\n                    playbackManager.sendCommand({\n                        Name: e.target.getAttribute(\"data-command\")\n                    }, currentPlayer);\n                }\n            });\n            context.querySelector(\".btnAudioTracks\").addEventListener(\"click\", function (e) {\n                if (currentPlayer && lastPlayerState && lastPlayerState.NowPlayingItem) {\n                    showAudioMenu(context, currentPlayer, e.target, lastPlayerState.NowPlayingItem);\n                }\n            });\n            context.querySelector(\".btnSubtitles\").addEventListener(\"click\", function (e) {\n                if (currentPlayer && lastPlayerState && lastPlayerState.NowPlayingItem) {\n                    showSubtitleMenu(context, currentPlayer, e.target, lastPlayerState.NowPlayingItem);\n                }\n            });\n            context.querySelector(\".btnStop\").addEventListener(\"click\", function () {\n                if (currentPlayer) {\n                    playbackManager.stop(currentPlayer);\n                }\n            });\n            context.querySelector(\".btnPlayPause\").addEventListener(\"click\", function () {\n                if (currentPlayer) {\n                    playbackManager.playPause(currentPlayer);\n                }\n            });\n            context.querySelector(\".btnNextTrack\").addEventListener(\"click\", function () {\n                if (currentPlayer) {\n                    playbackManager.nextTrack(currentPlayer);\n                }\n            });\n            context.querySelector(\".btnRewind\").addEventListener(\"click\", function () {\n                if (currentPlayer) {\n                    playbackManager.rewind(currentPlayer);\n                }\n            });\n            context.querySelector(\".btnFastForward\").addEventListener(\"click\", function () {\n                if (currentPlayer) {\n                    playbackManager.fastForward(currentPlayer);\n                }\n            });\n            context.querySelector(\".btnPreviousTrack\").addEventListener(\"click\", function () {\n                if (currentPlayer) {\n                    playbackManager.previousTrack(currentPlayer);\n                }\n            });\n            context.querySelector(\".nowPlayingPositionSlider\").addEventListener(\"change\", function () {\n                var value = this.value;\n\n                if (currentPlayer) {\n                    var newPercent = parseFloat(value);\n                    playbackManager.seekPercent(newPercent, currentPlayer);\n                }\n            });\n\n            context.querySelector(\".nowPlayingPositionSlider\").getBubbleText = function (value) {\n                var state = lastPlayerState;\n\n                if (!state || !state.NowPlayingItem || !currentRuntimeTicks) {\n                    return \"--:--\";\n                }\n\n                var ticks = currentRuntimeTicks;\n                ticks /= 100;\n                ticks *= value;\n                return datetime.getDisplayRunningTime(ticks);\n            };\n\n            var volumeSliderTimer;\n\n            function setVolume() {\n                clearTimeout(volumeSliderTimer);\n                volumeSliderTimer = null;\n\n                playbackManager.setVolume(this.value, currentPlayer);\n            }\n\n            function setVolumeDelayed() {\n                if (!volumeSliderTimer) {\n                    var that = this;\n                    volumeSliderTimer = setTimeout(function () {\n                        setVolume.call(that);\n                    }, 700);\n                }\n            }\n\n            context.querySelector(\".nowPlayingVolumeSlider\").addEventListener(\"change\", setVolume);\n            context.querySelector(\".nowPlayingVolumeSlider\").addEventListener(\"mousemove\", setVolumeDelayed);\n            context.querySelector(\".nowPlayingVolumeSlider\").addEventListener(\"touchmove\", setVolumeDelayed);\n            context.querySelector(\".buttonMute\").addEventListener(\"click\", function () {\n                playbackManager.toggleMute(currentPlayer);\n            });\n            var playlistContainer = context.querySelector(\".playlist\");\n            playlistContainer.addEventListener(\"action-remove\", function (e) {\n                playbackManager.removeFromPlaylist([e.detail.playlistItemId], currentPlayer);\n            });\n            playlistContainer.addEventListener(\"itemdrop\", function (e) {\n                var newIndex = e.detail.newIndex;\n                var playlistItemId = e.detail.playlistItemId;\n                playbackManager.movePlaylistItem(playlistItemId, newIndex, currentPlayer);\n            });\n            context.querySelector(\".btnSavePlaylist\").addEventListener(\"click\", savePlaylist);\n        }\n\n        function onPlayerChange() {\n            bindToPlayer(dlg, playbackManager.getCurrentPlayer());\n        }\n\n        function onMessageSubmit(e) {\n            var form = e.target;\n            playbackManager.sendCommand({\n                Name: \"DisplayMessage\",\n                Arguments: {\n                    Header: form.querySelector(\"#txtMessageTitle\").value,\n                    Text: form.querySelector(\"#txtMessageText\", form).value\n                }\n            }, currentPlayer);\n            form.querySelector(\"input\").value = \"\";\n\n            require([\"toast\"], function (toast) {\n                toast(\"Message sent.\");\n            });\n\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        }\n\n        function onSendStringSubmit(e) {\n            var form = e.target;\n            playbackManager.sendCommand({\n                Name: \"SendString\",\n                Arguments: {\n                    String: form.querySelector(\"#txtTypeText\", form).value\n                }\n            }, currentPlayer);\n            form.querySelector(\"input\").value = \"\";\n\n            require([\"toast\"], function (toast) {\n                toast(\"Text sent.\");\n            });\n\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        }\n\n        function init(ownerView, context) {\n            bindEvents(context);\n            context.querySelector(\".sendMessageForm\").addEventListener(\"submit\", onMessageSubmit);\n            context.querySelector(\".typeTextForm\").addEventListener(\"submit\", onSendStringSubmit);\n            events.on(playbackManager, \"playerchange\", onPlayerChange);\n\n            if (layoutManager.tv) {\n                var positionSlider = context.querySelector(\".nowPlayingPositionSlider\");\n                positionSlider.classList.add(\"focusable\");\n                positionSlider.enableKeyboardDragging();\n            }\n        }\n\n        function onDialogClosed(e) {\n            releaseCurrentPlayer();\n            events.off(playbackManager, \"playerchange\", onPlayerChange);\n            lastPlayerState = null;\n        }\n\n        function onShow(context, tab) {\n            currentImgUrl = null;\n            bindToPlayer(context, playbackManager.getCurrentPlayer());\n        }\n\n        var dlg;\n        var currentPlayer;\n        var lastPlayerState;\n        var currentPlayerSupportedCommands = [];\n        var lastUpdateTime = 0;\n        var currentRuntimeTicks = 0;\n        var self = this;\n\n        self.init = function (ownerView, context) {\n            dlg = context;\n            init(ownerView, dlg);\n        };\n\n        self.onShow = function () {\n            onShow(dlg, window.location.hash);\n        };\n\n        self.destroy = function () {\n            onDialogClosed();\n        };\n    };\n});\n"]}