{"version":3,"sources":["components/fetchhelper.js"],"names":["define","getFetchPromise","request","headers","dataType","accept","fetchRequest","method","type","credentials","contentType","data","body","paramsToString","url","query","paramString","timeout","fetchWithTimeout","options","timeoutMs","console","debug","Promise","resolve","reject","setTimeout","fetch","then","response","clearTimeout","error","params","values","key","value","push","encodeURIComponent","join","ajax","Error","status","json","get","toLowerCase","indexOf","text","err"],"mappings":"AAAA,aAAAA,OAAO,IAAI,WAGP,SAASC,gBAAgBC,SAErB,IAAIC,QAAUD,QAAQC,SAAW,GAER,SAArBD,QAAQE,WACRD,QAAQE,OAAS,oBAGrB,IAAIC,aAAe,CACfH,QAASA,QACTI,OAAQL,QAAQM,KAChBC,YAAa,eAGbC,YAAcR,QAAQQ,YAEtBR,QAAQS,OAEoB,iBAAjBT,QAAQS,KACfL,aAAaM,KAAOV,QAAQS,MAE5BL,aAAaM,KAAOC,eAAeX,QAAQS,MAE3CD,YAAcA,aAAe,qDAIjCA,cAEAP,QAAQ,gBAAkBO,aAG9B,IAAII,IAAMZ,QAAQY,IAElB,GAAIZ,QAAQa,MAAO,CACf,IAAIC,YAAcH,eAAeX,QAAQa,OACrCC,cACAF,KAAO,IAAME,aAIrB,OAAKd,QAAQe,QAOjB,SAASC,iBAAiBJ,IAAKK,QAASC,WAIpC,OAFAC,QAAQC,MAAM,gCAAkCF,UAAY,UAAYN,KAEjE,IAAIS,SAAQ,SAAUC,QAASC,QAElC,IAAIR,QAAUS,WAAWD,OAAQL,YAEjCD,QAAUA,SAAW,IACbV,YAAc,cAEtBkB,MAAMb,IAAKK,SAASS,MAAK,SAAUC,UAC/BC,aAAab,SAEbI,QAAQC,MAAM,kDAAoDR,KAElEU,QAAQK,aACT,SAAUE,OAETD,aAAab,SAEbI,QAAQC,MAAM,kDAAoDR,KAElEW,eA1BDP,CAAiBJ,IAAKR,aAAcJ,QAAQe,SAHxCU,MAAMb,IAAKR,cAkC1B,SAASO,eAAemB,QAEpB,IAAIC,OAAS,GAEb,IAAK,IAAIC,OAAOF,OAAQ,CAEpB,IAAIG,MAAQH,OAAOE,KAEfC,MAAAA,OAAmD,KAAVA,OACzCF,OAAOG,KAAKC,mBAAmBH,KAAO,IAAMG,mBAAmBF,QAGvE,OAAOF,OAAOK,KAAK,KA8BvB,MAAO,CACHrC,gBAAiBA,gBACjBsC,KA7BJ,SAASA,KAAKrC,SACV,IAAKA,QACD,MAAM,IAAIsC,MAAM,0BAOpB,OAJAtC,QAAQC,QAAUD,QAAQC,SAAW,GAErCkB,QAAQC,MAAM,mBAAqBpB,QAAQY,KAEpCb,gBAAgBC,SAAS0B,MAAK,SAAUC,UAE3C,OADAR,QAAQC,MAAM,oBAAsBO,SAASY,OAAS,UAAYvC,QAAQY,KACtEe,SAASY,OAAS,IACO,SAArBvC,QAAQE,UAAkD,qBAA3BF,QAAQC,QAAQE,OACxCwB,SAASa,OACY,SAArBxC,QAAQE,UAAuG,KAA/EyB,SAAS1B,QAAQwC,IAAI,iBAAmB,IAAIC,cAAcC,QAAQ,SAClGhB,SAASiB,OAETjB,SAGJN,QAAQE,OAAOI,aAE3B,SAAUkB,KAET,MADA1B,QAAQU,MAAM,0BAA4B7B,QAAQY,KAC5CiC","file":"fetchhelper.js","sourcesContent":["define([], function () {\n    'use strict';\n\n    function getFetchPromise(request) {\n\n        var headers = request.headers || {};\n\n        if (request.dataType === 'json') {\n            headers.accept = 'application/json';\n        }\n\n        var fetchRequest = {\n            headers: headers,\n            method: request.type,\n            credentials: 'same-origin'\n        };\n\n        var contentType = request.contentType;\n\n        if (request.data) {\n\n            if (typeof request.data === 'string') {\n                fetchRequest.body = request.data;\n            } else {\n                fetchRequest.body = paramsToString(request.data);\n\n                contentType = contentType || 'application/x-www-form-urlencoded; charset=UTF-8';\n            }\n        }\n\n        if (contentType) {\n\n            headers['Content-Type'] = contentType;\n        }\n\n        var url = request.url;\n\n        if (request.query) {\n            var paramString = paramsToString(request.query);\n            if (paramString) {\n                url += '?' + paramString;\n            }\n        }\n\n        if (!request.timeout) {\n            return fetch(url, fetchRequest);\n        }\n\n        return fetchWithTimeout(url, fetchRequest, request.timeout);\n    }\n\n    function fetchWithTimeout(url, options, timeoutMs) {\n\n        console.debug('fetchWithTimeout: timeoutMs: ' + timeoutMs + ', url: ' + url);\n\n        return new Promise(function (resolve, reject) {\n\n            var timeout = setTimeout(reject, timeoutMs);\n\n            options = options || {};\n            options.credentials = 'same-origin';\n\n            fetch(url, options).then(function (response) {\n                clearTimeout(timeout);\n\n                console.debug('fetchWithTimeout: succeeded connecting to url: ' + url);\n\n                resolve(response);\n            }, function (error) {\n\n                clearTimeout(timeout);\n\n                console.debug('fetchWithTimeout: timed out connecting to url: ' + url);\n\n                reject();\n            });\n        });\n    }\n\n    function paramsToString(params) {\n\n        var values = [];\n\n        for (var key in params) {\n\n            var value = params[key];\n\n            if (value !== null && value !== undefined && value !== '') {\n                values.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(value));\n            }\n        }\n        return values.join('&');\n    }\n\n    function ajax(request) {\n        if (!request) {\n            throw new Error(\"Request cannot be null\");\n        }\n\n        request.headers = request.headers || {};\n\n        console.debug('requesting url: ' + request.url);\n\n        return getFetchPromise(request).then(function (response) {\n            console.debug('response status: ' + response.status + ', url: ' + request.url);\n            if (response.status < 400) {\n                if (request.dataType === 'json' || request.headers.accept === 'application/json') {\n                    return response.json();\n                } else if (request.dataType === 'text' || (response.headers.get('Content-Type') || '').toLowerCase().indexOf('text/') === 0) {\n                    return response.text();\n                } else {\n                    return response;\n                }\n            } else {\n                return Promise.reject(response);\n            }\n        }, function (err) {\n            console.error('request failed to url: ' + request.url);\n            throw err;\n        });\n    }\n    return {\n        getFetchPromise: getFetchPromise,\n        ajax: ajax\n    };\n});\n"]}