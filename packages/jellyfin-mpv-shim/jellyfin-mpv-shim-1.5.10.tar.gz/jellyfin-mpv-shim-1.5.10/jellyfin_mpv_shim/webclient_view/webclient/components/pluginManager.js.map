{"version":3,"sources":["components/pluginManager.js"],"names":["define","events","cacheParam","Date","getTime","PluginManager","this","pluginsList","prototype","loadPlugin","url","console","debug","instance","Promise","resolve","reject","require","pluginFactory","globalize","appRouter","plugin","filter","p","id","installUrl","urlLower","toLowerCase","indexOf","baseUrl","separatorIndex","Math","max","lastIndexOf","substring","paths","requirejs","config","waitSeconds","register","getRoutes","forEach","route","definePluginRoute","pluginManager","contentPath","mapPath","path","mapRoute","Emby","App","defineRoute","type","loadStrings","strings","getTranslations","name","packageName","then","obj","push","trigger","ofType","o","plugins","addCacheParam"],"mappings":"AAAA,aAAAA,OAAO,CAAC,WAAW,SAAUC,QAIzB,IAAIC,YAAa,IAAIC,MAAOC,UAkB5B,SAASC,gBAELC,KAAKC,YAAc,GA2HvB,OAxHAF,cAAcG,UAAUC,WAAa,SAAUC,KAE3CC,QAAQC,MAAM,mBAAqBF,KACnC,IAAIG,SAAWP,KAEf,OAAO,IAAIQ,SAAQ,SAAUC,QAASC,QAElCC,QAAQ,CAACP,IAAK,YAAa,cAAc,SAAUQ,cAAeC,UAAWC,WAEzE,IAAIC,OAAS,IAAIH,cAOjB,GAJeL,SAASN,YAAYe,QAAO,SAAUC,GACjD,OAAOA,EAAEC,KAAOH,OAAOG,MACxB,GAGCT,QAAQL,SADZ,CAKAW,OAAOI,WAAaf,IAEpB,IAAIgB,SAAWhB,IAAIiB,eACgB,IAA/BD,SAASE,QAAQ,WAAmD,IAAhCF,SAASE,QAAQ,YAAmD,IAA/BF,SAASE,QAAQ,UACjD,IAArClB,IAAIkB,QAAQR,UAAUS,aAEtBnB,IAAMU,UAAUS,UAAY,IAAMnB,KAI1C,IAAIoB,eAAiBC,KAAKC,IAAItB,IAAIuB,YAAY,KAAMvB,IAAIuB,YAAY,OACpEZ,OAAOQ,QAAUnB,IAAIwB,UAAU,EAAGJ,gBAElC,IAAIK,MAAQ,GACZA,MAAMd,OAAOG,IAAMH,OAAOQ,QAE1BO,UAAUC,OAAO,CACbC,YAAa,EACbH,MAAOA,QAGXtB,SAAS0B,SAASlB,QAEdA,OAAOmB,WACPnB,OAAOmB,YAAYC,SAAQ,SAAUC,QA1DrD,SAASC,kBAAkBC,cAAeF,MAAOrB,QAE7CqB,MAAMG,YAAcD,cAAcE,QAAQzB,OAAQqB,MAAMK,MACxDL,MAAMK,KAAOH,cAAcI,SAAS3B,OAAQqB,OAE5CO,KAAKC,IAAIC,YAAYT,MAAOrB,OAAOG,IAsDnBmB,CAAkB9B,SAAU6B,MAAOrB,WAIvB,SAAhBA,OAAO+B,KAGPrC,QAAQM,QA1ExB,SAASgC,YAAYhC,OAAQF,WACzB,IAAImC,QAAUjC,OAAOkC,gBAAkBlC,OAAOkC,kBAAoB,GAClE,OAAOpC,UAAUkC,YAAY,CACzBG,KAAMnC,OAAOG,IAAMH,OAAOoC,YAC1BH,QAASA,UAyEDD,CAAYhC,OAAQF,WAAWuC,MAAK,WAChC3C,QAAQM,UACTL,gBAUnBX,cAAcG,UAAU+B,SAAW,SAAUoB,KAEzCrD,KAAKC,YAAYqD,KAAKD,KACtB1D,OAAO4D,QAAQvD,KAAM,aAAc,CAACqD,OAGxCtD,cAAcG,UAAUsD,OAAS,SAAUV,MAEvC,OAAO9C,KAAKC,YAAYe,QAAO,SAAUyC,GACrC,OAAOA,EAAEX,OAASA,SAI1B/C,cAAcG,UAAUwD,QAAU,WAC9B,OAAO1D,KAAKC,aAGhBF,cAAcG,UAAUwC,SAAW,SAAU3B,OAAQqB,OAUjD,MARsB,iBAAXrB,SACPA,OAASf,KAAKC,YAAYe,QAAO,SAAUC,GACvC,OAAQA,EAAEC,IAAMD,EAAEkC,eAAiBpC,UACpC,IAKqC,KAF5CqB,MAAQA,MAAMK,MAAQL,OAEZf,cAAcC,QAAQ,QACrBc,MAGJ,YAAcrB,OAAOG,GAAK,IAAMkB,OAG3CrC,cAAcG,UAAUsC,QAAU,SAAUzB,OAAQ0B,KAAMkB,eAEhC,iBAAX5C,SACPA,OAASf,KAAKC,YAAYe,QAAO,SAAUC,GACvC,OAAQA,EAAEC,IAAMD,EAAEkC,eAAiBpC,UACpC,IAGP,IAAIX,IAAMW,OAAOQ,QAAU,IAAMkB,KAOjC,OALIkB,gBACAvD,MAA6B,IAAtBA,IAAIkB,QAAQ,KAAc,IAAM,IACvClB,KAAO,KAAOR,YAGXQ,KAGJ,IAAIL","file":"pluginManager.js","sourcesContent":["define(['events'], function (events) {\n    'use strict';\n\n    // TODO: replace with each plugin version\n    var cacheParam = new Date().getTime();\n\n    function loadStrings(plugin, globalize) {\n        var strings = plugin.getTranslations ? plugin.getTranslations() : [];\n        return globalize.loadStrings({\n            name: plugin.id || plugin.packageName,\n            strings: strings\n        });\n    }\n\n    function definePluginRoute(pluginManager, route, plugin) {\n\n        route.contentPath = pluginManager.mapPath(plugin, route.path);\n        route.path = pluginManager.mapRoute(plugin, route);\n\n        Emby.App.defineRoute(route, plugin.id);\n    }\n\n    function PluginManager() {\n\n        this.pluginsList = [];\n    }\n\n    PluginManager.prototype.loadPlugin = function (url) {\n\n        console.debug('Loading plugin: ' + url);\n        var instance = this;\n\n        return new Promise(function (resolve, reject) {\n\n            require([url, 'globalize', 'appRouter'], function (pluginFactory, globalize, appRouter) {\n\n                var plugin = new pluginFactory();\n\n                // See if it's already installed\n                var existing = instance.pluginsList.filter(function (p) {\n                    return p.id === plugin.id;\n                })[0];\n\n                if (existing) {\n                    resolve(url);\n                    return;\n                }\n\n                plugin.installUrl = url;\n\n                var urlLower = url.toLowerCase();\n                if (urlLower.indexOf('http:') === -1 && urlLower.indexOf('https:') === -1 && urlLower.indexOf('file:') === -1) {\n                    if (url.indexOf(appRouter.baseUrl()) !== 0) {\n\n                        url = appRouter.baseUrl() + '/' + url;\n                    }\n                }\n\n                var separatorIndex = Math.max(url.lastIndexOf('/'), url.lastIndexOf('\\\\'));\n                plugin.baseUrl = url.substring(0, separatorIndex);\n\n                var paths = {};\n                paths[plugin.id] = plugin.baseUrl;\n\n                requirejs.config({\n                    waitSeconds: 0,\n                    paths: paths\n                });\n\n                instance.register(plugin);\n\n                if (plugin.getRoutes) {\n                    plugin.getRoutes().forEach(function (route) {\n                        definePluginRoute(instance, route, plugin);\n                    });\n                }\n\n                if (plugin.type === 'skin') {\n\n                    // translations won't be loaded for skins until needed\n                    resolve(plugin);\n                } else {\n\n                    loadStrings(plugin, globalize).then(function () {\n                        resolve(plugin);\n                    }, reject);\n                }\n            });\n        });\n    };\n\n    // In lieu of automatic discovery, plugins will register dynamic objects\n    // Each object will have the following properties:\n    // name\n    // type (skin, screensaver, etc)\n    PluginManager.prototype.register = function (obj) {\n\n        this.pluginsList.push(obj);\n        events.trigger(this, 'registered', [obj]);\n    };\n\n    PluginManager.prototype.ofType = function (type) {\n\n        return this.pluginsList.filter(function (o) {\n            return o.type === type;\n        });\n    };\n\n    PluginManager.prototype.plugins = function () {\n        return this.pluginsList;\n    };\n\n    PluginManager.prototype.mapRoute = function (plugin, route) {\n\n        if (typeof plugin === 'string') {\n            plugin = this.pluginsList.filter(function (p) {\n                return (p.id || p.packageName) === plugin;\n            })[0];\n        }\n\n        route = route.path || route;\n\n        if (route.toLowerCase().indexOf('http') === 0) {\n            return route;\n        }\n\n        return '/plugins/' + plugin.id + '/' + route;\n    };\n\n    PluginManager.prototype.mapPath = function (plugin, path, addCacheParam) {\n\n        if (typeof plugin === 'string') {\n            plugin = this.pluginsList.filter(function (p) {\n                return (p.id || p.packageName) === plugin;\n            })[0];\n        }\n\n        var url = plugin.baseUrl + '/' + path;\n\n        if (addCacheParam) {\n            url += url.indexOf('?') === -1 ? '?' : '&';\n            url += 'v=' + cacheParam;\n        }\n\n        return url;\n    };\n\n    return new PluginManager();\n});\n"]}