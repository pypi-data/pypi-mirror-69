{"version":3,"sources":["components/playlisteditor/playlisteditor.js"],"names":["define","shell","dialogHelper","loading","layoutManager","playbackManager","connectionManager","userSettings","appRouter","globalize","currentServerId","onSubmit","e","panel","parentWithClass","elem","className","classList","contains","parentNode","this","playlistId","querySelector","value","apiClient","getApiClient","set","addToPlaylist","dlg","id","itemIds","queue","serverId","ids","split","submitted","close","show","url","getUrl","Ids","userId","getCurrentUserId","ajax","type","then","hide","createPlaylist","Name","dataType","result","Id","redirectToPlaylist","showItem","preventDefault","triggerChange","select","dispatchEvent","CustomEvent","initEditor","content","options","items","addEventListener","add","removeAttribute","remove","setAttribute","join","length","populatePlaylists","editorOptions","getItems","Recursive","IncludeItemTypes","SortBy","EnableTotalRecordCount","html","enableAddToPlayQueue","isPlaying","translate","Items","map","i","innerHTML","defaultValue","get","selectPlaylistToAddTo","centerFocus","horiz","on","require","scrollHelper","fn","PlaylistEditor","prototype","dialogOptions","removeOnClose","scrollY","tv","size","createDialog","getEditorHtml","autoFocus","open","Promise","resolve","reject"],"mappings":"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","file":"playlisteditor.js","sourcesContent":["define(['shell', 'dialogHelper', 'loading', 'layoutManager', 'playbackManager', 'connectionManager', 'userSettings', 'appRouter', 'globalize', 'emby-input', 'paper-icon-button-light', 'emby-select', 'material-icons', 'css!./../formdialog', 'emby-button'], function (shell, dialogHelper, loading, layoutManager, playbackManager, connectionManager, userSettings, appRouter, globalize) {\n    'use strict';\n\n    var currentServerId;\n\n    function parentWithClass(elem, className) {\n\n        while (!elem.classList || !elem.classList.contains(className)) {\n            elem = elem.parentNode;\n\n            if (!elem) {\n                return null;\n            }\n        }\n\n        return elem;\n    }\n\n    function onSubmit(e) {\n\n        var panel = parentWithClass(this, 'dialog');\n\n        var playlistId = panel.querySelector('#selectPlaylistToAddTo').value;\n        var apiClient = connectionManager.getApiClient(currentServerId);\n\n        if (playlistId) {\n            userSettings.set('playlisteditor-lastplaylistid', playlistId);\n            addToPlaylist(apiClient, panel, playlistId);\n        } else {\n            createPlaylist(apiClient, panel);\n        }\n\n        e.preventDefault();\n        return false;\n    }\n\n    function createPlaylist(apiClient, dlg) {\n\n        loading.show();\n\n        var url = apiClient.getUrl(\"Playlists\", {\n\n            Name: dlg.querySelector('#txtNewPlaylistName').value,\n            Ids: dlg.querySelector('.fldSelectedItemIds').value || '',\n            userId: apiClient.getCurrentUserId()\n\n        });\n\n        apiClient.ajax({\n            type: \"POST\",\n            url: url,\n            dataType: \"json\"\n\n        }).then(function (result) {\n\n            loading.hide();\n\n            var id = result.Id;\n            dlg.submitted = true;\n            dialogHelper.close(dlg);\n            redirectToPlaylist(apiClient, id);\n        });\n    }\n\n    function redirectToPlaylist(apiClient, id) {\n\n        appRouter.showItem(id, apiClient.serverId());\n    }\n\n    function addToPlaylist(apiClient, dlg, id) {\n\n        var itemIds = dlg.querySelector('.fldSelectedItemIds').value || '';\n\n        if (id === 'queue') {\n\n            playbackManager.queue({\n                serverId: apiClient.serverId(),\n                ids: itemIds.split(',')\n            });\n            dlg.submitted = true;\n            dialogHelper.close(dlg);\n            return;\n        }\n\n        loading.show();\n\n        var url = apiClient.getUrl(\"Playlists/\" + id + \"/Items\", {\n\n            Ids: itemIds,\n            userId: apiClient.getCurrentUserId()\n        });\n\n        apiClient.ajax({\n            type: \"POST\",\n            url: url\n\n        }).then(function () {\n\n            loading.hide();\n\n            dlg.submitted = true;\n            dialogHelper.close(dlg);\n        });\n    }\n\n    function triggerChange(select) {\n        select.dispatchEvent(new CustomEvent('change', {}));\n    }\n\n    function populatePlaylists(editorOptions, panel) {\n\n        var select = panel.querySelector('#selectPlaylistToAddTo');\n\n        loading.hide();\n\n        panel.querySelector('.newPlaylistInfo').classList.add('hide');\n\n        var options = {\n\n            Recursive: true,\n            IncludeItemTypes: \"Playlist\",\n            SortBy: 'SortName',\n            EnableTotalRecordCount: false\n        };\n\n        var apiClient = connectionManager.getApiClient(currentServerId);\n        apiClient.getItems(apiClient.getCurrentUserId(), options).then(function (result) {\n\n            var html = '';\n\n            if (editorOptions.enableAddToPlayQueue !== false && playbackManager.isPlaying()) {\n                html += '<option value=\"queue\">' + globalize.translate('AddToPlayQueue') + '</option>';\n            }\n\n            html += '<option value=\"\">' + globalize.translate('OptionNew') + '</option>';\n\n            html += result.Items.map(function (i) {\n\n                return '<option value=\"' + i.Id + '\">' + i.Name + '</option>';\n            });\n\n            select.innerHTML = html;\n\n            var defaultValue = editorOptions.defaultValue;\n            if (!defaultValue) {\n                defaultValue = userSettings.get('playlisteditor-lastplaylistid') || '';\n            }\n            select.value = defaultValue === 'new' ? '' : defaultValue;\n\n            // If the value is empty set it again, in case we tried to set a lastplaylistid that is no longer valid\n            if (!select.value) {\n                select.value = '';\n            }\n\n            triggerChange(select);\n\n            loading.hide();\n        });\n    }\n\n    function getEditorHtml(items) {\n\n        var html = '';\n\n        html += '<div class=\"formDialogContent smoothScrollY\" style=\"padding-top:2em;\">';\n        html += '<div class=\"dialogContentInner dialog-content-centered\">';\n        html += '<form style=\"margin:auto;\">';\n\n        html += '<div class=\"fldSelectPlaylist selectContainer\">';\n        var autoFocus = items.length ? ' autofocus' : '';\n        html += '<select is=\"emby-select\" id=\"selectPlaylistToAddTo\" label=\"' + globalize.translate('LabelPlaylist') + '\"' + autoFocus + '></select>';\n        html += '</div>';\n\n        html += '<div class=\"newPlaylistInfo\">';\n\n        html += '<div class=\"inputContainer\">';\n        autoFocus = items.length ? '' : ' autofocus';\n        html += '<input is=\"emby-input\" type=\"text\" id=\"txtNewPlaylistName\" required=\"required\" label=\"' + globalize.translate('LabelName') + '\"' + autoFocus + ' />';\n        html += '</div>';\n\n        // newPlaylistInfo\n        html += '</div>';\n\n        html += '<div class=\"formDialogFooter\">';\n        html += '<button is=\"emby-button\" type=\"submit\" class=\"raised btnSubmit block formDialogFooterItem button-submit\">' + globalize.translate('Add') + '</button>';\n        html += '</div>';\n\n        html += '<input type=\"hidden\" class=\"fldSelectedItemIds\" />';\n\n        html += '</form>';\n        html += '</div>';\n        html += '</div>';\n\n        return html;\n    }\n\n    function initEditor(content, options, items) {\n\n        content.querySelector('#selectPlaylistToAddTo').addEventListener('change', function () {\n            if (this.value) {\n                content.querySelector('.newPlaylistInfo').classList.add('hide');\n                content.querySelector('#txtNewPlaylistName').removeAttribute('required');\n            } else {\n                content.querySelector('.newPlaylistInfo').classList.remove('hide');\n                content.querySelector('#txtNewPlaylistName').setAttribute('required', 'required');\n            }\n        });\n\n        content.querySelector('form').addEventListener('submit', onSubmit);\n\n        content.querySelector('.fldSelectedItemIds', content).value = items.join(',');\n\n        if (items.length) {\n            content.querySelector('.fldSelectPlaylist').classList.remove('hide');\n            populatePlaylists(options, content);\n        } else {\n            content.querySelector('.fldSelectPlaylist').classList.add('hide');\n\n            var selectPlaylistToAddTo = content.querySelector('#selectPlaylistToAddTo');\n            selectPlaylistToAddTo.innerHTML = '';\n            selectPlaylistToAddTo.value = '';\n            triggerChange(selectPlaylistToAddTo);\n        }\n    }\n\n    function centerFocus(elem, horiz, on) {\n        require(['scrollHelper'], function (scrollHelper) {\n            var fn = on ? 'on' : 'off';\n            scrollHelper.centerFocus[fn](elem, horiz);\n        });\n    }\n\n    function PlaylistEditor() {\n\n    }\n\n    PlaylistEditor.prototype.show = function (options) {\n\n        var items = options.items || {};\n        currentServerId = options.serverId;\n\n        var dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        if (layoutManager.tv) {\n            dialogOptions.size = 'fullscreen';\n        } else {\n            dialogOptions.size = 'small';\n        }\n\n        var dlg = dialogHelper.createDialog(dialogOptions);\n\n        dlg.classList.add('formDialog');\n\n        var html = '';\n        var title = globalize.translate('HeaderAddToPlaylist');\n\n        html += '<div class=\"formDialogHeader\">';\n        html += '<button is=\"paper-icon-button-light\" class=\"btnCancel autoSize\" tabindex=\"-1\"><i class=\"material-icons arrow_back\"></i></button>';\n        html += '<h3 class=\"formDialogHeaderTitle\">';\n        html += title;\n        html += '</h3>';\n\n        html += '</div>';\n\n        html += getEditorHtml(items);\n\n        dlg.innerHTML = html;\n\n        initEditor(dlg, options, items);\n\n        dlg.querySelector('.btnCancel').addEventListener('click', function () {\n\n            dialogHelper.close(dlg);\n        });\n\n        if (layoutManager.tv) {\n            centerFocus(dlg.querySelector('.formDialogContent'), false, true);\n        }\n\n        return dialogHelper.open(dlg).then(function () {\n\n            if (layoutManager.tv) {\n                centerFocus(dlg.querySelector('.formDialogContent'), false, false);\n            }\n\n            if (dlg.submitted) {\n                return Promise.resolve();\n            }\n\n            return Promise.reject();\n        });\n    };\n\n    return PlaylistEditor;\n});\n"]}