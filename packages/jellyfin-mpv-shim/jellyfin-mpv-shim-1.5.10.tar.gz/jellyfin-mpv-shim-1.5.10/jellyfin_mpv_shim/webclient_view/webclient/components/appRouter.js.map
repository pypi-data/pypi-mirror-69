{"version":3,"sources":["components/appRouter.js"],"names":["define","loading","globalize","events","viewManager","layoutManager","skinManager","pluginManager","backdrop","browser","page","appSettings","appHost","connectionManager","currentViewLoadRequest","msgTimeout","forcedLogoutMsg","firstConnectionResult","isDummyBackToHome","appRouter","showLocalLogin","serverId","manualLogin","show","showSelectServer","showWelcome","showSettings","showNowPlaying","beginConnectionWizard","clear","connect","enableAutoLogin","then","result","handleConnectionResult","State","hide","loadUserSkin","ApiClient","getPublicUsers","users","length","Servers","Id","require","alert","text","translate","html","loadContentUrl","ctx","next","route","request","url","contentPath","querystring","path","indexOf","baseUrl","enableContentQueryString","loadContent","translateDocument","dictionary","view","loadView","currentRouteInfo","handled","handleRoute","authenticate","callback","firstResult","anonymous","apiClient","currentApiClient","pathname","toLowerCase","console","debug","isCurrentRouteStartup","startup","shouldExitApp","isBack","isDefaultRoute","isLoggedIn","supports","exit","loadUserSkinWithOptions","queryString","params","parse","start","roles","validateRoles","Promise","all","split","map","role","validateRole","getCurrentUser","user","Policy","IsAdministrator","resolve","reject","initRoute","onInitComplete","controllerFactory","sendRouteToViewManager","type","cancelCurrentLoadRequest","currentRequest","cancel","isBackNav","transition","state","fullscreen","options","supportsThemeMedia","enableMediaControl","autoFocus","onNewViewNeeded","tryRestoreView","catch","cancelled","controller","onForcedLogoutMessageTimeout","msg","onRequestFail","e","data","status","errorCode","showForcedLogoutMessage","clearTimeout","setTimeout","this","onBeforeExit","web0s","restorePreviousState","normalizeImageOptions","setQuality","scaleFactor","tv","maxWidth","Math","round","width","maxHeight","height","quality","slow","chrome","getMaxBandwidth","navigator","connection","max","downlinkMax","Number","POSITIVE_INFINITY","parseInt","getMaxBandwidthIOS","onApiClientCreated","newApiClient","iOS","off","on","initApiClient","onAppResume","ensureWebSocket","enableHistory","xboxOne","orsay","getRequestFile","self","location","index","lastIndexOf","substring","endsWith","str","srch","baseRoute","href","replace","popstateOccurred","window","addEventListener","resolveOnNextShow","startPages","current","document","backdropContainer","backgroundContainer","allRoutes","setBaseRoute","base","addRoute","newRoute","getHandler","push","param","name","results","RegExp","exec","getWindowLocationSearch","win","currentPath","search","decodeURIComponent","back","showDirect","initApiClients","getApiClients","forEach","click","hashbang","canGoBack","curr","querySelector","history","len","invokeShortcut","id","showItem","getRouteUrl","item","getApiClient","getItem","getCurrentUserId","arguments","setTransparency","level","documentElement","classList","add","externalBackdrop","remove","getRoutes","pushState","title","navigate","enableNativeHistory","handleAnchorClick","clickHandler","TransparencyLevel","None","Backdrop","Full"],"mappings":"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","file":"appRouter.js","sourcesContent":["define(['loading', 'globalize', 'events', 'viewManager', 'layoutManager', 'skinManager', 'pluginManager', 'backdrop', 'browser', 'page', 'appSettings', 'apphost', 'connectionManager'], function (loading, globalize, events, viewManager, layoutManager, skinManager, pluginManager, backdrop, browser, page, appSettings, appHost, connectionManager) {\n    'use strict';\n\n    var appRouter = {\n        showLocalLogin: function (serverId, manualLogin) {\n            var pageName = manualLogin ? 'manuallogin' : 'login';\n            show('/startup/' + pageName + '.html?serverid=' + serverId);\n        },\n        showSelectServer: function () {\n            show('/startup/selectserver.html');\n        },\n        showWelcome: function () {\n            show('/startup/welcome.html');\n        },\n        showSettings: function () {\n            show('/settings/settings.html');\n        },\n        showNowPlaying: function () {\n            show(\"/nowplaying.html\");\n        }\n    };\n\n    function beginConnectionWizard() {\n        backdrop.clear();\n        loading.show();\n        connectionManager.connect({\n            enableAutoLogin: appSettings.enableAutoLogin()\n        }).then(function (result) {\n            handleConnectionResult(result, loading);\n        });\n    }\n\n    function handleConnectionResult(result, loading) {\n        switch (result.State) {\n            case 'SignedIn':\n                loading.hide();\n                skinManager.loadUserSkin();\n                break;\n            case 'ServerSignIn':\n                result.ApiClient.getPublicUsers().then(function (users) {\n                    if (users.length) {\n                        appRouter.showLocalLogin(result.Servers[0].Id);\n                    } else {\n                        appRouter.showLocalLogin(result.Servers[0].Id, true);\n                    }\n                });\n                break;\n            case 'ServerSelection':\n                appRouter.showSelectServer();\n                break;\n            case 'ConnectSignIn':\n                appRouter.showWelcome();\n                break;\n            case 'ServerUpdateNeeded':\n                require(['alert'], function (alert) {\n                    alert({\n                        text: globalize.translate('ServerUpdateNeeded', 'https://github.com/jellyfin/jellyfin'),\n                        html: globalize.translate('ServerUpdateNeeded', '<a href=\"https://github.com/jellyfin/jellyfin\">https://github.com/jellyfin/jellyfin</a>')\n                    }).then(function () {\n                        appRouter.showSelectServer();\n                    });\n                });\n                break;\n            default:\n                break;\n        }\n    }\n\n    function loadContentUrl(ctx, next, route, request) {\n        var url;\n        if (route.contentPath && typeof (route.contentPath) === 'function') {\n            url = route.contentPath(ctx.querystring);\n        } else {\n            url = route.contentPath || route.path;\n        }\n\n        if (url.indexOf('://') === -1) {\n            // Put a slash at the beginning but make sure to avoid a double slash\n            if (url.indexOf('/') !== 0) {\n                url = '/' + url;\n            }\n\n            url = baseUrl() + url;\n        }\n\n        if (ctx.querystring && route.enableContentQueryString) {\n            url += '?' + ctx.querystring;\n        }\n\n        require(['text!' + url], function (html) {\n            loadContent(ctx, route, html, request);\n        });\n    }\n\n    function handleRoute(ctx, next, route) {\n        authenticate(ctx, route, function () {\n            initRoute(ctx, next, route);\n        });\n    }\n\n    function initRoute(ctx, next, route) {\n        var onInitComplete = function (controllerFactory) {\n            sendRouteToViewManager(ctx, next, route, controllerFactory);\n        };\n\n        if (route.controller) {\n            require(['controllers/' + route.controller], onInitComplete);\n        } else {\n            onInitComplete();\n        }\n    }\n\n    function cancelCurrentLoadRequest() {\n        var currentRequest = currentViewLoadRequest;\n        if (currentRequest) {\n            currentRequest.cancel = true;\n        }\n    }\n\n    var currentViewLoadRequest;\n    function sendRouteToViewManager(ctx, next, route, controllerFactory) {\n        if (isDummyBackToHome && route.type === 'home') {\n            isDummyBackToHome = false;\n            return;\n        }\n\n        cancelCurrentLoadRequest();\n        var isBackNav = ctx.isBack;\n\n        var currentRequest = {\n            url: baseUrl() + ctx.path,\n            transition: route.transition,\n            isBack: isBackNav,\n            state: ctx.state,\n            type: route.type,\n            fullscreen: route.fullscreen,\n            controllerFactory: controllerFactory,\n            options: {\n                supportsThemeMedia: route.supportsThemeMedia || false,\n                enableMediaControl: route.enableMediaControl !== false\n            },\n            autoFocus: route.autoFocus\n        };\n        currentViewLoadRequest = currentRequest;\n\n        var onNewViewNeeded = function () {\n            if (typeof route.path === 'string') {\n                loadContentUrl(ctx, next, route, currentRequest);\n            } else {\n                // ? TODO\n                next();\n            }\n        };\n\n        if (!isBackNav) {\n            // Don't force a new view for home due to the back menu\n            //if (route.type !== 'home') {\n            onNewViewNeeded();\n            return;\n            //}\n        }\n        viewManager.tryRestoreView(currentRequest, function () {\n\n            // done\n            currentRouteInfo = {\n                route: route,\n                path: ctx.path\n            };\n\n        }).catch(function (result) {\n            if (!result || !result.cancelled) {\n                onNewViewNeeded();\n            }\n        });\n    }\n\n    var msgTimeout;\n    var forcedLogoutMsg;\n    function onForcedLogoutMessageTimeout() {\n        var msg = forcedLogoutMsg;\n        forcedLogoutMsg = null;\n\n        if (msg) {\n            require(['alert'], function (alert) {\n                alert(msg);\n            });\n        }\n    }\n\n    function showForcedLogoutMessage(msg) {\n        forcedLogoutMsg = msg;\n        if (msgTimeout) {\n            clearTimeout(msgTimeout);\n        }\n\n        msgTimeout = setTimeout(onForcedLogoutMessageTimeout, 100);\n    }\n\n    function onRequestFail(e, data) {\n\n        var apiClient = this;\n\n        if (data.status === 401) {\n            if (data.errorCode === \"ParentalControl\") {\n\n                var isCurrentAllowed = currentRouteInfo ? (currentRouteInfo.route.anonymous || currentRouteInfo.route.startup) : true;\n\n                // Bounce to the login screen, but not if a password entry fails, obviously\n                if (!isCurrentAllowed) {\n                    showForcedLogoutMessage(globalize.translate('AccessRestrictedTryAgainLater'));\n                    appRouter.showLocalLogin(apiClient.serverId());\n                }\n\n            }\n        }\n    }\n\n    function onBeforeExit(e) {\n        if (browser.web0s) {\n            page.restorePreviousState();\n        }\n    }\n\n    function normalizeImageOptions(options) {\n        var scaleFactor = browser.tv ? 0.8 : 1;\n\n        var setQuality;\n        if (options.maxWidth) {\n            options.maxWidth = Math.round(options.maxWidth * scaleFactor);\n            setQuality = true;\n        }\n\n        if (options.width) {\n            options.width = Math.round(options.width * scaleFactor);\n            setQuality = true;\n        }\n\n        if (options.maxHeight) {\n            options.maxHeight = Math.round(options.maxHeight * scaleFactor);\n            setQuality = true;\n        }\n\n        if (options.height) {\n            options.height = Math.round(options.height * scaleFactor);\n            setQuality = true;\n        }\n\n        if (setQuality) {\n\n            var quality = 100;\n\n            var type = options.type || 'Primary';\n\n            if (browser.tv || browser.slow) {\n\n                if (browser.chrome) {\n                    // webp support\n                    quality = type === 'Primary' ? 40 : 50;\n                } else {\n                    quality = type === 'Backdrop' ? 60 : 50;\n                }\n            } else {\n                quality = type === 'Backdrop' ? 70 : 90;\n            }\n\n            options.quality = quality;\n        }\n    }\n\n    function getMaxBandwidth() {\n        if (navigator.connection) {\n            var max = navigator.connection.downlinkMax;\n            if (max && max > 0 && max < Number.POSITIVE_INFINITY) {\n\n                max /= 8;\n                max *= 1000000;\n                max *= 0.7;\n                max = parseInt(max);\n                return max;\n            }\n        }\n\n        return null;\n    }\n\n    function getMaxBandwidthIOS() {\n        return 800000;\n    }\n\n    function onApiClientCreated(e, newApiClient) {\n\n        newApiClient.normalizeImageOptions = normalizeImageOptions;\n\n        if (browser.iOS) {\n            newApiClient.getMaxBandwidth = getMaxBandwidthIOS;\n        } else {\n            newApiClient.getMaxBandwidth = getMaxBandwidth;\n        }\n\n        events.off(newApiClient, 'requestfail', onRequestFail);\n        events.on(newApiClient, 'requestfail', onRequestFail);\n    }\n\n    function initApiClient(apiClient) {\n\n        onApiClientCreated({}, apiClient);\n    }\n\n    function initApiClients() {\n\n        connectionManager.getApiClients().forEach(initApiClient);\n\n        events.on(connectionManager, 'apiclientcreated', onApiClientCreated);\n    }\n\n    function onAppResume() {\n        var apiClient = connectionManager.currentApiClient();\n\n        if (apiClient) {\n            apiClient.ensureWebSocket();\n        }\n    }\n\n    var firstConnectionResult;\n    function start(options) {\n\n        loading.show();\n\n        initApiClients();\n\n        events.on(appHost, 'beforeexit', onBeforeExit);\n        events.on(appHost, 'resume', onAppResume);\n\n        connectionManager.connect({\n            enableAutoLogin: appSettings.enableAutoLogin()\n\n        }).then(function (result) {\n\n            firstConnectionResult = result;\n\n            options = options || {};\n\n            page({\n                click: options.click !== false,\n                hashbang: options.hashbang !== false,\n                enableHistory: enableHistory()\n            });\n        }).catch().then(function() {\n            loading.hide();\n        });\n    }\n\n    function enableHistory() {\n\n        //if (browser.edgeUwp) {\n        //    return false;\n        //}\n\n        // shows status bar on navigation\n        if (browser.xboxOne) {\n            return false;\n        }\n\n        // Does not support history\n        if (browser.orsay) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function enableNativeHistory() {\n        return false;\n    }\n\n    function authenticate(ctx, route, callback) {\n\n        var firstResult = firstConnectionResult;\n        if (firstResult) {\n\n            firstConnectionResult = null;\n\n            if (firstResult.State !== 'SignedIn' && !route.anonymous) {\n\n                handleConnectionResult(firstResult, loading);\n                return;\n            }\n        }\n\n        var apiClient = connectionManager.currentApiClient();\n        var pathname = ctx.pathname.toLowerCase();\n\n        console.debug('appRouter - processing path request ' + pathname);\n\n        var isCurrentRouteStartup = currentRouteInfo ? currentRouteInfo.route.startup : true;\n        var shouldExitApp = ctx.isBack && route.isDefaultRoute && isCurrentRouteStartup;\n\n        if (!shouldExitApp && (!apiClient || !apiClient.isLoggedIn()) && !route.anonymous) {\n            console.debug('appRouter - route does not allow anonymous access, redirecting to login');\n            beginConnectionWizard();\n            return;\n        }\n\n        if (shouldExitApp) {\n            if (appHost.supports('exit')) {\n                appHost.exit();\n                return;\n            }\n            return;\n        }\n\n        if (apiClient && apiClient.isLoggedIn()) {\n\n            console.debug('appRouter - user is authenticated');\n\n            if (route.isDefaultRoute) {\n                console.debug('appRouter - loading skin home page');\n                loadUserSkinWithOptions(ctx);\n                return;\n            } else if (route.roles) {\n\n                validateRoles(apiClient, route.roles).then(function () {\n\n                    callback();\n\n                }, beginConnectionWizard);\n                return;\n            }\n        }\n\n        console.debug('appRouter - proceeding to ' + pathname);\n        callback();\n    }\n\n    function loadUserSkinWithOptions(ctx) {\n        require(['queryString'], function (queryString) {\n            var params = queryString.parse(ctx.querystring);\n            skinManager.loadUserSkin({\n                start: params.start\n            });\n        });\n    }\n\n    function validateRoles(apiClient, roles) {\n        return Promise.all(roles.split(',').map(function (role) {\n            return validateRole(apiClient, role);\n        }));\n    }\n\n    function validateRole(apiClient, role) {\n        if (role === 'admin') {\n            return apiClient.getCurrentUser().then(function (user) {\n                if (user.Policy.IsAdministrator) {\n                    return Promise.resolve();\n                }\n                return Promise.reject();\n            });\n        }\n\n        // Unknown role\n        return Promise.resolve();\n    }\n\n    var isHandlingBackToDefault;\n    var isDummyBackToHome;\n\n    function loadContent(ctx, route, html, request) {\n\n        html = globalize.translateDocument(html, route.dictionary);\n        request.view = html;\n\n        viewManager.loadView(request);\n\n        currentRouteInfo = {\n            route: route,\n            path: ctx.path\n        };\n\n        ctx.handled = true;\n    }\n\n    function getRequestFile() {\n        var path = self.location.pathname || '';\n\n        var index = path.lastIndexOf('/');\n        if (index !== -1) {\n            path = path.substring(index);\n        } else {\n            path = '/' + path;\n        }\n\n        if (!path || path === '/') {\n            path = '/index.html';\n        }\n\n        return path;\n    }\n\n    function endsWith(str, srch) {\n        return str.lastIndexOf(srch) === srch.length - 1;\n    }\n\n    var baseRoute = self.location.href.split('?')[0].replace(getRequestFile(), '');\n    // support hashbang\n    baseRoute = baseRoute.split('#')[0];\n    if (endsWith(baseRoute, '/') && !endsWith(baseRoute, '://')) {\n        baseRoute = baseRoute.substring(0, baseRoute.length - 1);\n    }\n\n    function baseUrl() {\n        return baseRoute;\n    }\n\n    var popstateOccurred = false;\n    window.addEventListener('popstate', function () {\n        popstateOccurred = true;\n    });\n\n    function getHandler(route) {\n        return function (ctx, next) {\n            ctx.isBack = popstateOccurred;\n            handleRoute(ctx, next, route);\n            popstateOccurred = false;\n        };\n    }\n\n    function getWindowLocationSearch(win) {\n\n        var currentPath = currentRouteInfo ? (currentRouteInfo.path || '') : '';\n\n        var index = currentPath.indexOf('?');\n        var search = '';\n\n        if (index !== -1) {\n            search = currentPath.substring(index);\n        }\n\n        return search || '';\n    }\n\n    function param(name, url) {\n        name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n        var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\n        var regex = new RegExp(regexS, \"i\");\n\n        var results = regex.exec(url || getWindowLocationSearch());\n        if (results == null) {\n            return \"\";\n        } else {\n            return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n        }\n    }\n\n    function back() {\n        page.back();\n    }\n\n    /**\n     * Pages of \"no return\" (when \"Go back\" should behave differently, probably quitting the application).\n     */\n    var startPages = ['home', 'login', 'selectserver'];\n\n    function canGoBack() {\n        var curr = current();\n        if (!curr) {\n            return false;\n        }\n\n        if (!document.querySelector('.dialogContainer') && startPages.indexOf(curr.type) !== -1) {\n            return false;\n        }\n        if (enableHistory()) {\n            return history.length > 1;\n        }\n        return (page.len || 0) > 0;\n    }\n\n    function showDirect(path) {\n        return new Promise(function(resolve, reject) {\n            resolveOnNextShow = resolve, page.show(baseUrl()+path)\n        })\n    }\n\n    function show(path, options) {\n        if (path.indexOf('/') !== 0 && path.indexOf('://') === -1) {\n            path = '/' + path;\n        }\n\n        var baseRoute = baseUrl();\n        path = path.replace(baseRoute, '');\n\n        if (currentRouteInfo && currentRouteInfo.path === path) {\n            // can't use this with home right now due to the back menu\n            if (currentRouteInfo.route.type !== 'home') {\n                loading.hide();\n                return Promise.resolve();\n            }\n        }\n\n        return new Promise(function (resolve, reject) {\n            resolveOnNextShow = resolve;\n            page.show(path, options);\n        });\n    }\n\n    var resolveOnNextShow;\n    document.addEventListener('viewshow', function () {\n        var resolve = resolveOnNextShow;\n        if (resolve) {\n            resolveOnNextShow = null;\n            resolve();\n        }\n    });\n\n    var currentRouteInfo;\n    function current() {\n        return currentRouteInfo ? currentRouteInfo.route : null;\n    }\n\n    function showItem(item, serverId, options) {\n        if (typeof (item) === 'string') {\n            var apiClient = serverId ? connectionManager.getApiClient(serverId) : connectionManager.currentApiClient();\n            apiClient.getItem(apiClient.getCurrentUserId(), item).then(function (item) {\n                appRouter.showItem(item, options);\n            });\n        } else {\n            if (arguments.length === 2) {\n                options = arguments[1];\n            }\n\n            var url = appRouter.getRouteUrl(item, options);\n            appRouter.show(url, {\n                item: item\n            });\n        }\n    }\n\n    var allRoutes = [];\n\n    function addRoute(path, newRoute) {\n        page(path, getHandler(newRoute));\n        allRoutes.push(newRoute);\n    }\n\n    function getRoutes() {\n        return allRoutes;\n    }\n\n    var backdropContainer;\n    var backgroundContainer;\n    function setTransparency(level) {\n        if (!backdropContainer) {\n            backdropContainer = document.querySelector('.backdropContainer');\n        }\n        if (!backgroundContainer) {\n            backgroundContainer = document.querySelector('.backgroundContainer');\n        }\n\n        if (level === 'full' || level === 2) {\n            backdrop.clear(true);\n            document.documentElement.classList.add('transparentDocument');\n            backgroundContainer.classList.add('backgroundContainer-transparent');\n            backdropContainer.classList.add('hide');\n        } else if (level === 'backdrop' || level === 1) {\n            backdrop.externalBackdrop(true);\n            document.documentElement.classList.add('transparentDocument');\n            backgroundContainer.classList.add('backgroundContainer-transparent');\n            backdropContainer.classList.add('hide');\n        } else {\n            backdrop.externalBackdrop(false);\n            document.documentElement.classList.remove('transparentDocument');\n            backgroundContainer.classList.remove('backgroundContainer-transparent');\n            backdropContainer.classList.remove('hide');\n        }\n    }\n\n    function pushState(state, title, url) {\n        state.navigate = false;\n        history.pushState(state, title, url);\n\n    }\n\n    function setBaseRoute() {\n        var baseRoute = self.location.pathname.replace(getRequestFile(), '');\n        if (baseRoute.lastIndexOf('/') === baseRoute.length - 1) {\n            baseRoute = baseRoute.substring(0, baseRoute.length - 1);\n        }\n\n        console.debug('setting page base to ' + baseRoute);\n        page.base(baseRoute);\n    }\n\n    setBaseRoute();\n\n    function invokeShortcut(id) {\n        if (id.indexOf('library-') === 0) {\n            id = id.replace('library-', '');\n            id = id.split('_');\n\n            appRouter.showItem(id[0], id[1]);\n        } else if (id.indexOf('item-') === 0) {\n            id = id.replace('item-', '');\n            id = id.split('_');\n\n            appRouter.showItem(id[0], id[1]);\n        } else {\n            id = id.split('_');\n            appRouter.show(appRouter.getRouteUrl(id[0], {\n                serverId: id[1]\n            }));\n        }\n    }\n\n    appRouter.addRoute = addRoute;\n    appRouter.param = param;\n    appRouter.back = back;\n    appRouter.show = show;\n    appRouter.showDirect = showDirect;\n    appRouter.start = start;\n    appRouter.baseUrl = baseUrl;\n    appRouter.canGoBack = canGoBack;\n    appRouter.current = current;\n    appRouter.beginConnectionWizard = beginConnectionWizard;\n    appRouter.invokeShortcut = invokeShortcut;\n    appRouter.showItem = showItem;\n    appRouter.setTransparency = setTransparency;\n    appRouter.getRoutes = getRoutes;\n    appRouter.pushState = pushState;\n    appRouter.enableNativeHistory = enableNativeHistory;\n    appRouter.handleAnchorClick = page.clickHandler;\n    appRouter.TransparencyLevel = {\n        None: 0,\n        Backdrop: 1,\n        Full: 2\n    };\n\n    return appRouter;\n});\n"]}