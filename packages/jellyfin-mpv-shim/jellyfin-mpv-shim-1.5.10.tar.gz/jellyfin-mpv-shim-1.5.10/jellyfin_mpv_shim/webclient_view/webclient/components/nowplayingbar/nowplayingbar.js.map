{"version":3,"sources":["components/nowplayingbar/nowplayingbar.js"],"names":["define","require","datetime","itemHelper","events","browser","imageLoader","layoutManager","playbackManager","nowPlayingHelper","appHost","dom","connectionManager","currentPlayer","currentTimeElement","nowPlayingImageElement","nowPlayingTextElement","nowPlayingUserData","muteButton","volumeSlider","volumeSliderContainer","playPauseButtons","positionSlider","toggleRepeatButton","toggleRepeatButtonIcon","isEnabled","nowPlayingBarElement","currentImgUrl","currentPlayerSupportedCommands","lastUpdateTime","lastPlayerState","currentRuntimeTicks","isVisibilityAllowed","onSlideDownComplete","this","classList","add","slideUp","elem","removeEventListener","whichTransitionEvent","once","remove","offsetWidth","onPlayPauseClick","playPause","showRemoteControl","appRouter","showNowPlaying","getNowPlayingBar","Promise","resolve","reject","appfooter","itemShortcuts","parentContainer","element","querySelector","insertAdjacentHTML","getNowPlayingBarHtml","html","safari","slow","on","bindEvents","i","length","volumeSliderTimer","addEventListener","toggleMute","stop","querySelectorAll","setVolume","clearTimeout","value","setVolumeDelayed","that","setTimeout","call","nextTrack","previousTrack","getRepeatMode","setRepeatMode","supports","newPercent","parseFloat","seekPercent","getBubbleText","NowPlayingItem","ticks","getDisplayRunningTime","e","parentWithTag","target","updatePlayPauseState","isPaused","innerHTML","updatePlayerStateInternal","event","state","player","showNowPlayingBar","hideNowPlayingBar","then","playerInfo","getPlayerInfo","playState","PlayState","IsPaused","supportedCommands","indexOf","updateRepeatModeDisplay","RepeatMode","updatePlayerVolumeState","IsMuted","VolumeLevel","dragging","disabled","CanSeek","isProgressClear","MediaSource","RunTimeTicks","setIsClear","nowPlayingItem","updateTimeDisplay","PositionTicks","getBufferedRanges","updateNowPlayingInfo","textLines","getNowPlayingNames","secondary","serverId","ServerId","map","nowPlayingName","cssClass","item","getTextActionButton","text","getDisplayName","Id","Type","MediaType","ChannelId","IsFolder","join","url","seriesImageUrl","options","Error","type","SeriesPrimaryImageTag","tag","getApiClient","getScaledImageUrl","SeriesId","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","height","imageUrl","ImageTags","PrimaryImageItemId","AlbumId","AlbumPrimaryImageTag","isRefreshing","lazyImage","style","backgroundImage","apiClient","getItem","getCurrentUserId","userData","UserData","likes","Likes","IsFavorite","repeatMode","positionTicks","runtimeTicks","bufferedRanges","pct","setBufferedRanges","timeText","isMuted","volumeLevel","showMuteButton","showVolumeSlider","isLocalPlayer","showButton","button","hideButton","onPlaybackStart","console","debug","onStateChanged","onRepeatModeChange","document","getElementsByClassName","slideDown","onPlaybackStopped","NextMediaType","onPlayPauseStateChanged","paused","tv","onTimeUpdate","now","Date","getTime","duration","currentTime","onVolumeChanged","getVolume","refreshFromPlayer","getPlayerState","bindToPlayer","releaseCurrentPlayer","off","getCurrentPlayer","detail","enableMediaControl"],"mappings":"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","file":"nowplayingbar.js","sourcesContent":["define(['require', 'datetime', 'itemHelper', 'events', 'browser', 'imageLoader', 'layoutManager', 'playbackManager', 'nowPlayingHelper', 'apphost', 'dom', 'connectionManager', 'paper-icon-button-light', 'emby-ratingbutton'], function (require, datetime, itemHelper, events, browser, imageLoader, layoutManager, playbackManager, nowPlayingHelper, appHost, dom, connectionManager) {\n    'use strict';\n\n    var currentPlayer;\n    var currentPlayerSupportedCommands = [];\n\n    var currentTimeElement;\n    var nowPlayingImageElement;\n    var nowPlayingTextElement;\n    var nowPlayingUserData;\n    var muteButton;\n    var volumeSlider;\n    var volumeSliderContainer;\n    var playPauseButtons;\n    var positionSlider;\n    var toggleRepeatButton;\n    var toggleRepeatButtonIcon;\n\n    var lastUpdateTime = 0;\n    var lastPlayerState = {};\n    var isEnabled;\n    var currentRuntimeTicks = 0;\n\n    var isVisibilityAllowed = true;\n\n    function getNowPlayingBarHtml() {\n\n        var html = '';\n\n        html += '<div class=\"nowPlayingBar hide nowPlayingBar-hidden\">';\n\n        html += '<div class=\"nowPlayingBarTop\">';\n        html += '<div class=\"nowPlayingBarPositionContainer sliderContainer\">';\n        html += '<input type=\"range\" is=\"emby-slider\" pin step=\".01\" min=\"0\" max=\"100\" value=\"0\" class=\"slider-medium-thumb nowPlayingBarPositionSlider\" data-slider-keep-progress=\"true\"/>';\n        html += '</div>';\n\n        html += '<div class=\"nowPlayingBarInfoContainer\">';\n        html += '<div class=\"nowPlayingImage\"></div>';\n        html += '<div class=\"nowPlayingBarText\"></div>';\n        html += '</div>';\n\n        // The onclicks are needed due to the return false above\n        html += '<div class=\"nowPlayingBarCenter\">';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"previousTrackButton mediaButton\"><i class=\"material-icons skip_previous\"></i></button>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"playPauseButton mediaButton\"><i class=\"material-icons\">pause</i></button>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"stopButton mediaButton\"><i class=\"material-icons\">stop</i></button>';\n        html += '<button is=\"paper-icon-button-light\" class=\"nextTrackButton mediaButton\"><i class=\"material-icons skip_next\"></i></button>';\n\n        html += '<div class=\"nowPlayingBarCurrentTime\"></div>';\n        html += '</div>';\n\n        html += '<div class=\"nowPlayingBarRight\">';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"muteButton mediaButton\"><i class=\"material-icons\"></i></button>';\n\n        html += '<div class=\"sliderContainer nowPlayingBarVolumeSliderContainer hide\" style=\"width:9em;vertical-align:middle;display:inline-flex;\">';\n        html += '<input type=\"range\" is=\"emby-slider\" pin step=\"1\" min=\"0\" max=\"100\" value=\"0\" class=\"slider-medium-thumb nowPlayingBarVolumeSlider\"/>';\n        html += '</div>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"toggleRepeatButton mediaButton\"><i class=\"material-icons\">repeat</i></button>';\n\n        html += '<div class=\"nowPlayingBarUserDataButtons\">';\n        html += '</div>';\n\n        html += '<button is=\"paper-icon-button-light\" class=\"playPauseButton mediaButton\"><i class=\"material-icons\">pause</i></button>';\n        html += '<button is=\"paper-icon-button-light\" class=\"remoteControlButton mediaButton\"><i class=\"material-icons playlist_play\"></i></button>';\n\n        html += '</div>';\n        html += '</div>';\n\n        html += '</div>';\n\n        return html;\n    }\n\n    function onSlideDownComplete() {\n\n        this.classList.add('hide');\n    }\n\n    function slideDown(elem) {\n\n        // trigger reflow\n        void elem.offsetWidth;\n\n        elem.classList.add('nowPlayingBar-hidden');\n\n        dom.addEventListener(elem, dom.whichTransitionEvent(), onSlideDownComplete, {\n            once: true\n        });\n    }\n\n    function slideUp(elem) {\n\n        dom.removeEventListener(elem, dom.whichTransitionEvent(), onSlideDownComplete, {\n            once: true\n        });\n\n        elem.classList.remove('hide');\n\n        // trigger reflow\n        void elem.offsetWidth;\n\n        elem.classList.remove('nowPlayingBar-hidden');\n    }\n\n    function onPlayPauseClick() {\n        playbackManager.playPause(currentPlayer);\n    }\n\n    function bindEvents(elem) {\n\n        currentTimeElement = elem.querySelector('.nowPlayingBarCurrentTime');\n        nowPlayingImageElement = elem.querySelector('.nowPlayingImage');\n        nowPlayingTextElement = elem.querySelector('.nowPlayingBarText');\n        nowPlayingUserData = elem.querySelector('.nowPlayingBarUserDataButtons');\n\n        muteButton = elem.querySelector('.muteButton');\n        muteButton.addEventListener('click', function () {\n\n            if (currentPlayer) {\n                playbackManager.toggleMute(currentPlayer);\n            }\n\n        });\n\n        elem.querySelector('.stopButton').addEventListener('click', function () {\n\n            if (currentPlayer) {\n                playbackManager.stop(currentPlayer);\n            }\n        });\n\n        var i;\n        var length;\n        playPauseButtons = elem.querySelectorAll('.playPauseButton');\n        for (i = 0, length = playPauseButtons.length; i < length; i++) {\n            playPauseButtons[i].addEventListener('click', onPlayPauseClick);\n        }\n\n        elem.querySelector('.nextTrackButton').addEventListener('click', function () {\n\n            if (currentPlayer) {\n                playbackManager.nextTrack(currentPlayer);\n            }\n        });\n\n        elem.querySelector('.previousTrackButton').addEventListener('click', function () {\n\n            if (currentPlayer) {\n                playbackManager.previousTrack(currentPlayer);\n            }\n        });\n\n        elem.querySelector('.remoteControlButton').addEventListener('click', showRemoteControl);\n\n        toggleRepeatButton = elem.querySelector('.toggleRepeatButton');\n        toggleRepeatButton.addEventListener('click', function () {\n\n            if (currentPlayer) {\n\n                switch (playbackManager.getRepeatMode(currentPlayer)) {\n                    case 'RepeatAll':\n                        playbackManager.setRepeatMode('RepeatOne', currentPlayer);\n                        break;\n                    case 'RepeatOne':\n                        playbackManager.setRepeatMode('RepeatNone', currentPlayer);\n                        break;\n                    default:\n                        playbackManager.setRepeatMode('RepeatAll', currentPlayer);\n                        break;\n                }\n            }\n        });\n\n        toggleRepeatButtonIcon = toggleRepeatButton.querySelector('i');\n\n        volumeSlider = elem.querySelector('.nowPlayingBarVolumeSlider');\n        volumeSliderContainer = elem.querySelector('.nowPlayingBarVolumeSliderContainer');\n\n        if (appHost.supports('physicalvolumecontrol')) {\n            volumeSliderContainer.classList.add('hide');\n        } else {\n            volumeSliderContainer.classList.remove('hide');\n        }\n\n        var volumeSliderTimer;\n\n        function setVolume() {\n            clearTimeout(volumeSliderTimer);\n            volumeSliderTimer = null;\n\n            if (currentPlayer) {\n                currentPlayer.setVolume(this.value);\n            }\n        }\n\n        function setVolumeDelayed() {\n            if (!volumeSliderTimer) {\n                var that = this;\n                volumeSliderTimer = setTimeout(function () {\n                    setVolume.call(that);\n                }, 700);\n            }\n        }\n\n        volumeSlider.addEventListener('change', setVolume);\n        volumeSlider.addEventListener('mousemove', setVolumeDelayed);\n        volumeSlider.addEventListener('touchmove', setVolumeDelayed);\n\n        positionSlider = elem.querySelector('.nowPlayingBarPositionSlider');\n        positionSlider.addEventListener('change', function () {\n\n            if (currentPlayer) {\n\n                var newPercent = parseFloat(this.value);\n\n                playbackManager.seekPercent(newPercent, currentPlayer);\n            }\n\n        });\n\n        positionSlider.getBubbleText = function (value) {\n\n            var state = lastPlayerState;\n\n            if (!state || !state.NowPlayingItem || !currentRuntimeTicks) {\n                return '--:--';\n            }\n\n            var ticks = currentRuntimeTicks;\n            ticks /= 100;\n            ticks *= value;\n\n            return datetime.getDisplayRunningTime(ticks);\n        };\n\n        elem.addEventListener('click', function (e) {\n\n            if (!dom.parentWithTag(e.target, ['BUTTON', 'INPUT', 'A'])) {\n                showRemoteControl(0);\n            }\n        });\n    }\n\n    function showRemoteControl() {\n\n        require(['appRouter'], function (appRouter) {\n            appRouter.showNowPlaying();\n        });\n    }\n\n    var nowPlayingBarElement;\n    function getNowPlayingBar() {\n\n        if (nowPlayingBarElement) {\n            return Promise.resolve(nowPlayingBarElement);\n        }\n\n        return new Promise(function (resolve, reject) {\n\n            require(['appFooter-shared', 'itemShortcuts', 'css!./nowplayingbar.css', 'emby-slider'], function (appfooter, itemShortcuts) {\n\n                var parentContainer = appfooter.element;\n                nowPlayingBarElement = parentContainer.querySelector('.nowPlayingBar');\n\n                if (nowPlayingBarElement) {\n                    resolve(nowPlayingBarElement);\n                    return;\n                }\n\n                parentContainer.insertAdjacentHTML('afterbegin', getNowPlayingBarHtml());\n                nowPlayingBarElement = parentContainer.querySelector('.nowPlayingBar');\n\n                if (browser.safari && browser.slow) {\n                    // Not handled well here. The wrong elements receive events, bar doesn't update quickly enough, etc.\n                    nowPlayingBarElement.classList.add('noMediaProgress');\n                }\n\n                itemShortcuts.on(nowPlayingBarElement);\n\n                bindEvents(nowPlayingBarElement);\n                resolve(nowPlayingBarElement);\n            });\n        });\n    }\n\n    function showButton(button) {\n        button.classList.remove('hide');\n    }\n\n    function hideButton(button) {\n        button.classList.add('hide');\n    }\n\n    function updatePlayPauseState(isPaused) {\n        var i;\n        var length;\n\n        if (playPauseButtons) {\n            if (isPaused) {\n\n                for (i = 0, length = playPauseButtons.length; i < length; i++) {\n                    playPauseButtons[i].querySelector('i').innerHTML = '&#xE037;';\n                }\n\n            } else {\n\n                for (i = 0, length = playPauseButtons.length; i < length; i++) {\n                    playPauseButtons[i].querySelector('i').innerHTML = 'pause';\n                }\n            }\n        }\n    }\n\n    function updatePlayerStateInternal(event, state, player) {\n\n        showNowPlayingBar();\n\n        lastPlayerState = state;\n\n        var playerInfo = playbackManager.getPlayerInfo();\n\n        var playState = state.PlayState || {};\n\n        updatePlayPauseState(playState.IsPaused);\n\n        var supportedCommands = playerInfo.supportedCommands;\n        currentPlayerSupportedCommands = supportedCommands;\n\n        if (supportedCommands.indexOf('SetRepeatMode') === -1) {\n            toggleRepeatButton.classList.add('hide');\n        } else {\n            toggleRepeatButton.classList.remove('hide');\n        }\n\n        updateRepeatModeDisplay(playState.RepeatMode);\n\n        updatePlayerVolumeState(playState.IsMuted, playState.VolumeLevel);\n\n        if (positionSlider && !positionSlider.dragging) {\n            positionSlider.disabled = !playState.CanSeek;\n\n            // determines if both forward and backward buffer progress will be visible\n            var isProgressClear = state.MediaSource && state.MediaSource.RunTimeTicks == null;\n            positionSlider.setIsClear(isProgressClear);\n        }\n\n        var nowPlayingItem = state.NowPlayingItem || {};\n        updateTimeDisplay(playState.PositionTicks, nowPlayingItem.RunTimeTicks, playbackManager.getBufferedRanges(player));\n\n        updateNowPlayingInfo(state);\n    }\n\n    function updateRepeatModeDisplay(repeatMode) {\n\n        if (repeatMode === 'RepeatAll') {\n            toggleRepeatButtonIcon.innerHTML = \"repeat\";\n            toggleRepeatButton.classList.add('repeatButton-active');\n        } else if (repeatMode === 'RepeatOne') {\n            toggleRepeatButtonIcon.innerHTML = \"repeat_one\";\n            toggleRepeatButton.classList.add('repeatButton-active');\n        } else {\n            toggleRepeatButtonIcon.innerHTML = \"repeat\";\n            toggleRepeatButton.classList.remove('repeatButton-active');\n        }\n    }\n\n    function updateTimeDisplay(positionTicks, runtimeTicks, bufferedRanges) {\n\n        // See bindEvents for why this is necessary\n        if (positionSlider && !positionSlider.dragging) {\n            if (runtimeTicks) {\n\n                var pct = positionTicks / runtimeTicks;\n                pct *= 100;\n\n                positionSlider.value = pct;\n\n            } else {\n\n                positionSlider.value = 0;\n            }\n        }\n\n        if (positionSlider) {\n            positionSlider.setBufferedRanges(bufferedRanges, runtimeTicks, positionTicks);\n        }\n\n        if (currentTimeElement) {\n\n            var timeText = positionTicks == null ? '--:--' : datetime.getDisplayRunningTime(positionTicks);\n\n            if (runtimeTicks) {\n                timeText += \" / \" + datetime.getDisplayRunningTime(runtimeTicks);\n            }\n\n            currentTimeElement.innerHTML = timeText;\n        }\n    }\n\n    function updatePlayerVolumeState(isMuted, volumeLevel) {\n\n        var supportedCommands = currentPlayerSupportedCommands;\n\n        var showMuteButton = true;\n        var showVolumeSlider = true;\n\n        if (supportedCommands.indexOf('ToggleMute') === -1) {\n            showMuteButton = false;\n        }\n\n        if (isMuted) {\n            muteButton.querySelector('i').innerHTML = '&#xE04F;';\n        } else {\n            muteButton.querySelector('i').innerHTML = '&#xE050;';\n        }\n\n        if (supportedCommands.indexOf('SetVolume') === -1) {\n            showVolumeSlider = false;\n        }\n\n        if (currentPlayer.isLocalPlayer && appHost.supports('physicalvolumecontrol')) {\n            showMuteButton = false;\n            showVolumeSlider = false;\n        }\n\n        if (showMuteButton) {\n            showButton(muteButton);\n        } else {\n            hideButton(muteButton);\n        }\n\n        // See bindEvents for why this is necessary\n        if (volumeSlider) {\n\n            if (showVolumeSlider) {\n                volumeSliderContainer.classList.remove('hide');\n            } else {\n                volumeSliderContainer.classList.add('hide');\n            }\n\n            if (!volumeSlider.dragging) {\n                volumeSlider.value = volumeLevel || 0;\n            }\n        }\n    }\n\n    function getTextActionButton(item, text, serverId) {\n\n        if (!text) {\n            text = itemHelper.getDisplayName(item);\n        }\n\n        var html = '<button data-id=\"' + item.Id + '\" data-serverid=\"' + (item.ServerId || serverId) + '\" data-type=\"' + item.Type + '\" data-mediatype=\"' + item.MediaType + '\" data-channelid=\"' + item.ChannelId + '\" data-isfolder=\"' + item.IsFolder + '\" type=\"button\" class=\"itemAction textActionButton\" data-action=\"link\">';\n        html += text;\n        html += '</button>';\n\n        return html;\n    }\n\n    function seriesImageUrl(item, options) {\n\n        if (!item) {\n            throw new Error('item cannot be null!');\n        }\n\n        if (item.Type !== 'Episode') {\n            return null;\n        }\n\n        options = options || {};\n        options.type = options.type || \"Primary\";\n\n        if (options.type === 'Primary') {\n\n            if (item.SeriesPrimaryImageTag) {\n\n                options.tag = item.SeriesPrimaryImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n        }\n\n        if (options.type === 'Thumb') {\n\n            if (item.SeriesThumbImageTag) {\n\n                options.tag = item.SeriesThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n            if (item.ParentThumbImageTag) {\n\n                options.tag = item.ParentThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n            }\n        }\n\n        return null;\n    }\n\n    function imageUrl(item, options) {\n\n        if (!item) {\n            throw new Error('item cannot be null!');\n        }\n\n        options = options || {};\n        options.type = options.type || \"Primary\";\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n\n            options.tag = item.ImageTags[options.type];\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.PrimaryImageItemId || item.Id, options);\n        }\n\n        if (item.AlbumId && item.AlbumPrimaryImageTag) {\n\n            options.tag = item.AlbumPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n        }\n\n        return null;\n    }\n\n    var currentImgUrl;\n    function updateNowPlayingInfo(state) {\n\n        var nowPlayingItem = state.NowPlayingItem;\n\n        var textLines = nowPlayingItem ? nowPlayingHelper.getNowPlayingNames(nowPlayingItem) : [];\n        if (textLines.length > 1) {\n            textLines[1].secondary = true;\n        }\n        var serverId = nowPlayingItem ? nowPlayingItem.ServerId : null;\n        nowPlayingTextElement.innerHTML = textLines.map(function (nowPlayingName) {\n\n            var cssClass = nowPlayingName.secondary ? ' class=\"nowPlayingBarSecondaryText\"' : '';\n\n            if (nowPlayingName.item) {\n                return '<div' + cssClass + '>' + getTextActionButton(nowPlayingName.item, nowPlayingName.text, serverId) + '</div>';\n            }\n\n            return '<div' + cssClass + '>' + nowPlayingName.text + '</div>';\n\n        }).join('');\n\n        var imgHeight = 70;\n\n        var url = nowPlayingItem ? (seriesImageUrl(nowPlayingItem, {\n            height: imgHeight\n        }) || imageUrl(nowPlayingItem, {\n            height: imgHeight\n        })) : null;\n\n        var isRefreshing = false;\n\n        if (url !== currentImgUrl) {\n            currentImgUrl = url;\n            isRefreshing = true;\n\n            if (url) {\n                imageLoader.lazyImage(nowPlayingImageElement, url);\n            } else {\n                nowPlayingImageElement.style.backgroundImage = '';\n            }\n        }\n\n        if (nowPlayingItem.Id) {\n            if (isRefreshing) {\n\n                var apiClient = connectionManager.getApiClient(nowPlayingItem.ServerId);\n\n                apiClient.getItem(apiClient.getCurrentUserId(), nowPlayingItem.Id).then(function (item) {\n\n                    var userData = item.UserData || {};\n                    var likes = userData.Likes == null ? '' : userData.Likes;\n\n                    nowPlayingUserData.innerHTML = '<button is=\"emby-ratingbutton\" type=\"button\" class=\"listItemButton mediaButton paper-icon-button-light\" data-id=\"' + item.Id + '\" data-serverid=\"' + item.ServerId + '\" data-itemtype=\"' + item.Type + '\" data-likes=\"' + likes + '\" data-isfavorite=\"' + (userData.IsFavorite) + '\"><i class=\"material-icons\">favorite</i></button>';\n                });\n\n            }\n        } else {\n            nowPlayingUserData.innerHTML = '';\n        }\n    }\n\n    function onPlaybackStart(e, state) {\n        console.debug('nowplaying event: ' + e.type);\n\n        var player = this;\n\n        onStateChanged.call(player, e, state);\n    }\n\n    function onRepeatModeChange(e) {\n\n        if (!isEnabled) {\n            return;\n        }\n\n        var player = this;\n\n        updateRepeatModeDisplay(playbackManager.getRepeatMode(player));\n    }\n\n    function showNowPlayingBar() {\n\n        if (!isVisibilityAllowed) {\n            hideNowPlayingBar();\n            return;\n        }\n\n        getNowPlayingBar().then(slideUp);\n    }\n\n    function hideNowPlayingBar() {\n\n        isEnabled = false;\n\n        // Use a timeout to prevent the bar from hiding and showing quickly\n        // in the event of a stop->play command\n\n        // Don't call getNowPlayingBar here because we don't want to end up creating it just to hide it\n        var elem = document.getElementsByClassName('nowPlayingBar')[0];\n        if (elem) {\n\n            slideDown(elem);\n        }\n    }\n\n    function onPlaybackStopped(e, state) {\n\n        console.debug('nowplaying event: ' + e.type);\n        var player = this;\n\n        if (player.isLocalPlayer) {\n            if (state.NextMediaType !== 'Audio') {\n                hideNowPlayingBar();\n            }\n        } else {\n            if (!state.NextMediaType) {\n                hideNowPlayingBar();\n            }\n        }\n    }\n\n    function onPlayPauseStateChanged(e) {\n\n        if (!isEnabled) {\n            return;\n        }\n\n        var player = this;\n        updatePlayPauseState(player.paused());\n    }\n\n    function onStateChanged(event, state) {\n\n        console.debug('nowplaying event: ' + event.type);\n        var player = this;\n\n        if (!state.NowPlayingItem || layoutManager.tv) {\n            hideNowPlayingBar();\n            return;\n        }\n\n        if (player.isLocalPlayer && state.NowPlayingItem && state.NowPlayingItem.MediaType === 'Video') {\n            hideNowPlayingBar();\n            return;\n        }\n\n        isEnabled = true;\n\n        if (nowPlayingBarElement) {\n            updatePlayerStateInternal(event, state, player);\n            return;\n        }\n\n        getNowPlayingBar().then(function () {\n            updatePlayerStateInternal(event, state, player);\n        });\n    }\n\n    function onTimeUpdate(e) {\n\n        if (!isEnabled) {\n            return;\n        }\n\n        // Try to avoid hammering the document with changes\n        var now = new Date().getTime();\n        if ((now - lastUpdateTime) < 700) {\n\n            return;\n        }\n        lastUpdateTime = now;\n\n        var player = this;\n        currentRuntimeTicks = playbackManager.duration(player);\n        updateTimeDisplay(playbackManager.currentTime(player), currentRuntimeTicks, playbackManager.getBufferedRanges(player));\n    }\n\n    function releaseCurrentPlayer() {\n\n        var player = currentPlayer;\n\n        if (player) {\n            events.off(player, 'playbackstart', onPlaybackStart);\n            events.off(player, 'statechange', onPlaybackStart);\n            events.off(player, 'repeatmodechange', onRepeatModeChange);\n            events.off(player, 'playbackstop', onPlaybackStopped);\n            events.off(player, 'volumechange', onVolumeChanged);\n            events.off(player, 'pause', onPlayPauseStateChanged);\n            events.off(player, 'unpause', onPlayPauseStateChanged);\n            events.off(player, 'timeupdate', onTimeUpdate);\n\n            currentPlayer = null;\n            hideNowPlayingBar();\n        }\n    }\n\n    function onVolumeChanged(e) {\n\n        if (!isEnabled) {\n            return;\n        }\n\n        var player = this;\n\n        updatePlayerVolumeState(player.isMuted(), player.getVolume());\n    }\n\n    function refreshFromPlayer(player) {\n\n        var state = playbackManager.getPlayerState(player);\n\n        onStateChanged.call(player, { type: 'init' }, state);\n    }\n\n    function bindToPlayer(player) {\n\n        if (player === currentPlayer) {\n            return;\n        }\n\n        releaseCurrentPlayer();\n\n        currentPlayer = player;\n\n        if (!player) {\n            return;\n        }\n\n        refreshFromPlayer(player);\n\n        events.on(player, 'playbackstart', onPlaybackStart);\n        events.on(player, 'statechange', onPlaybackStart);\n        events.on(player, 'repeatmodechange', onRepeatModeChange);\n        events.on(player, 'playbackstop', onPlaybackStopped);\n        events.on(player, 'volumechange', onVolumeChanged);\n        events.on(player, 'pause', onPlayPauseStateChanged);\n        events.on(player, 'unpause', onPlayPauseStateChanged);\n        events.on(player, 'timeupdate', onTimeUpdate);\n    }\n\n    events.on(playbackManager, 'playerchange', function () {\n        bindToPlayer(playbackManager.getCurrentPlayer());\n    });\n\n    bindToPlayer(playbackManager.getCurrentPlayer());\n\n    document.addEventListener('viewbeforeshow', function (e) {\n\n        if (!e.detail.options.enableMediaControl) {\n\n            if (isVisibilityAllowed) {\n                isVisibilityAllowed = false;\n                hideNowPlayingBar();\n            }\n\n        } else if (!isVisibilityAllowed) {\n\n            isVisibilityAllowed = true;\n            if (currentPlayer) {\n                refreshFromPlayer(currentPlayer);\n            } else {\n                hideNowPlayingBar();\n            }\n        }\n    });\n});\n"]}