{"version":3,"sources":["components/serverRestartDialog.js"],"names":["define","loading","events","dialogHelper","dom","layoutManager","scrollHelper","globalize","require","currentApiClient","currentDlg","currentInstance","reloadPageWhenServerAvailable","retryCount","apiClient","getJSON","getUrl","then","info","IsShuttingDown","retryReload","restarted","close","setTimeout","showDialog","instance","options","template","dialogOptions","removeOnClose","scrollY","enableTvLayout","tv","size","dlg","createDialog","configuredButtons","classList","add","innerHTML","translateHtml","i","length","formDialogContent","querySelector","style","centerFocus","on","maxWidth","Math","min","getWindowSize","innerWidth","translate","html","item","autoFocus","buttonClass","type","id","name","onButtonClick","buttons","querySelectorAll","addEventListener","dlgPromise","open","startRestart","restartServer","off","destroy","hide","trigger","ServerRestartDialog","this","prototype","show","Promise","resolve","reject"],"mappings":"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","file":"serverRestartDialog.js","sourcesContent":["define(['loading', 'events', 'dialogHelper', 'dom', 'layoutManager', 'scrollHelper', 'globalize', 'require', 'material-icons', 'emby-button', 'paper-icon-button-light', 'emby-input', 'formDialogStyle', 'flexStyles'], function (loading, events, dialogHelper, dom, layoutManager, scrollHelper, globalize, require) {\n    'use strict';\n\n    var currentApiClient;\n    var currentDlg;\n    var currentInstance;\n\n    function reloadPageWhenServerAvailable(retryCount) {\n        var apiClient = currentApiClient;\n        if (!apiClient) {\n            return;\n        }\n\n        // Don't use apiclient method because we don't want it reporting authentication under the old version\n        apiClient.getJSON(apiClient.getUrl(\"System/Info\")).then(function (info) {\n\n            // If this is back to false, the restart completed\n            if (!info.IsShuttingDown) {\n                currentInstance.restarted = true;\n                dialogHelper.close(currentDlg);\n            } else {\n                retryReload(retryCount);\n            }\n\n        }, function () {\n            retryReload(retryCount);\n        });\n    }\n\n    function retryReload(retryCount) {\n        setTimeout(function () {\n            retryCount = retryCount || 0;\n            retryCount++;\n\n            if (retryCount < 150) {\n                reloadPageWhenServerAvailable(retryCount);\n            }\n        }, 500);\n    }\n\n    function startRestart(instance, apiClient, dlg) {\n        currentApiClient = apiClient;\n        currentDlg = dlg;\n        currentInstance = instance;\n\n        apiClient.restartServer().then(function () {\n            setTimeout(reloadPageWhenServerAvailable, 250);\n        });\n    }\n\n    function showDialog(instance, options, template) {\n\n        var dialogOptions = {\n            removeOnClose: true,\n            scrollY: false\n        };\n\n        var enableTvLayout = layoutManager.tv;\n\n        if (enableTvLayout) {\n            dialogOptions.size = 'fullscreen';\n        }\n\n        var dlg = dialogHelper.createDialog(dialogOptions);\n\n        var configuredButtons = [];\n\n        dlg.classList.add('formDialog');\n\n        dlg.innerHTML = globalize.translateHtml(template, 'core');\n\n        dlg.classList.add('align-items-center');\n        dlg.classList.add('justify-items-center');\n\n        var formDialogContent = dlg.querySelector('.formDialogContent');\n        formDialogContent.style['flex-grow'] = 'initial';\n\n        if (enableTvLayout) {\n            formDialogContent.style['max-width'] = '50%';\n            formDialogContent.style['max-height'] = '60%';\n            scrollHelper.centerFocus.on(formDialogContent, false);\n        } else {\n            formDialogContent.style.maxWidth = (Math.min((configuredButtons.length * 150) + 200, dom.getWindowSize().innerWidth - 50)) + 'px';\n            dlg.classList.add('dialog-fullscreen-lowres');\n        }\n\n        dlg.querySelector('.formDialogHeaderTitle').innerHTML = globalize.translate('HeaderRestartingServer');\n\n        dlg.querySelector('.text').innerHTML = globalize.translate('RestartPleaseWaitMessage');\n\n        var i;\n        var length;\n        var html = '';\n        for (i = 0, length = configuredButtons.length; i < length; i++) {\n            var item = configuredButtons[i];\n            var autoFocus = i === 0 ? ' autofocus' : '';\n            var buttonClass = 'btnOption raised formDialogFooterItem formDialogFooterItem-autosize';\n\n            if (item.type) {\n                buttonClass += ' button-' + item.type;\n            }\n            html += '<button is=\"emby-button\" type=\"button\" class=\"' + buttonClass + '\" data-id=\"' + item.id + '\"' + autoFocus + '>' + item.name + '</button>';\n        }\n\n        dlg.querySelector('.formDialogFooter').innerHTML = html;\n\n        function onButtonClick() {\n            dialogHelper.close(dlg);\n        }\n\n        var buttons = dlg.querySelectorAll('.btnOption');\n        for (i = 0, length = buttons.length; i < length; i++) {\n            buttons[i].addEventListener('click', onButtonClick);\n        }\n\n        var dlgPromise = dialogHelper.open(dlg);\n\n        startRestart(instance, options.apiClient, dlg);\n\n        return dlgPromise.then(function () {\n\n            if (enableTvLayout) {\n                scrollHelper.centerFocus.off(dlg.querySelector('.formDialogContent'), false);\n            }\n\n            instance.destroy();\n            loading.hide();\n\n            if (instance.restarted) {\n                events.trigger(instance, 'restarted');\n            }\n        });\n    }\n\n    function ServerRestartDialog(options) {\n        this.options = options;\n    }\n\n    ServerRestartDialog.prototype.show = function () {\n        var instance = this;\n        loading.show();\n\n        return new Promise(function (resolve, reject) {\n            require(['text!./../dialog/dialog.template.html'], function (template) {\n                showDialog(instance, instance.options, template).then(resolve, reject);\n            });\n        });\n    };\n\n    ServerRestartDialog.prototype.destroy = function () {\n        currentApiClient = null;\n        currentDlg = null;\n        currentInstance = null;\n        this.options = null;\n    };\n\n    return ServerRestartDialog;\n});\n"]}