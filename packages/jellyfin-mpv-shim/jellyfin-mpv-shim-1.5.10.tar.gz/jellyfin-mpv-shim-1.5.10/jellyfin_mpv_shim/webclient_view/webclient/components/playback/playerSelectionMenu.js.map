{"version":3,"sources":["components/playback/playerSelectionMenu.js"],"names":["define","appSettings","events","browser","loading","playbackManager","appRouter","globalize","appHost","mirrorIfEnabled","info","enableDisplayMirroring","getPlayerInfo","isLocalPlayer","supportedCommands","indexOf","mirrorItem","player","item","displayContent","ItemName","Name","ItemId","Id","ItemType","Type","Context","context","getCurrentPlayer","emptyCallback","getIcon","target","deviceType","tv","mobile","onMirrorChange","this","checked","document","addEventListener","e","detail","state","ServerId","on","name","show","hide","showPlayerSelection","button","currentPlayerInfo","currentPlayerId","id","getTargets","then","targets","menuItems","map","t","appName","selected","secondaryText","user","icon","require","actionsheet","menuOptions","title","translate","items","positionTo","resolveOnClick","border","chrome","supports","enableHistory","filter","trySetActivePlayer","playerName","showActivePlayerMenu","playerInfo","dialogHelper","showActivePlayerMenuInternal","html","dialogOptions","removeOnClose","dlg","createDialog","classList","add","currentDeviceName","deviceName","checkedHtml","innerHTML","chkMirror","querySelector","destination","btnRemoteControl","close","open","showNowPlaying","disconnectFromPlayer","getSupportedCommands","dialog","push","buttons","text","endSession","setDefaultPlayerActive"],"mappings":"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","file":"playerSelectionMenu.js","sourcesContent":["define(['appSettings', 'events', 'browser', 'loading', 'playbackManager', 'appRouter', 'globalize', 'apphost'], function (appSettings, events, browser, loading, playbackManager, appRouter, globalize, appHost) {\n    'use strict';\n\n    function mirrorItem(info, player) {\n\n        var item = info.item;\n\n        playbackManager.displayContent({\n\n            ItemName: item.Name,\n            ItemId: item.Id,\n            ItemType: item.Type,\n            Context: info.context\n        }, player);\n    }\n\n    function mirrorIfEnabled(info) {\n\n        if (info && playbackManager.enableDisplayMirroring()) {\n\n            var getPlayerInfo = playbackManager.getPlayerInfo();\n\n            if (getPlayerInfo) {\n                if (!getPlayerInfo.isLocalPlayer && getPlayerInfo.supportedCommands.indexOf('DisplayContent') !== -1) {\n                    mirrorItem(info, playbackManager.getCurrentPlayer());\n                }\n            }\n        }\n    }\n\n    function emptyCallback() {\n        // avoid console logs about uncaught promises\n    }\n\n    function getTargetSecondaryText(target) {\n\n        if (target.user) {\n\n            return target.user.Name;\n        }\n\n        return null;\n    }\n\n    function getIcon(target) {\n\n        var deviceType = target.deviceType;\n\n        if (!deviceType && target.isLocalPlayer) {\n            if (browser.tv) {\n                deviceType = 'tv';\n            } else if (browser.mobile) {\n                deviceType = 'smartphone';\n            } else {\n                deviceType = 'desktop';\n            }\n        }\n\n        if (!deviceType) {\n            deviceType = 'tv';\n        }\n\n        switch (deviceType) {\n\n            case 'smartphone':\n                return 'smartphone';\n            case 'tablet':\n                return 'tablet';\n            case 'tv':\n                return 'tv';\n            case 'cast':\n                return 'cast';\n            case 'desktop':\n                return 'computer';\n            default:\n                return 'tv';\n        }\n    }\n\n    function showPlayerSelection(button) {\n\n        var currentPlayerInfo = playbackManager.getPlayerInfo();\n\n        if (currentPlayerInfo) {\n            if (!currentPlayerInfo.isLocalPlayer) {\n                showActivePlayerMenu(currentPlayerInfo);\n                return;\n            }\n        }\n\n        var currentPlayerId = currentPlayerInfo ? currentPlayerInfo.id : null;\n\n        loading.show();\n\n        playbackManager.getTargets().then(function (targets) {\n\n            var menuItems = targets.map(function (t) {\n\n                var name = t.name;\n\n                if (t.appName && t.appName !== t.name) {\n                    name += \" - \" + t.appName;\n                }\n\n                return {\n                    name: name,\n                    id: t.id,\n                    selected: currentPlayerId === t.id,\n                    secondaryText: getTargetSecondaryText(t),\n                    icon: getIcon(t)\n                };\n\n            });\n\n            require(['actionsheet'], function (actionsheet) {\n\n                loading.hide();\n\n                var menuOptions = {\n                    title: globalize.translate('HeaderPlayOn'),\n                    items: menuItems,\n                    positionTo: button,\n\n                    resolveOnClick: true,\n                    border: true\n                };\n\n                // Unfortunately we can't allow the url to change or chromecast will throw a security error\n                // Might be able to solve this in the future by moving the dialogs to hashbangs\n                if (!(!browser.chrome || appHost.supports('castmenuhashchange'))) {\n                    menuOptions.enableHistory = false;\n                }\n\n                actionsheet.show(menuOptions).then(function (id) {\n\n                    var target = targets.filter(function (t) {\n                        return t.id === id;\n                    })[0];\n\n                    playbackManager.trySetActivePlayer(target.playerName, target);\n\n                    mirrorIfEnabled();\n\n                }, emptyCallback);\n            });\n        });\n    }\n\n    function showActivePlayerMenu(playerInfo) {\n\n        require(['dialogHelper', 'dialog', 'emby-checkbox', 'emby-button'], function (dialogHelper) {\n            showActivePlayerMenuInternal(dialogHelper, playerInfo);\n        });\n    }\n\n    function disconnectFromPlayer(currentDeviceName) {\n\n        if (playbackManager.getSupportedCommands().indexOf('EndSession') !== -1) {\n\n            require(['dialog'], function (dialog) {\n\n                var menuItems = [];\n\n                menuItems.push({\n                    name: globalize.translate('Yes'),\n                    id: 'yes'\n                });\n                menuItems.push({\n                    name: globalize.translate('No'),\n                    id: 'no'\n                });\n\n                dialog({\n                    buttons: menuItems,\n                    //positionTo: positionTo,\n                    text: globalize.translate('ConfirmEndPlayerSession', currentDeviceName)\n\n                }).then(function (id) {\n                    switch (id) {\n\n                        case 'yes':\n                            playbackManager.getCurrentPlayer().endSession();\n                            playbackManager.setDefaultPlayerActive();\n                            break;\n                        case 'no':\n                            playbackManager.setDefaultPlayerActive();\n                            break;\n                        default:\n                            break;\n                    }\n                });\n\n            });\n\n        } else {\n\n            playbackManager.setDefaultPlayerActive();\n        }\n    }\n\n    function showActivePlayerMenuInternal(dialogHelper, playerInfo) {\n\n        var html = '';\n\n        var dialogOptions = {\n            removeOnClose: true\n        };\n\n        dialogOptions.modal = false;\n        dialogOptions.entryAnimationDuration = 160;\n        dialogOptions.exitAnimationDuration = 160;\n        dialogOptions.autoFocus = false;\n\n        var dlg = dialogHelper.createDialog(dialogOptions);\n\n        dlg.classList.add('promptDialog');\n\n        var currentDeviceName = (playerInfo.deviceName || playerInfo.name);\n\n        html += '<div class=\"promptDialogContent\" style=\"padding:1.5em;\">';\n        html += '<h2 style=\"margin-top:.5em;\">';\n        html += currentDeviceName;\n        html += '</h2>';\n\n        html += '<div>';\n\n        if (playerInfo.supportedCommands.indexOf('DisplayContent') !== -1) {\n\n            html += '<label class=\"checkboxContainer\">';\n            var checkedHtml = playbackManager.enableDisplayMirroring() ? ' checked' : '';\n            html += '<input type=\"checkbox\" is=\"emby-checkbox\" class=\"chkMirror\"' + checkedHtml + '/>';\n            html += '<span>' + globalize.translate('EnableDisplayMirroring') + '</span>';\n            html += '</label>';\n        }\n\n        html += '</div>';\n\n        html += '<div style=\"margin-top:1em;display:flex;justify-content: flex-end;\">';\n\n        html += '<button is=\"emby-button\" type=\"button\" class=\"button-flat btnRemoteControl promptDialogButton\">' + globalize.translate('HeaderRemoteControl') + '</button>';\n        html += '<button is=\"emby-button\" type=\"button\" class=\"button-flat btnDisconnect promptDialogButton \">' + globalize.translate('Disconnect') + '</button>';\n        html += '<button is=\"emby-button\" type=\"button\" class=\"button-flat btnCancel promptDialogButton\">' + globalize.translate('ButtonCancel') + '</button>';\n        html += '</div>';\n\n        html += '</div>';\n        dlg.innerHTML = html;\n\n        var chkMirror = dlg.querySelector('.chkMirror');\n\n        if (chkMirror) {\n            chkMirror.addEventListener('change', onMirrorChange);\n        }\n\n        var destination = '';\n\n        var btnRemoteControl = dlg.querySelector('.btnRemoteControl');\n        if (btnRemoteControl) {\n            btnRemoteControl.addEventListener('click', function () {\n                destination = 'nowplaying';\n                dialogHelper.close(dlg);\n            });\n        }\n\n        dlg.querySelector('.btnDisconnect').addEventListener('click', function () {\n            destination = 'disconnectFromPlayer';\n            dialogHelper.close(dlg);\n        });\n\n        dlg.querySelector('.btnCancel').addEventListener('click', function () {\n            dialogHelper.close(dlg);\n        });\n\n        dialogHelper.open(dlg).then(function () {\n            if (destination === 'nowplaying') {\n                appRouter.showNowPlaying();\n            } else if (destination === 'disconnectFromPlayer') {\n                disconnectFromPlayer(currentDeviceName);\n            }\n        }, emptyCallback);\n    }\n\n    function onMirrorChange() {\n        playbackManager.enableDisplayMirroring(this.checked);\n    }\n\n    document.addEventListener('viewshow', function (e) {\n\n        var state = e.detail.state || {};\n        var item = state.item;\n\n        if (item && item.ServerId) {\n            mirrorIfEnabled({\n                item: item\n            });\n            return;\n        }\n    });\n\n    events.on(appSettings, 'change', function (e, name) {\n        if (name === 'displaymirror') {\n            mirrorIfEnabled();\n        }\n    });\n\n    events.on(playbackManager, 'pairing', function (e) {\n        loading.show();\n    });\n\n    events.on(playbackManager, 'paired', function (e) {\n        loading.hide();\n    });\n\n    events.on(playbackManager, 'pairerror', function (e) {\n        loading.hide();\n    });\n\n    return {\n        show: showPlayerSelection\n    };\n});\n"]}