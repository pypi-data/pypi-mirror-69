{"version":3,"sources":["scripts/playlists.js"],"names":["define","loading","listView","cardBuilder","libraryMenu","libraryBrowser","appHost","imageLoader","view","params","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","StartIndex","Limit","getSavedView","ParentId","getTopParentId","loadSavedQueryValues","savedQueryKey","onViewStyleChange","viewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","showLoadingMessage","show","getQuery","promise1","ApiClient","getItems","Dashboard","getCurrentUserId","promise2","getCurrentUser","Promise","all","then","responses","result","window","scrollTo","html","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","viewButton","showLimit","updatePageSizeSetting","addLayoutButton","layouts","currentLayout","getListViewHtml","items","Items","sortBy","getCardsHtml","shape","coverImage","showTitle","cardLayout","centerText","preferThumb","overlayPlayButton","elem","lazyChildren","btnNextPage","addEventListener","btnPreviousPage","btnChangeLayout","e","layout","detail","saveViewSetting","saveQueryValues","hideLoadingMessage","hide","require","playlistEditor","serverId","serverInfo","Id"],"mappings":"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","file":"playlists.js","sourcesContent":["define([\"loading\", \"listView\", \"cardBuilder\", \"libraryMenu\", \"libraryBrowser\", \"apphost\", \"imageLoader\", \"emby-itemscontainer\"], function (loading, listView, cardBuilder, libraryMenu, libraryBrowser, appHost, imageLoader) {\n    \"use strict\";\n\n    return function (view, params) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: \"SortName\",\n                        SortOrder: \"Ascending\",\n                        IncludeItemTypes: \"Playlist\",\n                        Recursive: true,\n                        Fields: \"PrimaryImageAspectRatio,SortName,CumulativeRunTimeTicks,CanDelete\",\n                        StartIndex: 0,\n                        Limit: 100\n                    },\n                    view: libraryBrowser.getSavedView(key) || \"Poster\"\n                };\n                pageData.query.ParentId = libraryMenu.getTopParentId();\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey();\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function showLoadingMessage() {\n            loading.show();\n        }\n\n        function hideLoadingMessage() {\n            loading.hide();\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = getPageData(view).view;\n            var itemsContainer = view.querySelector(\".itemsContainer\");\n\n            if (\"List\" == viewStyle) {\n                itemsContainer.classList.add(\"vertical-list\");\n                itemsContainer.classList.remove(\"vertical-wrap\");\n            } else {\n                itemsContainer.classList.remove(\"vertical-list\");\n                itemsContainer.classList.add(\"vertical-wrap\");\n            }\n\n            itemsContainer.innerHTML = \"\";\n        }\n\n        function reloadItems() {\n            showLoadingMessage();\n            var query = getQuery(view);\n            var promise1 = ApiClient.getItems(Dashboard.getCurrentUserId(), query);\n            var promise2 = Dashboard.getCurrentUser();\n            Promise.all([promise1, promise2]).then(function (responses) {\n                var result = responses[0];\n                responses[1];\n                window.scrollTo(0, 0);\n                var html = \"\";\n                var viewStyle = getPageData(view).view;\n                view.querySelector(\".listTopPaging\").innerHTML = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    viewButton: false,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: true,\n                    layouts: \"List,Poster,PosterCard,Thumb,ThumbCard\",\n                    currentLayout: viewStyle\n                });\n\n                if (result.TotalRecordCount) {\n                    if (viewStyle == \"List\") {\n                        html = listView.getListViewHtml({\n                            items: result.Items,\n                            sortBy: query.SortBy\n                        });\n                    } else if (viewStyle == \"PosterCard\") {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: \"square\",\n                            coverImage: true,\n                            showTitle: true,\n                            cardLayout: true\n                        });\n                    } else if (viewStyle == \"Thumb\") {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: \"backdrop\",\n                            showTitle: true,\n                            centerText: true,\n                            preferThumb: true,\n                            overlayPlayButton: true\n                        });\n                    } else if (viewStyle == \"ThumbCard\") {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: \"backdrop\",\n                            showTitle: true,\n                            preferThumb: true,\n                            cardLayout: true\n                        });\n                    } else {\n                        html = cardBuilder.getCardsHtml({\n                            items: result.Items,\n                            shape: \"square\",\n                            showTitle: true,\n                            coverImage: true,\n                            centerText: true,\n                            overlayPlayButton: true\n                        });\n                    }\n                    view.querySelector(\".noItemsMessage\").classList.add(\"hide\");\n                } else {\n                    view.querySelector(\".noItemsMessage\").classList.remove(\"hide\");\n                }\n\n                var elem = view.querySelector(\".itemsContainer\");\n                elem.innerHTML = html;\n                imageLoader.lazyChildren(elem);\n                var btnNextPage = view.querySelector(\".btnNextPage\");\n\n                if (btnNextPage) {\n                    btnNextPage.addEventListener(\"click\", function () {\n                        query.StartIndex += query.Limit;\n                        reloadItems();\n                    });\n                }\n\n                var btnPreviousPage = view.querySelector(\".btnPreviousPage\");\n\n                if (btnPreviousPage) {\n                    btnPreviousPage.addEventListener(\"click\", function () {\n                        query.StartIndex -= query.Limit;\n                        reloadItems();\n                    });\n                }\n\n                var btnChangeLayout = view.querySelector(\".btnChangeLayout\");\n\n                if (btnChangeLayout) {\n                    btnChangeLayout.addEventListener(\"layoutchange\", function (e) {\n                        var layout = e.detail.viewStyle;\n                        getPageData(view).view = layout;\n                        libraryBrowser.saveViewSetting(getSavedQueryKey(view), layout);\n                        onViewStyleChange();\n                        reloadItems();\n                    });\n                }\n\n                libraryBrowser.saveQueryValues(getSavedQueryKey(view), query);\n                hideLoadingMessage();\n            });\n        }\n\n        var data = {};\n        view.addEventListener(\"viewbeforeshow\", function () {\n            reloadItems();\n        });\n        view.querySelector(\".btnNewPlaylist\").addEventListener(\"click\", function () {\n            require([\"playlistEditor\"], function (playlistEditor) {\n                var serverId = ApiClient.serverInfo().Id;\n                new playlistEditor().show({\n                    items: [],\n                    serverId: serverId\n                });\n            });\n        });\n        onViewStyleChange();\n    };\n});\n"]}