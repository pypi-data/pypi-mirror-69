{"version":3,"sources":["libraries/apiclient/sync/mediasync.js"],"names":["define","localassetmanager","processDownloadStatus","apiClient","serverInfo","options","console","debug","resyncTransfers","then","getServerItems","Id","items","p","Promise","resolve","cnt","filter","item","SyncStatus","forEach","reportTransfer","toString","getItemFileSize","LocalPath","size","reportSyncJobItemTransferred","SyncJobItemId","addOrUpdateLocalItem","error","isDownloadFileInQueue","result","removeLocalItem","err2","reportOfflineActions","getUserActions","actions","length","deleteUserActions","err","syncData","completedItems","request","TargetId","deviceId","LocalItemIds","map","xitem","ItemId","afterSyncData","syncDataResult","ItemIdsToRemove","itemId","serverId","getLocalItem","removeObsoleteContainerItems","getNewMedia","downloadCount","getReadySyncItems","jobItems","currentCount","jobItem","getNewItem","libraryItem","Item","ServerId","existingItem","enableBackgroundCompletion","CanDelete","CanDownload","SupportsSync","People","Chapters","Studios","SpecialFeatureCount","LocalTrailerCount","RemoteTrailers","localItem","createLocalItem","downloadMedia","url","getUrl","api_key","accessToken","ensureLocalPathParts","LocalPathParts","parts","getDirectoryPath","push","getLocalFileName","OriginalFileName","downloadFile","path","localPath","MediaSources","i","mediaSource","Path","Protocol","afterMediaDownloaded","getImages","mainImageTag","ImageTags","Primary","downloadImage","logoImageTag","Logo","artImageTag","Art","bannerImageTag","Banner","thumbImageTag","Thumb","BackdropImageTags","SeriesId","SeriesPrimaryImageTag","SeriesThumbImageTag","SeasonId","SeasonPrimaryImageTag","AlbumId","AlbumPrimaryImageTag","ParentThumbItemId","ParentThumbImageTag","ParentPrimaryImageItemId","ParentPrimaryImageTag","downloadParentItems","downloadItem","seasonItem","getSubtitles","files","AdditionalFiles","f","Type","file","getItemSubtitle","subtitleStream","MediaStreams","m","Index","Name","fileName","getSubtitleSaveFileName","Language","IsForced","Codec","downloadSubtitles","subtitleResult","DeliveryMethod","isComplete","reject","getItem","getCurrentUserId","downloadedItem","ParentBackdropImageTags","ParentArtImageTag","ParentLogoImageTag","imageTag","imageType","index","hasImage","maxWidth","imageUrl","getScaledImageUrl","tag","type","checkLocalFileExistence","checkFileExistence","completedItem","fileExists","exists","webWorkerBaseUrl","indexOf","this","sync","getDownloadItemCount","syncCheckProgressOnly"],"mappings":"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","file":"mediasync.js","sourcesContent":["define([\"localassetmanager\"], function(localassetmanager) {\n    \"use strict\";\n\n    function processDownloadStatus(apiClient, serverInfo, options) {\n        return console.debug(\"mediasync: begin processDownloadStatus\"), localassetmanager.resyncTransfers().then(function() {\n            return localassetmanager.getServerItems(serverInfo.Id).then(function(items) {\n                console.debug(\"mediasync: begin processDownloadStatus getServerItems completed\");\n                var p = Promise.resolve(),\n                    cnt = 0;\n                return items.filter(function(item) {\n                    return \"transferring\" === item.SyncStatus || \"queued\" === item.SyncStatus\n                }).forEach(function(item) {\n                    p = p.then(function() {\n                        return reportTransfer(apiClient, item)\n                    }), cnt++\n                }), p.then(function() {\n                    console.debug(\"mediasync: exit processDownloadStatus\");\n                    console.debug(\"items reported: \" + cnt.toString());\n                    return Promise.resolve();\n                })\n            })\n        })\n    }\n\n    function reportTransfer(apiClient, item) {\n        return localassetmanager.getItemFileSize(item.LocalPath).then(function(size) {\n            return size > 0 ? apiClient.reportSyncJobItemTransferred(item.SyncJobItemId).then(function() {\n                return item.SyncStatus = \"synced\", console.debug(\"mediasync: reportSyncJobItemTransferred called for \" + item.LocalPath), localassetmanager.addOrUpdateLocalItem(item)\n            }, function(error) {\n                return console.error(\"mediasync: mediasync error on reportSyncJobItemTransferred\", error), item.SyncStatus = \"error\", localassetmanager.addOrUpdateLocalItem(item)\n            }) : localassetmanager.isDownloadFileInQueue(item.LocalPath).then(function(result) {\n                return result ? Promise.resolve() : (console.debug(\"mediasync: reportTransfer: Size is 0 and download no longer in queue. Deleting item.\"), localassetmanager.removeLocalItem(item).then(function() {\n                    return console.debug(\"mediasync: reportTransfer: Item deleted.\"), Promise.resolve()\n                }, function(err2) {\n                    return console.debug(\"mediasync: reportTransfer: Failed to delete item.\", err2), Promise.resolve()\n                }))\n            })\n        }, function(error) {\n            return console.error(\"mediasync: reportTransfer: error on getItemFileSize. Deleting item.\", error), localassetmanager.removeLocalItem(item).then(function() {\n                return console.debug(\"mediasync: reportTransfer: Item deleted.\"), Promise.resolve()\n            }, function(err2) {\n                return console.error(\"mediasync: reportTransfer: Failed to delete item.\", err2), Promise.resolve()\n            })\n        })\n    }\n\n    function reportOfflineActions(apiClient, serverInfo) {\n        return console.debug(\"mediasync: begin reportOfflineActions\"), localassetmanager.getUserActions(serverInfo.Id).then(function(actions) {\n            return actions.length ? apiClient.reportOfflineActions(actions).then(function() {\n                return localassetmanager.deleteUserActions(actions).then(function() {\n                    return console.debug(\"mediasync: exit reportOfflineActions (actions reported and deleted.)\"), Promise.resolve()\n                })\n            }, function(err) {\n                return console.error(\"mediasync: error on apiClient.reportOfflineActions: \" + err.toString()), localassetmanager.deleteUserActions(actions)\n            }) : (console.debug(\"mediasync: exit reportOfflineActions (no actions)\"), Promise.resolve())\n        })\n    }\n\n    function syncData(apiClient, serverInfo) {\n        return console.debug(\"mediasync: begin syncData\"), localassetmanager.getServerItems(serverInfo.Id).then(function(items) {\n            var completedItems = items.filter(function(item) {\n                    return item && (\"synced\" === item.SyncStatus || \"error\" === item.SyncStatus)\n                }),\n                request = {\n                    TargetId: apiClient.deviceId(),\n                    LocalItemIds: completedItems.map(function(xitem) {\n                        return xitem.ItemId\n                    })\n                };\n            return apiClient.syncData(request).then(function(result) {\n                return afterSyncData(apiClient, serverInfo, result).then(function() {\n                    return console.debug(\"mediasync: exit syncData\"), Promise.resolve()\n                }, function(err) {\n                    return console.error(\"mediasync: error in syncData: \" + err.toString()), Promise.resolve()\n                })\n            })\n        })\n    }\n\n    function afterSyncData(apiClient, serverInfo, syncDataResult) {\n        console.debug(\"mediasync: begin afterSyncData\");\n        var p = Promise.resolve();\n        return syncDataResult.ItemIdsToRemove && syncDataResult.ItemIdsToRemove.length > 0 && syncDataResult.ItemIdsToRemove.forEach(function(itemId) {\n            p = p.then(function() {\n                return removeLocalItem(itemId, serverInfo.Id)\n            })\n        }), p = p.then(function() {\n            return removeObsoleteContainerItems(serverInfo.Id)\n        }), p.then(function() {\n            return console.debug(\"mediasync: exit afterSyncData\"), Promise.resolve()\n        })\n    }\n\n    function removeObsoleteContainerItems(serverId) {\n        return console.debug(\"mediasync: begin removeObsoleteContainerItems\"), localassetmanager.removeObsoleteContainerItems(serverId)\n    }\n\n    function removeLocalItem(itemId, serverId) {\n        return console.debug(\"mediasync: begin removeLocalItem\"), localassetmanager.getLocalItem(serverId, itemId).then(function(item) {\n            return item ? localassetmanager.removeLocalItem(item) : Promise.resolve()\n        }, function(err2) {\n            return console.error(\"mediasync: removeLocalItem: Failed: \", err2), Promise.resolve()\n        })\n    }\n\n    function getNewMedia(apiClient, downloadCount) {\n        return console.debug(\"mediasync: begin getNewMedia\"), apiClient.getReadySyncItems(apiClient.deviceId()).then(function(jobItems) {\n            console.debug(\"mediasync: getReadySyncItems returned \" + jobItems.length + \" items\");\n            var p = Promise.resolve(),\n                currentCount = downloadCount;\n            return jobItems.forEach(function(jobItem) {\n                currentCount++ <= 10 && (p = p.then(function() {\n                    return getNewItem(jobItem, apiClient)\n                }))\n            }), p.then(function() {\n                return console.debug(\"mediasync: exit getNewMedia\"), Promise.resolve()\n            })\n        }, function(err) {\n            return console.error(\"mediasync: getReadySyncItems: Failed: \", err), Promise.resolve()\n        })\n    }\n\n    function afterMediaDownloaded(apiClient, jobItem, localItem) {\n        return console.debug(\"mediasync: begin afterMediaDownloaded\"), getImages(apiClient, jobItem, localItem).then(function() {\n            var libraryItem = jobItem.Item;\n            return downloadParentItems(apiClient, jobItem, libraryItem).then(function() {\n                return getSubtitles(apiClient, jobItem, localItem)\n            })\n        })\n    }\n\n    function createLocalItem(libraryItem, jobItem) {\n        console.debug(\"localassetmanager: begin createLocalItem\");\n        var item = {\n            Item: libraryItem,\n            ItemId: libraryItem.Id,\n            ServerId: libraryItem.ServerId,\n            Id: libraryItem.Id\n        };\n        return jobItem && (item.SyncJobItemId = jobItem.SyncJobItemId), console.debug(\"localassetmanager: end createLocalItem\"), item\n    }\n\n    function getNewItem(jobItem, apiClient) {\n        console.debug(\"mediasync: begin getNewItem\");\n        var libraryItem = jobItem.Item;\n        return localassetmanager.getLocalItem(libraryItem.ServerId, libraryItem.Id).then(function(existingItem) {\n            if (existingItem && (\"queued\" === existingItem.SyncStatus || \"transferring\" === existingItem.SyncStatus || \"synced\" === existingItem.SyncStatus) && (console.debug(\"mediasync: getNewItem: getLocalItem found existing item\"), localassetmanager.enableBackgroundCompletion())) return Promise.resolve();\n            libraryItem.CanDelete = !1, libraryItem.CanDownload = !1, libraryItem.SupportsSync = !1, libraryItem.People = [], libraryItem.Chapters = [], libraryItem.Studios = [], libraryItem.SpecialFeatureCount = null, libraryItem.LocalTrailerCount = null, libraryItem.RemoteTrailers = [];\n            var localItem = createLocalItem(libraryItem, jobItem);\n            return localItem.SyncStatus = \"queued\", downloadMedia(apiClient, jobItem, localItem)\n        })\n    }\n\n    function downloadParentItems(apiClient, jobItem, libraryItem) {\n        var p = Promise.resolve();\n        return libraryItem.SeriesId && (p = p.then(function() {\n            return downloadItem(apiClient, libraryItem.SeriesId)\n        })), libraryItem.SeasonId && (p = p.then(function() {\n            return downloadItem(apiClient, libraryItem.SeasonId).then(function(seasonItem) {\n                return libraryItem.SeasonPrimaryImageTag = (seasonItem.Item.ImageTags || {}).Primary, Promise.resolve()\n            })\n        })), libraryItem.AlbumId && (p = p.then(function() {\n            return downloadItem(apiClient, libraryItem.AlbumId)\n        })), p\n    }\n\n    function downloadItem(apiClient, itemId) {\n        return apiClient.getItem(apiClient.getCurrentUserId(), itemId).then(function(downloadedItem) {\n            downloadedItem.CanDelete = !1, downloadedItem.CanDownload = !1, downloadedItem.SupportsSync = !1, downloadedItem.People = [], downloadedItem.SpecialFeatureCount = null, downloadedItem.BackdropImageTags = null, downloadedItem.ParentBackdropImageTags = null, downloadedItem.ParentArtImageTag = null, downloadedItem.ParentLogoImageTag = null;\n            var localItem = createLocalItem(downloadedItem, null);\n            return localassetmanager.addOrUpdateLocalItem(localItem).then(function() {\n                return Promise.resolve(localItem)\n            }, function(err) {\n                return console.error(\"mediasync: downloadItem failed: \" + err.toString()), Promise.resolve(null)\n            })\n        })\n    }\n\n    function ensureLocalPathParts(localItem, jobItem) {\n        if (!localItem.LocalPathParts) {\n            var libraryItem = localItem.Item,\n                parts = localassetmanager.getDirectoryPath(libraryItem);\n            parts.push(localassetmanager.getLocalFileName(libraryItem, jobItem.OriginalFileName)), localItem.LocalPathParts = parts\n        }\n    }\n\n    function downloadMedia(apiClient, jobItem, localItem) {\n        console.debug(\"mediasync: downloadMedia: start.\");\n        var url = apiClient.getUrl(\"Sync/JobItems/\" + jobItem.SyncJobItemId + \"/File\", {\n            api_key: apiClient.accessToken()\n        });\n        return ensureLocalPathParts(localItem, jobItem), localassetmanager.downloadFile(url, localItem).then(function(result) {\n            console.debug(\"mediasync: downloadMedia-downloadFile returned path: \" + result.path);\n            var localPath = result.path,\n                libraryItem = localItem.Item;\n            if (localPath && libraryItem.MediaSources)\n                for (var i = 0; i < libraryItem.MediaSources.length; i++) {\n                    var mediaSource = libraryItem.MediaSources[i];\n                    mediaSource.Path = localPath, mediaSource.Protocol = \"File\"\n                }\n            return localItem.LocalPath = localPath, localItem.SyncStatus = \"transferring\", localassetmanager.addOrUpdateLocalItem(localItem).then(function() {\n                return afterMediaDownloaded(apiClient, jobItem, localItem).then(function() {\n                    return result.isComplete ? (localItem.SyncStatus = \"synced\", reportTransfer(apiClient, localItem)) : Promise.resolve()\n                }, function(err) {\n                    return console.debug(\"mediasync: downloadMedia: afterMediaDownloaded failed: \" + err), Promise.reject(err)\n                })\n            }, function(err) {\n                return console.debug(\"mediasync: downloadMedia: addOrUpdateLocalItem failed: \" + err), Promise.reject(err)\n            })\n        }, function(err) {\n            return console.debug(\"mediasync: downloadMedia: localassetmanager.downloadFile failed: \" + err), Promise.reject(err)\n        })\n    }\n\n    function getImages(apiClient, jobItem, localItem) {\n        console.debug(\"mediasync: begin getImages\");\n        var p = Promise.resolve(),\n            libraryItem = localItem.Item,\n            serverId = libraryItem.ServerId,\n            mainImageTag = (libraryItem.ImageTags || {}).Primary;\n        libraryItem.Id && mainImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.Id, mainImageTag, \"Primary\")\n        }));\n        var logoImageTag = (libraryItem.ImageTags || {}).Logo;\n        libraryItem.Id && logoImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.Id, logoImageTag, \"Logo\")\n        }));\n        var artImageTag = (libraryItem.ImageTags || {}).Art;\n        libraryItem.Id && artImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.Id, artImageTag, \"Art\")\n        }));\n        var bannerImageTag = (libraryItem.ImageTags || {}).Banner;\n        libraryItem.Id && bannerImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.Id, bannerImageTag, \"Banner\")\n        }));\n        var thumbImageTag = (libraryItem.ImageTags || {}).Thumb;\n        if (libraryItem.Id && thumbImageTag && (p = p.then(function() {\n                return downloadImage(localItem, apiClient, serverId, libraryItem.Id, thumbImageTag, \"Thumb\")\n            })), libraryItem.Id && libraryItem.BackdropImageTags)\n            for (var i = 0; i < libraryItem.BackdropImageTags.length; i++);\n        return libraryItem.SeriesId && libraryItem.SeriesPrimaryImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.SeriesId, libraryItem.SeriesPrimaryImageTag, \"Primary\")\n        })), libraryItem.SeriesId && libraryItem.SeriesThumbImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.SeriesId, libraryItem.SeriesThumbImageTag, \"Thumb\")\n        })), libraryItem.SeasonId && libraryItem.SeasonPrimaryImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.SeasonId, libraryItem.SeasonPrimaryImageTag, \"Primary\")\n        })), libraryItem.AlbumId && libraryItem.AlbumPrimaryImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.AlbumId, libraryItem.AlbumPrimaryImageTag, \"Primary\")\n        })), libraryItem.ParentThumbItemId && libraryItem.ParentThumbImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.ParentThumbItemId, libraryItem.ParentThumbImageTag, \"Thumb\")\n        })), libraryItem.ParentPrimaryImageItemId && libraryItem.ParentPrimaryImageTag && (p = p.then(function() {\n            return downloadImage(localItem, apiClient, serverId, libraryItem.ParentPrimaryImageItemId, libraryItem.ParentPrimaryImageTag, \"Primary\")\n        })), p.then(function() {\n            return console.debug(\"mediasync: finished getImages\"), localassetmanager.addOrUpdateLocalItem(localItem)\n        }, function(err) {\n            return console.error(\"mediasync: error getImages: \" + err.toString()), Promise.resolve()\n        })\n    }\n\n    function downloadImage(localItem, apiClient, serverId, itemId, imageTag, imageType, index) {\n        return index = index || 0, localassetmanager.hasImage(serverId, itemId, imageType, index).then(function(hasImage) {\n            if (hasImage) return console.debug(\"mediasync: downloadImage - skip existing: \" + itemId + \" \" + imageType + \"_\" + index.toString()), Promise.resolve();\n            var maxWidth = 400;\n            \"backdrop\" === imageType && (maxWidth = null);\n            var imageUrl = apiClient.getScaledImageUrl(itemId, {\n                tag: imageTag,\n                type: imageType,\n                maxWidth: maxWidth,\n                api_key: apiClient.accessToken()\n            });\n            return console.debug(\"mediasync: downloadImage \" + itemId + \" \" + imageType + \"_\" + index.toString()), localassetmanager.downloadImage(localItem, imageUrl, serverId, itemId, imageType, index).then(function(result) {\n                return Promise.resolve(result)\n            }, function(err) {\n                return console.error(\"mediasync: error downloadImage: \" + err.toString()), Promise.resolve()\n            })\n        }, function(err) {\n            return console.error(\"mediasync: error downloadImage: \" + err.toString()), Promise.resolve()\n        })\n    }\n\n    function getSubtitles(apiClient, jobItem, localItem) {\n        if (console.debug(\"mediasync: begin getSubtitles\"), !jobItem.Item.MediaSources.length) return console.debug(\"mediasync: cannot download subtitles because video has no media source info.\"), Promise.resolve();\n        var files = jobItem.AdditionalFiles.filter(function(f) {\n                return \"Subtitles\" === f.Type\n            }),\n            mediaSource = jobItem.Item.MediaSources[0],\n            p = Promise.resolve();\n        return files.forEach(function(file) {\n            p = p.then(function() {\n                return getItemSubtitle(file, apiClient, jobItem, localItem, mediaSource)\n            })\n        }), p.then(function() {\n            return console.debug(\"mediasync: exit getSubtitles\"), Promise.resolve()\n        })\n    }\n\n    function getItemSubtitle(file, apiClient, jobItem, localItem, mediaSource) {\n        console.debug(\"mediasync: begin getItemSubtitle\");\n        var subtitleStream = mediaSource.MediaStreams.filter(function(m) {\n            return \"Subtitle\" === m.Type && m.Index === file.Index\n        })[0];\n        if (!subtitleStream) return console.debug(\"mediasync: cannot download subtitles because matching stream info was not found.\"), Promise.resolve();\n        var url = apiClient.getUrl(\"Sync/JobItems/\" + jobItem.SyncJobItemId + \"/AdditionalFiles\", {\n                Name: file.Name,\n                api_key: apiClient.accessToken()\n            }),\n            fileName = localassetmanager.getSubtitleSaveFileName(localItem, jobItem.OriginalFileName, subtitleStream.Language, subtitleStream.IsForced, subtitleStream.Codec);\n        return localassetmanager.downloadSubtitles(url, fileName).then(function(subtitleResult) {\n            return localItem.AdditionalFiles && localItem.AdditionalFiles.forEach(function(item) {\n                item.Name === file.Name && (item.Path = subtitleResult.path)\n            }), subtitleStream.Path = subtitleResult.path, subtitleStream.DeliveryMethod = \"External\", localassetmanager.addOrUpdateLocalItem(localItem)\n        })\n    }\n\n    function checkLocalFileExistence(apiClient, serverInfo, options) {\n        return options.checkFileExistence ? (console.debug(\"mediasync: begin checkLocalFileExistence\"), localassetmanager.getServerItems(serverInfo.Id).then(function(items) {\n            var completedItems = items.filter(function(item) {\n                    return item && (\"synced\" === item.SyncStatus || \"error\" === item.SyncStatus)\n                }),\n                p = Promise.resolve();\n            return completedItems.forEach(function(completedItem) {\n                p = p.then(function() {\n                    return localassetmanager.fileExists(completedItem.LocalPath).then(function(exists) {\n                        return exists ? Promise.resolve() : localassetmanager.removeLocalItem(completedItem).then(function() {\n                            return Promise.resolve()\n                        }, function() {\n                            return Promise.resolve()\n                        })\n                    })\n                })\n            }), p\n        })) : Promise.resolve()\n    }\n    return function() {\n        var self = this;\n        \"string\" == typeof webWorkerBaseUrl && -1 !== webWorkerBaseUrl.indexOf(\"ms-appx://\") ? self.sync = function(apiClient, serverInfo, options) {\n            return console.debug(\"mediasync: start sync\"), checkLocalFileExistence(apiClient, serverInfo, options).then(function() {\n                return processDownloadStatus(apiClient, serverInfo, options).then(function() {\n                    return localassetmanager.getDownloadItemCount().then(function(downloadCount) {\n                        return !0 === options.syncCheckProgressOnly && downloadCount > 2 ? Promise.resolve() : reportOfflineActions(apiClient, serverInfo).then(function() {\n                            return getNewMedia(apiClient, downloadCount).then(function() {\n                                return syncData(apiClient, serverInfo).then(function() {\n                                    return console.debug(\"mediasync: Exit sync\"), Promise.resolve()\n                                })\n                            })\n                        })\n                    })\n                })\n            }, function(err) {\n                console.error(err.toString())\n            })\n        } : self.sync = function(apiClient, serverInfo, options) {\n            return console.debug(\"mediasync: Start sync\"), checkLocalFileExistence(apiClient, serverInfo, options).then(function() {\n                return syncData(apiClient, serverInfo).then(function() {\n                    return processDownloadStatus(apiClient, serverInfo, options).then(function() {\n                        return localassetmanager.getDownloadItemCount().then(function(downloadCount) {\n                            return !0 === options.syncCheckProgressOnly && downloadCount > 2 ? Promise.resolve() : reportOfflineActions(apiClient, serverInfo).then(function() {\n                                return getNewMedia(apiClient, downloadCount).then(function() {\n                                    return syncData(apiClient, serverInfo)\n                                })\n                            })\n                        })\n                    })\n                })\n            }, function(err) {\n                console.error(err.toString())\n            })\n        }\n    }\n});\n"]}