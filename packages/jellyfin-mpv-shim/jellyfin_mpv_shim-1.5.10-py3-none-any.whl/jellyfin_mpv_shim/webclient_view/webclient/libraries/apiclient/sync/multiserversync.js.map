{"version":3,"sources":["libraries/apiclient/sync/multiserversync.js"],"names":["define","ServerSync","MultiServerSync","prototype","sync","connectionManager","options","console","debug","Promise","resolve","reject","servers","getSavedServers","syncNext","index","length","server","Id","then","err","error"],"mappings":"AAAA,aAAAA,OAAO,CAAC,eAAe,SAASC,YAc5B,SAASC,mBACT,OAAOA,gBAAgBC,UAAUC,KAAO,SAASC,kBAAmBC,SAChE,OAAOC,QAAQC,MAAM,oCAAqC,IAAIC,SAAQ,SAASC,QAASC,QACpF,IAAIC,QAAUP,kBAAkBQ,mBAdxC,SAASC,SAAST,kBAAmBO,QAASG,MAAOT,QAASI,QAASC,QACnE,IAAIK,OAASJ,QAAQI,OACrB,GAAID,OAASC,OAAQ,OAAOT,QAAQC,MAAM,sCAAuCE,UACjF,IAAIO,OAASL,QAAQG,OACrBR,QAAQC,MAAM,kCAAoCS,OAAOC,KAAM,IAAIjB,YAAYG,KAAKC,kBAAmBY,OAAQX,SAASa,MAAK,WACzHZ,QAAQC,MAAM,mCAAqCS,OAAOC,IAAKJ,SAAST,kBAAmBO,QAASG,MAAQ,EAAGT,QAASI,QAASC,WAClI,SAASS,KACRb,QAAQc,MAAM,gCAAkCJ,OAAOC,GAAK,KAAOE,KAAMN,SAAST,kBAAmBO,QAASG,MAAQ,EAAGT,QAASI,QAASC,WAQ3IG,CAAST,kBAAmBO,QAAS,EAAGN,QAASI,QAASC,YAE/DT","file":"multiserversync.js","sourcesContent":["define([\"serversync\"], function(ServerSync) {\n    \"use strict\";\n\n    function syncNext(connectionManager, servers, index, options, resolve, reject) {\n        var length = servers.length;\n        if (index >= length) return console.debug(\"MultiServerSync.sync complete\"), void resolve();\n        var server = servers[index];\n        console.debug(\"Creating ServerSync to server: \" + server.Id), (new ServerSync).sync(connectionManager, server, options).then(function() {\n            console.debug(\"ServerSync succeeded to server: \" + server.Id), syncNext(connectionManager, servers, index + 1, options, resolve, reject)\n        }, function(err) {\n            console.error(\"ServerSync failed to server: \" + server.Id + \". \" + err), syncNext(connectionManager, servers, index + 1, options, resolve, reject)\n        })\n    }\n\n    function MultiServerSync() {}\n    return MultiServerSync.prototype.sync = function(connectionManager, options) {\n        return console.debug(\"MultiServerSync.sync starting...\"), new Promise(function(resolve, reject) {\n            var servers = connectionManager.getSavedServers();\n            syncNext(connectionManager, servers, 0, options, resolve, reject)\n        })\n    }, MultiServerSync\n});\n"]}