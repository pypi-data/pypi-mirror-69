{"version":3,"sources":["libraries/apiclient/credentialprovider.js"],"names":["define","events","appStorage","Credentials","key","this","prototype","clear","_credentials","removeItem","credentials","data","set","instance","setItem","JSON","stringify","trigger","ensure","json","getItem","console","debug","parse","Servers","addOrUpdateServer","list","server","Id","Error","existing","filter","s","DateLastAccessed","Math","max","UserLinkType","AccessToken","UserId","ExchangeToken","RemoteAddress","ManualAddress","LocalAddress","Name","LastConnectionMode","ConnectServerId","push"],"mappings":"AAAA,aAAAA,OAAO,CAAC,SAAU,eAAe,SAASC,OAAQC,YAc9C,SAASC,YAAYC,KACjBC,KAAKD,IAAMA,KAAO,uBAEtB,OAAOD,YAAYG,UAAUC,MAAQ,WACjCF,KAAKG,aAAe,KAAMN,WAAWO,WAAWJ,KAAKD,MACtDD,YAAYG,UAAUI,YAAc,SAASC,MAC5C,OAAOA,MAVX,SAASC,IAAIC,SAAUF,MACnBA,MAAQE,SAASL,aAAeG,KAAMT,WAAWY,QAAQD,SAAST,IAAKW,KAAKC,UAAUL,QAAUE,SAASN,QAASN,OAAOgB,QAAQJ,SAAU,sBAS5HD,CAAIP,KAAMM,MAjB7B,SAASO,OAAOL,SAAUF,MACtB,IAAKE,SAASL,aAAc,CACxB,IAAIW,KAAOjB,WAAWkB,QAAQP,SAAST,MAAQ,KAC/CiB,QAAQC,MAAM,iCAAmCH,MAAON,SAASL,aAAeO,KAAKQ,MAAMJ,MAAON,SAASL,aAAagB,QAAUX,SAASL,aAAagB,SAAW,IAcvIN,CAAOb,MAAOA,KAAKG,cACpDL,YAAYG,UAAUmB,kBAAoB,SAASC,KAAMC,QACxD,IAAKA,OAAOC,GAAI,MAAM,IAAIC,MAAM,qCAChC,IAAIC,SAAWJ,KAAKK,QAAO,SAASC,GAChC,OAAOA,EAAEJ,KAAOD,OAAOC,MACxB,GACH,OAAOE,UAAYA,SAASG,iBAAmBC,KAAKC,IAAIL,SAASG,kBAAoB,EAAGN,OAAOM,kBAAoB,GAAIH,SAASM,aAAeT,OAAOS,aAAcT,OAAOU,cAAgBP,SAASO,YAAcV,OAAOU,YAAaP,SAASQ,OAASX,OAAOW,QAASX,OAAOY,gBAAkBT,SAASS,cAAgBZ,OAAOY,eAAgBZ,OAAOa,gBAAkBV,SAASU,cAAgBb,OAAOa,eAAgBb,OAAOc,gBAAkBX,SAASW,cAAgBd,OAAOc,eAAgBd,OAAOe,eAAiBZ,SAASY,aAAef,OAAOe,cAAef,OAAOgB,OAASb,SAASa,KAAOhB,OAAOgB,MAAO,MAAQhB,OAAOiB,qBAAuBd,SAASc,mBAAqBjB,OAAOiB,oBAAqBjB,OAAOkB,kBAAoBf,SAASe,gBAAkBlB,OAAOkB,iBAAkBf,WAAaJ,KAAKoB,KAAKnB,QAASA,SACvyBxB","file":"credentialprovider.js","sourcesContent":["define([\"events\", \"appStorage\"], function(events, appStorage) {\n    \"use strict\";\n\n    function ensure(instance, data) {\n        if (!instance._credentials) {\n            var json = appStorage.getItem(instance.key) || \"{}\";\n            console.debug(\"credentials initialized with: \" + json), instance._credentials = JSON.parse(json), instance._credentials.Servers = instance._credentials.Servers || []\n        }\n    }\n\n    function set(instance, data) {\n        data ? (instance._credentials = data, appStorage.setItem(instance.key, JSON.stringify(data))) : instance.clear(), events.trigger(instance, \"credentialsupdated\")\n    }\n\n    function Credentials(key) {\n        this.key = key || \"jellyfin_credentials\"\n    }\n    return Credentials.prototype.clear = function() {\n        this._credentials = null, appStorage.removeItem(this.key)\n    }, Credentials.prototype.credentials = function(data) {\n        return data && set(this, data), ensure(this), this._credentials\n    }, Credentials.prototype.addOrUpdateServer = function(list, server) {\n        if (!server.Id) throw new Error(\"Server.Id cannot be null or empty\");\n        var existing = list.filter(function(s) {\n            return s.Id === server.Id\n        })[0];\n        return existing ? (existing.DateLastAccessed = Math.max(existing.DateLastAccessed || 0, server.DateLastAccessed || 0), existing.UserLinkType = server.UserLinkType, server.AccessToken && (existing.AccessToken = server.AccessToken, existing.UserId = server.UserId), server.ExchangeToken && (existing.ExchangeToken = server.ExchangeToken), server.RemoteAddress && (existing.RemoteAddress = server.RemoteAddress), server.ManualAddress && (existing.ManualAddress = server.ManualAddress), server.LocalAddress && (existing.LocalAddress = server.LocalAddress), server.Name && (existing.Name = server.Name), null != server.LastConnectionMode && (existing.LastConnectionMode = server.LastConnectionMode), server.ConnectServerId && (existing.ConnectServerId = server.ConnectServerId), existing) : (list.push(server), server)\n    }, Credentials\n});\n"]}