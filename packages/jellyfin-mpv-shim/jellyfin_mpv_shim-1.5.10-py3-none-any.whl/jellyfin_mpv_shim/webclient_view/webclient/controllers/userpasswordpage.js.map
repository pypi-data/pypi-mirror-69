{"version":3,"sources":["controllers/userpasswordpage.js"],"names":["define","loading","libraryMenu","loadUser","page","params","userid","userId","ApiClient","getUser","then","user","Dashboard","getCurrentUser","loggedInUser","setTitle","Name","querySelector","innerHTML","showPasswordSection","showLocalAccessSection","ConnectLinkType","classList","add","HasConfiguredPassword","remove","Policy","IsAdministrator","EnableUserPreferenceAccess","txtEasyPassword","value","HasConfiguredEasyPassword","placeholder","removeAttribute","checked","Configuration","EnableLocalPassword","require","autoFocuser","autoFocus","view","onEasyPasswordSaved","updateUserConfiguration","Id","hide","toast","Globalize","translate","addEventListener","onSubmit","e","this","show","savePassword","currentPassword","newPassword","contains","updateUserPassword","alert","title","message","preventDefault","onLocalAccessSubmit","saveEasyPassword","easyPassword","updateEasyPassword","resetEasyPassword","msg","confirm","resetPassword","resetUserPassword"],"mappings":"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","file":"userpasswordpage.js","sourcesContent":["define([\"loading\", \"libraryMenu\", \"emby-button\"], function (loading, libraryMenu) {\n    \"use strict\";\n\n    function loadUser(page, params) {\n        var userid = params.userId;\n        ApiClient.getUser(userid).then(function (user) {\n            Dashboard.getCurrentUser().then(function (loggedInUser) {\n                libraryMenu.setTitle(user.Name);\n                page.querySelector(\".username\").innerHTML = user.Name;\n                var showPasswordSection = true;\n                var showLocalAccessSection = false;\n\n                if (\"Guest\" == user.ConnectLinkType) {\n                    page.querySelector(\".localAccessSection\").classList.add(\"hide\");\n                    showPasswordSection = false;\n                } else if (user.HasConfiguredPassword) {\n                    page.querySelector(\"#btnResetPassword\").classList.remove(\"hide\");\n                    page.querySelector(\"#fldCurrentPassword\").classList.remove(\"hide\");\n                    showLocalAccessSection = true;\n                } else {\n                    page.querySelector(\"#btnResetPassword\").classList.add(\"hide\");\n                    page.querySelector(\"#fldCurrentPassword\").classList.add(\"hide\");\n                }\n\n                if (showPasswordSection && (loggedInUser.Policy.IsAdministrator || user.Policy.EnableUserPreferenceAccess)) {\n                    page.querySelector(\".passwordSection\").classList.remove(\"hide\");\n                } else {\n                    page.querySelector(\".passwordSection\").classList.add(\"hide\");\n                }\n\n                if (showLocalAccessSection && (loggedInUser.Policy.IsAdministrator || user.Policy.EnableUserPreferenceAccess)) {\n                    page.querySelector(\".localAccessSection\").classList.remove(\"hide\");\n                } else {\n                    page.querySelector(\".localAccessSection\").classList.add(\"hide\");\n                }\n\n                var txtEasyPassword = page.querySelector(\"#txtEasyPassword\");\n                txtEasyPassword.value = \"\";\n\n                if (user.HasConfiguredEasyPassword) {\n                    txtEasyPassword.placeholder = \"******\";\n                    page.querySelector(\"#btnResetEasyPassword\").classList.remove(\"hide\");\n                } else {\n                    txtEasyPassword.removeAttribute(\"placeholder\");\n                    txtEasyPassword.placeholder = \"\";\n                    page.querySelector(\"#btnResetEasyPassword\").classList.add(\"hide\");\n                }\n\n                page.querySelector(\".chkEnableLocalEasyPassword\").checked = user.Configuration.EnableLocalPassword;\n\n                require([\"autoFocuser\"], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        });\n        page.querySelector(\"#txtCurrentPassword\").value = \"\";\n        page.querySelector(\"#txtNewPassword\").value = \"\";\n        page.querySelector(\"#txtNewPasswordConfirm\").value = \"\";\n    }\n\n    return function (view, params) {\n        function saveEasyPassword() {\n            var userId = params.userId;\n            var easyPassword = view.querySelector(\"#txtEasyPassword\").value;\n\n            if (easyPassword) {\n                ApiClient.updateEasyPassword(userId, easyPassword).then(function () {\n                    onEasyPasswordSaved(userId);\n                });\n            } else {\n                onEasyPasswordSaved(userId);\n            }\n        }\n\n        function onEasyPasswordSaved(userId) {\n            ApiClient.getUser(userId).then(function (user) {\n                user.Configuration.EnableLocalPassword = view.querySelector(\".chkEnableLocalEasyPassword\").checked;\n                ApiClient.updateUserConfiguration(user.Id, user.Configuration).then(function () {\n                    loading.hide();\n\n                    require([\"toast\"], function (toast) {\n                        toast(Globalize.translate(\"MessageSettingsSaved\"));\n                    });\n\n                    loadUser(view, params);\n                });\n            });\n        }\n\n        function savePassword() {\n            var userId = params.userId;\n            var currentPassword = view.querySelector(\"#txtCurrentPassword\").value;\n            var newPassword = view.querySelector(\"#txtNewPassword\").value;\n\n            if (view.querySelector(\"#fldCurrentPassword\").classList.contains(\"hide\")) {\n                // Firefox does not respect autocomplete=off, so clear it if the field is supposed to be hidden (and blank)\n                // This should only happen when user.HasConfiguredPassword is false, but this information is not passed on\n                currentPassword = \"\";\n            }\n\n            ApiClient.updateUserPassword(userId, currentPassword, newPassword).then(function () {\n                loading.hide();\n\n                require([\"toast\"], function (toast) {\n                    toast(Globalize.translate(\"PasswordSaved\"));\n                });\n\n                loadUser(view, params);\n            }, function () {\n                loading.hide();\n                Dashboard.alert({\n                    title: Globalize.translate(\"HeaderLoginFailure\"),\n                    message: Globalize.translate(\"MessageInvalidUser\")\n                });\n            });\n        }\n\n        function onSubmit(e) {\n            var form = this;\n\n            if (form.querySelector(\"#txtNewPassword\").value != form.querySelector(\"#txtNewPasswordConfirm\").value) {\n                require([\"toast\"], function (toast) {\n                    toast(Globalize.translate(\"PasswordMatchError\"));\n                });\n            } else {\n                loading.show();\n                savePassword();\n            }\n\n            e.preventDefault();\n            return false;\n        }\n\n        function onLocalAccessSubmit(e) {\n            loading.show();\n            saveEasyPassword();\n            e.preventDefault();\n            return false;\n        }\n\n        function resetPassword() {\n            var msg = Globalize.translate(\"PasswordResetConfirmation\");\n\n            require([\"confirm\"], function (confirm) {\n                confirm(msg, Globalize.translate(\"PasswordResetHeader\")).then(function () {\n                    var userId = params.userId;\n                    loading.show();\n                    ApiClient.resetUserPassword(userId).then(function () {\n                        loading.hide();\n                        Dashboard.alert({\n                            message: Globalize.translate(\"PasswordResetComplete\"),\n                            title: Globalize.translate(\"PasswordResetHeader\")\n                        });\n                        loadUser(view, params);\n                    });\n                });\n            });\n        }\n\n        function resetEasyPassword() {\n            var msg = Globalize.translate(\"PinCodeResetConfirmation\");\n\n            require([\"confirm\"], function (confirm) {\n                confirm(msg, Globalize.translate(\"HeaderPinCodeReset\")).then(function () {\n                    var userId = params.userId;\n                    loading.show();\n                    ApiClient.resetEasyPassword(userId).then(function () {\n                        loading.hide();\n                        Dashboard.alert({\n                            message: Globalize.translate(\"PinCodeResetComplete\"),\n                            title: Globalize.translate(\"HeaderPinCodeReset\")\n                        });\n                        loadUser(view, params);\n                    });\n                });\n            });\n        }\n\n        view.querySelector(\".updatePasswordForm\").addEventListener(\"submit\", onSubmit);\n        view.querySelector(\".localAccessForm\").addEventListener(\"submit\", onLocalAccessSubmit);\n        view.querySelector(\"#btnResetEasyPassword\").addEventListener(\"click\", resetEasyPassword);\n        view.querySelector(\"#btnResetPassword\").addEventListener(\"click\", resetPassword);\n        view.addEventListener(\"viewshow\", function () {\n            loadUser(view, params);\n        });\n    };\n});\n"]}