{"version":3,"sources":["controllers/movies/moviecollections.js"],"names":["define","loading","events","libraryBrowser","imageLoader","listView","cardBuilder","appHost","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","Limit","pageSize","getSavedView","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","ApiClient","getItems","getCurrentUserId","then","result","onNextPageClick","onPreviousPageClick","html","window","scrollTo","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getCardsHtml","items","Items","shape","preferThumb","overlayPlayButton","centerText","showTitle","lazy","cardLayout","preferBanner","getListViewHtml","sortBy","elems","querySelectorAll","addEventListener","Globalize","translate","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","this","initPage","e","showSortMenu","name","id","callback","button","target","btnSelectView","showLayoutMenu","split","detail","saveViewSetting","collectionEditor","serverId","serverInfo","Id","renderTab","destroy"],"mappings":"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","file":"moviecollections.js","sourcesContent":["define([\"loading\", \"events\", \"libraryBrowser\", \"imageLoader\", \"listView\", \"cardBuilder\", \"apphost\", \"emby-itemscontainer\"], function (loading, events, libraryBrowser, imageLoader, listView, cardBuilder, appHost) {\n    \"use strict\";\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: \"SortName\",\n                        SortOrder: \"Ascending\",\n                        IncludeItemTypes: \"BoxSet\",\n                        Recursive: true,\n                        Fields: \"PrimaryImageAspectRatio,SortName\",\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: \"Primary,Backdrop,Banner,Thumb\",\n                        StartIndex: 0,\n                        Limit: pageSize\n                    },\n                    view: libraryBrowser.getSavedView(key) || \"Poster\"\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey(\"moviecollections\");\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n\n            if (\"List\" == viewStyle) {\n                itemsContainer.classList.add(\"vertical-list\");\n                itemsContainer.classList.remove(\"vertical-wrap\");\n            } else {\n                itemsContainer.classList.remove(\"vertical-list\");\n                itemsContainer.classList.add(\"vertical-wrap\");\n            }\n\n            itemsContainer.innerHTML = \"\";\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(page);\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex += query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex -= query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == \"Thumb\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"backdrop\",\n                        preferThumb: true,\n                        context: \"movies\",\n                        overlayPlayButton: true,\n                        centerText: true,\n                        showTitle: true\n                    });\n                } else if (viewStyle == \"ThumbCard\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"backdrop\",\n                        preferThumb: true,\n                        context: \"movies\",\n                        lazy: true,\n                        cardLayout: true,\n                        showTitle: true\n                    });\n                } else if (viewStyle == \"Banner\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"banner\",\n                        preferBanner: true,\n                        context: \"movies\",\n                        lazy: true\n                    });\n                } else if (viewStyle == \"List\") {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: \"movies\",\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == \"PosterCard\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"auto\",\n                        context: \"movies\",\n                        showTitle: true,\n                        centerText: false,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"auto\",\n                        context: \"movies\",\n                        centerText: true,\n                        overlayPlayButton: true,\n                        showTitle: true\n                    });\n                }\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll(\".paging\");\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll(\".btnNextPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll(\".btnPreviousPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onPreviousPageClick);\n                }\n\n                if (!result.Items.length) {\n                    html = '<p style=\"text-align:center;\">' + Globalize.translate(\"MessageNoCollectionsAvailable\") + \"</p>\";\n                }\n\n                var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                require([\"autoFocuser\"], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        }\n\n        var self = this;\n        var pageSize = 100;\n        var data = {};\n        var isLoading = false;\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            tabContent.querySelector(\".btnSort\").addEventListener(\"click\", function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: Globalize.translate(\"OptionNameSort\"),\n                        id: \"SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionImdbRating\"),\n                        id: \"CommunityRating,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionDateAdded\"),\n                        id: \"DateCreated,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionParentalRating\"),\n                        id: \"OfficialRating,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionReleaseDate\"),\n                        id: \"PremiereDate,SortName\"\n                    }],\n                    callback: function () {\n                        getQuery(tabContent).StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n            var btnSelectView = tabContent.querySelector(\".btnSelectView\");\n            btnSelectView.addEventListener(\"click\", function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), \"List,Poster,PosterCard,Thumb,ThumbCard\".split(\",\"));\n            });\n            btnSelectView.addEventListener(\"layoutchange\", function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                getQuery(tabContent).StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n            tabContent.querySelector(\".btnNewCollection\").addEventListener(\"click\", function () {\n                require([\"collectionEditor\"], function (collectionEditor) {\n                    var serverId = ApiClient.serverInfo().Id;\n                    new collectionEditor().show({\n                        items: [],\n                        serverId: serverId\n                    });\n                });\n            });\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}