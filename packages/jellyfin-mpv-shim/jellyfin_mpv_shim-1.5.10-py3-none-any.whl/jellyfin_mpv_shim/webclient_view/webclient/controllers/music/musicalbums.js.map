{"version":3,"sources":["controllers/music/musicalbums.js"],"names":["define","layoutManager","playbackManager","loading","events","libraryBrowser","imageLoader","alphaPicker","listView","cardBuilder","appHost","view","params","tabContent","playAll","ApiClient","getItem","getCurrentUserId","topParentId","then","item","play","items","shuffle","getQuery","getPageData","key","getSavedQueryKey","pageData","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","Limit","pageSize","getSavedView","ParentId","loadSavedQueryValues","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","getItems","result","onNextPageClick","onPreviousPageClick","html","window","scrollTo","updateFilterControls","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getListViewHtml","Items","context","sortBy","addToListButton","getCardsHtml","shape","showTitle","coverImage","showParentTitle","lazy","cardLayout","centerText","overlayPlayButton","elems","querySelectorAll","addEventListener","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","value","NameStartsWithOrGreater","this","showFilterMenu","filterDialogFactory","filterDialog","mode","serverId","on","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","showSortMenu","name","Globalize","translate","id","callback","button","target","btnSelectView","showLayoutMenu","split","saveViewSetting","renderTab","destroy"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,kBAAmB,UAAW,SAAU,iBAAkB,cAAe,cAAe,WAAY,cAAe,UAAW,wBAAwB,SAAUC,cAAeC,gBAAiBC,QAASC,OAAQC,eAAgBC,YAAaC,YAAaC,SAAUC,YAAaC,SAGvS,OAAO,SAAUC,KAAMC,OAAQC,YAC3B,SAASC,UACLC,UAAUC,QAAQD,UAAUE,mBAAoBL,OAAOM,aAAaC,MAAK,SAAUC,MAC/ElB,gBAAgBmB,KAAK,CACjBC,MAAO,CAACF,WAKpB,SAASG,UACLR,UAAUC,QAAQD,UAAUE,mBAAoBL,OAAOM,aAAaC,MAAK,SAAUC,MAC/EI,WACAtB,gBAAgBqB,QAAQH,KAAM,SAItC,SAASK,cACL,IAAIC,IAAMC,mBAqBV,OAnBKC,YACDA,SAAW,CACPC,MAAO,CACHC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,aAClBC,WAAW,EACXC,OAAQ,iDACRC,eAAgB,EAChBC,iBAAkB,gCAClBC,WAAY,EACZC,MAAOC,UAEX5B,KAAMN,eAAemC,aAAad,MAAQ,WAErCG,MAAMY,SAAW7B,OAAOM,YACjCb,eAAeqC,qBAAqBhB,IAAKE,SAASC,QAG/CD,SAGX,SAASJ,WACL,OAAOC,cAAcI,MAGzB,SAASF,mBAKL,OAJKgB,gBACDA,cAAgBtC,eAAesB,iBAAiB,gBAG7CgB,cAGX,SAASC,oBACL,IAAIC,UAAYC,KAAKC,sBACjBC,eAAiBnC,WAAWoC,cAAc,mBAE1C,QAAUJ,WACVG,eAAeE,UAAUC,IAAI,iBAC7BH,eAAeE,UAAUE,OAAO,mBAEhCJ,eAAeE,UAAUE,OAAO,iBAChCJ,eAAeE,UAAUC,IAAI,kBAGjCH,eAAeK,UAAY,GAG/B,SAASC,YAAYC,MACjBpD,QAAQqD,OACRC,WAAY,EACZ,IAAI5B,MAAQL,WACZT,UAAU2C,SAAS3C,UAAUE,mBAAoBY,OAAOV,MAAK,SAAUwC,QACnE,SAASC,kBACDH,YAIJ5B,MAAMQ,YAAcR,MAAMS,MAC1BgB,YAAYzC,aAGhB,SAASgD,sBACDJ,YAIJ5B,MAAMQ,YAAcR,MAAMS,MAC1BgB,YAAYzC,aAKhB,IAAIiD,KAFJC,OAAOC,SAAS,EAAG,GACnBC,qBAAqBV,MAErB,IAyCIW,EACAC,OA1CAC,WAAa/D,eAAegE,mBAAmB,CAC/CC,WAAYzC,MAAMQ,WAClBkC,MAAO1C,MAAMS,MACbkC,iBAAkBb,OAAOc,iBACzBC,WAAW,EACXC,uBAAuB,EACvBC,iBAAiB,EACjBC,YAAY,EACZC,cAAc,IAEdjC,UAAYC,KAAKC,sBAEjBe,KADa,QAAbjB,UACOrC,SAASuE,gBAAgB,CAC5BzD,MAAOqC,OAAOqB,MACdC,QAAS,QACTC,OAAQrD,MAAMC,OACdqD,iBAAiB,IAED,cAAbtC,UACApC,YAAY2E,aAAa,CAC5B9D,MAAOqC,OAAOqB,MACdK,MAAO,SACPJ,QAAS,QACTK,WAAW,EACXC,YAAY,EACZC,iBAAiB,EACjBC,MAAM,EACNC,YAAY,IAGTjF,YAAY2E,aAAa,CAC5B9D,MAAOqC,OAAOqB,MACdK,MAAO,SACPJ,QAAS,QACTK,WAAW,EACXE,iBAAiB,EACjBC,MAAM,EACNE,YAAY,EACZC,mBAAmB,IAK3B,IAAIC,MAAQhF,WAAWiF,iBAAiB,WAExC,IAAK5B,EAAI,EAAGC,OAAS0B,MAAM1B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAGb,UAAYe,WAIzB,IAAKF,EAAI,EAAGC,QADZ0B,MAAQhF,WAAWiF,iBAAiB,iBACT3B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAG6B,iBAAiB,QAASnC,iBAIvC,IAAKM,EAAI,EAAGC,QADZ0B,MAAQhF,WAAWiF,iBAAiB,qBACT3B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAG6B,iBAAiB,QAASlC,qBAGvC,IAAIb,eAAiBnC,WAAWoC,cAAc,mBAC9CD,eAAeK,UAAYS,KAC3BxD,YAAY0F,aAAahD,gBACzB3C,eAAe4F,gBAAgBtE,mBAAoBE,OACnD1B,QAAQ+F,OACRzC,WAAY,EAEZ0C,QAAQ,CAAC,gBAAgB,SAAUC,aAC/BA,YAAYC,UAAUxF,kBAKlC,SAASoD,qBAAqBpD,YAC1B,IAAIgB,MAAQL,WACZsB,KAAKvC,YAAY+F,MAAMzE,MAAM0E,yBAGjC,IAAI5D,cACAf,SACAkB,KAAO0D,KACPjE,SAAW,IACXkB,WAAY,EAEhBX,KAAK2D,eAAiB,WAClBN,QAAQ,CAAC,yCAAyC,SAAUO,qBACxD,IAAIC,aAAe,IAAID,oBAAoB,CACvC7E,MAAOL,WACPoF,KAAM,SACNC,SAAU9F,UAAU8F,aAExBzG,OAAO0G,GAAGH,aAAc,gBAAgB,WACpCnF,WAAWa,WAAa,EACxBiB,YAAYzC,eAEhB8F,aAAanD,WAIrBV,KAAKC,oBAAsB,WACvB,OAAOtB,cAAcd,MAGzB,SAASoG,SAASlG,YACd,IAAImG,mBAAqBnG,WAAWoC,cAAc,gBAC9CD,eAAiBnC,WAAWoC,cAAc,mBAE9C+D,mBAAmBjB,iBAAiB,qBAAqB,SAAUkB,GAC/D,IAAIC,SAAWD,EAAEE,OAAOb,MACpBzE,MAAQL,WACZK,MAAM0E,wBAA0BW,SAChCrF,MAAMQ,WAAa,EACnBiB,YAAYzC,eAEhBiC,KAAKvC,YAAc,IAAIA,YAAY,CAC/B6G,QAASJ,mBACTK,iBAAkB,UAGtBxG,WAAWoC,cAAc,gBAAgBC,UAAUC,IAAI,wBACvD6D,mBAAmB9D,UAAUC,IAAI,2BACjCH,eAAeE,UAAUC,IAAI,gCAE7BtC,WAAWoC,cAAc,cAAc8C,iBAAiB,SAAS,WAC7DjD,KAAK2D,oBAET5F,WAAWoC,cAAc,YAAY8C,iBAAiB,SAAS,SAAUkB,GACrE5G,eAAeiH,aAAa,CACxBhG,MAAO,CAAC,CACJiG,KAAMC,UAAUC,UAAU,kBAC1BC,GAAI,YACL,CACCH,KAAMC,UAAUC,UAAU,qBAC1BC,GAAI,wBACL,CACCH,KAAMC,UAAUC,UAAU,yBAC1BC,GAAI,4BACL,CACCH,KAAMC,UAAUC,UAAU,sBAC1BC,GAAI,yBACL,CACCH,KAAMC,UAAUC,UAAU,mBAC1BC,GAAI,wBACL,CACCH,KAAMC,UAAUC,UAAU,qBAC1BC,GAAI,wCACL,CACCH,KAAMC,UAAUC,UAAU,gBAC1BC,GAAI,oBAERC,SAAU,SAAAA,WACNnG,WAAWa,WAAa,EACxBiB,YAAYzC,aAEhBgB,MAAOL,WACPoG,OAAQX,EAAEY,YAGlB,IAAIC,cAAgBjH,WAAWoC,cAAc,kBAC7C6E,cAAc/B,iBAAiB,SAAS,SAAUkB,GAC9C5G,eAAe0H,eAAed,EAAEY,OAAQ/E,KAAKC,sBAAuB,yBAAyBiF,MAAM,SAEvGF,cAAc/B,iBAAiB,gBAAgB,SAAUkB,GACrD,IAAIpE,UAAYoE,EAAEE,OAAOtE,UACzBpB,cAAcd,KAAOkC,UACrBxC,eAAe4H,gBAAgBtG,mBAAoBkB,WACnDrB,WAAWa,WAAa,EACxBO,oBACAU,YAAYzC,eAEhBA,WAAWoC,cAAc,eAAe8C,iBAAiB,QAASjF,SAClED,WAAWoC,cAAc,eAAe8C,iBAAiB,QAASxE,SAGtEwF,CAASlG,YACT+B,oBAEAE,KAAKoF,UAAY,WACb5E,YAAYzC,YACZoD,wBAGJnB,KAAKqF,QAAU","file":"musicalbums.js","sourcesContent":["define([\"layoutManager\", \"playbackManager\", \"loading\", \"events\", \"libraryBrowser\", \"imageLoader\", \"alphaPicker\", \"listView\", \"cardBuilder\", \"apphost\", \"emby-itemscontainer\"], function (layoutManager, playbackManager, loading, events, libraryBrowser, imageLoader, alphaPicker, listView, cardBuilder, appHost) {\n    \"use strict\";\n\n    return function (view, params, tabContent) {\n        function playAll() {\n            ApiClient.getItem(ApiClient.getCurrentUserId(), params.topParentId).then(function (item) {\n                playbackManager.play({\n                    items: [item]\n                });\n            });\n        }\n\n        function shuffle() {\n            ApiClient.getItem(ApiClient.getCurrentUserId(), params.topParentId).then(function (item) {\n                getQuery();\n                playbackManager.shuffle(item, null);\n            });\n        }\n\n        function getPageData() {\n            var key = getSavedQueryKey();\n\n            if (!pageData) {\n                pageData = {\n                    query: {\n                        SortBy: \"SortName\",\n                        SortOrder: \"Ascending\",\n                        IncludeItemTypes: \"MusicAlbum\",\n                        Recursive: true,\n                        Fields: \"PrimaryImageAspectRatio,SortName,BasicSyncInfo\",\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: \"Primary,Backdrop,Banner,Thumb\",\n                        StartIndex: 0,\n                        Limit: pageSize\n                    },\n                    view: libraryBrowser.getSavedView(key) || \"Poster\"\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery() {\n            return getPageData().query;\n        }\n\n        function getSavedQueryKey() {\n            if (!savedQueryKey) {\n                savedQueryKey = libraryBrowser.getSavedQueryKey(\"musicalbums\");\n            }\n\n            return savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n\n            if (\"List\" == viewStyle) {\n                itemsContainer.classList.add(\"vertical-list\");\n                itemsContainer.classList.remove(\"vertical-wrap\");\n            } else {\n                itemsContainer.classList.remove(\"vertical-list\");\n                itemsContainer.classList.add(\"vertical-wrap\");\n            }\n\n            itemsContainer.innerHTML = \"\";\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery();\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex += query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex -= query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == \"List\") {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: \"music\",\n                        sortBy: query.SortBy,\n                        addToListButton: true\n                    });\n                } else if (viewStyle == \"PosterCard\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"square\",\n                        context: \"music\",\n                        showTitle: true,\n                        coverImage: true,\n                        showParentTitle: true,\n                        lazy: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"square\",\n                        context: \"music\",\n                        showTitle: true,\n                        showParentTitle: true,\n                        lazy: true,\n                        centerText: true,\n                        overlayPlayButton: true\n                    });\n                }\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll(\".paging\");\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll(\".btnNextPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll(\".btnPreviousPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onPreviousPageClick);\n                }\n\n                var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(), query);\n                loading.hide();\n                isLoading = false;\n\n                require([\"autoFocuser\"], function (autoFocuser) {\n                    autoFocuser.autoFocus(tabContent);\n                });\n            });\n        }\n\n        function updateFilterControls(tabContent) {\n            var query = getQuery();\n            self.alphaPicker.value(query.NameStartsWithOrGreater);\n        }\n\n        var savedQueryKey;\n        var pageData;\n        var self = this;\n        var pageSize = 100;\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require([\"components/filterdialog/filterdialog\"], function (filterDialogFactory) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(),\n                    mode: \"albums\",\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, \"filterchange\", function () {\n                    getQuery().StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData().view;\n        };\n\n        function initPage(tabContent) {\n            var alphaPickerElement = tabContent.querySelector(\".alphaPicker\");\n            var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n\n            alphaPickerElement.addEventListener(\"alphavaluechanged\", function (e) {\n                var newValue = e.detail.value;\n                var query = getQuery();\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            self.alphaPicker = new alphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: \"click\"\n            });\n\n            tabContent.querySelector(\".alphaPicker\").classList.add(\"alphabetPicker-right\");\n            alphaPickerElement.classList.add(\"alphaPicker-fixed-right\");\n            itemsContainer.classList.add(\"padded-right-withalphapicker\");\n\n            tabContent.querySelector(\".btnFilter\").addEventListener(\"click\", function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector(\".btnSort\").addEventListener(\"click\", function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: Globalize.translate(\"OptionNameSort\"),\n                        id: \"SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionAlbumArtist\"),\n                        id: \"AlbumArtist,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionCommunityRating\"),\n                        id: \"CommunityRating,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionCriticRating\"),\n                        id: \"CriticRating,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionDateAdded\"),\n                        id: \"DateCreated,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionReleaseDate\"),\n                        id: \"ProductionYear,PremiereDate,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionRandom\"),\n                        id: \"Random,SortName\"\n                    }],\n                    callback: function () {\n                        getQuery().StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(),\n                    button: e.target\n                });\n            });\n            var btnSelectView = tabContent.querySelector(\".btnSelectView\");\n            btnSelectView.addEventListener(\"click\", function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), \"List,Poster,PosterCard\".split(\",\"));\n            });\n            btnSelectView.addEventListener(\"layoutchange\", function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData().view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(), viewStyle);\n                getQuery().StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n            tabContent.querySelector(\".btnPlayAll\").addEventListener(\"click\", playAll);\n            tabContent.querySelector(\".btnShuffle\").addEventListener(\"click\", shuffle);\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}