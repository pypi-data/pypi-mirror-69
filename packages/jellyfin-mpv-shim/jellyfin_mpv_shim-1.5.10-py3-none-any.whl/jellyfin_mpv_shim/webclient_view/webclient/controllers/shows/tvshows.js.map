{"version":3,"sources":["controllers/shows/tvshows.js"],"names":["define","layoutManager","loading","events","libraryBrowser","imageLoader","listView","cardBuilder","alphaPicker","view","params","tabContent","getPageData","context","key","getSavedQueryKey","pageData","data","query","SortBy","SortOrder","IncludeItemTypes","Recursive","Fields","ImageTypeLimit","EnableImageTypes","StartIndex","Limit","pageSize","getSavedView","ParentId","topParentId","loadSavedQueryValues","getQuery","savedQueryKey","onViewStyleChange","viewStyle","self","getCurrentViewStyle","itemsContainer","querySelector","classList","add","remove","innerHTML","reloadItems","page","show","isLoading","ApiClient","getItems","getCurrentUserId","then","result","onNextPageClick","onPreviousPageClick","html","window","scrollTo","updateFilterControls","i","length","pagingHtml","getQueryPagingHtml","startIndex","limit","totalRecordCount","TotalRecordCount","showLimit","updatePageSizeSetting","addLayoutButton","sortButton","filterButton","getCardsHtml","items","Items","shape","preferThumb","overlayMoreButton","showTitle","centerText","cardLayout","showYear","preferBanner","getListViewHtml","sortBy","lazy","elems","querySelectorAll","addEventListener","lazyChildren","saveQueryValues","hide","require","autoFocuser","autoFocus","value","NameStartsWithOrGreater","this","showFilterMenu","filterDialogFactory","filterDialog","mode","serverId","on","initPage","alphaPickerElement","e","newValue","detail","element","valueChangeEvent","showSortMenu","name","Globalize","translate","id","callback","button","target","btnSelectView","showLayoutMenu","split","saveViewSetting","renderTab","destroy"],"mappings":"AAAA,aAAAA,OAAO,CAAC,gBAAiB,UAAW,SAAU,iBAAkB,cAAe,WAAY,cAAe,cAAe,wBAAwB,SAAUC,cAAeC,QAASC,OAAQC,eAAgBC,YAAaC,SAAUC,YAAaC,aAG3O,OAAO,SAAUC,KAAMC,OAAQC,YAC3B,SAASC,YAAYC,SACjB,IAAIC,IAAMC,iBAAiBF,SACvBG,SAAWC,KAAKH,KAqBpB,OAnBKE,YACDA,SAAWC,KAAKH,KAAO,CACnBI,MAAO,CACHC,OAAQ,WACRC,UAAW,YACXC,iBAAkB,SAClBC,WAAW,EACXC,OAAQ,wCACRC,eAAgB,EAChBC,iBAAkB,gCAClBC,WAAY,EACZC,MAAOC,UAEXnB,KAAML,eAAeyB,aAAaf,MAAQ,WAErCI,MAAMY,SAAWpB,OAAOqB,YACjC3B,eAAe4B,qBAAqBlB,IAAKE,SAASE,QAG/CF,SAGX,SAASiB,SAASpB,SACd,OAAOD,YAAYC,SAASK,MAGhC,SAASH,iBAAiBF,SAKtB,OAJKA,QAAQqB,gBACTrB,QAAQqB,cAAgB9B,eAAeW,iBAAiB,WAGrDF,QAAQqB,cAGnB,SAASC,oBACL,IAAIC,UAAYC,KAAKC,sBACjBC,eAAiB5B,WAAW6B,cAAc,mBAE1C,QAAUJ,WACVG,eAAeE,UAAUC,IAAI,iBAC7BH,eAAeE,UAAUE,OAAO,mBAEhCJ,eAAeE,UAAUE,OAAO,iBAChCJ,eAAeE,UAAUC,IAAI,kBAGjCH,eAAeK,UAAY,GAG/B,SAASC,YAAYC,MACjB5C,QAAQ6C,OACRC,WAAY,EACZ,IAAI9B,MAAQe,SAASa,MACrBG,UAAUC,SAASD,UAAUE,mBAAoBjC,OAAOkC,MAAK,SAAUC,QACnE,SAASC,kBACDN,YAIJ9B,MAAMQ,YAAcR,MAAMS,MAC1BkB,YAAYlC,aAGhB,SAAS4C,sBACDP,YAIJ9B,MAAMQ,YAAcR,MAAMS,MAC1BkB,YAAYlC,aAKhB,IAAI6C,KAFJC,OAAOC,SAAS,EAAG,GACnBC,qBAAqBb,MAErB,IAmEIc,EACAC,OApEAC,WAAa1D,eAAe2D,mBAAmB,CAC/CC,WAAY9C,MAAMQ,WAClBuC,MAAO/C,MAAMS,MACbuC,iBAAkBb,OAAOc,iBACzBC,WAAW,EACXC,uBAAuB,EACvBC,iBAAiB,EACjBC,YAAY,EACZC,cAAc,IAEdpC,UAAYC,KAAKC,sBAEjBkB,KADa,SAAbpB,UACO7B,YAAYkE,aAAa,CAC5BC,MAAOrB,OAAOsB,MACdC,MAAO,WACPC,aAAa,EACbhE,QAAS,UACTiE,mBAAmB,EACnBC,WAAW,EACXC,YAAY,IAEI,aAAb5C,UACA7B,YAAYkE,aAAa,CAC5BC,MAAOrB,OAAOsB,MACdC,MAAO,WACPC,aAAa,EACbhE,QAAS,UACToE,YAAY,EACZF,WAAW,EACXG,UAAU,EACVF,YAAY,IAEI,UAAb5C,UACA7B,YAAYkE,aAAa,CAC5BC,MAAOrB,OAAOsB,MACdC,MAAO,SACPO,cAAc,EACdtE,QAAS,YAEO,QAAbuB,UACA9B,SAAS8E,gBAAgB,CAC5BV,MAAOrB,OAAOsB,MACd9D,QAAS,UACTwE,OAAQnE,MAAMC,SAEE,cAAbiB,UACA7B,YAAYkE,aAAa,CAC5BC,MAAOrB,OAAOsB,MACdC,MAAO,WACP/D,QAAS,UACTkE,WAAW,EACXG,UAAU,EACVF,YAAY,EACZC,YAAY,IAGT1E,YAAYkE,aAAa,CAC5BC,MAAOrB,OAAOsB,MACdC,MAAO,WACP/D,QAAS,UACTmE,YAAY,EACZM,MAAM,EACNR,mBAAmB,EACnBC,WAAW,EACXG,UAAU,IAKlB,IAAIK,MAAQ5E,WAAW6E,iBAAiB,WAExC,IAAK5B,EAAI,EAAGC,OAAS0B,MAAM1B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAGhB,UAAYkB,WAIzB,IAAKF,EAAI,EAAGC,QADZ0B,MAAQ5E,WAAW6E,iBAAiB,iBACT3B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAG6B,iBAAiB,QAASnC,iBAIvC,IAAKM,EAAI,EAAGC,QADZ0B,MAAQ5E,WAAW6E,iBAAiB,qBACT3B,OAAQD,EAAIC,OAAQD,IAC3C2B,MAAM3B,GAAG6B,iBAAiB,QAASlC,qBAGvC,IAAIhB,eAAiB5B,WAAW6B,cAAc,mBAC9CD,eAAeK,UAAYY,KAC3BnD,YAAYqF,aAAanD,gBACzBnC,eAAeuF,gBAAgB5E,iBAAiB+B,MAAO5B,OACvDhB,QAAQ0F,OACR5C,WAAY,EAEZ6C,QAAQ,CAAC,gBAAgB,SAAUC,aAC/BA,YAAYC,UAAUjD,YAKlC,SAASa,qBAAqBhD,YAC1B,IAAIO,MAAQe,SAAStB,YACrB0B,KAAK7B,YAAYwF,MAAM9E,MAAM+E,yBAGjC,IAAI5D,KAAO6D,KACPtE,SAAW,IACXX,KAAO,GACP+B,WAAY,EAEhBX,KAAK8D,eAAiB,WAClBN,QAAQ,CAAC,yCAAyC,SAAUO,qBACxD,IAAIC,aAAe,IAAID,oBAAoB,CACvClF,MAAOe,SAAStB,YAChB2F,KAAM,SACNC,SAAUtD,UAAUsD,aAExBpG,OAAOqG,GAAGH,aAAc,gBAAgB,WACpCpE,SAAStB,YAAYe,WAAa,EAClCmB,YAAYlC,eAEhB0F,aAAatD,WAIrBV,KAAKC,oBAAsB,WACvB,OAAO1B,YAAYD,YAAYF,MAGnC,SAASgG,SAAS9F,YACd,IAAI+F,mBAAqB/F,WAAW6B,cAAc,gBAC9CD,eAAiB5B,WAAW6B,cAAc,mBAE9CkE,mBAAmBjB,iBAAiB,qBAAqB,SAAUkB,GAC/D,IAAIC,SAAWD,EAAEE,OAAOb,MACpB9E,MAAQe,SAAStB,YACrBO,MAAM+E,wBAA0BW,SAChC1F,MAAMQ,WAAa,EACnBmB,YAAYlC,eAEhB0B,KAAK7B,YAAc,IAAIA,YAAY,CAC/BsG,QAASJ,mBACTK,iBAAkB,UAGtBpG,WAAW6B,cAAc,gBAAgBC,UAAUC,IAAI,wBACvDgE,mBAAmBjE,UAAUC,IAAI,2BACjCH,eAAeE,UAAUC,IAAI,gCAE7B/B,WAAW6B,cAAc,cAAciD,iBAAiB,SAAS,WAC7DpD,KAAK8D,oBAETxF,WAAW6B,cAAc,YAAYiD,iBAAiB,SAAS,SAAUkB,GACrEvG,eAAe4G,aAAa,CACxBtC,MAAO,CAAC,CACJuC,KAAMC,UAAUC,UAAU,kBAC1BC,GAAI,YACL,CACCH,KAAMC,UAAUC,UAAU,oBAC1BC,GAAI,4BACL,CACCH,KAAMC,UAAUC,UAAU,mBAC1BC,GAAI,wBACL,CACCH,KAAMC,UAAUC,UAAU,oBAC1BC,GAAI,uBACL,CACCH,KAAMC,UAAUC,UAAU,wBAC1BC,GAAI,2BACL,CACCH,KAAMC,UAAUC,UAAU,qBAC1BC,GAAI,0BAERC,SAAU,SAAAA,WACNpF,SAAStB,YAAYe,WAAa,EAClCmB,YAAYlC,aAEhBO,MAAOe,SAAStB,YAChB2G,OAAQX,EAAEY,YAGlB,IAAIC,cAAgB7G,WAAW6B,cAAc,kBAC7CgF,cAAc/B,iBAAiB,SAAS,SAAUkB,GAC9CvG,eAAeqH,eAAed,EAAEY,OAAQlF,KAAKC,sBAAuB,gDAAgDoF,MAAM,SAE9HF,cAAc/B,iBAAiB,gBAAgB,SAAUkB,GACrD,IAAIvE,UAAYuE,EAAEE,OAAOzE,UACzBxB,YAAYD,YAAYF,KAAO2B,UAC/BhC,eAAeuH,gBAAgB5G,iBAAiBJ,YAAayB,WAC7DH,SAAStB,YAAYe,WAAa,EAClCS,oBACAU,YAAYlC,eAIpB8F,CAAS9F,YACTwB,oBAEAE,KAAKuF,UAAY,WACb/E,YAAYlC,YACZgD,qBAAqBhD,aAGzB0B,KAAKwF,QAAU","file":"tvshows.js","sourcesContent":["define([\"layoutManager\", \"loading\", \"events\", \"libraryBrowser\", \"imageLoader\", \"listView\", \"cardBuilder\", \"alphaPicker\", \"emby-itemscontainer\"], function (layoutManager, loading, events, libraryBrowser, imageLoader, listView, cardBuilder, alphaPicker) {\n    \"use strict\";\n\n    return function (view, params, tabContent) {\n        function getPageData(context) {\n            var key = getSavedQueryKey(context);\n            var pageData = data[key];\n\n            if (!pageData) {\n                pageData = data[key] = {\n                    query: {\n                        SortBy: \"SortName\",\n                        SortOrder: \"Ascending\",\n                        IncludeItemTypes: \"Series\",\n                        Recursive: true,\n                        Fields: \"PrimaryImageAspectRatio,BasicSyncInfo\",\n                        ImageTypeLimit: 1,\n                        EnableImageTypes: \"Primary,Backdrop,Banner,Thumb\",\n                        StartIndex: 0,\n                        Limit: pageSize\n                    },\n                    view: libraryBrowser.getSavedView(key) || \"Poster\"\n                };\n                pageData.query.ParentId = params.topParentId;\n                libraryBrowser.loadSavedQueryValues(key, pageData.query);\n            }\n\n            return pageData;\n        }\n\n        function getQuery(context) {\n            return getPageData(context).query;\n        }\n\n        function getSavedQueryKey(context) {\n            if (!context.savedQueryKey) {\n                context.savedQueryKey = libraryBrowser.getSavedQueryKey(\"series\");\n            }\n\n            return context.savedQueryKey;\n        }\n\n        function onViewStyleChange() {\n            var viewStyle = self.getCurrentViewStyle();\n            var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n\n            if (\"List\" == viewStyle) {\n                itemsContainer.classList.add(\"vertical-list\");\n                itemsContainer.classList.remove(\"vertical-wrap\");\n            } else {\n                itemsContainer.classList.remove(\"vertical-list\");\n                itemsContainer.classList.add(\"vertical-wrap\");\n            }\n\n            itemsContainer.innerHTML = \"\";\n        }\n\n        function reloadItems(page) {\n            loading.show();\n            isLoading = true;\n            var query = getQuery(page);\n            ApiClient.getItems(ApiClient.getCurrentUserId(), query).then(function (result) {\n                function onNextPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex += query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                function onPreviousPageClick() {\n                    if (isLoading) {\n                        return;\n                    }\n\n                    query.StartIndex -= query.Limit;\n                    reloadItems(tabContent);\n                }\n\n                window.scrollTo(0, 0);\n                updateFilterControls(page);\n                var html;\n                var pagingHtml = libraryBrowser.getQueryPagingHtml({\n                    startIndex: query.StartIndex,\n                    limit: query.Limit,\n                    totalRecordCount: result.TotalRecordCount,\n                    showLimit: false,\n                    updatePageSizeSetting: false,\n                    addLayoutButton: false,\n                    sortButton: false,\n                    filterButton: false\n                });\n                var viewStyle = self.getCurrentViewStyle();\n                if (viewStyle == \"Thumb\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"backdrop\",\n                        preferThumb: true,\n                        context: \"tvshows\",\n                        overlayMoreButton: true,\n                        showTitle: true,\n                        centerText: true\n                    });\n                } else if (viewStyle == \"ThumbCard\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"backdrop\",\n                        preferThumb: true,\n                        context: \"tvshows\",\n                        cardLayout: true,\n                        showTitle: true,\n                        showYear: true,\n                        centerText: true\n                    });\n                } else if (viewStyle == \"Banner\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"banner\",\n                        preferBanner: true,\n                        context: \"tvshows\"\n                    });\n                } else if (viewStyle == \"List\") {\n                    html = listView.getListViewHtml({\n                        items: result.Items,\n                        context: \"tvshows\",\n                        sortBy: query.SortBy\n                    });\n                } else if (viewStyle == \"PosterCard\") {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"portrait\",\n                        context: \"tvshows\",\n                        showTitle: true,\n                        showYear: true,\n                        centerText: true,\n                        cardLayout: true\n                    });\n                } else {\n                    html = cardBuilder.getCardsHtml({\n                        items: result.Items,\n                        shape: \"portrait\",\n                        context: \"tvshows\",\n                        centerText: true,\n                        lazy: true,\n                        overlayMoreButton: true,\n                        showTitle: true,\n                        showYear: true\n                    });\n                }\n                var i;\n                var length;\n                var elems = tabContent.querySelectorAll(\".paging\");\n\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].innerHTML = pagingHtml;\n                }\n\n                elems = tabContent.querySelectorAll(\".btnNextPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onNextPageClick);\n                }\n\n                elems = tabContent.querySelectorAll(\".btnPreviousPage\");\n                for (i = 0, length = elems.length; i < length; i++) {\n                    elems[i].addEventListener(\"click\", onPreviousPageClick);\n                }\n\n                var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n                itemsContainer.innerHTML = html;\n                imageLoader.lazyChildren(itemsContainer);\n                libraryBrowser.saveQueryValues(getSavedQueryKey(page), query);\n                loading.hide();\n                isLoading = false;\n\n                require([\"autoFocuser\"], function (autoFocuser) {\n                    autoFocuser.autoFocus(page);\n                });\n            });\n        }\n\n        function updateFilterControls(tabContent) {\n            var query = getQuery(tabContent);\n            self.alphaPicker.value(query.NameStartsWithOrGreater);\n        }\n\n        var self = this;\n        var pageSize = 100;\n        var data = {};\n        var isLoading = false;\n\n        self.showFilterMenu = function () {\n            require([\"components/filterdialog/filterdialog\"], function (filterDialogFactory) {\n                var filterDialog = new filterDialogFactory({\n                    query: getQuery(tabContent),\n                    mode: \"series\",\n                    serverId: ApiClient.serverId()\n                });\n                events.on(filterDialog, \"filterchange\", function () {\n                    getQuery(tabContent).StartIndex = 0;\n                    reloadItems(tabContent);\n                });\n                filterDialog.show();\n            });\n        };\n\n        self.getCurrentViewStyle = function () {\n            return getPageData(tabContent).view;\n        };\n\n        function initPage(tabContent) {\n            var alphaPickerElement = tabContent.querySelector(\".alphaPicker\");\n            var itemsContainer = tabContent.querySelector(\".itemsContainer\");\n\n            alphaPickerElement.addEventListener(\"alphavaluechanged\", function (e) {\n                var newValue = e.detail.value;\n                var query = getQuery(tabContent);\n                query.NameStartsWithOrGreater = newValue;\n                query.StartIndex = 0;\n                reloadItems(tabContent);\n            });\n            self.alphaPicker = new alphaPicker({\n                element: alphaPickerElement,\n                valueChangeEvent: \"click\"\n            });\n\n            tabContent.querySelector(\".alphaPicker\").classList.add(\"alphabetPicker-right\");\n            alphaPickerElement.classList.add(\"alphaPicker-fixed-right\");\n            itemsContainer.classList.add(\"padded-right-withalphapicker\");\n\n            tabContent.querySelector(\".btnFilter\").addEventListener(\"click\", function () {\n                self.showFilterMenu();\n            });\n            tabContent.querySelector(\".btnSort\").addEventListener(\"click\", function (e) {\n                libraryBrowser.showSortMenu({\n                    items: [{\n                        name: Globalize.translate(\"OptionNameSort\"),\n                        id: \"SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionImdbRating\"),\n                        id: \"CommunityRating,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionDateAdded\"),\n                        id: \"DateCreated,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionDatePlayed\"),\n                        id: \"DatePlayed,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionParentalRating\"),\n                        id: \"OfficialRating,SortName\"\n                    }, {\n                        name: Globalize.translate(\"OptionReleaseDate\"),\n                        id: \"PremiereDate,SortName\"\n                    }],\n                    callback: function () {\n                        getQuery(tabContent).StartIndex = 0;\n                        reloadItems(tabContent);\n                    },\n                    query: getQuery(tabContent),\n                    button: e.target\n                });\n            });\n            var btnSelectView = tabContent.querySelector(\".btnSelectView\");\n            btnSelectView.addEventListener(\"click\", function (e) {\n                libraryBrowser.showLayoutMenu(e.target, self.getCurrentViewStyle(), \"Banner,List,Poster,PosterCard,Thumb,ThumbCard\".split(\",\"));\n            });\n            btnSelectView.addEventListener(\"layoutchange\", function (e) {\n                var viewStyle = e.detail.viewStyle;\n                getPageData(tabContent).view = viewStyle;\n                libraryBrowser.saveViewSetting(getSavedQueryKey(tabContent), viewStyle);\n                getQuery(tabContent).StartIndex = 0;\n                onViewStyleChange();\n                reloadItems(tabContent);\n            });\n        }\n\n        initPage(tabContent);\n        onViewStyleChange();\n\n        self.renderTab = function () {\n            reloadItems(tabContent);\n            updateFilterControls(tabContent);\n        };\n\n        self.destroy = function () {};\n    };\n});\n"]}