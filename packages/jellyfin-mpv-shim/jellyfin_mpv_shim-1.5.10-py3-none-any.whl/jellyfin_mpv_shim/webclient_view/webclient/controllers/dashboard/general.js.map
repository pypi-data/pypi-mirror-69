{"version":3,"sources":["controllers/dashboard/general.js"],"names":["define","$","loading","onSubmit","show","form","this","parents","ApiClient","getServerConfiguration","then","config","ServerName","val","UICulture","CachePath","querySelector","value","MetadataPath","MetadataNetworkPath","requiresReload","currentLanguage","AutoRunWebApp","checked","updateServerConfiguration","getNamedConfiguration","brandingConfigKey","brandingConfig","LoginDisclaimer","CustomCss","currentBrandingOptions","updateNamedConfiguration","Dashboard","processServerConfigurationUpdateResult","AppInfo","isNativeApp","window","location","reload","require","alert","Globalize","translate","view","params","on","directoryBrowser","picker","callback","path","close","validateWriteable","header","instruction","networkSharePath","networkPath","enableNetworkSharePath","off","addEventListener","promiseConfig","promiseLanguageOptions","getJSON","getUrl","promiseSystemInfo","getSystemInfo","Promise","all","responses","loadPage","page","languageOptions","systemInfo","CanLaunchWebBrowser","classList","remove","add","InternalMetadataPath","html","map","language","Value","Name","CanSelfRestart","CanSelfUpdate","removeClass","addClass","hide"],"mappings":"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","file":"general.js","sourcesContent":["define([\"jQuery\", \"loading\", \"fnchecked\", \"emby-checkbox\", \"emby-textarea\", \"emby-input\", \"emby-select\", \"emby-button\"], function ($, loading) {\n    \"use strict\";\n\n    function loadPage(page, config, languageOptions, systemInfo) {\n        page.querySelector(\"#txtServerName\").value = systemInfo.ServerName;\n        $(\"#chkAutoRunWebApp\", page).checked(config.AutoRunWebApp);\n\n        if (systemInfo.CanLaunchWebBrowser) {\n            page.querySelector(\"#fldAutoRunWebApp\").classList.remove(\"hide\");\n        } else {\n            page.querySelector(\"#fldAutoRunWebApp\").classList.add(\"hide\");\n        }\n\n        page.querySelector(\"#txtCachePath\").value = systemInfo.CachePath || \"\";\n        $(\"#txtMetadataPath\", page).val(systemInfo.InternalMetadataPath || \"\");\n        $(\"#txtMetadataNetworkPath\", page).val(systemInfo.MetadataNetworkPath || \"\");\n        $(\"#selectLocalizationLanguage\", page).html(languageOptions.map(function (language) {\n            return '<option value=\"' + language.Value + '\">' + language.Name + \"</option>\";\n        })).val(config.UICulture);\n        currentLanguage = config.UICulture;\n        if (systemInfo.CanSelfRestart || systemInfo.CanSelfUpdate) {\n            $(\".autoUpdatesContainer\", page).removeClass(\"hide\");\n        } else {\n            $(\".autoUpdatesContainer\", page).addClass(\"hide\");\n        }\n\n        loading.hide();\n    }\n\n    function onSubmit() {\n        loading.show();\n        var form = this;\n        $(form).parents(\".page\");\n        ApiClient.getServerConfiguration().then(function (config) {\n            config.ServerName = $(\"#txtServerName\", form).val();\n            config.UICulture = $(\"#selectLocalizationLanguage\", form).val();\n            config.CachePath = form.querySelector(\"#txtCachePath\").value;\n            config.MetadataPath = $(\"#txtMetadataPath\", form).val();\n            config.MetadataNetworkPath = $(\"#txtMetadataNetworkPath\", form).val();\n            var requiresReload = config.UICulture !== currentLanguage;\n            config.AutoRunWebApp = $(\"#chkAutoRunWebApp\", form).checked();\n            ApiClient.updateServerConfiguration(config).then(function() {\n                ApiClient.getNamedConfiguration(brandingConfigKey).then(function(brandingConfig) {\n                    brandingConfig.LoginDisclaimer = form.querySelector(\"#txtLoginDisclaimer\").value;\n                    brandingConfig.CustomCss = form.querySelector(\"#txtCustomCss\").value;\n\n                    if (currentBrandingOptions && brandingConfig.CustomCss !== currentBrandingOptions.CustomCss) {\n                        requiresReload = true;\n                    }\n\n                    ApiClient.updateNamedConfiguration(brandingConfigKey, brandingConfig).then(function () {\n                        Dashboard.processServerConfigurationUpdateResult();\n\n                        if (requiresReload && !AppInfo.isNativeApp) {\n                            window.location.reload(true);\n                        }\n                    });\n                });\n            }, function () {\n                require([\"alert\"], function (alert) {\n                    alert(Globalize.translate(\"DefaultErrorMessage\"));\n                });\n\n                Dashboard.processServerConfigurationUpdateResult();\n            });\n        });\n        return false;\n    }\n\n    var currentBrandingOptions;\n    var currentLanguage;\n    var brandingConfigKey = \"branding\";\n    return function (view, params) {\n        $(\"#btnSelectCachePath\", view).on(\"click.selectDirectory\", function () {\n            require([\"directorybrowser\"], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    callback: function (path) {\n                        if (path) {\n                            view.querySelector(\"#txtCachePath\").value = path;\n                        }\n\n                        picker.close();\n                    },\n                    validateWriteable: true,\n                    header: Globalize.translate(\"HeaderSelectServerCachePath\"),\n                    instruction: Globalize.translate(\"HeaderSelectServerCachePathHelp\")\n                });\n            });\n        });\n        $(\"#btnSelectMetadataPath\", view).on(\"click.selectDirectory\", function () {\n            require([\"directorybrowser\"], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    path: $(\"#txtMetadataPath\", view).val(),\n                    networkSharePath: $(\"#txtMetadataNetworkPath\", view).val(),\n                    callback: function (path, networkPath) {\n                        if (path) {\n                            $(\"#txtMetadataPath\", view).val(path);\n                        }\n\n                        if (networkPath) {\n                            $(\"#txtMetadataNetworkPath\", view).val(networkPath);\n                        }\n\n                        picker.close();\n                    },\n                    validateWriteable: true,\n                    header: Globalize.translate(\"HeaderSelectMetadataPath\"),\n                    instruction: Globalize.translate(\"HeaderSelectMetadataPathHelp\"),\n                    enableNetworkSharePath: true\n                });\n            });\n        });\n        $(\".dashboardGeneralForm\", view).off(\"submit\", onSubmit).on(\"submit\", onSubmit);\n        view.addEventListener(\"viewshow\", function () {\n            var promiseConfig = ApiClient.getServerConfiguration();\n            var promiseLanguageOptions = ApiClient.getJSON(ApiClient.getUrl(\"Localization/Options\"));\n            var promiseSystemInfo = ApiClient.getSystemInfo();\n            Promise.all([promiseConfig, promiseLanguageOptions, promiseSystemInfo]).then(function (responses) {\n                loadPage(view, responses[0], responses[1], responses[2]);\n            });\n            ApiClient.getNamedConfiguration(brandingConfigKey).then(function (config) {\n                currentBrandingOptions = config;\n                view.querySelector(\"#txtLoginDisclaimer\").value = config.LoginDisclaimer || \"\";\n                view.querySelector(\"#txtCustomCss\").value = config.CustomCss || \"\";\n            });\n        });\n    };\n});\n"]}