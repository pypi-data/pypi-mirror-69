{"version":3,"sources":["controllers/dashboard/scheduledtasks/scheduledtasks.js"],"names":["define","$","loading","events","globalize","serverNotifications","reloadList","page","ApiClient","getScheduledTasks","isHidden","then","tasks","populateList","currentCategory","sort","a","b","Category","Name","html","i","length","task","translate","State","Id","getTaskProgressHtml","querySelector","innerHTML","hide","LastExecutionResult","replace","humaneDate","EndTimeUtc","humaneElapsed","StartTimeUtc","Status","progress","CurrentProgressPercentage","toFixed","setTaskButtonIcon","button","icon","inner","classList","remove","add","updateTaskButton","elem","state","title","parents","setAttribute","view","params","onPollIntervalFired","isMessageChannelOpen","onScheduledTasksUpdate","e","apiClient","info","serverId","updateTasks","pollInterval","on","this","id","getAttribute","startScheduledTask","stopScheduledTask","addEventListener","off","stopInterval","sendMessage","clearInterval","show","startInterval","setInterval"],"mappings":"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","file":"scheduledtasks.js","sourcesContent":["define([\"jQuery\", \"loading\", \"events\", \"globalize\", \"serverNotifications\", \"humanedate\", \"listViewStyle\", \"emby-button\"], function($, loading, events, globalize, serverNotifications) {\n    \"use strict\";\n\n    function reloadList(page) {\n        ApiClient.getScheduledTasks({\n            isHidden: false\n        }).then(function(tasks) {\n            populateList(page, tasks);\n            loading.hide();\n        })\n    }\n\n    function populateList(page, tasks) {\n        tasks = tasks.sort(function(a, b) {\n            a = a.Category + \" \" + a.Name;\n            b = b.Category + \" \" + b.Name;\n            return a == b ? 0 : a < b ? -1 : 1;\n        });\n\n        var currentCategory;\n        var html = \"\";\n        for (var i = 0; i < tasks.length; i++) {\n            var task = tasks[i];\n            if (task.Category != currentCategory) {\n                currentCategory = task.Category;\n                if (currentCategory) {\n                    html += \"</div>\";\n                    html += \"</div>\";\n                }\n                html += '<div class=\"verticalSection verticalSection-extrabottompadding\">';\n                html += '<div class=\"sectionTitleContainer\" style=\"margin-bottom:1em;\">';\n                html += '<h2 class=\"sectionTitle\">';\n                html += currentCategory;\n                html += \"</h2>\";\n                if (i === 0) {\n                    html += '<a is=\"emby-linkbutton\" class=\"raised button-alt headerHelpButton\" target=\"_blank\" href=\"https://docs.jellyfin.org/general/server/tasks.html\">' + globalize.translate(\"Help\") + \"</a>\";\n                }\n                html += \"</div>\";\n                html += '<div class=\"paperList\">';\n            }\n            html += '<div class=\"listItem listItem-border scheduledTaskPaperIconItem\" data-status=\"' + task.State + '\">';\n            html += \"<a is='emby-linkbutton' style='margin:0;padding:0;' class='clearLink listItemIconContainer' href='scheduledtask.html?id=\" + task.Id + \"'>\";\n            html += '<i class=\"material-icons listItemIcon\">schedule</i>';\n            html += \"</a>\";\n            html += '<div class=\"listItemBody two-line\">';\n            html += \"<a class='clearLink' style='margin:0;padding:0;display:block;text-align:left;' is='emby-linkbutton' href='scheduledtask.html?id=\" + task.Id + \"'>\";\n            html += \"<h3 class='listItemBodyText'>\" + task.Name + \"</h3>\";\n            html += \"<div class='secondary listItemBodyText' id='taskProgress\" + task.Id + \"'>\" + getTaskProgressHtml(task) + \"</div>\";\n            html += \"</a>\";\n            html += \"</div>\";\n            if (task.State === \"Running\") {\n                html += '<button type=\"button\" is=\"paper-icon-button-light\" id=\"btnTask' + task.Id + '\" class=\"btnStopTask\" data-taskid=\"' + task.Id + '\" title=\"' + globalize.translate(\"ButtonStop\") + '\"><i class=\"material-icons stop\"></i></button>';\n            } else if (task.State === \"Idle\") {\n                html += '<button type=\"button\" is=\"paper-icon-button-light\" id=\"btnTask' + task.Id + '\" class=\"btnStartTask\" data-taskid=\"' + task.Id + '\" title=\"' + globalize.translate(\"ButtonStart\") + '\"><i class=\"material-icons play_arrow\"></i></button>';\n            }\n            html += \"</div>\";\n        }\n        if (tasks.length) {\n            html += \"</div>\";\n            html += \"</div>\";\n        }\n        page.querySelector(\".divScheduledTasks\").innerHTML = html;\n    }\n\n    function getTaskProgressHtml(task) {\n        var html = \"\";\n        if (task.State === \"Idle\") {\n            if (task.LastExecutionResult) {\n                html += globalize.translate(\"LabelScheduledTaskLastRan\").replace(\"{0}\", humaneDate(task.LastExecutionResult.EndTimeUtc)).replace(\"{1}\", humaneElapsed(task.LastExecutionResult.StartTimeUtc, task.LastExecutionResult.EndTimeUtc));\n                if (task.LastExecutionResult.Status === \"Failed\") {\n                    html += \" <span style='color:#FF0000;'>(\" + globalize.translate(\"LabelFailed\") + \")</span>\";\n                } else if (task.LastExecutionResult.Status === \"Cancelled\") {\n                    html += \" <span style='color:#0026FF;'>(\" + globalize.translate(\"LabelCancelled\") + \")</span>\";\n                } else if (task.LastExecutionResult.Status === \"Aborted\") {\n                    html += \" <span style='color:#FF0000;'>\" + globalize.translate(\"LabelAbortedByServerShutdown\") + \"</span>\";\n                }\n            }\n        } else if (task.State === \"Running\") {\n            var progress = (task.CurrentProgressPercentage || 0).toFixed(1);\n            html += '<div style=\"display:flex;align-items:center;\">';\n            html += '<div class=\"taskProgressOuter\" title=\"' + progress + '%\" style=\"flex-grow:1;\">';\n            html += '<div class=\"taskProgressInner\" style=\"width:' + progress + '%;\">';\n            html += \"</div>\";\n            html += \"</div>\";\n            html += \"<span style='color:#00a4dc;margin-left:5px;'>\" + progress + \"%</span>\";\n            html += \"</div>\";\n        } else {\n            html += \"<span style='color:#FF0000;'>\" + globalize.translate(\"LabelStopping\") + \"</span>\";\n        }\n        return html;\n    }\n\n    function setTaskButtonIcon(button, icon) {\n        var inner = button.querySelector(\"i\");\n        inner.classList.remove(\"stop\", \"play_arrow\");\n        inner.classList.add(icon);\n    }\n\n    function updateTaskButton(elem, state) {\n        if (state === \"Running\") {\n            elem.classList.remove(\"btnStartTask\");\n            elem.classList.add(\"btnStopTask\");\n            setTaskButtonIcon(elem, \"stop\");\n            elem.title = globalize.translate(\"ButtonStop\");\n        } else if (state === \"Idle\") {\n            elem.classList.add(\"btnStartTask\");\n            elem.classList.remove(\"btnStopTask\");\n            setTaskButtonIcon(elem, \"play_arrow\");\n            elem.title = globalize.translate(\"ButtonStart\");\n        }\n        $(elem).parents(\".listItem\")[0].setAttribute(\"data-status\", state);\n    }\n\n    return function(view, params) {\n        function updateTasks(tasks) {\n            for (var i = 0; i < tasks.length; i++) {\n                var task = tasks[i];\n                view.querySelector(\"#taskProgress\" + task.Id).innerHTML = getTaskProgressHtml(task);\n                updateTaskButton(view.querySelector(\"#btnTask\" + task.Id), task.State);\n            }\n        }\n\n        function onPollIntervalFired() {\n            if (!ApiClient.isMessageChannelOpen()) {\n                reloadList(view);\n            }\n        }\n\n        function onScheduledTasksUpdate(e, apiClient, info) {\n            if (apiClient.serverId() === serverId) {\n                updateTasks(info);\n            }\n        }\n\n        function startInterval() {\n            ApiClient.sendMessage(\"ScheduledTasksInfoStart\", \"1000,1000\");\n            pollInterval && clearInterval(pollInterval);\n            pollInterval = setInterval(onPollIntervalFired, 1e4);\n        }\n\n        function stopInterval() {\n            ApiClient.sendMessage(\"ScheduledTasksInfoStop\");\n            pollInterval && clearInterval(pollInterval);\n        }\n\n        var pollInterval;\n        var serverId = ApiClient.serverId();\n\n        $(\".divScheduledTasks\", view).on(\"click\", \".btnStartTask\", function() {\n            var button = this;\n            var id = button.getAttribute(\"data-taskid\");\n            ApiClient.startScheduledTask(id).then(function() {\n                updateTaskButton(button, \"Running\");\n                reloadList(view);\n            })\n        });\n\n        $(\".divScheduledTasks\", view).on(\"click\", \".btnStopTask\", function() {\n            var button = this;\n            var id = button.getAttribute(\"data-taskid\");\n            ApiClient.stopScheduledTask(id).then(function() {\n                updateTaskButton(button, \"\");\n                reloadList(view);\n            })\n        });\n\n        view.addEventListener(\"viewbeforehide\", function() {\n            events.off(serverNotifications, \"ScheduledTasksInfo\", onScheduledTasksUpdate);\n            stopInterval();\n        });\n\n        view.addEventListener(\"viewshow\", function() {\n            loading.show();\n            startInterval();\n            reloadList(view);\n            events.on(serverNotifications, \"ScheduledTasksInfo\", onScheduledTasksUpdate);\n        });\n    }\n});\n"]}