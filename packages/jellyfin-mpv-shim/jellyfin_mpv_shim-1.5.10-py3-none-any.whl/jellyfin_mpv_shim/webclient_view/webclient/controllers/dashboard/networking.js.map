{"version":3,"sources":["controllers/dashboard/networking.js"],"names":["define","loading","libraryMenu","globalize","onSubmit","e","form","this","localAddress","querySelector","value","enableUpnp","checked","confirmSelections","callback","alertText","title","translate","text","then","validationResult","getValidationAlert","validateHttps","remoteAccess","certPath","httpsMode","Promise","resolve","reject","show","ApiClient","getServerConfiguration","config","LocalNetworkSubnets","split","map","s","trim","filter","length","RemoteIPFilter","IsRemoteIPFilterBlacklist","PublicPort","PublicHttpsPort","EnableHttps","RequireHttps","IsBehindProxy","HttpsPortNumber","HttpServerPortNumber","EnableUPnP","BaseUrl","EnableRemoteAccess","CertificatePath","CertificatePassword","LocalNetworkAddresses","updateServerConfiguration","Dashboard","processServerConfigurationUpdateResult","processErrorResponse","preventDefault","options","require","alert","view","params","loadPage","page","join","selectHttpsMode","triggerChange","select","evt","document","createEvent","initEvent","dispatchEvent","hide","addEventListener","classList","remove","add","directoryBrowser","picker","includeFiles","includeDirectories","path","close","header"],"mappings":"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","file":"networking.js","sourcesContent":["define([\"loading\", \"libraryMenu\", \"globalize\", \"emby-checkbox\", \"emby-select\"], function (loading, libraryMenu, globalize) {\n    \"use strict\";\n\n    function onSubmit(e) {\n        var form = this;\n        var localAddress = form.querySelector(\"#txtLocalAddress\").value;\n        var enableUpnp = form.querySelector(\"#chkEnableUpnp\").checked;\n        confirmSelections(localAddress, enableUpnp, function () {\n            var validationResult = getValidationAlert(form);\n\n            if (validationResult) {\n                alertText(validationResult);\n                return;\n            }\n\n            validateHttps(form).then(function () {\n                loading.show();\n                ApiClient.getServerConfiguration().then(function (config) {\n                    config.LocalNetworkSubnets = form.querySelector(\"#txtLanNetworks\").value.split(\",\").map(function (s) {\n                        return s.trim();\n                    }).filter(function (s) {\n                        return s.length > 0;\n                    });\n                    config.RemoteIPFilter = form.querySelector(\"#txtExternalAddressFilter\").value.split(\",\").map(function (s) {\n                        return s.trim();\n                    }).filter(function (s) {\n                        return s.length > 0;\n                    });\n                    config.IsRemoteIPFilterBlacklist = \"blacklist\" === form.querySelector(\"#selectExternalAddressFilterMode\").value;\n                    config.PublicPort = form.querySelector(\"#txtPublicPort\").value;\n                    config.PublicHttpsPort = form.querySelector(\"#txtPublicHttpsPort\").value;\n                    var httpsMode = form.querySelector(\"#selectHttpsMode\").value;\n\n                    switch (httpsMode) {\n                        case \"proxy\":\n                            config.EnableHttps = true;\n                            config.RequireHttps = false;\n                            config.IsBehindProxy = true;\n                            break;\n\n                        case \"required\":\n                            config.EnableHttps = true;\n                            config.RequireHttps = true;\n                            config.IsBehindProxy = false;\n                            break;\n\n                        case \"enabled\":\n                            config.EnableHttps = true;\n                            config.RequireHttps = false;\n                            config.IsBehindProxy = false;\n                            break;\n\n                        default:\n                            config.EnableHttps = false;\n                            config.RequireHttps = false;\n                            config.IsBehindProxy = false;\n                    }\n\n                    config.HttpsPortNumber = form.querySelector(\"#txtHttpsPort\").value;\n                    config.HttpServerPortNumber = form.querySelector(\"#txtPortNumber\").value;\n                    config.EnableUPnP = enableUpnp;\n                    config.BaseUrl = form.querySelector(\"#txtBaseUrl\").value;\n                    config.EnableRemoteAccess = form.querySelector(\"#chkRemoteAccess\").checked;\n                    config.CertificatePath = form.querySelector(\"#txtCertificatePath\").value || null;\n                    config.CertificatePassword = form.querySelector(\"#txtCertPassword\").value || null;\n                    config.LocalNetworkAddresses = localAddress ? [localAddress] : [];\n                    ApiClient.updateServerConfiguration(config).then(Dashboard.processServerConfigurationUpdateResult, Dashboard.processErrorResponse);\n                });\n            });\n        });\n        e.preventDefault();\n    }\n\n    function triggerChange(select) {\n        var evt = document.createEvent(\"HTMLEvents\");\n        evt.initEvent(\"change\", false, true);\n        select.dispatchEvent(evt);\n    }\n\n    function getValidationAlert(form) {\n        if (form.querySelector(\"#txtPublicPort\").value === form.querySelector(\"#txtPublicHttpsPort\").value) {\n            return \"The public http and https ports must be different.\";\n        }\n\n        if (form.querySelector(\"#txtPortNumber\").value === form.querySelector(\"#txtHttpsPort\").value) {\n            return \"The http and https ports must be different.\";\n        }\n\n        return null;\n    }\n\n    function validateHttps(form) {\n        var remoteAccess = form.querySelector(\"#chkRemoteAccess\").checked;\n        var certPath = form.querySelector(\"#txtCertificatePath\").value || null;\n        var httpsMode = form.querySelector(\"#selectHttpsMode\").value;\n\n        if (!remoteAccess || (\"enabled\" !== httpsMode && \"required\" !== httpsMode || certPath)) {\n            return Promise.resolve();\n        }\n\n        return new Promise(function (resolve, reject) {\n            return alertText({\n                title: globalize.translate(\"TitleHostingSettings\"),\n                text: globalize.translate(\"HttpsRequiresCert\")\n            }).then(reject, reject);\n        });\n    }\n\n    function alertText(options) {\n        return new Promise(function (resolve, reject) {\n            require([\"alert\"], function (alert) {\n                alert(options).then(resolve, reject);\n            });\n        });\n    }\n\n    function confirmSelections(localAddress, enableUpnp, callback) {\n        if (localAddress || !enableUpnp) {\n            alertText({\n                title: globalize.translate(\"TitleHostingSettings\"),\n                text: globalize.translate(\"SettingsWarning\")\n            }).then(callback);\n        } else {\n            callback();\n        }\n    }\n\n    return function (view, params) {\n        function loadPage(page, config) {\n            page.querySelector(\"#txtPortNumber\").value = config.HttpServerPortNumber;\n            page.querySelector(\"#txtPublicPort\").value = config.PublicPort;\n            page.querySelector(\"#txtPublicHttpsPort\").value = config.PublicHttpsPort;\n            page.querySelector(\"#txtLocalAddress\").value = config.LocalNetworkAddresses[0] || \"\";\n            page.querySelector(\"#txtLanNetworks\").value = (config.LocalNetworkSubnets || []).join(\", \");\n            page.querySelector(\"#txtExternalAddressFilter\").value = (config.RemoteIPFilter || []).join(\", \");\n            page.querySelector(\"#selectExternalAddressFilterMode\").value = config.IsRemoteIPFilterBlacklist ? \"blacklist\" : \"whitelist\";\n            page.querySelector(\"#chkRemoteAccess\").checked = null == config.EnableRemoteAccess || config.EnableRemoteAccess;\n            var selectHttpsMode = page.querySelector(\"#selectHttpsMode\");\n\n            if (config.IsBehindProxy) {\n                selectHttpsMode.value = \"proxy\";\n            } else if (config.RequireHttps) {\n                selectHttpsMode.value = \"required\";\n            } else if (config.EnableHttps) {\n                selectHttpsMode.value = \"enabled\";\n            } else {\n                selectHttpsMode.value = \"disabled\";\n            }\n\n            page.querySelector(\"#txtHttpsPort\").value = config.HttpsPortNumber;\n            page.querySelector(\"#txtBaseUrl\").value = config.BaseUrl || \"\";\n            var txtCertificatePath = page.querySelector(\"#txtCertificatePath\");\n            txtCertificatePath.value = config.CertificatePath || \"\";\n            page.querySelector(\"#txtCertPassword\").value = config.CertificatePassword || \"\";\n            page.querySelector(\"#chkEnableUpnp\").checked = config.EnableUPnP;\n            triggerChange(page.querySelector(\"#chkRemoteAccess\"));\n            loading.hide();\n        }\n\n        view.querySelector(\"#chkRemoteAccess\").addEventListener(\"change\", function () {\n            if (this.checked) {\n                view.querySelector(\".fldExternalAddressFilter\").classList.remove(\"hide\");\n                view.querySelector(\".fldExternalAddressFilterMode\").classList.remove(\"hide\");\n                view.querySelector(\".fldPublicPort\").classList.remove(\"hide\");\n                view.querySelector(\".fldPublicHttpsPort\").classList.remove(\"hide\");\n                view.querySelector(\".fldCertificatePath\").classList.remove(\"hide\");\n                view.querySelector(\".fldCertPassword\").classList.remove(\"hide\");\n                view.querySelector(\".fldHttpsMode\").classList.remove(\"hide\");\n                view.querySelector(\".fldEnableUpnp\").classList.remove(\"hide\");\n            } else {\n                view.querySelector(\".fldExternalAddressFilter\").classList.add(\"hide\");\n                view.querySelector(\".fldExternalAddressFilterMode\").classList.add(\"hide\");\n                view.querySelector(\".fldPublicPort\").classList.add(\"hide\");\n                view.querySelector(\".fldPublicHttpsPort\").classList.add(\"hide\");\n                view.querySelector(\".fldCertificatePath\").classList.add(\"hide\");\n                view.querySelector(\".fldCertPassword\").classList.add(\"hide\");\n                view.querySelector(\".fldHttpsMode\").classList.add(\"hide\");\n                view.querySelector(\".fldEnableUpnp\").classList.add(\"hide\");\n            }\n        });\n        view.querySelector(\"#btnSelectCertPath\").addEventListener(\"click\", function () {\n            require([\"directorybrowser\"], function (directoryBrowser) {\n                var picker = new directoryBrowser();\n                picker.show({\n                    includeFiles: true,\n                    includeDirectories: true,\n                    callback: function (path) {\n                        if (path) {\n                            view.querySelector(\"#txtCertificatePath\").value = path;\n                        }\n\n                        picker.close();\n                    },\n                    header: globalize.translate(\"HeaderSelectCertificatePath\")\n                });\n            });\n        });\n        view.querySelector(\".dashboardHostingForm\").addEventListener(\"submit\", onSubmit);\n        view.addEventListener(\"viewshow\", function (e) {\n            loading.show();\n            ApiClient.getServerConfiguration().then(function (config) {\n                loadPage(view, config);\n            });\n        });\n    };\n});\n"]}