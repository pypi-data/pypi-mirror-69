{"version":3,"sources":["components/directorybrowser/directorybrowser.js"],"names":["define","loading","dialogHelper","dom","onDialogClosed","hide","refreshDirectoryBrowser","page","path","fileOptions","updatePathOnError","Error","show","promises","push","ApiClient","getNetworkDevices","getDirectoryContents","getParentPath","getDrives","Promise","all","then","responses","folders","parentPath","html","querySelector","scrollTop","value","getItem","i","length","folder","Type","Path","Name","Globalize","translate","innerHTML","cssClass","type","name","alertText","text","alertTextWithOptions","options","require","alert","initEditor","content","addEventListener","e","lnkPath","parentWithClass","target","getAttribute","classList","contains","txtDirectoryPickerPath","parentWithTag","id","callback","networkSharePath","this","validatePath","validateWriteable","apiClient","ajax","url","getUrl","data","ValidateWriteable","catch","response","status","reject","resolve","preventDefault","stopPropagation","getDefaultPath","getJSON","result","systemInfo","directoryBrowser","currentDialog","includeDirectories","includeFiles","getPublicSystemInfo","info","initialPath","dlg","createDialog","size","removeOnClose","scrollY","add","header","getEditorHtml","labelKey","pathReadOnly","instruction","replace","OperatingSystem","toLowerCase","readOnlyAttribute","enableNetworkSharePath","open","close","txtNetworkPath"],"mappings":"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","file":"directorybrowser.js","sourcesContent":["define(['loading', 'dialogHelper', 'dom', 'listViewStyle', 'emby-input', 'paper-icon-button-light', 'css!./directorybrowser', 'formDialogStyle', 'emby-button'], function(loading, dialogHelper, dom) {\n    'use strict';\n\n    function getSystemInfo() {\n        return systemInfo ? Promise.resolve(systemInfo) : ApiClient.getPublicSystemInfo().then(\n            function(info) {\n                systemInfo = info;\n                return info;\n            }\n        )\n    }\n\n    function onDialogClosed() {\n        loading.hide()\n    }\n\n    function refreshDirectoryBrowser(page, path, fileOptions, updatePathOnError) {\n        if (path && typeof path !== 'string') {\n            throw new Error(\"invalid path\");\n        }\n\n        loading.show();\n\n        var promises = [];\n\n        if (\"Network\" === path) {\n            promises.push(ApiClient.getNetworkDevices())\n        } else {\n            if (path) {\n                promises.push(ApiClient.getDirectoryContents(path, fileOptions));\n                promises.push(ApiClient.getParentPath(path));\n            } else {\n                promises.push(ApiClient.getDrives());\n            }\n        }\n\n        Promise.all(promises).then(\n            function(responses) {\n                var folders = responses[0];\n                var parentPath = responses[1] || \"\";\n                var html = \"\";\n\n                page.querySelector(\".results\").scrollTop = 0;\n                page.querySelector(\"#txtDirectoryPickerPath\").value = path || \"\";\n\n                if (path) {\n                    html += getItem(\"lnkPath lnkDirectory\", \"\", parentPath, \"...\");\n                }\n                for (var i = 0, length = folders.length; i < length; i++) {\n                    var folder = folders[i];\n                    var cssClass = \"File\" === folder.Type ? \"lnkPath lnkFile\" : \"lnkPath lnkDirectory\";\n                    html += getItem(cssClass, folder.Type, folder.Path, folder.Name);\n                }\n\n                if (!path) {\n                    html += getItem(\"lnkPath lnkDirectory\", \"\", \"Network\", Globalize.translate(\"ButtonNetwork\"));\n                }\n\n                page.querySelector(\".results\").innerHTML = html;\n                loading.hide();\n            }, function() {\n                if (updatePathOnError) {\n                    page.querySelector(\"#txtDirectoryPickerPath\").value = \"\";\n                    page.querySelector(\".results\").innerHTML = \"\";\n                    loading.hide();\n                }\n            }\n        );\n    }\n\n    function getItem(cssClass, type, path, name) {\n        var html = \"\";\n        html += '<div class=\"listItem listItem-border ' + cssClass + '\" data-type=\"' + type + '\" data-path=\"' + path + '\">';\n        html += '<div class=\"listItemBody\" style=\"padding-left:0;padding-top:.5em;padding-bottom:.5em;\">';\n        html += '<div class=\"listItemBodyText\">';\n        html += name;\n        html += \"</div>\";\n        html += \"</div>\";\n        html += '<i class=\"material-icons arrow_forward\" style=\"font-size:inherit;\"></i>';\n        html += \"</div>\";\n        return html;\n    }\n\n    function getEditorHtml(options, systemInfo) {\n        var html = \"\";\n        html += '<div class=\"formDialogContent scrollY\">';\n        html += '<div class=\"dialogContentInner dialog-content-centered\" style=\"padding-top:2em;\">';\n        if (!options.pathReadOnly) {\n            var instruction = options.instruction ? options.instruction + \"<br/><br/>\" : \"\";\n            html += '<div class=\"infoBanner\" style=\"margin-bottom:1.5em;\">';\n            html += instruction;\n            html += Globalize.translate(\"MessageDirectoryPickerInstruction\").replace(\"{0}\", \"<b>\\\\\\\\server</b>\").replace(\"{1}\", \"<b>\\\\\\\\192.168.1.101</b>\");\n            if (\"bsd\" === systemInfo.OperatingSystem.toLowerCase()) {\n                html += \"<br/>\";\n                html += \"<br/>\";\n                html += Globalize.translate(\"MessageDirectoryPickerBSDInstruction\");\n                html += \"<br/>\";\n            } else if (\"linux\" === systemInfo.OperatingSystem.toLowerCase()) {\n                html += \"<br/>\";\n                html += \"<br/>\";\n                html += Globalize.translate(\"MessageDirectoryPickerLinuxInstruction\");\n                html += \"<br/>\";\n            }\n            html += \"</div>\"\n        }\n        html += '<form style=\"margin:auto;\">';\n        html += '<div class=\"inputContainer\" style=\"display: flex; align-items: center;\">';\n        html += '<div style=\"flex-grow:1;\">';\n        var labelKey;\n        if (options.includeFiles !== true) {\n            labelKey = \"LabelFolder\";\n        } else {\n            labelKey = \"LabelPath\";\n        }\n        var readOnlyAttribute = options.pathReadOnly ? \" readonly\" : \"\";\n        html += '<input is=\"emby-input\" id=\"txtDirectoryPickerPath\" type=\"text\" required=\"required\" ' + readOnlyAttribute + ' label=\"' + Globalize.translate(labelKey) + '\"/>';\n        html += \"</div>\";\n        if (!readOnlyAttribute) {\n            html += '<button type=\"button\" is=\"paper-icon-button-light\" class=\"btnRefreshDirectories emby-input-iconbutton\" title=\"' + Globalize.translate(\"ButtonRefresh\") + '\"><i class=\"material-icons\">search</i></button>';\n        }\n        html += \"</div>\";\n        if (!readOnlyAttribute) {\n            html += '<div class=\"results paperList\" style=\"max-height: 200px; overflow-y: auto;\"></div>';\n        }\n        if (options.enableNetworkSharePath) {\n            html += '<div class=\"inputContainer\" style=\"margin-top:2em;\">';\n            html += '<input is=\"emby-input\" id=\"txtNetworkPath\" type=\"text\" label=\"' + Globalize.translate(\"LabelOptionalNetworkPath\") + '\"/>';\n            html += '<div class=\"fieldDescription\">';\n            html += Globalize.translate(\"LabelOptionalNetworkPathHelp\");\n            html += \"</div>\";\n            html += \"</div>\";\n        }\n        html += '<div class=\"formDialogFooter\">';\n        html += '<button is=\"emby-button\" type=\"submit\" class=\"raised button-submit block formDialogFooterItem\">' + Globalize.translate(\"ButtonOk\") + \"</button>\";\n        html += \"</div>\";\n        html += \"</form>\";\n        html += \"</div>\";\n        html += \"</div>\";\n        html += \"</div>\";\n\n        return html;\n    }\n\n    function alertText(text) {\n        alertTextWithOptions({\n            text: text\n        })\n    }\n\n    function alertTextWithOptions(options) {\n        require([\"alert\"], function(alert) {\n            alert(options)\n        })\n    }\n\n    function validatePath(path, validateWriteable, apiClient) {\n        return apiClient.ajax({\n            type: \"POST\",\n            url: apiClient.getUrl(\"Environment/ValidatePath\"),\n            data: {\n                ValidateWriteable: validateWriteable,\n                Path: path\n            }\n        }).catch(function(response) {\n            if (response) {\n                // TODO All alerts (across the project), should use Globalize.translate()\n                if (response.status === 404) {\n                    alertText(\"The path could not be found. Please ensure the path is valid and try again.\");\n                    return Promise.reject();\n                }\n                if (response.status === 500) {\n                    if (validateWriteable) {\n                        alertText(\"Jellyfin Server requires write access to this folder. Please ensure write access and try again.\");\n                    } else {\n                        alertText(\"The path could not be found. Please ensure the path is valid and try again.\")\n                    }\n                    return Promise.reject()\n                }\n            }\n            return Promise.resolve()\n        });\n    }\n\n    function initEditor(content, options, fileOptions) {\n        content.addEventListener(\"click\", function(e) {\n            var lnkPath = dom.parentWithClass(e.target, \"lnkPath\");\n            if (lnkPath) {\n                var path = lnkPath.getAttribute(\"data-path\");\n                if (lnkPath.classList.contains(\"lnkFile\")) {\n                    content.querySelector(\"#txtDirectoryPickerPath\").value = path;\n                } else {\n                    refreshDirectoryBrowser(content, path, fileOptions, true)\n                }\n            }\n        });\n\n        content.addEventListener(\"click\", function(e) {\n            if (dom.parentWithClass(e.target, \"btnRefreshDirectories\")) {\n                var path = content.querySelector(\"#txtDirectoryPickerPath\").value;\n                refreshDirectoryBrowser(content, path, fileOptions);\n            }\n        });\n\n        content.addEventListener(\"change\", function(e) {\n            var txtDirectoryPickerPath = dom.parentWithTag(e.target, \"INPUT\");\n            if (txtDirectoryPickerPath && \"txtDirectoryPickerPath\" === txtDirectoryPickerPath.id) {\n                refreshDirectoryBrowser(content, txtDirectoryPickerPath.value, fileOptions);\n            }\n        });\n\n        content.querySelector(\"form\").addEventListener(\"submit\", function(e) {\n            if (options.callback) {\n                var networkSharePath = this.querySelector(\"#txtNetworkPath\");\n                networkSharePath = networkSharePath ? networkSharePath.value : null;\n                var path = this.querySelector(\"#txtDirectoryPickerPath\").value;\n                validatePath(path, options.validateWriteable, ApiClient).then(options.callback(path, networkSharePath));\n            }\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n        });\n    }\n\n    function getDefaultPath(options) {\n        if (options.path) {\n            return Promise.resolve(options.path);\n        } else {\n            return ApiClient.getJSON(ApiClient.getUrl(\"Environment/DefaultDirectoryBrowser\")).then(\n                function(result) {\n                    return result.Path || \"\";\n                }, function() {\n                    return \"\";\n                }\n            );\n        }\n    }\n\n    function directoryBrowser() {\n        var currentDialog;\n        var self = this;\n        self.show = function(options) {\n            options = options || {};\n            var fileOptions = {\n                includeDirectories: true\n            };\n            if (options.includeDirectories != null) {\n                fileOptions.includeDirectories = options.includeDirectories;\n            }\n            if (options.includeFiles != null) {\n                fileOptions.includeFiles = options.includeFiles;\n            }\n            Promise.all([getSystemInfo(), getDefaultPath(options)]).then(\n                function(responses) {\n                    var systemInfo = responses[0];\n                    var initialPath = responses[1];\n                    var dlg = dialogHelper.createDialog({\n                        size: \"medium-tall\",\n                        removeOnClose: true,\n                        scrollY: false\n                    });\n                    dlg.classList.add(\"ui-body-a\");\n                    dlg.classList.add(\"background-theme-a\");\n                    dlg.classList.add(\"directoryPicker\");\n                    dlg.classList.add(\"formDialog\");\n\n                    var html = \"\";\n                    html += '<div class=\"formDialogHeader\">';\n                    html += '<button is=\"paper-icon-button-light\" class=\"btnCloseDialog autoSize\" tabindex=\"-1\"><i class=\"material-icons arrow_back\"></i></button>';\n                    html += '<h3 class=\"formDialogHeaderTitle\">';\n                    html += options.header || Globalize.translate(\"HeaderSelectPath\");\n                    html += \"</h3>\";\n                    html += \"</div>\";\n                    html += getEditorHtml(options, systemInfo);\n                    dlg.innerHTML = html;\n                    initEditor(dlg, options, fileOptions);\n                    dlg.addEventListener(\"close\", onDialogClosed);\n                    dialogHelper.open(dlg);\n                    dlg.querySelector(\".btnCloseDialog\").addEventListener(\"click\", function() {\n                        dialogHelper.close(dlg)\n                    });\n                    currentDialog = dlg;\n                    dlg.querySelector(\"#txtDirectoryPickerPath\").value = initialPath;\n                    var txtNetworkPath = dlg.querySelector(\"#txtNetworkPath\");\n                    if (txtNetworkPath) {\n                        txtNetworkPath.value = options.networkSharePath || \"\";\n                    }\n                    if (!options.pathReadOnly) {\n                        refreshDirectoryBrowser(dlg, initialPath, fileOptions, true);\n                    }\n                }\n            );\n        };\n        self.close = function() {\n            if (currentDialog) {\n                dialogHelper.close(currentDialog);\n            }\n        }\n    }\n\n    var systemInfo;\n    return directoryBrowser\n});\n"]}