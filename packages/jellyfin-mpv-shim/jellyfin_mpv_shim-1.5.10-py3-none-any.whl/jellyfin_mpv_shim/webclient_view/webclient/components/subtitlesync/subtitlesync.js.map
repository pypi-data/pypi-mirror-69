{"version":3,"sources":["components/subtitlesync/subtitlesync.js"],"names":["define","playbackManager","layoutManager","template","css","player","subtitleSyncSlider","subtitleSyncTextField","subtitleSyncCloseButton","subtitleSyncContainer","init","instance","parent","document","createElement","body","appendChild","innerHTML","querySelector","tv","classList","add","setTimeout","enableKeyboardDragging","updateOffset","offset","this","textContent","addEventListener","event","key","inputOffset","exec","parseFloat","setSubtitleOffset","getPercentageFromOffset","value","percentValue","Math","min","max","toFixed","getPlayerSubtitleOffset","hasFocus","preventDefault","match","percent","undefined","getOffsetFromPercentage","getBubbleHtml","newOffset","disableShowingSubtitleOffset","SubtitleSync","prototype","toggle","element","currentPlayer","destroy","elem","parentNode","removeChild","action","supportSubtitleOffset","isShowingSubtitleOffsetEnabled","canHandleOffsetOnCurrentSubtitle","remove"],"mappings":"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","file":"subtitlesync.js","sourcesContent":["define(['playbackManager', 'layoutManager', 'text!./subtitlesync.template.html', 'css!./subtitlesync'], function (playbackManager, layoutManager, template, css) {\n    \"use strict\";\n\n    var player;\n    var subtitleSyncSlider;\n    var subtitleSyncTextField;\n    var subtitleSyncCloseButton;\n    var subtitleSyncContainer;\n\n    function init(instance) {\n\n        var parent = document.createElement('div');\n        document.body.appendChild(parent);\n        parent.innerHTML = template;\n\n        subtitleSyncSlider = parent.querySelector(\".subtitleSyncSlider\");\n        subtitleSyncTextField = parent.querySelector(\".subtitleSyncTextField\");\n        subtitleSyncCloseButton = parent.querySelector(\".subtitleSync-closeButton\");\n        subtitleSyncContainer = parent.querySelector(\".subtitleSyncContainer\");\n\n        if (layoutManager.tv) {\n            subtitleSyncSlider.classList.add(\"focusable\");\n            // HACK: Delay to give time for registered element attach (Firefox)\n            setTimeout(function () {\n                subtitleSyncSlider.enableKeyboardDragging();\n            }, 0);\n        }\n\n        subtitleSyncContainer.classList.add(\"hide\");\n\n        subtitleSyncTextField.updateOffset = function(offset) {\n            this.textContent = offset + \"s\";\n        }\n\n        subtitleSyncTextField.addEventListener(\"keypress\", function(event) {\n\n            if (event.key === \"Enter\") {\n                // if input key is enter search for float pattern\n                var inputOffset = /[-+]?\\d+\\.?\\d*/g.exec(this.textContent);\n                if (inputOffset) {\n                    inputOffset = inputOffset[0];\n\n                    // replace current text by considered offset\n                    this.textContent = inputOffset + \"s\";\n\n                    inputOffset = parseFloat(inputOffset);\n                    // set new offset\n                    playbackManager.setSubtitleOffset(inputOffset, player);\n                    // synchronize with slider value\n                    subtitleSyncSlider.updateOffset(\n                        getPercentageFromOffset(inputOffset));\n                } else {\n                    this.textContent = (playbackManager.getPlayerSubtitleOffset(player) || 0) + \"s\";\n                }\n                this.hasFocus = false;\n                event.preventDefault();\n            } else {\n                // keep focus to prevent fade with bottom layout\n                this.hasFocus = true;\n                if (event.key.match(/[+-\\d.s]/) === null) {\n                    event.preventDefault();\n                }\n            }\n        });\n\n        subtitleSyncSlider.updateOffset = function(percent) {\n            // default value is 0s = 50%\n            this.value = percent === undefined ? 50 : percent;\n        }\n\n        subtitleSyncSlider.addEventListener(\"change\", function () {\n            // set new offset\n            playbackManager.setSubtitleOffset(getOffsetFromPercentage(this.value), player);\n            // synchronize with textField value\n            subtitleSyncTextField.updateOffset(\n                getOffsetFromPercentage(this.value));\n        });\n\n        subtitleSyncSlider.addEventListener(\"touchmove\", function () {\n            // set new offset\n            playbackManager.setSubtitleOffset(getOffsetFromPercentage(this.value), player);\n            // synchronize with textField value\n            subtitleSyncTextField.updateOffset(\n                getOffsetFromPercentage(this.value));\n        });\n\n        subtitleSyncSlider.getBubbleHtml = function (value) {\n            var newOffset = getOffsetFromPercentage(value);\n            return '<h1 class=\"sliderBubbleText\">' +\n            (newOffset > 0 ? \"+\" : \"\") + parseFloat(newOffset) + \"s\" +\n            \"</h1>\";\n        };\n\n        subtitleSyncCloseButton.addEventListener(\"click\", function() {\n            playbackManager.disableShowingSubtitleOffset(player);\n            SubtitleSync.prototype.toggle(\"forceToHide\");\n        });\n\n        instance.element = parent;\n    }\n\n    function getOffsetFromPercentage(value) {\n        // convert percent to fraction\n        var offset = (value - 50) / 50;\n        // multiply by offset min/max range value (-x to +x) :\n        offset *= 30;\n        return offset.toFixed(1);\n    }\n\n    function getPercentageFromOffset(value) {\n        // divide by offset min/max range value (-x to +x) :\n        var percentValue = value / 30;\n        // convert fraction to percent\n        percentValue *= 50;\n        percentValue += 50;\n        return Math.min(100, Math.max(0, percentValue.toFixed()));\n    }\n\n    function SubtitleSync(currentPlayer) {\n        player = currentPlayer;\n        init(this);\n    }\n\n    SubtitleSync.prototype.destroy = function() {\n        SubtitleSync.prototype.toggle(\"forceToHide\");\n        if (player) {\n            playbackManager.disableShowingSubtitleOffset(player);\n            playbackManager.setSubtitleOffset(0, player);\n        }\n        var elem = this.element;\n        if (elem) {\n            elem.parentNode.removeChild(elem);\n            this.element = null;\n        }\n    }\n\n    SubtitleSync.prototype.toggle = function(action) {\n\n        if (player && playbackManager.supportSubtitleOffset(player)) {\n            /* eslint-disable no-fallthrough */\n            switch (action) {\n                case undefined:\n                    // if showing subtitle sync is enabled\n                    if (playbackManager.isShowingSubtitleOffsetEnabled(player) &&\n                        // if there is an external subtitle stream enabled\n                        playbackManager.canHandleOffsetOnCurrentSubtitle(player)) {\n                        // if no subtitle offset is defined\n                        if (!playbackManager.getPlayerSubtitleOffset(player)) {\n                            // set default offset to '0' = 50%\n                            subtitleSyncSlider.value = \"50\";\n                            subtitleSyncTextField.textContent = \"0s\";\n                            playbackManager.setSubtitleOffset(0, player);\n                        }\n                        // show subtitle sync\n                        subtitleSyncContainer.classList.remove(\"hide\");\n                        break; // stop here\n                    } // else continue and hide\n                case \"hide\":\n                    // only break if element has focus\n                    if (subtitleSyncTextField.hasFocus) {\n                        break;\n                    }\n                case \"forceToHide\":\n                    subtitleSyncContainer.classList.add(\"hide\");\n                    break;\n            }\n            /* eslint-enable no-fallthrough */\n        }\n    }\n\n    return SubtitleSync;\n});\n"]}