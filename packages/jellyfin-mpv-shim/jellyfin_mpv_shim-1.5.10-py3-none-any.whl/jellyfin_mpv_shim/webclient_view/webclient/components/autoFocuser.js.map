{"version":3,"sources":["components/autoFocuser.js"],"names":["define","focusManager","layoutManager","activeElement","isEnabled","tv","arrayFrom","Array","prototype","from","src","slice","call","enable","window","addEventListener","e","target","console","debug","autoFocus","container","document","body","focusedElement","candidates","classList","contains","push","querySelector","concat","querySelectorAll","every","element","isCurrentlyFocusable","focus","itemsContainer"],"mappings":"AAAA,aAAAA,OAAO,CAAC,eAAgB,kBAAkB,SAAUC,aAAcC,eAM9D,IAAIC,cAKJ,SAASC,YACL,OAAOF,cAAcG,GAqBzB,IAAIC,UAAYC,MAAMC,UAAUC,MAAQ,SAAUC,KAC9C,OAAOH,MAAMC,UAAUG,MAAMC,KAAKF,MA6DtC,MAAO,CACHN,UAAWA,UACXS,OA/EJ,SAASA,SACAT,cAILU,OAAOC,iBAAiB,WAAW,SAAUC,GACzCb,cAAgBa,EAAEC,UAGtBC,QAAQC,MAAM,yBAuEdC,UA1DJ,SAASA,UAAUC,WACf,GAAKjB,YAAL,CAIAiB,UAAYA,WAAaC,SAASC,KAElC,IAoBIC,eApBAC,WAAa,GAgCjB,GA9BItB,gBAEIA,cAAcuB,UAAUC,SAAS,oBACjCF,WAAWG,KAAKP,UAAUQ,cAAc,qBACxCJ,WAAWG,KAAKP,UAAUQ,cAAc,kBACjC1B,cAAcuB,UAAUC,SAAS,gBACxCF,WAAWG,KAAKP,UAAUQ,cAAc,iBACxCJ,WAAWG,KAAKP,UAAUQ,cAAc,sBACjC1B,cAAcuB,UAAUC,SAAS,kBACxCF,WAAWG,KAAKP,UAAUQ,cAAc,mBAG5CJ,WAAWG,KAAKzB,iBAIpBsB,YADAA,WAAaA,WAAWK,OAAOxB,UAAUe,UAAUU,iBAAiB,iBAC5CD,OAAOxB,UAAUe,UAAUU,iBAAiB,eAIzDC,OAAM,SAAUC,SACvB,OAAIhC,aAAaiC,qBAAqBD,WAClChC,aAAakC,MAAMF,SACnBT,eAAiBS,SACV,OAMVT,eAAgB,CAEjB,IAAIY,eAAiBf,UAAUQ,cAAc,mBAEzCO,iBACAZ,eAAiBvB,aAAamB,UAAUgB,iBAQhD,OAJKZ,iBACDA,eAAiBvB,aAAamB,UAAUC,YAGrCG","file":"autoFocuser.js","sourcesContent":["define([\"focusManager\", \"layoutManager\"], function (focusManager, layoutManager) {\n    \"use strict\";\n\n    /**\n     * Previously selected element.\n     */\n    var activeElement;\n\n    /**\n     * Returns true if AutoFocuser is enabled.\n     */\n    function isEnabled() {\n        return layoutManager.tv;\n    }\n\n    /**\n     * Start AutoFocuser\n     */\n    function enable() {\n        if (!isEnabled()) {\n            return;\n        }\n\n        window.addEventListener(\"focusin\", function (e) {\n            activeElement = e.target;\n        });\n\n        console.debug(\"AutoFocuser enabled\");\n    }\n\n    /**\n     * Create an array from some source.\n     */\n    var arrayFrom = Array.prototype.from || function (src) {\n        return Array.prototype.slice.call(src);\n    }\n\n    /**\n     * Set focus on a suitable element, taking into account the previously selected.\n     */\n    function autoFocus(container) {\n        if (!isEnabled()) {\n            return;\n        }\n\n        container = container || document.body;\n\n        var candidates = [];\n\n        if (activeElement) {\n            // These elements are recreated\n            if (activeElement.classList.contains(\"btnPreviousPage\")) {\n                candidates.push(container.querySelector(\".btnPreviousPage\"));\n                candidates.push(container.querySelector(\".btnNextPage\"));\n            } else if (activeElement.classList.contains(\"btnNextPage\")) {\n                candidates.push(container.querySelector(\".btnNextPage\"));\n                candidates.push(container.querySelector(\".btnPreviousPage\"));\n            } else if (activeElement.classList.contains(\"btnSelectView\")) {\n                candidates.push(container.querySelector(\".btnSelectView\"));\n            }\n\n            candidates.push(activeElement);\n        }\n\n        candidates = candidates.concat(arrayFrom(container.querySelectorAll(\".btnResume\")));\n        candidates = candidates.concat(arrayFrom(container.querySelectorAll(\".btnPlay\")));\n\n        var focusedElement;\n\n        candidates.every(function (element) {\n            if (focusManager.isCurrentlyFocusable(element)) {\n                focusManager.focus(element);\n                focusedElement = element;\n                return false;\n            }\n\n            return true;\n        });\n\n        if (!focusedElement) {\n            // FIXME: Multiple itemsContainers\n            var itemsContainer = container.querySelector(\".itemsContainer\");\n\n            if (itemsContainer) {\n                focusedElement = focusManager.autoFocus(itemsContainer);\n            }\n        }\n\n        if (!focusedElement) {\n            focusedElement = focusManager.autoFocus(container);\n        }\n\n        return focusedElement;\n    }\n\n    return {\n        isEnabled: isEnabled,\n        enable: enable,\n        autoFocus: autoFocus\n    };\n});\n"]}