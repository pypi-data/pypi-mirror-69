{"version":3,"sources":["components/medialibraryeditor/medialibraryeditor.js"],"names":["define","jQuery","loading","dialogHelper","dom","libraryoptionseditor","onEditLibrary","isCreating","show","dlg","parentWithClass","this","libraryOptions","getLibraryOptions","querySelector","Object","assign","currentOptions","library","LibraryOptions","ApiClient","updateVirtualFolderOptions","ItemId","then","hasChanges","hide","close","onListItemClick","e","listItem","target","index","parseInt","getAttribute","pathInfos","PathInfos","pathInfo","originalPath","Path","Locations","btnRemovePath","onRemoveClick","location","button","virtualFolder","require","confirm","title","Globalize","translate","text","confirmText","primary","refreshAfterChange","refresh","removeMediaPath","Name","refreshLibraryFromServer","toast","showDirectoryBrowser","NetworkPath","getFolderHtml","html","page","getVirtualFolders","result","filter","f","renderLibrary","options","length","map","p","CollectionType","classList","add","remove","innerHTML","join","onAddButtonClick","context","networkPath","directoryBrowser","picker","enableNetworkSharePath","pathReadOnly","path","networkSharePath","callback","updateMediaLocation","updateMediaPath","addMediaLocation","addMediaPath","onToggleAdvancedChange","setAdvancedVisible","checked","onDialogClosed","currentDeferred","resolveWith","editor","deferred","Deferred","xhr","XMLHttpRequest","open","onload","template","response","createDialog","size","modal","removeOnClose","scrollY","translateDocument","initEditor","addEventListener","embed","call","send","promise"],"mappings":"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","file":"medialibraryeditor.js","sourcesContent":["define([\"jQuery\", \"loading\", \"dialogHelper\", \"dom\", \"components/libraryoptionseditor/libraryoptionseditor\", \"emby-button\", \"listViewStyle\", \"paper-icon-button-light\", \"formDialogStyle\", \"emby-toggle\", \"flexStyles\"], function (jQuery, loading, dialogHelper, dom, libraryoptionseditor) {\n    \"use strict\";\n\n    function onEditLibrary() {\n        if (isCreating) {\n            return false;\n        }\n\n        isCreating = true;\n        loading.show();\n        var dlg = dom.parentWithClass(this, \"dlg-libraryeditor\");\n        var libraryOptions = libraryoptionseditor.getLibraryOptions(dlg.querySelector(\".libraryOptions\"));\n        libraryOptions = Object.assign(currentOptions.library.LibraryOptions || {}, libraryOptions);\n        ApiClient.updateVirtualFolderOptions(currentOptions.library.ItemId, libraryOptions).then(function () {\n            hasChanges = true;\n            isCreating = false;\n            loading.hide();\n            dialogHelper.close(dlg);\n        }, function () {\n            isCreating = false;\n            loading.hide();\n        });\n        return false;\n    }\n\n    function addMediaLocation(page, path, networkSharePath) {\n        var virtualFolder = currentOptions.library;\n        var refreshAfterChange = currentOptions.refresh;\n        ApiClient.addMediaPath(virtualFolder.Name, path, networkSharePath, refreshAfterChange).then(function () {\n            hasChanges = true;\n            refreshLibraryFromServer(page);\n        }, function () {\n            require([\"toast\"], function (toast) {\n                toast(Globalize.translate(\"ErrorAddingMediaPathToVirtualFolder\"));\n            });\n        });\n    }\n\n    function updateMediaLocation(page, path, networkSharePath) {\n        var virtualFolder = currentOptions.library;\n        ApiClient.updateMediaPath(virtualFolder.Name, {\n            Path: path,\n            NetworkPath: networkSharePath\n        }).then(function () {\n            hasChanges = true;\n            refreshLibraryFromServer(page);\n        }, function () {\n            require([\"toast\"], function (toast) {\n                toast(Globalize.translate(\"ErrorAddingMediaPathToVirtualFolder\"));\n            });\n        });\n    }\n\n    function onRemoveClick(btnRemovePath, location) {\n        var button = btnRemovePath;\n        var virtualFolder = currentOptions.library;\n\n        require([\"confirm\"], function (confirm) {\n            confirm({\n                title: Globalize.translate(\"HeaderRemoveMediaLocation\"),\n                text: Globalize.translate(\"MessageConfirmRemoveMediaLocation\"),\n                confirmText: Globalize.translate(\"ButtonDelete\"),\n                primary: \"delete\"\n            }).then(function () {\n                var refreshAfterChange = currentOptions.refresh;\n                ApiClient.removeMediaPath(virtualFolder.Name, location, refreshAfterChange).then(function () {\n                    hasChanges = true;\n                    refreshLibraryFromServer(dom.parentWithClass(button, \"dlg-libraryeditor\"));\n                }, function () {\n                    require([\"toast\"], function (toast) {\n                        toast(Globalize.translate(\"DefaultErrorMessage\"));\n                    });\n                });\n            });\n        });\n    }\n\n    function onListItemClick(e) {\n        var listItem = dom.parentWithClass(e.target, \"listItem\");\n\n        if (listItem) {\n            var index = parseInt(listItem.getAttribute(\"data-index\"));\n            var pathInfos = (currentOptions.library.LibraryOptions || {}).PathInfos || [];\n            var pathInfo = null == index ? {} : pathInfos[index] || {};\n            var originalPath = pathInfo.Path || (null == index ? null : currentOptions.library.Locations[index]);\n            var btnRemovePath = dom.parentWithClass(e.target, \"btnRemovePath\");\n\n            if (btnRemovePath) {\n                onRemoveClick(btnRemovePath, originalPath);\n                return;\n            }\n\n            showDirectoryBrowser(dom.parentWithClass(listItem, \"dlg-libraryeditor\"), originalPath, pathInfo.NetworkPath);\n        }\n    }\n\n    function getFolderHtml(pathInfo, index) {\n        var html = \"\";\n        html += '<div class=\"listItem listItem-border lnkPath\" data-index=\"' + index + '\" style=\"padding-left:.5em;\">';\n        html += '<div class=\"' + (pathInfo.NetworkPath ? \"listItemBody two-line\" : \"listItemBody\") + '\">';\n        html += '<h3 class=\"listItemBodyText\">';\n        html += pathInfo.Path;\n        html += \"</h3>\";\n\n        if (pathInfo.NetworkPath) {\n            html += '<div class=\"listItemBodyText secondary\">' + pathInfo.NetworkPath + \"</div>\";\n        }\n\n        html += \"</div>\";\n        html += '<button type=\"button\" is=\"paper-icon-button-light\" class=\"listItemButton btnRemovePath\" data-index=\"' + index + '\"><i class=\"material-icons\">remove_circle</i></button>';\n        html += \"</div>\";\n        return html;\n    }\n\n    function refreshLibraryFromServer(page) {\n        ApiClient.getVirtualFolders().then(function (result) {\n            var library = result.filter(function (f) {\n                return f.Name === currentOptions.library.Name;\n            })[0];\n\n            if (library) {\n                currentOptions.library = library;\n                renderLibrary(page, currentOptions);\n            }\n        });\n    }\n\n    function renderLibrary(page, options) {\n        var pathInfos = (options.library.LibraryOptions || {}).PathInfos || [];\n\n        if (!pathInfos.length) {\n            pathInfos = options.library.Locations.map(function (p) {\n                return {\n                    Path: p\n                };\n            });\n        }\n\n        if (options.library.CollectionType === 'boxsets') {\n            page.querySelector(\".folders\").classList.add(\"hide\");\n        } else {\n            page.querySelector(\".folders\").classList.remove(\"hide\");\n        }\n\n        page.querySelector(\".folderList\").innerHTML = pathInfos.map(getFolderHtml).join(\"\");\n    }\n\n    function onAddButtonClick() {\n        showDirectoryBrowser(dom.parentWithClass(this, \"dlg-libraryeditor\"));\n    }\n\n    function showDirectoryBrowser(context, originalPath, networkPath) {\n        require([\"directorybrowser\"], function (directoryBrowser) {\n            var picker = new directoryBrowser();\n            picker.show({\n                enableNetworkSharePath: true,\n                pathReadOnly: null != originalPath,\n                path: originalPath,\n                networkSharePath: networkPath,\n                callback: function (path, networkSharePath) {\n                    if (path) {\n                        if (originalPath) {\n                            updateMediaLocation(context, originalPath, networkSharePath);\n                        } else {\n                            addMediaLocation(context, path, networkSharePath);\n                        }\n                    }\n\n                    picker.close();\n                }\n            });\n        });\n    }\n\n    function onToggleAdvancedChange() {\n        var dlg = dom.parentWithClass(this, \"dlg-libraryeditor\");\n        libraryoptionseditor.setAdvancedVisible(dlg.querySelector(\".libraryOptions\"), this.checked);\n    }\n\n    function initEditor(dlg, options) {\n        renderLibrary(dlg, options);\n        dlg.querySelector(\".btnAddFolder\").addEventListener(\"click\", onAddButtonClick);\n        dlg.querySelector(\".folderList\").addEventListener(\"click\", onListItemClick);\n        dlg.querySelector(\".chkAdvanced\").addEventListener(\"change\", onToggleAdvancedChange);\n        dlg.querySelector(\".btnSubmit\").addEventListener(\"click\", onEditLibrary);\n        libraryoptionseditor.embed(dlg.querySelector(\".libraryOptions\"), options.library.CollectionType, options.library.LibraryOptions).then(function () {\n            onToggleAdvancedChange.call(dlg.querySelector(\".chkAdvanced\"));\n        });\n    }\n\n    function onDialogClosed() {\n        currentDeferred.resolveWith(null, [hasChanges]);\n    }\n\n    function editor() {\n        this.show = function (options) {\n            var deferred = jQuery.Deferred();\n            currentOptions = options;\n            currentDeferred = deferred;\n            hasChanges = false;\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", \"components/medialibraryeditor/medialibraryeditor.template.html\", true);\n\n            xhr.onload = function (e) {\n                var template = this.response;\n                var dlg = dialogHelper.createDialog({\n                    size: \"medium-tall\",\n                    modal: false,\n                    removeOnClose: true,\n                    scrollY: false\n                });\n                dlg.classList.add(\"dlg-libraryeditor\");\n                dlg.classList.add(\"ui-body-a\");\n                dlg.classList.add(\"background-theme-a\");\n                dlg.classList.add(\"formDialog\");\n                dlg.innerHTML = Globalize.translateDocument(template);\n                dlg.querySelector(\".formDialogHeaderTitle\").innerHTML = options.library.Name;\n                initEditor(dlg, options);\n                dlg.addEventListener(\"close\", onDialogClosed);\n                dialogHelper.open(dlg);\n                dlg.querySelector(\".btnCancel\").addEventListener(\"click\", function () {\n                    dialogHelper.close(dlg);\n                });\n                refreshLibraryFromServer(dlg);\n            };\n\n            xhr.send();\n            return deferred.promise();\n        };\n    }\n\n    var currentDeferred;\n    var currentOptions;\n    var hasChanges = false;\n    var isCreating = false;\n    return editor;\n});\n"]}