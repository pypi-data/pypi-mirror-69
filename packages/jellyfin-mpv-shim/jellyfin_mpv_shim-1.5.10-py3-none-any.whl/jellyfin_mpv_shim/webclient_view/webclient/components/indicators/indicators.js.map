{"version":3,"sources":["components/indicators/indicators.js"],"names":["define","datetime","itemHelper","enableProgressIndicator","item","MediaType","Type","getProgressHtml","pct","options","containerClass","enablePlayedIndicator","canMarkPlayed","ProgressBarPrototype","Object","create","HTMLDivElement","prototype","onAutoTimeProgress","start","parseInt","this","getAttribute","end","Date","getTime","Math","min","max","querySelector","style","width","attachedCallback","timeInterval","clearInterval","setInterval","bind","detachedCallback","document","registerElement","extends","getProgressBarHtml","userData","UserData","PlayedPercentage","StartDate","EndDate","startDate","endDate","parseISO8601Date","err","console","error","getAutoTimeProgressHtml","isRecording","foregroundClass","TimerId","getPlayedIndicatorHtml","getPlayedIndicator","UnplayedItemCount","Played","getChildCountIndicatorHtml","minCount","ChildCount","getCountIndicatorHtml","count","getTimerIndicator","status","SeriesTimerId","Status","getSyncIndicator","SyncPercent","getTypeIndicator","getMissingIndicator","LocationType","PremiereDate"],"mappings":"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","file":"indicators.js","sourcesContent":["define(['datetime', 'itemHelper', 'css!./indicators.css', 'material-icons'], function (datetime, itemHelper) {\n    'use strict';\n\n    function enableProgressIndicator(item) {\n        if (item.MediaType === 'Video') {\n            if (item.Type !== 'TvChannel') {\n                return true;\n            }\n        }\n\n        if (item.Type === 'AudioBook' || item.Type === 'AudioPodcast') {\n            return true;\n        }\n\n        return false;\n    }\n\n    function getProgressHtml(pct, options) {\n        var containerClass = 'itemProgressBar';\n        if (options) {\n            if (options.containerClass) {\n                containerClass += ' ' + options.containerClass;\n            }\n        }\n\n        return '<div class=\"' + containerClass + '\"><div class=\"itemProgressBarForeground\" style=\"width:' + pct + '%;\"></div></div>';\n    }\n\n    function getAutoTimeProgressHtml(pct, options, isRecording, start, end) {\n        var containerClass = 'itemProgressBar';\n        if (options) {\n            if (options.containerClass) {\n                containerClass += ' ' + options.containerClass;\n            }\n        }\n\n        var foregroundClass = 'itemProgressBarForeground';\n        if (isRecording) {\n            foregroundClass += ' itemProgressBarForeground-recording';\n        }\n\n        return '<div is=\"emby-progressbar\" data-automode=\"time\" data-starttime=\"' + start + '\" data-endtime=\"' + end + '\" class=\"' + containerClass + '\"><div class=\"' + foregroundClass + '\" style=\"width:' + pct + '%;\"></div></div>';\n    }\n\n    function getProgressBarHtml(item, options) {\n        var pct;\n        if (enableProgressIndicator(item) && item.Type !== \"Recording\") {\n            var userData = options ? (options.userData || item.UserData) : item.UserData;\n            if (userData) {\n                pct = userData.PlayedPercentage;\n                if (pct && pct < 100) {\n                    return getProgressHtml(pct, options);\n                }\n            }\n        }\n\n        if ((item.Type === 'Program' || item.Type === 'Timer' || item.Type === 'Recording') && item.StartDate && item.EndDate) {\n            var startDate = 0;\n            var endDate = 1;\n\n            try {\n                startDate = datetime.parseISO8601Date(item.StartDate).getTime();\n                endDate = datetime.parseISO8601Date(item.EndDate).getTime();\n            } catch (err) {\n                console.error(err);\n            }\n\n            var now = new Date().getTime();\n            var total = endDate - startDate;\n            pct = 100 * ((now - startDate) / total);\n\n            if (pct > 0 && pct < 100) {\n                var isRecording = item.Type === 'Timer' || item.Type === 'Recording' || item.TimerId;\n                return getAutoTimeProgressHtml(pct, options, isRecording, startDate, endDate);\n            }\n        }\n\n        return '';\n    }\n\n    function enablePlayedIndicator(item) {\n        return itemHelper.canMarkPlayed(item);\n    }\n\n    function getPlayedIndicator(item) {\n        if (enablePlayedIndicator(item)) {\n            var userData = item.UserData || {};\n            if (userData.UnplayedItemCount) {\n                return '<div class=\"countIndicator indicator\">' + userData.UnplayedItemCount + '</div>';\n            }\n\n            if (userData.PlayedPercentage && userData.PlayedPercentage >= 100 || (userData.Played)) {\n                return '<div class=\"playedIndicator indicator\"><i class=\"material-icons indicatorIcon\">check</i></div>';\n            }\n        }\n\n        return '';\n    }\n\n    function getCountIndicatorHtml(count) {\n        return '<div class=\"countIndicator indicator\">' + count + '</div>';\n    }\n\n    function getChildCountIndicatorHtml(item, options) {\n        var minCount = 0;\n        if (options) {\n            minCount = options.minCount || minCount;\n        }\n\n        if (item.ChildCount && item.ChildCount > minCount) {\n            return getCountIndicatorHtml(item.ChildCount);\n        }\n\n        return '';\n    }\n\n    function getTimerIndicator(item) {\n        var status;\n\n        if (item.Type === 'SeriesTimer') {\n            return '<i class=\"material-icons timerIndicator indicatorIcon fiber_smart_record\"></i>';\n        } else if (item.TimerId || item.SeriesTimerId) {\n            status = item.Status || 'Cancelled';\n        } else if (item.Type === 'Timer') {\n            status = item.Status;\n        } else {\n            return '';\n        }\n\n        if (item.SeriesTimerId) {\n            if (status !== 'Cancelled') {\n                return '<i class=\"material-icons timerIndicator indicatorIcon fiber_smart_record\"></i>';\n            }\n\n            return '<i class=\"material-icons timerIndicator timerIndicator-inactive indicatorIcon fiber_smart_record\"></i>';\n        }\n\n        return '<i class=\"material-icons timerIndicator indicatorIcon fiber_manual_record\"></i>';\n    }\n\n    function getSyncIndicator(item) {\n        if (item.SyncPercent === 100) {\n            return '<div class=\"syncIndicator indicator fullSyncIndicator\"><i class=\"material-icons indicatorIcon file_download\"></i></div>';\n        } else if (item.SyncPercent != null) {\n            return '<div class=\"syncIndicator indicator emptySyncIndicator\"><i class=\"material-icons indicatorIcon file_download\"></i></div>';\n        }\n\n        return '';\n    }\n\n    function getTypeIndicator(item) {\n        if (item.Type === 'Video') {\n            return '<div class=\"indicator videoIndicator\"><i class=\"material-icons indicatorIcon\">videocam</i></div>';\n        }\n        if (item.Type === 'Folder') {\n            return '<div class=\"indicator videoIndicator\"><i class=\"material-icons indicatorIcon\">folder</i></div>';\n        }\n        if (item.Type === 'PhotoAlbum') {\n            return '<div class=\"indicator videoIndicator\"><i class=\"material-icons indicatorIcon photo_album\"></i></div>';\n        }\n        if (item.Type === 'Photo') {\n            return '<div class=\"indicator videoIndicator\"><i class=\"material-icons indicatorIcon\">photo</i></div>';\n        }\n\n        return '';\n    }\n\n    function getMissingIndicator(item) {\n        if (item.Type === 'Episode' && item.LocationType === 'Virtual') {\n            if (item.PremiereDate) {\n                try {\n                    var premiereDate = datetime.parseISO8601Date(item.PremiereDate).getTime();\n                    if (premiereDate > new Date().getTime()) {\n                        return '<div class=\"unairedIndicator\">Unaired</div>';\n                    }\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n            return '<div class=\"missingIndicator\">Missing</div>';\n        }\n\n        return '';\n    }\n\n    var ProgressBarPrototype = Object.create(HTMLDivElement.prototype);\n\n    function onAutoTimeProgress() {\n        var start = parseInt(this.getAttribute('data-starttime'));\n        var end = parseInt(this.getAttribute('data-endtime'));\n\n        var now = new Date().getTime();\n        var total = end - start;\n        var pct = 100 * ((now - start) / total);\n\n        pct = Math.min(100, pct);\n        pct = Math.max(0, pct);\n\n        var itemProgressBarForeground = this.querySelector('.itemProgressBarForeground');\n        itemProgressBarForeground.style.width = pct + '%';\n    }\n\n    ProgressBarPrototype.attachedCallback = function () {\n        if (this.timeInterval) {\n            clearInterval(this.timeInterval);\n        }\n\n        if (this.getAttribute('data-automode') === 'time') {\n            this.timeInterval = setInterval(onAutoTimeProgress.bind(this), 60000);\n        }\n    };\n\n    ProgressBarPrototype.detachedCallback = function () {\n        if (this.timeInterval) {\n            clearInterval(this.timeInterval);\n            this.timeInterval = null;\n        }\n    };\n\n    document.registerElement('emby-progressbar', {\n        prototype: ProgressBarPrototype,\n        extends: 'div'\n    });\n\n    return {\n        getProgressHtml: getProgressHtml,\n        getProgressBarHtml: getProgressBarHtml,\n        getPlayedIndicatorHtml: getPlayedIndicator,\n        getChildCountIndicatorHtml: getChildCountIndicatorHtml,\n        enableProgressIndicator: enableProgressIndicator,\n        getTimerIndicator: getTimerIndicator,\n        enablePlayedIndicator: enablePlayedIndicator,\n        getSyncIndicator: getSyncIndicator,\n        getTypeIndicator: getTypeIndicator,\n        getMissingIndicator: getMissingIndicator\n    };\n});\n"]}