{"version":3,"sources":["components/playback/volumeosd.js"],"names":["define","events","playbackManager","dom","browser","currentPlayer","osdElement","iconElement","progressElement","enableAnimation","hideTimeout","onHideComplete","this","classList","add","clearHideTimeout","clearTimeout","hideOsd","elem","offsetWidth","requestAnimationFrame","addEventListener","whichTransitionEvent","once","call","onVolumeChanged","e","ensureOsdElement","supportsCssAnimation","document","createElement","innerHTML","getOsdElementHtml","html","querySelector","body","appendChild","updatePlayerVolumeState","isMuted","volume","style","width","getVolume","showOsd","removeEventListener","remove","setTimeout","bindToPlayer","player","releaseCurrentPlayer","off","on","getCurrentPlayer"],"mappings":"AAAA,aAAAA,OAAO,CAAC,SAAU,kBAAmB,MAAO,UAAW,gBAAiB,mBAAmB,SAAUC,OAAQC,gBAAiBC,IAAKC,SAG/H,IAAIC,cACAC,WACAC,YACAC,gBAEAC,gBAsCAC,YAJJ,SAASC,iBACLC,KAAKC,UAAUC,IAAI,QA0BvB,SAASC,mBACDL,cACAM,aAAaN,aACbA,YAAc,MAItB,SAASO,UAELF,mBAEA,IAAIG,KAAOZ,WACPY,OAEIT,iBAEKS,KAAKC,YAEVC,uBAAsB,WAClBF,KAAKL,UAAUC,IAAI,kBAEnBX,IAAIkB,iBAAiBH,KAAMf,IAAImB,uBAAwBX,eAAgB,CACnEY,MAAM,QAIdZ,eAAea,KAAKN,OA0BhC,SAASO,gBAAgBC,IArGzB,SAASC,mBAEL,IAAIT,KAAOZ,WACNY,OAEDT,gBAAkBL,QAAQwB,wBAE1BV,KAAOW,SAASC,cAAc,QACzBjB,UAAUC,IAAI,QACnBI,KAAKL,UAAUC,IAAI,WACnBI,KAAKL,UAAUC,IAAI,kBACnBI,KAAKL,UAAUC,IAAI,aACnBI,KAAKa,UAtBb,SAASC,oBAOL,MAJQ,6CAEA,mFAARC,6HAiBqBD,GAEjBzB,YAAcW,KAAKgB,cAAc,KACjC1B,gBAAkBU,KAAKgB,cAAc,yBAErCL,SAASM,KAAKC,YAAYlB,MAC1BZ,WAAaY,MAuFjBS,GAzBJ,SAASU,wBAAwBC,QAASC,QAElChC,cACAA,YAAYwB,UAAYO,QAAU,WAAa,YAE/C9B,kBACAA,gBAAgBgC,MAAMC,OAASF,QAAU,GAAK,KAqBlDF,CAJazB,KAIkB0B,UAJlB1B,KAIoC8B,aAhFrD,SAASC,UAEL5B,mBAEA,IAAIG,KAAOZ,WAEXH,IAAIyC,oBAAoB1B,KAAMf,IAAImB,uBAAwBX,eAAgB,CACtEY,MAAM,IAGVL,KAAKL,UAAUgC,OAAO,QAGjB3B,KAAKC,YAEVC,uBAAsB,WAClBF,KAAKL,UAAUgC,OAAO,kBAEtBnC,YAAcoC,WAAW7B,QAAS,QAgEtC0B,GAGJ,SAASI,aAAaC,QAEdA,SAAW3C,iBAxBnB,SAAS4C,uBAEL,IAAID,OAAS3C,cAET2C,SACA/C,OAAOiD,IAAIF,OAAQ,eAAgBvB,iBACnCxB,OAAOiD,IAAIF,OAAQ,eAAgB/B,SACnCZ,cAAgB,MAqBpB4C,GAEA5C,cAAgB2C,OAEXA,SAIL/B,UACAhB,OAAOkD,GAAGH,OAAQ,eAAgBvB,iBAClCxB,OAAOkD,GAAGH,OAAQ,eAAgB/B,WAGtChB,OAAOkD,GAAGjD,gBAAiB,gBAAgB,WACvC6C,aAAa7C,gBAAgBkD,uBAGjCL,aAAa7C,gBAAgBkD","file":"volumeosd.js","sourcesContent":["define(['events', 'playbackManager', 'dom', 'browser', 'css!./iconosd', 'material-icons'], function (events, playbackManager, dom, browser) {\n    'use strict';\n\n    var currentPlayer;\n    var osdElement;\n    var iconElement;\n    var progressElement;\n\n    var enableAnimation;\n\n    function getOsdElementHtml() {\n        var html = '';\n\n        html += '<i class=\"material-icons iconOsdIcon\"></i>';\n\n        html += '<div class=\"iconOsdProgressOuter\"><div class=\"iconOsdProgressInner\"></div></div>';\n\n        return html;\n    }\n\n    function ensureOsdElement() {\n\n        var elem = osdElement;\n        if (!elem) {\n\n            enableAnimation = browser.supportsCssAnimation();\n\n            elem = document.createElement('div');\n            elem.classList.add('hide');\n            elem.classList.add('iconOsd');\n            elem.classList.add('iconOsd-hidden');\n            elem.classList.add('volumeOsd');\n            elem.innerHTML = getOsdElementHtml();\n\n            iconElement = elem.querySelector('i');\n            progressElement = elem.querySelector('.iconOsdProgressInner');\n\n            document.body.appendChild(elem);\n            osdElement = elem;\n        }\n    }\n\n    function onHideComplete() {\n        this.classList.add('hide');\n    }\n\n    var hideTimeout;\n    function showOsd() {\n\n        clearHideTimeout();\n\n        var elem = osdElement;\n\n        dom.removeEventListener(elem, dom.whichTransitionEvent(), onHideComplete, {\n            once: true\n        });\n\n        elem.classList.remove('hide');\n\n        // trigger reflow\n        void elem.offsetWidth;\n\n        requestAnimationFrame(function () {\n            elem.classList.remove('iconOsd-hidden');\n\n            hideTimeout = setTimeout(hideOsd, 3000);\n        });\n    }\n\n    function clearHideTimeout() {\n        if (hideTimeout) {\n            clearTimeout(hideTimeout);\n            hideTimeout = null;\n        }\n    }\n\n    function hideOsd() {\n\n        clearHideTimeout();\n\n        var elem = osdElement;\n        if (elem) {\n\n            if (enableAnimation) {\n                // trigger reflow\n                void elem.offsetWidth;\n\n                requestAnimationFrame(function () {\n                    elem.classList.add('iconOsd-hidden');\n\n                    dom.addEventListener(elem, dom.whichTransitionEvent(), onHideComplete, {\n                        once: true\n                    });\n                });\n            } else {\n                onHideComplete.call(elem);\n            }\n        }\n    }\n\n    function updatePlayerVolumeState(isMuted, volume) {\n\n        if (iconElement) {\n            iconElement.innerHTML = isMuted ? '&#xE04F;' : '&#xE050;';\n        }\n        if (progressElement) {\n            progressElement.style.width = (volume || 0) + '%';\n        }\n    }\n\n    function releaseCurrentPlayer() {\n\n        var player = currentPlayer;\n\n        if (player) {\n            events.off(player, 'volumechange', onVolumeChanged);\n            events.off(player, 'playbackstop', hideOsd);\n            currentPlayer = null;\n        }\n    }\n\n    function onVolumeChanged(e) {\n\n        var player = this;\n\n        ensureOsdElement();\n\n        updatePlayerVolumeState(player.isMuted(), player.getVolume());\n\n        showOsd();\n    }\n\n    function bindToPlayer(player) {\n\n        if (player === currentPlayer) {\n            return;\n        }\n\n        releaseCurrentPlayer();\n\n        currentPlayer = player;\n\n        if (!player) {\n            return;\n        }\n\n        hideOsd();\n        events.on(player, 'volumechange', onVolumeChanged);\n        events.on(player, 'playbackstop', hideOsd);\n    }\n\n    events.on(playbackManager, 'playerchange', function () {\n        bindToPlayer(playbackManager.getCurrentPlayer());\n    });\n\n    bindToPlayer(playbackManager.getCurrentPlayer());\n\n});\n"]}