{"version":3,"sources":["components/playback/playersettingsmenu.js"],"names":["define","connectionManager","actionsheet","datetime","playbackManager","globalize","appSettings","qualityoptions","showWithUser","options","player","user","supportedCommands","getSupportedCommands","menuItems","mediaType","indexOf","currentAspectRatioId","getAspectRatio","currentAspectRatio","getSupportedAspectRatios","filter","i","id","push","name","translate","asideText","Policy","EnableVideoPlaybackTranscoding","secondaryQualityText","getQualitySecondaryText","state","getPlayerState","videoStream","enableAutomaticBitrateDetection","getMaxStreamingBitrate","currentMediaSource","MediaStreams","stream","Type","videoWidth","Width","getVideoQualityOptions","currentMaxBitrate","isAutomaticBitrateEnabled","enableAuto","selectedOption","map","o","opt","bitrate","secondaryText","selected","length","text","autoText","PlayState","PlayMethod","repeatMode","getRepeatMode","RunTimeTicks","suboffset","stats","show","items","positionTo","then","handleSelectedOption","showQualityMenu","btn","selectedId","parseInt","setMaxStreamingBitrate","maxBitrate","showAspectRatioMenu","currentId","setAspectRatio","Promise","resolve","reject","showRepeatModeMenu","currentValue","mode","setRepeatMode","onOption","currentItem","ServerId","getApiClient","getCurrentUser"],"mappings":"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","file":"playersettingsmenu.js","sourcesContent":["define(['connectionManager', 'actionsheet', 'datetime', 'playbackManager', 'globalize', 'appSettings', 'qualityoptions'], function (connectionManager, actionsheet, datetime, playbackManager, globalize, appSettings, qualityoptions) {\n    'use strict';\n\n    function showQualityMenu(player, btn) {\n\n        var videoStream = playbackManager.currentMediaSource(player).MediaStreams.filter(function (stream) {\n            return stream.Type === \"Video\";\n        })[0];\n        var videoWidth = videoStream ? videoStream.Width : null;\n\n        var options = qualityoptions.getVideoQualityOptions({\n            currentMaxBitrate: playbackManager.getMaxStreamingBitrate(player),\n            isAutomaticBitrateEnabled: playbackManager.enableAutomaticBitrateDetection(player),\n            videoWidth: videoWidth,\n            enableAuto: true\n        });\n\n        var menuItems = options.map(function (o) {\n            var opt = {\n                name: o.name,\n                id: o.bitrate,\n                asideText: o.secondaryText\n            };\n\n            if (o.selected) {\n                opt.selected = true;\n            }\n\n            return opt;\n        });\n\n        var selectedId = options.filter(function (o) {\n            return o.selected;\n        });\n\n        selectedId = selectedId.length ? selectedId[0].bitrate : null;\n\n        return actionsheet.show({\n            items: menuItems,\n            positionTo: btn\n        }).then(function (id) {\n            var bitrate = parseInt(id);\n            if (bitrate !== selectedId) {\n                playbackManager.setMaxStreamingBitrate({\n                    enableAutomaticBitrateDetection: bitrate ? false : true,\n                    maxBitrate: bitrate\n                }, player);\n            }\n        });\n    }\n\n    function showRepeatModeMenu(player, btn) {\n        var menuItems = [];\n        var currentValue = playbackManager.getRepeatMode(player);\n\n        menuItems.push({\n            name: globalize.translate('RepeatAll'),\n            id: 'RepeatAll',\n            selected: currentValue === 'RepeatAll'\n        });\n\n        menuItems.push({\n            name: globalize.translate('RepeatOne'),\n            id: 'RepeatOne',\n            selected: currentValue === 'RepeatOne'\n        });\n\n        menuItems.push({\n            name: globalize.translate('None'),\n            id: 'RepeatNone',\n            selected: currentValue === 'RepeatNone'\n        });\n\n        return actionsheet.show({\n            items: menuItems,\n            positionTo: btn\n        }).then(function (mode) {\n            if (mode) {\n                playbackManager.setRepeatMode(mode, player);\n            }\n        });\n    }\n\n    function getQualitySecondaryText(player) {\n        var state = playbackManager.getPlayerState(player);\n        var isAutoEnabled = playbackManager.enableAutomaticBitrateDetection(player);\n        var currentMaxBitrate = playbackManager.getMaxStreamingBitrate(player);\n\n        var videoStream = playbackManager.currentMediaSource(player).MediaStreams.filter(function (stream) {\n            return stream.Type === \"Video\";\n        })[0];\n\n        var videoWidth = videoStream ? videoStream.Width : null;\n\n        var options = qualityoptions.getVideoQualityOptions({\n            currentMaxBitrate: playbackManager.getMaxStreamingBitrate(player),\n            isAutomaticBitrateEnabled: playbackManager.enableAutomaticBitrateDetection(player),\n            videoWidth: videoWidth,\n            enableAuto: true\n        });\n\n        var menuItems = options.map(function (o) {\n            var opt = {\n                name: o.name,\n                id: o.bitrate,\n                asideText: o.secondaryText\n            };\n\n            if (o.selected) {\n                opt.selected = true;\n            }\n\n            return opt;\n        });\n\n        var selectedOption = options.filter(function (o) {\n            return o.selected;\n        });\n\n        if (!selectedOption.length) {\n            return null;\n        }\n\n        selectedOption = selectedOption[0];\n        var text = selectedOption.name;\n\n        if (selectedOption.autoText) {\n            if (state.PlayState && state.PlayState.PlayMethod !== 'Transcode') {\n                text += ' - Direct';\n            } else {\n                text += ' ' + selectedOption.autoText;\n            }\n        }\n\n        return text;\n    }\n\n    function showAspectRatioMenu(player, btn) {\n        // each has a name and id\n        var currentId = playbackManager.getAspectRatio(player);\n        var menuItems = playbackManager.getSupportedAspectRatios(player).map(function (i) {\n            return {\n                id: i.id,\n                name: i.name,\n                selected: i.id === currentId\n            };\n        });\n\n        return actionsheet.show({\n            items: menuItems,\n            positionTo: btn\n        }).then(function (id) {\n            if (id) {\n                playbackManager.setAspectRatio(id, player);\n                return Promise.resolve();\n            }\n\n            return Promise.reject();\n        });\n    }\n\n    function showWithUser(options, player, user) {\n        var supportedCommands = playbackManager.getSupportedCommands(player);\n        var mediaType = options.mediaType;\n\n        var menuItems = [];\n        if (supportedCommands.indexOf('SetAspectRatio') !== -1) {\n            var currentAspectRatioId = playbackManager.getAspectRatio(player);\n            var currentAspectRatio = playbackManager.getSupportedAspectRatios(player).filter(function (i) {\n                return i.id === currentAspectRatioId;\n            })[0];\n\n            menuItems.push({\n                name: globalize.translate('AspectRatio'),\n                id: 'aspectratio',\n                asideText: currentAspectRatio ? currentAspectRatio.name : null\n            });\n        }\n\n        if (user && user.Policy.EnableVideoPlaybackTranscoding) {\n            var secondaryQualityText = getQualitySecondaryText(player);\n\n            menuItems.push({\n                name: globalize.translate('Quality'),\n                id: 'quality',\n                asideText: secondaryQualityText\n            });\n        }\n\n        var repeatMode = playbackManager.getRepeatMode(player);\n\n        if (supportedCommands.indexOf('SetRepeatMode') !== -1 && playbackManager.currentMediaSource(player).RunTimeTicks) {\n            menuItems.push({\n                name: globalize.translate('RepeatMode'),\n                id: 'repeatmode',\n                asideText: repeatMode === 'RepeatNone' ? globalize.translate('None') : globalize.translate('' + repeatMode)\n            });\n        }\n\n        if (options.suboffset) {\n            menuItems.push({\n                name: globalize.translate('SubtitleOffset'),\n                id: 'suboffset',\n                asideText: null\n            });\n        }\n\n        if (options.stats) {\n            menuItems.push({\n                name: globalize.translate('PlaybackData'),\n                id: 'stats',\n                asideText: null\n            });\n        }\n\n        return actionsheet.show({\n            items: menuItems,\n            positionTo: options.positionTo\n        }).then(function (id) {\n            return handleSelectedOption(id, options, player);\n        });\n    }\n\n    function show(options) {\n        var player = options.player;\n        var currentItem = playbackManager.currentItem(player);\n\n        if (!currentItem || !currentItem.ServerId) {\n            return showWithUser(options, player, null);\n        }\n\n        var apiClient = connectionManager.getApiClient(currentItem.ServerId);\n        return apiClient.getCurrentUser().then(function (user) {\n            return showWithUser(options, player, user);\n        });\n    }\n\n    function handleSelectedOption(id, options, player) {\n        switch (id) {\n            case 'quality':\n                return showQualityMenu(player, options.positionTo);\n            case 'aspectratio':\n                return showAspectRatioMenu(player, options.positionTo);\n            case 'repeatmode':\n                return showRepeatModeMenu(player, options.positionTo);\n            case 'stats':\n                if (options.onOption) {\n                    options.onOption('stats');\n                }\n                return Promise.resolve();\n            case 'suboffset':\n                if (options.onOption) {\n                    options.onOption('suboffset');\n                }\n                return Promise.resolve();\n            default:\n                break;\n        }\n\n        return Promise.reject();\n    }\n\n    return {\n        show: show\n    };\n});\n"]}