{"version":3,"sources":["components/playback/mediasession.js"],"names":["define","playbackManager","nowPlayingHelper","events","connectionManager","navigator","mediaSession","window","NativeShell","currentPlayer","setActionHandler","execute","on","bindToPlayer","getCurrentPlayer","pushImageUrl","item","imageOptions","list","url","seriesImageUrl","options","Type","type","SeriesPrimaryImageTag","tag","getApiClient","ServerId","getScaledImageUrl","SeriesId","SeriesThumbImageTag","ParentThumbImageTag","ParentThumbItemId","imageUrl","ImageTags","Id","AlbumId","AlbumPrimaryImageTag","height","maxHeight","push","src","sizes","getImageUrls","updatePlayerState","player","state","eventName","NowPlayingItem","isVideo","MediaType","isLocalPlayer","albumArtist","playState","PlayState","parts","getNowPlayingNames","artist","length","text","title","AlbumArtists","Name","album","Album","itemId","duration","parseInt","RunTimeTicks","currentTime","PositionTicks","isPaused","IsPaused","canSeek","CanSeek","metadata","MediaMetadata","artwork","paused","mediaType","updateMediaSession","action","position","hideMediaControls","onGeneralEvent","e","this","getPlayerState","onStateChanged","onPlaybackStart","onPlaybackStopped","hideMediaSession","releaseCurrentPlayer","off","name"],"mappings":"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","file":"mediasession.js","sourcesContent":["define(['playbackManager', 'nowPlayingHelper', 'events', 'connectionManager'], function (playbackManager, nowPlayingHelper, events, connectionManager) {\n    \"use strict\";\n\n    // no support for mediaSession\n    if (!navigator.mediaSession && !window.NativeShell) {\n        return;\n    }\n\n    // Reports media playback to the device for lock screen control\n\n    var currentPlayer;\n    var lastUpdateTime = 0;\n\n    function seriesImageUrl(item, options) {\n\n        if (item.Type !== 'Episode') {\n            return null;\n        }\n\n        options = options || {};\n        options.type = options.type || \"Primary\";\n\n        if (options.type === 'Primary') {\n\n            if (item.SeriesPrimaryImageTag) {\n\n                options.tag = item.SeriesPrimaryImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n        }\n\n        if (options.type === 'Thumb') {\n\n            if (item.SeriesThumbImageTag) {\n\n                options.tag = item.SeriesThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.SeriesId, options);\n            }\n            if (item.ParentThumbImageTag) {\n\n                options.tag = item.ParentThumbImageTag;\n\n                return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.ParentThumbItemId, options);\n            }\n        }\n\n        return null;\n    }\n\n    function imageUrl(item, options) {\n\n        options = options || {};\n        options.type = options.type || \"Primary\";\n\n        if (item.ImageTags && item.ImageTags[options.type]) {\n\n            options.tag = item.ImageTags[options.type];\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.Id, options);\n        }\n\n        if (item.AlbumId && item.AlbumPrimaryImageTag) {\n\n            options.tag = item.AlbumPrimaryImageTag;\n            return connectionManager.getApiClient(item.ServerId).getScaledImageUrl(item.AlbumId, options);\n        }\n\n        return null;\n    }\n\n    function pushImageUrl(item, imageOptions, list) {\n        var url = seriesImageUrl(item, imageOptions) || imageUrl(item, imageOptions);\n\n        if (url) {\n            var height = imageOptions.height || imageOptions.maxHeight;\n\n            list.push({\n                src: url,\n                sizes: height + 'x' + height\n            });\n        }\n    }\n\n    function getImageUrls(item) {\n\n        var list = [];\n\n        pushImageUrl(item, {height: 96}, list);\n        pushImageUrl(item, {height: 128}, list);\n        pushImageUrl(item, {height: 192}, list);\n        pushImageUrl(item, {height: 256}, list);\n        pushImageUrl(item, {height: 384}, list);\n        pushImageUrl(item, {height: 512}, list);\n\n        return list;\n    }\n\n    function updatePlayerState(player, state, eventName) {\n        // Don't go crazy reporting position changes\n        if (eventName == 'timeupdate') {\n            // Only report if this item hasn't been reported yet, or if there's an actual playback change.\n            // Don't report on simple time updates\n            return;\n        }\n\n        var item = state.NowPlayingItem;\n\n        if (!item) {\n            hideMediaControls();\n            return;\n        }\n\n        if (eventName == 'init') { // transform \"init\" event into \"timeupdate\" to restraint update rate\n            eventName = 'timeupdate';\n        }\n\n        var isVideo = item.MediaType === 'Video';\n        var isLocalPlayer = player.isLocalPlayer || false;\n\n        // Local players do their own notifications\n        if (isLocalPlayer && isVideo) {\n            return;\n        }\n\n        var playState = state.PlayState || {};\n        var parts = nowPlayingHelper.getNowPlayingNames(item);\n        var artist = parts[parts.length - 1].text;\n        var title = parts.length === 1 ? '' : parts[0].text;\n        var albumArtist;\n\n        if (item.AlbumArtists && item.AlbumArtists[0]) {\n            albumArtist = item.AlbumArtists[0].Name;\n        }\n\n        var album = item.Album || '';\n        var itemId = item.Id;\n\n        // Convert to ms\n        var duration = parseInt(item.RunTimeTicks ? (item.RunTimeTicks / 10000) : 0);\n        var currentTime = parseInt(playState.PositionTicks ? (playState.PositionTicks / 10000) : 0);\n\n        var isPaused = playState.IsPaused || false;\n        var canSeek = playState.CanSeek || false;\n\n        if (navigator.mediaSession) {\n            navigator.mediaSession.metadata = new MediaMetadata({\n                title: title,\n                artist: artist,\n                album: album,\n                artwork: getImageUrls(item),\n                albumArtist: albumArtist,\n                currentTime: currentTime,\n                duration: duration,\n                paused: isPaused,\n                itemId: itemId,\n                mediaType: item.MediaType\n            });\n        } else {\n            var imageUrl = [];\n            pushImageUrl(item, {maxHeight: 400}, imageUrl);\n\n            if (imageUrl.length) {\n                imageUrl = imageUrl[0].src;\n            } else {\n                imageUrl = null;\n            }\n\n            window.NativeShell.updateMediaSession({\n                action: eventName,\n                isLocalPlayer: isLocalPlayer,\n                itemId: itemId,\n                title: title,\n                artist: artist,\n                album: album,\n                duration: duration,\n                position: currentTime,\n                imageUrl: imageUrl,\n                canSeek: canSeek,\n                isPaused: isPaused\n            });\n        }\n    }\n\n    function onGeneralEvent(e) {\n\n        var player = this;\n        var state = playbackManager.getPlayerState(player);\n\n        updatePlayerState(player, state, e.type);\n    }\n\n    function onStateChanged(e, state) {\n\n        var player = this;\n        updatePlayerState(player, state, 'statechange');\n    }\n\n    function onPlaybackStart(e, state) {\n\n        var player = this;\n\n        updatePlayerState(player, state, e.type);\n    }\n\n    function onPlaybackStopped(e, state) {\n\n        var player = this;\n\n        hideMediaControls();\n    }\n\n    function releaseCurrentPlayer() {\n\n        if (currentPlayer) {\n\n            events.off(currentPlayer, 'playbackstart', onPlaybackStart);\n            events.off(currentPlayer, 'playbackstop', onPlaybackStopped);\n            events.off(currentPlayer, 'unpause', onGeneralEvent);\n            events.off(currentPlayer, 'pause', onGeneralEvent);\n            events.off(currentPlayer, 'statechange', onStateChanged);\n            events.off(currentPlayer, 'timeupdate', onGeneralEvent);\n\n            currentPlayer = null;\n\n            hideMediaControls();\n        }\n    }\n\n    function hideMediaControls() {\n        lastUpdateTime = 0;\n\n        if (navigator.mediaSession) {\n            navigator.mediaSession.metadata = null;\n        } else {\n            window.NativeShell.hideMediaSession();\n        }\n    }\n\n    function bindToPlayer(player) {\n\n        releaseCurrentPlayer();\n\n        if (!player) {\n            return;\n        }\n\n        currentPlayer = player;\n\n        var state = playbackManager.getPlayerState(player);\n        updatePlayerState(player, state, 'init');\n\n        events.on(currentPlayer, 'playbackstart', onPlaybackStart);\n        events.on(currentPlayer, 'playbackstop', onPlaybackStopped);\n        events.on(currentPlayer, 'unpause', onGeneralEvent);\n        events.on(currentPlayer, 'pause', onGeneralEvent);\n        events.on(currentPlayer, 'statechange', onStateChanged);\n        events.on(currentPlayer, 'timeupdate', onGeneralEvent);\n    }\n\n    function execute(name) {\n        playbackManager[name](currentPlayer);\n    }\n    if (navigator.mediaSession) {\n\n        navigator.mediaSession.setActionHandler('previoustrack', function () {\n            execute('previousTrack');\n        });\n\n        navigator.mediaSession.setActionHandler('nexttrack', function () {\n            execute('nextTrack');\n        });\n\n        navigator.mediaSession.setActionHandler('play', function () {\n            execute('unpause');\n        });\n\n        navigator.mediaSession.setActionHandler('pause', function () {\n            execute('pause');\n        });\n\n        navigator.mediaSession.setActionHandler('seekbackward', function () {\n            execute('rewind');\n        });\n\n        navigator.mediaSession.setActionHandler('seekforward', function () {\n            execute('fastForward');\n        });\n    }\n\n    events.on(playbackManager, 'playerchange', function () {\n\n        bindToPlayer(playbackManager.getCurrentPlayer());\n    });\n\n    bindToPlayer(playbackManager.getCurrentPlayer());\n});\n"]}