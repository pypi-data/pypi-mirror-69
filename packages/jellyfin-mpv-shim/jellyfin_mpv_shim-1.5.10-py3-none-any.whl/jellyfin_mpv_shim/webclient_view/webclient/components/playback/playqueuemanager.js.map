{"version":3,"sources":["components/playback/playqueuemanager.js"],"names":["define","currentId","addUniquePlaylistItemId","item","PlaylistItemId","findPlaylistIndex","playlistItemId","list","i","length","PlayQueueManager","this","_playlist","_repeatMode","prototype","getPlaylist","slice","setPlaylist","items","_currentPlaylistItemId","queue","push","queueNext","currentIndex","getCurrentPlaylistIndex","arrayInsertAt","destArray","pos","arrayToInsert","args","concat","splice","apply","getCurrentPlaylistItemId","getCurrentItem","index","setPlaylistState","playlistIndex","setPlaylistIndex","removeFromPlaylist","playlistItemIds","playlist","result","currentPlaylistItemId","isCurrentIndex","indexOf","filter","movePlaylistItem","newIndex","oldIndex","Error","moveInArray","array","from","to","reset","setRepeatMode","value","getRepeatMode","getNextItemInfo","playlistLength"],"mappings":"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","file":"playqueuemanager.js","sourcesContent":["define([], function () {\n    'use strict';\n\n    var currentId = 0;\n    function addUniquePlaylistItemId(item) {\n\n        if (!item.PlaylistItemId) {\n\n            item.PlaylistItemId = \"playlistItem\" + currentId;\n            currentId++;\n        }\n    }\n\n    function findPlaylistIndex(playlistItemId, list) {\n\n        for (var i = 0, length = list.length; i < length; i++) {\n            if (list[i].PlaylistItemId === playlistItemId) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    function PlayQueueManager() {\n\n        this._playlist = [];\n        this._repeatMode = 'RepeatNone';\n    }\n\n    PlayQueueManager.prototype.getPlaylist = function () {\n        return this._playlist.slice(0);\n    };\n\n    PlayQueueManager.prototype.setPlaylist = function (items) {\n\n        items = items.slice(0);\n\n        for (var i = 0, length = items.length; i < length; i++) {\n\n            addUniquePlaylistItemId(items[i]);\n        }\n\n        this._currentPlaylistItemId = null;\n        this._playlist = items;\n        this._repeatMode = 'RepeatNone';\n    };\n\n    PlayQueueManager.prototype.queue = function (items) {\n\n        for (var i = 0, length = items.length; i < length; i++) {\n\n            addUniquePlaylistItemId(items[i]);\n\n            this._playlist.push(items[i]);\n        }\n    };\n\n    function arrayInsertAt(destArray, pos, arrayToInsert) {\n        var args = [];\n        args.push(pos); // where to insert\n        args.push(0); // nothing to remove\n        args = args.concat(arrayToInsert); // add on array to insert\n        destArray.splice.apply(destArray, args); // splice it in\n    }\n\n    PlayQueueManager.prototype.queueNext = function (items) {\n        var i;\n        var length;\n\n        for (i = 0, length = items.length; i < length; i++) {\n\n            addUniquePlaylistItemId(items[i]);\n        }\n\n        var currentIndex = this.getCurrentPlaylistIndex();\n\n        if (currentIndex === -1) {\n            currentIndex = this._playlist.length;\n        } else {\n            currentIndex++;\n        }\n\n        arrayInsertAt(this._playlist, currentIndex, items);\n    };\n\n    PlayQueueManager.prototype.getCurrentPlaylistIndex = function () {\n\n        return findPlaylistIndex(this.getCurrentPlaylistItemId(), this._playlist);\n    };\n\n    PlayQueueManager.prototype.getCurrentItem = function () {\n\n        var index = findPlaylistIndex(this.getCurrentPlaylistItemId(), this._playlist);\n\n        return index === -1 ? null : this._playlist[index];\n    };\n\n    PlayQueueManager.prototype.getCurrentPlaylistItemId = function () {\n        return this._currentPlaylistItemId;\n    };\n\n    PlayQueueManager.prototype.setPlaylistState = function (playlistItemId, playlistIndex) {\n\n        this._currentPlaylistItemId = playlistItemId;\n    };\n\n    PlayQueueManager.prototype.setPlaylistIndex = function (playlistIndex) {\n\n        if (playlistIndex < 0) {\n            this.setPlaylistState(null);\n        } else {\n            this.setPlaylistState(this._playlist[playlistIndex].PlaylistItemId);\n        }\n    };\n\n    PlayQueueManager.prototype.removeFromPlaylist = function (playlistItemIds) {\n\n        var playlist = this.getPlaylist();\n\n        if (playlist.length <= playlistItemIds.length) {\n            return {\n                result: 'empty'\n            };\n        }\n\n        var currentPlaylistItemId = this.getCurrentPlaylistItemId();\n        var isCurrentIndex = playlistItemIds.indexOf(currentPlaylistItemId) !== -1;\n\n        this._playlist = playlist.filter(function (item) {\n            return playlistItemIds.indexOf(item.PlaylistItemId) === -1;\n        });\n\n        return {\n            result: 'removed',\n            isCurrentIndex: isCurrentIndex\n        };\n    };\n\n    function moveInArray(array, from, to) {\n        array.splice(to, 0, array.splice(from, 1)[0]);\n    }\n\n    PlayQueueManager.prototype.movePlaylistItem = function (playlistItemId, newIndex) {\n\n        var playlist = this.getPlaylist();\n\n        var oldIndex;\n        for (var i = 0, length = playlist.length; i < length; i++) {\n            if (playlist[i].PlaylistItemId === playlistItemId) {\n                oldIndex = i;\n                break;\n            }\n        }\n\n        if (oldIndex === -1 || oldIndex === newIndex) {\n            return {\n                result: 'noop'\n            };\n        }\n\n        if (newIndex >= playlist.length) {\n            throw new Error('newIndex out of bounds');\n        }\n\n        moveInArray(playlist, oldIndex, newIndex);\n\n        this._playlist = playlist;\n\n        return {\n            result: 'moved',\n            playlistItemId: playlistItemId,\n            newIndex: newIndex\n        };\n    };\n\n    PlayQueueManager.prototype.reset = function () {\n\n        this._playlist = [];\n        this._currentPlaylistItemId = null;\n        this._repeatMode = 'RepeatNone';\n    };\n\n    PlayQueueManager.prototype.setRepeatMode = function (value) {\n\n        this._repeatMode = value;\n    };\n\n    PlayQueueManager.prototype.getRepeatMode = function () {\n\n        return this._repeatMode;\n    };\n\n    PlayQueueManager.prototype.getNextItemInfo = function () {\n\n        var newIndex;\n        var playlist = this.getPlaylist();\n        var playlistLength = playlist.length;\n\n        switch (this.getRepeatMode()) {\n\n            case 'RepeatOne':\n                newIndex = this.getCurrentPlaylistIndex();\n                break;\n            case 'RepeatAll':\n                newIndex = this.getCurrentPlaylistIndex() + 1;\n                if (newIndex >= playlistLength) {\n                    newIndex = 0;\n                }\n                break;\n            default:\n                newIndex = this.getCurrentPlaylistIndex() + 1;\n                break;\n        }\n\n        if (newIndex < 0 || newIndex >= playlistLength) {\n            return null;\n        }\n\n        var item = playlist[newIndex];\n\n        if (!item) {\n            return null;\n        }\n\n        return {\n            item: item,\n            index: newIndex\n        };\n    };\n\n    return PlayQueueManager;\n});\n"]}