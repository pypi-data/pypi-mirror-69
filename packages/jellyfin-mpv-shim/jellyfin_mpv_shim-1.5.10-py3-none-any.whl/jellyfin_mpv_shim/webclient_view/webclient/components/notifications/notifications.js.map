{"version":3,"sources":["components/notifications/notifications.js"],"names":["define","serverNotifications","playbackManager","events","globalize","require","onOneDocumentClick","document","removeEventListener","window","Notification","requestPermission","serviceWorkerRegistration","resetRegistration","serviceWorker","navigator","ready","then","registration","showNonPersistentNotification","title","options","timeoutMs","notif","show","closeAfter","notification","setTimeout","close","cancel","err","actions","showNotification","apiClient","data","serverId","serverInfo","Id","icon","getIconUrl","badge","showPersistentNotification","showNewItemNotification","item","isPlayingLocally","body","Name","SeriesName","Type","vibrate","tag","imageTags","ImageTags","Primary","getScaledImageUrl","width","type","name","toUrl","split","showPackageInstallNotification","installation","status","getCurrentUser","user","Policy","IsAdministrator","translate","replace","Version","action","id","percentComplete","Math","round","PercentComplete","addEventListener","on","e","onLibraryChanged","newItems","ItemsAdded","length","getItems","getCurrentUserId","Recursive","Limit","Filters","SortBy","SortOrder","Ids","join","MediaTypes","EnableTotalRecordCount","result","items","Items","i"],"mappings":"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","file":"notifications.js","sourcesContent":["define(['serverNotifications', 'playbackManager', 'events', 'globalize', 'require'], function (serverNotifications, playbackManager, events, globalize, require) {\n    'use strict';\n\n    function onOneDocumentClick() {\n        document.removeEventListener('click', onOneDocumentClick);\n        document.removeEventListener('keydown', onOneDocumentClick);\n\n        if (window.Notification) {\n            Notification.requestPermission();\n        }\n    }\n\n    document.addEventListener('click', onOneDocumentClick);\n    document.addEventListener('keydown', onOneDocumentClick);\n\n    var serviceWorkerRegistration;\n\n    function closeAfter(notification, timeoutMs) {\n        setTimeout(function () {\n            if (notification.close) {\n                notification.close();\n            } else if (notification.cancel) {\n                notification.cancel();\n            }\n        }, timeoutMs);\n    }\n\n    function resetRegistration() {\n        var serviceWorker = navigator.serviceWorker;\n        if (serviceWorker) {\n            serviceWorker.ready.then(function (registration) {\n                serviceWorkerRegistration = registration;\n            });\n        }\n    }\n\n    resetRegistration();\n\n    function showPersistentNotification(title, options, timeoutMs) {\n        serviceWorkerRegistration.showNotification(title, options);\n    }\n\n    function showNonPersistentNotification(title, options, timeoutMs) {\n\n        try {\n            var notif = new Notification(title, options);\n\n            if (notif.show) {\n                notif.show();\n            }\n\n            if (timeoutMs) {\n                closeAfter(notif, timeoutMs);\n            }\n        } catch (err) {\n            if (options.actions) {\n                options.actions = [];\n                showNonPersistentNotification(title, options, timeoutMs);\n            } else {\n                throw err;\n            }\n        }\n    }\n\n    function showNotification(options, timeoutMs, apiClient) {\n\n        var title = options.title;\n\n        options.data = options.data || {};\n        options.data.serverId = apiClient.serverInfo().Id;\n        options.icon = options.icon || getIconUrl();\n        options.badge = options.badge || getIconUrl('badge.png');\n\n        resetRegistration();\n\n        if (serviceWorkerRegistration) {\n            showPersistentNotification(title, options, timeoutMs);\n            return;\n        }\n\n        showNonPersistentNotification(title, options, timeoutMs);\n    }\n\n    function showNewItemNotification(item, apiClient) {\n\n        if (playbackManager.isPlayingLocally(['Video'])) {\n            return;\n        }\n\n        var body = item.Name;\n\n        if (item.SeriesName) {\n            body = item.SeriesName + ' - ' + body;\n        }\n\n        var notification = {\n            title: \"New \" + item.Type,\n            body: body,\n            vibrate: true,\n            tag: \"newItem\" + item.Id,\n            data: {\n                //options: {\n                //    url: LibraryBrowser.getHref(item)\n                //}\n            }\n        };\n\n        var imageTags = item.ImageTags || {};\n\n        if (imageTags.Primary) {\n\n            notification.icon = apiClient.getScaledImageUrl(item.Id, {\n                width: 80,\n                tag: imageTags.Primary,\n                type: \"Primary\"\n            });\n        }\n\n        showNotification(notification, 15000, apiClient);\n    }\n\n    function onLibraryChanged(data, apiClient) {\n\n        var newItems = data.ItemsAdded;\n\n        if (!newItems.length) {\n            return;\n        }\n\n        // Don't put a massive number of Id's onto the query string\n        if (newItems.length > 12) {\n            newItems.length = 12;\n        }\n\n        apiClient.getItems(apiClient.getCurrentUserId(), {\n\n            Recursive: true,\n            Limit: 3,\n            Filters: \"IsNotFolder\",\n            SortBy: \"DateCreated\",\n            SortOrder: \"Descending\",\n            Ids: newItems.join(','),\n            MediaTypes: \"Audio,Video\",\n            EnableTotalRecordCount: false\n\n        }).then(function (result) {\n\n            var items = result.Items;\n\n            for (var i = 0, length = items.length ; i < length; i++) {\n\n                showNewItemNotification(items[i], apiClient);\n            }\n        });\n    }\n\n    function getIconUrl(name) {\n        name = name || 'notificationicon.png';\n        return require.toUrl('.').split('?')[0] + '/' + name;\n    }\n\n    function showPackageInstallNotification(apiClient, installation, status) {\n\n        apiClient.getCurrentUser().then(function (user) {\n\n            if (!user.Policy.IsAdministrator) {\n                return;\n            }\n\n            var notification = {\n                tag: \"install\" + installation.Id,\n                data: {}\n            };\n\n            if (status === 'completed') {\n                notification.title = globalize.translate('PackageInstallCompleted').replace('{0}', installation.Name + ' ' + installation.Version);\n                notification.vibrate = true;\n            } else if (status === 'cancelled') {\n                notification.title = globalize.translate('PackageInstallCancelled').replace('{0}', installation.Name + ' ' + installation.Version);\n            } else if (status === 'failed') {\n                notification.title = globalize.translate('PackageInstallFailed').replace('{0}', installation.Name + ' ' + installation.Version);\n                notification.vibrate = true;\n            } else if (status === 'progress') {\n                notification.title = globalize.translate('InstallingPackage').replace('{0}', installation.Name + ' ' + installation.Version);\n\n                notification.actions =\n                [\n                    {\n                        action: 'cancel-install',\n                        title: globalize.translate('ButtonCancel'),\n                        icon: getIconUrl()\n                    }\n                ];\n\n                notification.data.id = installation.id;\n            }\n\n            if (status === 'progress') {\n\n                var percentComplete = Math.round(installation.PercentComplete || 0);\n\n                notification.body = percentComplete + '% complete.';\n            }\n\n            var timeout = status === 'cancelled' ? 5000 : 0;\n\n            showNotification(notification, timeout, apiClient);\n        });\n    }\n\n    events.on(serverNotifications, 'LibraryChanged', function (e, apiClient, data) {\n        onLibraryChanged(data, apiClient);\n    });\n\n    events.on(serverNotifications, 'PackageInstallationCompleted', function (e, apiClient, data) {\n        showPackageInstallNotification(apiClient, data, \"completed\");\n    });\n\n    events.on(serverNotifications, 'PackageInstallationFailed', function (e, apiClient, data) {\n        showPackageInstallNotification(apiClient, data, \"failed\");\n    });\n\n    events.on(serverNotifications, 'PackageInstallationCancelled', function (e, apiClient, data) {\n        showPackageInstallNotification(apiClient, data, \"cancelled\");\n    });\n\n    events.on(serverNotifications, 'PackageInstalling', function (e, apiClient, data) {\n        showPackageInstallNotification(apiClient, data, \"progress\");\n    });\n\n    events.on(serverNotifications, 'ServerShuttingDown', function (e, apiClient, data) {\n        var serverId = apiClient.serverInfo().Id;\n        var notification = {\n            tag: \"restart\" + serverId,\n            title: globalize.translate('ServerNameIsShuttingDown', apiClient.serverInfo().Name)\n        };\n        showNotification(notification, 0, apiClient);\n    });\n\n    events.on(serverNotifications, 'ServerRestarting', function (e, apiClient, data) {\n        var serverId = apiClient.serverInfo().Id;\n        var notification = {\n            tag: \"restart\" + serverId,\n            title: globalize.translate('ServerNameIsRestarting', apiClient.serverInfo().Name)\n        };\n        showNotification(notification, 0, apiClient);\n    });\n\n    events.on(serverNotifications, 'RestartRequired', function (e, apiClient) {\n\n        var serverId = apiClient.serverInfo().Id;\n        var notification = {\n            tag: \"restart\" + serverId,\n            title: globalize.translate('PleaseRestartServerName', apiClient.serverInfo().Name)\n        };\n\n        notification.actions =\n        [\n            {\n                action: 'restart',\n                title: globalize.translate('ButtonRestart'),\n                icon: getIconUrl()\n            }\n        ];\n\n        showNotification(notification, 0, apiClient);\n    });\n});\n"]}