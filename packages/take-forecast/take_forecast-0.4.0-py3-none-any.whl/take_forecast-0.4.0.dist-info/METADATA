Metadata-Version: 2.1
Name: take-forecast
Version: 0.4.0
Summary: This project build pipelines for time series forecast for Take BLiP Nomics
Home-page: UNKNOWN
Author: Gabriel Salgado
Author-email: gabriel.salgado@take.net
License: UNKNOWN
Keywords: time series,forecast
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: ipython (<8.0,>=7.13.0)
Requires-Dist: jupyter (<2.0,>=1.0.0)
Requires-Dist: jupyter-client (<6.0,>=5.1.0)
Requires-Dist: jupyterlab (==0.31.1)
Requires-Dist: kedro (==0.15.9)
Requires-Dist: kedro-viz (<4.0,>=3.2.0)
Requires-Dist: nbstripout (==0.3.3)
Requires-Dist: python-dateutil (==2.8.0)
Requires-Dist: pytest-cov (<3.0,>=2.8.1)
Requires-Dist: pytest-mock (<2.0,>=1.7.1)
Requires-Dist: pytest (<4.0,>=3.4)
Requires-Dist: six (==1.14.0)
Requires-Dist: wheel (==0.32.2)
Requires-Dist: matplotlib
Requires-Dist: pandas (<=0.25.3)
Requires-Dist: seaborn
Requires-Dist: sklearn
Requires-Dist: statsmodels
Requires-Dist: pyodbc
Provides-Extra: docs
Requires-Dist: sphinx (<2.0,>=1.6.3); extra == 'docs'
Requires-Dist: sphinx-rtd-theme (==0.4.1); extra == 'docs'
Requires-Dist: nbsphinx (==0.3.4); extra == 'docs'
Requires-Dist: nbstripout (==0.3.3); extra == 'docs'
Requires-Dist: recommonmark (==0.5.0); extra == 'docs'
Requires-Dist: sphinx-autodoc-typehints (==1.6.0); extra == 'docs'
Requires-Dist: sphinx-copybutton (==0.2.5); extra == 'docs'
Requires-Dist: jupyter-client (<6.0,>=5.1.0); extra == 'docs'
Requires-Dist: tornado (<6.0,>=4.2); extra == 'docs'
Requires-Dist: ipykernel (<5.0,>=4.8.1); extra == 'docs'

# TakeForecast

## Overview

This README contains TakeForecast documentation and also has generated by Kedro, kept while this project documentation is not done yet.

Here will be presented content:

* Testing TakeForecast

## Testing TakeForecast

You can test on commands lines or on IDE. Here it is presented how to test on command lines and on PyCharm.

### Testing on Commands Lines

Using virtual environment:
```
pip install venv
```

Create a virtual environment:
```
python -m venv venv
```

Enter to virtual environment:
```
./venv/Scripts/activate
```

Install requirements:
```
pip install -r src/requirements.txt
```

Run kedro tests:
```
kedro test
```

Generate report as HTML:
```
coverage html
```

See coverage results at _htmlcov/index.html_.

### Testing on PyCharm

Open _File/Settings..._ or press _Ctrl+Alt+S_. This opens settings window.

Open _Project: TakeForecast/Project Interpreter_ on left menu.

Open _Project Interpreter_ combobox and click on _Show All..._. This opens a window with Python interpreters.

Click on _+_ or press _Alt+Insert_. This opens a window to create a new Python interpreter.

We will choose default options that create a new virtual environment into project. Click on _Ok_ button.

Click on _Ok_ button again. And again.

PyCharm will ask if you want to install requirements. Choose _Install_.

Click on _Edit Configurations..._ beside _Run_ icon. This opens Run/Debug Configurations window.

Click on _+_ or press _Alt+Insert_.

Choose _Python tests/pytest_ option.

Fill _Target_ field with path to tests folder as _<path to project>/src/tests_.

Click on _Ok_ button.

Click on _Run_ icon. This run the tests.

Open _Terminal_ window and run command to generate HTML report:
```
coverage html
```

See coverage results at _htmlcov/index.html_.

# Kedro Generated README

## Overview

This is your new Kedro project, which was generated using `Kedro 0.15.9` by running:

```
kedro new
```

Take a look at the [documentation](https://kedro.readthedocs.io) to get started.

## Rules and guidelines

In order to get the best out of the template:
 * Please don't remove any lines from the `.gitignore` file provided
 * Make sure your results can be reproduced by following a data engineering convention, e.g. the one we suggest [here](https://kedro.readthedocs.io/en/stable/06_resources/01_faq.html#what-is-data-engineering-convention)
 * Don't commit any data to your repository
 * Don't commit any credentials or local configuration to your repository
 * Keep all credentials or local configuration in `conf/local/`

## Installing dependencies

Dependencies should be declared in `src/requirements.txt` for pip installation and `src/environment.yml` for conda installation.

To install them, run:

```
kedro install
```

## Running Kedro

You can run your Kedro project with:

```
kedro run
```

## Testing Kedro

Have a look at the file `src/tests/test_run.py` for instructions on how to write your tests. You can run your tests with the following command:

```
kedro test
```

To configure the coverage threshold, please have a look at the file `.coveragerc`.


### Working with Kedro from notebooks

In order to use notebooks in your Kedro project, you need to install Jupyter:

```
pip install jupyter
```

For using Jupyter Lab, you need to install it:

```
pip install jupyterlab
```

After installing Jupyter, you can start a local notebook server:

```
kedro jupyter notebook
```

You can also start Jupyter Lab:

```
kedro jupyter lab
```

And if you want to run an IPython session:

```
kedro ipython
```

Running Jupyter or IPython this way provides the following variables in
scope: `proj_dir`, `proj_name`, `conf`, `io`, `parameters` and `startup_error`.

#### Converting notebook cells to nodes in a Kedro project

Once you are happy with a notebook, you may want to move your code over into the Kedro project structure for the next stage in your development. This is done through a mixture of [cell tagging](https://jupyter-notebook.readthedocs.io/en/stable/changelog.html#cell-tags) and Kedro CLI commands.

By adding the `node` tag to a cell and running the command below, the cell's source code will be copied over to a Python file within `src/<package_name>/nodes/`.
```
kedro jupyter convert <filepath_to_my_notebook>
```
> *Note:* The name of the Python file matches the name of the original notebook.

Alternatively, you may want to transform all your notebooks in one go. To this end, you can run the following command to convert all notebook files found in the project root directory and under any of its sub-folders.
```
kedro jupyter convert --all
```

#### Ignoring notebook output cells in `git`

In order to automatically strip out all output cell contents before committing to `git`, you can run `kedro activate-nbstripout`. This will add a hook in `.git/config` which will run `nbstripout` before anything is committed to `git`.

> *Note:* Your output cells will be left intact locally.

## Package the project

In order to package the project's Python code in `.egg` and / or a `.wheel` file, you can run:

```
kedro package
```

After running that, you can find the two packages in `src/dist/`.

## Building API documentation

To build API docs for your code using Sphinx, run:

```
kedro build-docs
```

See your documentation by opening `docs/build/html/index.html`.

## Building the project requirements

To generate or update the dependency requirements for your project, run:

```
kedro build-reqs
```

This will copy the contents of `src/requirements.txt` into a new file `src/requirements.in` which will be used as the source for `pip-compile`. You can see the output of the resolution by opening `src/requirements.txt`.

After this, if you'd like to update your project requirements, please update `src/requirements.in` and re-run `kedro build-reqs`.


