# coding: utf-8

"""
    LUSID API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.10.1390
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class MarketDataManifest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'quotes': 'dict(str, ValueTupleOfMarketDataKeyRuleToQuote)',
        'structured_market_data': 'dict(str, ValueTupleOfMarketDataKeyRuleToStructuredMarketData)'
    }

    attribute_map = {
        'quotes': 'quotes',
        'structured_market_data': 'structuredMarketData'
    }

    required_map = {
        'quotes': 'optional',
        'structured_market_data': 'optional'
    }

    def __init__(self, quotes=None, structured_market_data=None):  # noqa: E501
        """
        MarketDataManifest - a model defined in OpenAPI

        :param quotes: 
        :type quotes: dict[str, lusid.ValueTupleOfMarketDataKeyRuleToQuote]
        :param structured_market_data: 
        :type structured_market_data: dict[str, lusid.ValueTupleOfMarketDataKeyRuleToStructuredMarketData]

        """  # noqa: E501

        self._quotes = None
        self._structured_market_data = None
        self.discriminator = None

        if quotes is not None:
            self.quotes = quotes
        if structured_market_data is not None:
            self.structured_market_data = structured_market_data

    @property
    def quotes(self):
        """Gets the quotes of this MarketDataManifest.  # noqa: E501


        :return: The quotes of this MarketDataManifest.  # noqa: E501
        :rtype: dict(str, ValueTupleOfMarketDataKeyRuleToQuote)
        """
        return self._quotes

    @quotes.setter
    def quotes(self, quotes):
        """Sets the quotes of this MarketDataManifest.


        :param quotes: The quotes of this MarketDataManifest.  # noqa: E501
        :type: dict(str, ValueTupleOfMarketDataKeyRuleToQuote)
        """

        self._quotes = quotes

    @property
    def structured_market_data(self):
        """Gets the structured_market_data of this MarketDataManifest.  # noqa: E501


        :return: The structured_market_data of this MarketDataManifest.  # noqa: E501
        :rtype: dict(str, ValueTupleOfMarketDataKeyRuleToStructuredMarketData)
        """
        return self._structured_market_data

    @structured_market_data.setter
    def structured_market_data(self, structured_market_data):
        """Sets the structured_market_data of this MarketDataManifest.


        :param structured_market_data: The structured_market_data of this MarketDataManifest.  # noqa: E501
        :type: dict(str, ValueTupleOfMarketDataKeyRuleToStructuredMarketData)
        """

        self._structured_market_data = structured_market_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketDataManifest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
