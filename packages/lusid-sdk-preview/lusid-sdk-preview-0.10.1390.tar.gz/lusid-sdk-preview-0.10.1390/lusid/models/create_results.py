# coding: utf-8

"""
    LUSID API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.10.1390
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class CreateResults(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'effective_at': 'datetime',
        'entity_scope': 'str',
        'entity_code': 'str',
        'calculation_scope': 'str',
        'calculation_code': 'str',
        'format': 'str',
        'data': 'str'
    }

    attribute_map = {
        'effective_at': 'effectiveAt',
        'entity_scope': 'entityScope',
        'entity_code': 'entityCode',
        'calculation_scope': 'calculationScope',
        'calculation_code': 'calculationCode',
        'format': 'format',
        'data': 'data'
    }

    required_map = {
        'effective_at': 'required',
        'entity_scope': 'required',
        'entity_code': 'required',
        'calculation_scope': 'required',
        'calculation_code': 'required',
        'format': 'optional',
        'data': 'optional'
    }

    def __init__(self, effective_at=None, entity_scope=None, entity_code=None, calculation_scope=None, calculation_code=None, format=None, data=None):  # noqa: E501
        """
        CreateResults - a model defined in OpenAPI

        :param effective_at:  The effective market date for which results are calculated and are to be stored. (required)
        :type effective_at: datetime
        :param entity_scope:  Scope of the entity code (required)
        :type entity_scope: str
        :param entity_code:  The code of the entity for which the data has been calculated. (required)
        :type entity_code: str
        :param calculation_scope:  Scope of the calculation code. (required)
        :type calculation_scope: str
        :param calculation_code:  This is the identifier which denotes some hash of, or recipe, that cumulatively represents the configuration through which  the results being stored are obtained. For example, the recipe denotes the pricing model, the market data and any other  settings. If the results were calculated externally it should be some repeatable hash or other Id that denotes the particular  configuration under which those results were obtained. (required)
        :type calculation_code: str
        :param format:  The format in which the results are stored/structured.
        :type format: str
        :param data:  The data that should be stored in the results cube.
        :type data: str

        """  # noqa: E501

        self._effective_at = None
        self._entity_scope = None
        self._entity_code = None
        self._calculation_scope = None
        self._calculation_code = None
        self._format = None
        self._data = None
        self.discriminator = None

        self.effective_at = effective_at
        self.entity_scope = entity_scope
        self.entity_code = entity_code
        self.calculation_scope = calculation_scope
        self.calculation_code = calculation_code
        if format is not None:
            self.format = format
        if data is not None:
            self.data = data

    @property
    def effective_at(self):
        """Gets the effective_at of this CreateResults.  # noqa: E501

        The effective market date for which results are calculated and are to be stored.  # noqa: E501

        :return: The effective_at of this CreateResults.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_at

    @effective_at.setter
    def effective_at(self, effective_at):
        """Sets the effective_at of this CreateResults.

        The effective market date for which results are calculated and are to be stored.  # noqa: E501

        :param effective_at: The effective_at of this CreateResults.  # noqa: E501
        :type: datetime
        """
        if effective_at is None:
            raise ValueError("Invalid value for `effective_at`, must not be `None`")  # noqa: E501

        self._effective_at = effective_at

    @property
    def entity_scope(self):
        """Gets the entity_scope of this CreateResults.  # noqa: E501

        Scope of the entity code  # noqa: E501

        :return: The entity_scope of this CreateResults.  # noqa: E501
        :rtype: str
        """
        return self._entity_scope

    @entity_scope.setter
    def entity_scope(self, entity_scope):
        """Sets the entity_scope of this CreateResults.

        Scope of the entity code  # noqa: E501

        :param entity_scope: The entity_scope of this CreateResults.  # noqa: E501
        :type: str
        """
        if entity_scope is None:
            raise ValueError("Invalid value for `entity_scope`, must not be `None`")  # noqa: E501

        self._entity_scope = entity_scope

    @property
    def entity_code(self):
        """Gets the entity_code of this CreateResults.  # noqa: E501

        The code of the entity for which the data has been calculated.  # noqa: E501

        :return: The entity_code of this CreateResults.  # noqa: E501
        :rtype: str
        """
        return self._entity_code

    @entity_code.setter
    def entity_code(self, entity_code):
        """Sets the entity_code of this CreateResults.

        The code of the entity for which the data has been calculated.  # noqa: E501

        :param entity_code: The entity_code of this CreateResults.  # noqa: E501
        :type: str
        """
        if entity_code is None:
            raise ValueError("Invalid value for `entity_code`, must not be `None`")  # noqa: E501

        self._entity_code = entity_code

    @property
    def calculation_scope(self):
        """Gets the calculation_scope of this CreateResults.  # noqa: E501

        Scope of the calculation code.  # noqa: E501

        :return: The calculation_scope of this CreateResults.  # noqa: E501
        :rtype: str
        """
        return self._calculation_scope

    @calculation_scope.setter
    def calculation_scope(self, calculation_scope):
        """Sets the calculation_scope of this CreateResults.

        Scope of the calculation code.  # noqa: E501

        :param calculation_scope: The calculation_scope of this CreateResults.  # noqa: E501
        :type: str
        """
        if calculation_scope is None:
            raise ValueError("Invalid value for `calculation_scope`, must not be `None`")  # noqa: E501

        self._calculation_scope = calculation_scope

    @property
    def calculation_code(self):
        """Gets the calculation_code of this CreateResults.  # noqa: E501

        This is the identifier which denotes some hash of, or recipe, that cumulatively represents the configuration through which  the results being stored are obtained. For example, the recipe denotes the pricing model, the market data and any other  settings. If the results were calculated externally it should be some repeatable hash or other Id that denotes the particular  configuration under which those results were obtained.  # noqa: E501

        :return: The calculation_code of this CreateResults.  # noqa: E501
        :rtype: str
        """
        return self._calculation_code

    @calculation_code.setter
    def calculation_code(self, calculation_code):
        """Sets the calculation_code of this CreateResults.

        This is the identifier which denotes some hash of, or recipe, that cumulatively represents the configuration through which  the results being stored are obtained. For example, the recipe denotes the pricing model, the market data and any other  settings. If the results were calculated externally it should be some repeatable hash or other Id that denotes the particular  configuration under which those results were obtained.  # noqa: E501

        :param calculation_code: The calculation_code of this CreateResults.  # noqa: E501
        :type: str
        """
        if calculation_code is None:
            raise ValueError("Invalid value for `calculation_code`, must not be `None`")  # noqa: E501

        self._calculation_code = calculation_code

    @property
    def format(self):
        """Gets the format of this CreateResults.  # noqa: E501

        The format in which the results are stored/structured.  # noqa: E501

        :return: The format of this CreateResults.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateResults.

        The format in which the results are stored/structured.  # noqa: E501

        :param format: The format of this CreateResults.  # noqa: E501
        :type: str
        """
        allowed_values = ["DataReader", "Portfolio", "Csv", "Unknown"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"  # noqa: E501
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def data(self):
        """Gets the data of this CreateResults.  # noqa: E501

        The data that should be stored in the results cube.  # noqa: E501

        :return: The data of this CreateResults.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CreateResults.

        The data that should be stored in the results cube.  # noqa: E501

        :param data: The data of this CreateResults.  # noqa: E501
        :type: str
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
