# coding: utf-8

"""
    LUSID API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.10.1392
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class AggregationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'display_name': 'str',
        'scales_with_holding_quantity': 'bool',
        'value_type': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'scales_with_holding_quantity': 'scalesWithHoldingQuantity',
        'value_type': 'valueType'
    }

    required_map = {
        'display_name': 'optional',
        'scales_with_holding_quantity': 'optional',
        'value_type': 'optional'
    }

    def __init__(self, display_name=None, scales_with_holding_quantity=None, value_type=None):  # noqa: E501
        """
        AggregationResult - a model defined in OpenAPI

        :param display_name: 
        :type display_name: str
        :param scales_with_holding_quantity: 
        :type scales_with_holding_quantity: bool
        :param value_type: 
        :type value_type: str

        """  # noqa: E501

        self._display_name = None
        self._scales_with_holding_quantity = None
        self._value_type = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if scales_with_holding_quantity is not None:
            self.scales_with_holding_quantity = scales_with_holding_quantity
        if value_type is not None:
            self.value_type = value_type

    @property
    def display_name(self):
        """Gets the display_name of this AggregationResult.  # noqa: E501


        :return: The display_name of this AggregationResult.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AggregationResult.


        :param display_name: The display_name of this AggregationResult.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def scales_with_holding_quantity(self):
        """Gets the scales_with_holding_quantity of this AggregationResult.  # noqa: E501


        :return: The scales_with_holding_quantity of this AggregationResult.  # noqa: E501
        :rtype: bool
        """
        return self._scales_with_holding_quantity

    @scales_with_holding_quantity.setter
    def scales_with_holding_quantity(self, scales_with_holding_quantity):
        """Sets the scales_with_holding_quantity of this AggregationResult.


        :param scales_with_holding_quantity: The scales_with_holding_quantity of this AggregationResult.  # noqa: E501
        :type: bool
        """

        self._scales_with_holding_quantity = scales_with_holding_quantity

    @property
    def value_type(self):
        """Gets the value_type of this AggregationResult.  # noqa: E501


        :return: The value_type of this AggregationResult.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this AggregationResult.


        :param value_type: The value_type of this AggregationResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["String", "Int", "Decimal", "DateTime", "Boolean", "Map", "List", "PropertyArray", "Percentage", "BenchmarkType", "Code", "Id", "Uri", "ArrayOfIds", "ArrayOfTransactionAliases", "ArrayofTransactionMovements", "ArrayofUnits", "StringArray", "CurrencyAndAmount", "TradePrice", "UnitCreation", "Currency", "UserId", "MetricValue", "QuoteId", "QuoteSeriesId", "ResourceId", "ResultValue", "CutLocalTime", "DateOrCutLabel", "Transition", "StructuredData", "StructuredDataId", "ConfigurationRecipe", "ConfigurationRecipeSnippet", "StructuredResultDataId", "StructuredResultData", "DataMapping", "LusidInstrument", "WeightedInstrument", "Tenor", "CdsDetailSpecifications", "FlowConventions", "OrderId"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"  # noqa: E501
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
