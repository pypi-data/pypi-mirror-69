# coding: utf-8

"""
    LUSID API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.10.1392
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

class InstrumentLeg(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'conventions': 'FlowConventions',
        'is_pay_not_receive': 'bool',
        'is_float_not_fixed': 'bool',
        'fixed_rate': 'float'
    }

    attribute_map = {
        'conventions': 'conventions',
        'is_pay_not_receive': 'isPayNotReceive',
        'is_float_not_fixed': 'isFloatNotFixed',
        'fixed_rate': 'fixedRate'
    }

    required_map = {
        'conventions': 'required',
        'is_pay_not_receive': 'required',
        'is_float_not_fixed': 'required',
        'fixed_rate': 'required'
    }

    def __init__(self, conventions=None, is_pay_not_receive=None, is_float_not_fixed=None, fixed_rate=None):  # noqa: E501
        """
        InstrumentLeg - a model defined in OpenAPI

        :param conventions:  (required)
        :type conventions: lusid.FlowConventions
        :param is_pay_not_receive:  True if the holder of the swap pays, false if they receive the flows on this leg. (required)
        :type is_pay_not_receive: bool
        :param is_float_not_fixed:  True if the payments float or are fixed. (required)
        :type is_float_not_fixed: bool
        :param fixed_rate:  If the leg is fixed, the fixed rate. (required)
        :type fixed_rate: float

        """  # noqa: E501

        self._conventions = None
        self._is_pay_not_receive = None
        self._is_float_not_fixed = None
        self._fixed_rate = None
        self.discriminator = None

        self.conventions = conventions
        self.is_pay_not_receive = is_pay_not_receive
        self.is_float_not_fixed = is_float_not_fixed
        self.fixed_rate = fixed_rate

    @property
    def conventions(self):
        """Gets the conventions of this InstrumentLeg.  # noqa: E501


        :return: The conventions of this InstrumentLeg.  # noqa: E501
        :rtype: FlowConventions
        """
        return self._conventions

    @conventions.setter
    def conventions(self, conventions):
        """Sets the conventions of this InstrumentLeg.


        :param conventions: The conventions of this InstrumentLeg.  # noqa: E501
        :type: FlowConventions
        """
        if conventions is None:
            raise ValueError("Invalid value for `conventions`, must not be `None`")  # noqa: E501

        self._conventions = conventions

    @property
    def is_pay_not_receive(self):
        """Gets the is_pay_not_receive of this InstrumentLeg.  # noqa: E501

        True if the holder of the swap pays, false if they receive the flows on this leg.  # noqa: E501

        :return: The is_pay_not_receive of this InstrumentLeg.  # noqa: E501
        :rtype: bool
        """
        return self._is_pay_not_receive

    @is_pay_not_receive.setter
    def is_pay_not_receive(self, is_pay_not_receive):
        """Sets the is_pay_not_receive of this InstrumentLeg.

        True if the holder of the swap pays, false if they receive the flows on this leg.  # noqa: E501

        :param is_pay_not_receive: The is_pay_not_receive of this InstrumentLeg.  # noqa: E501
        :type: bool
        """
        if is_pay_not_receive is None:
            raise ValueError("Invalid value for `is_pay_not_receive`, must not be `None`")  # noqa: E501

        self._is_pay_not_receive = is_pay_not_receive

    @property
    def is_float_not_fixed(self):
        """Gets the is_float_not_fixed of this InstrumentLeg.  # noqa: E501

        True if the payments float or are fixed.  # noqa: E501

        :return: The is_float_not_fixed of this InstrumentLeg.  # noqa: E501
        :rtype: bool
        """
        return self._is_float_not_fixed

    @is_float_not_fixed.setter
    def is_float_not_fixed(self, is_float_not_fixed):
        """Sets the is_float_not_fixed of this InstrumentLeg.

        True if the payments float or are fixed.  # noqa: E501

        :param is_float_not_fixed: The is_float_not_fixed of this InstrumentLeg.  # noqa: E501
        :type: bool
        """
        if is_float_not_fixed is None:
            raise ValueError("Invalid value for `is_float_not_fixed`, must not be `None`")  # noqa: E501

        self._is_float_not_fixed = is_float_not_fixed

    @property
    def fixed_rate(self):
        """Gets the fixed_rate of this InstrumentLeg.  # noqa: E501

        If the leg is fixed, the fixed rate.  # noqa: E501

        :return: The fixed_rate of this InstrumentLeg.  # noqa: E501
        :rtype: float
        """
        return self._fixed_rate

    @fixed_rate.setter
    def fixed_rate(self, fixed_rate):
        """Sets the fixed_rate of this InstrumentLeg.

        If the leg is fixed, the fixed rate.  # noqa: E501

        :param fixed_rate: The fixed_rate of this InstrumentLeg.  # noqa: E501
        :type: float
        """
        if fixed_rate is None:
            raise ValueError("Invalid value for `fixed_rate`, must not be `None`")  # noqa: E501

        self._fixed_rate = fixed_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstrumentLeg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
