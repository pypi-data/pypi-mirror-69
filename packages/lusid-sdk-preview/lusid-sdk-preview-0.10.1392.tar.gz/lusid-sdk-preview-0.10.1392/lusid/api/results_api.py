# coding: utf-8

"""
    LUSID API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.10.1392
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from lusid.api_client import ApiClient
from lusid.exceptions import (
    ApiTypeError,
    ApiValueError
)


class ResultsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_results(self, entity_scope, entity_code, calculation_scope, calculation_code, effective_at, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] Retrieve a page of results all keyed by the provided parameters. The result store is not bi-temporal; a single date  addressed the market effectiveAt.  # noqa: E501

        Retrieve pre-calculated results that have been stored in LUSID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results(entity_scope, entity_code, calculation_scope, calculation_code, effective_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_scope: The scope of the data or entity being stored (required)
        :param str entity_code: The identifier for the data or results entity being stored (required)
        :param str calculation_scope: The identifying scope for the calculation that produced the result (required)
        :param str calculation_code: The identifying calculation name for the results (required)
        :param datetime effective_at: The market date for which the data is stored (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Results
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_results_with_http_info(entity_scope, entity_code, calculation_scope, calculation_code, effective_at, **kwargs)  # noqa: E501

    def get_results_with_http_info(self, entity_scope, entity_code, calculation_scope, calculation_code, effective_at, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] Retrieve a page of results all keyed by the provided parameters. The result store is not bi-temporal; a single date  addressed the market effectiveAt.  # noqa: E501

        Retrieve pre-calculated results that have been stored in LUSID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results_with_http_info(entity_scope, entity_code, calculation_scope, calculation_code, effective_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str entity_scope: The scope of the data or entity being stored (required)
        :param str entity_code: The identifier for the data or results entity being stored (required)
        :param str calculation_scope: The identifying scope for the calculation that produced the result (required)
        :param str calculation_code: The identifying calculation name for the results (required)
        :param datetime effective_at: The market date for which the data is stored (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Results, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['entity_scope', 'entity_code', 'calculation_scope', 'calculation_code', 'effective_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'entity_scope' is set
        if ('entity_scope' not in local_var_params or
                local_var_params['entity_scope'] is None):
            raise ApiValueError("Missing the required parameter `entity_scope` when calling `get_results`")  # noqa: E501
        # verify the required parameter 'entity_code' is set
        if ('entity_code' not in local_var_params or
                local_var_params['entity_code'] is None):
            raise ApiValueError("Missing the required parameter `entity_code` when calling `get_results`")  # noqa: E501
        # verify the required parameter 'calculation_scope' is set
        if ('calculation_scope' not in local_var_params or
                local_var_params['calculation_scope'] is None):
            raise ApiValueError("Missing the required parameter `calculation_scope` when calling `get_results`")  # noqa: E501
        # verify the required parameter 'calculation_code' is set
        if ('calculation_code' not in local_var_params or
                local_var_params['calculation_code'] is None):
            raise ApiValueError("Missing the required parameter `calculation_code` when calling `get_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_scope' in local_var_params:
            path_params['entityScope'] = local_var_params['entity_scope']  # noqa: E501
        if 'entity_code' in local_var_params:
            path_params['entityCode'] = local_var_params['entity_code']  # noqa: E501
        if 'calculation_scope' in local_var_params:
            path_params['calculationScope'] = local_var_params['calculation_scope']  # noqa: E501
        if 'calculation_code' in local_var_params:
            path_params['calculationCode'] = local_var_params['calculation_code']  # noqa: E501
        if 'effective_at' in local_var_params:
            path_params['effectiveAt'] = local_var_params['effective_at']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501


        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '0.10.1392'

        return self.api_client.call_api(
            '/api/results/{entityScope}/{entityCode}/{calculationScope}/{calculationCode}/{effectiveAt}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Results',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upsert_results(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] Upsert results  # noqa: E501

        Upsert pre-calculated results against a specified combination of key parameters defined in the CreateResults request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_results(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CreateResults request: The details of what to upsert
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Results
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upsert_results_with_http_info(**kwargs)  # noqa: E501

    def upsert_results_with_http_info(self, **kwargs):  # noqa: E501
        """[EXPERIMENTAL] Upsert results  # noqa: E501

        Upsert pre-calculated results against a specified combination of key parameters defined in the CreateResults request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upsert_results_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param CreateResults request: The details of what to upsert
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Results, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upsert_results" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in local_var_params:
            body_params = local_var_params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501


        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        # set the LUSID header
        header_params['X-LUSID-SDK-Language'] = 'Python'
        header_params['X-LUSID-SDK-Version'] = '0.10.1392'

        return self.api_client.call_api(
            '/api/results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Results',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
