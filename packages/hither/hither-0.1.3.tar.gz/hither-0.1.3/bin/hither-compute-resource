#!/usr/bin/env python

from typing import Dict, Any
import os
import json
import argparse
import hither as hi

def main():
    parser = argparse.ArgumentParser(description='Host a compute resource', formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('command', help='init or start')

    args = parser.parse_args()

    command = args.command

    if command == 'init':
        x = {
            "compute_resource_id": "[fill-in-compute-resource-id]",
            "database": {
                "mongo_url": "[fill-in-mongo-url]",
                "database": "[fill-in-database-name]"
            },
            "kachery": {
                "url": "[fill-in-url-to-kachery-server]",
                "channel": "[fill-in-channel]",
                "password": "[fill-in-password]"
            },
            "job_handler": {
                "type": "parallel",
                "config": {
                    "num_workers": 4
                }
            }
        }
        with open('compute_resource.json', 'w') as f:
            json.dump(x, f, indent=4)
        print('Example configuration has been written to compute_resource.json. Edit that file and then run "hither-compute-resource start".')
        return
    elif command == 'start':
        with open('compute_resource.json', 'r') as f:
            config = json.load(f)
        config = _replace_env(config)
        database = config['database']
        compute_resource_id = config['compute_resource_id']
        kachery = config['kachery']
        job_handler = config['job_handler']
        if type(database) == str:
            db = hi.Database.preset(database)
        else:
            db = hi.Database(**database)
        jc = hi.JobCache(database=db)

        if job_handler['type'] == 'slurm':
            slurm_working_dir = 'slurm-working-dir'
            if not os.path.exists(slurm_working_dir):
                os.mkdir(slurm_working_dir)
            jh = hi.SlurmJobHandler(
                working_dir=slurm_working_dir,
                **job_handler['config']
            )
        elif job_handler['type'] == 'parallel':
            jh = hi.ParallelJobHandler(
                num_workers=job_handler['config']['num_workers']
            )
        else:
            raise Exception(f'Unexpected job handler type: {job_handler["type"]}')

        cr = hi.ComputeResource(
            database=db,
            compute_resource_id=compute_resource_id,
            kachery=kachery,
            job_handler=jh,
            job_cache=jc
        )
        print(f'Starting compute resource: {compute_resource_id}')
        cr.run()
    else:
        print(f'Unexpected command: {command}')

def _replace_env(x):
    if type(x) == dict:
        if 'env' in x:
            return os.environ[x['env']]
        ret = dict()
        for k, v in x.items():
            ret[k] = _replace_env(v)
        return ret
    elif type(x) == list:
        return [_replace_env(a) for a in x]
    elif type(x) == tuple:
        return tuple([_replace_env(a) for a in x])
    else:
        return x

if __name__ == "__main__":
    main()
