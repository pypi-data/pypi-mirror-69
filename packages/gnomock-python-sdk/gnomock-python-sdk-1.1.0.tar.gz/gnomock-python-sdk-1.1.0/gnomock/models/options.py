# coding: utf-8

"""
    gnomock

    `gnomock` is an HTTP wrapper for [Gnomock](https://github.com/orlangure/gnomock) integration and end-to-end testing toolkit. It allows to use Gnomock outside of Go ecosystem. Not all Gnomock features exist in this wrapper, but official presets, as well as basic general configuration, are supported.   # noqa: E501

    The version of the OpenAPI document: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from gnomock.configuration import Configuration


class Options(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'wait_timeout': 'int',
        'env': 'list[str]',
        'tag': 'str'
    }

    attribute_map = {
        'wait_timeout': 'wait_timeout',
        'env': 'env',
        'tag': 'tag'
    }

    def __init__(self, wait_timeout=None, env=None, tag=None, local_vars_configuration=None):  # noqa: E501
        """Options - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._wait_timeout = None
        self._env = None
        self._tag = None
        self.discriminator = None

        if wait_timeout is not None:
            self.wait_timeout = wait_timeout
        if env is not None:
            self.env = env
        if tag is not None:
            self.tag = tag

    @property
    def wait_timeout(self):
        """Gets the wait_timeout of this Options.  # noqa: E501

        Wait timeout in nanoseconds  # noqa: E501

        :return: The wait_timeout of this Options.  # noqa: E501
        :rtype: int
        """
        return self._wait_timeout

    @wait_timeout.setter
    def wait_timeout(self, wait_timeout):
        """Sets the wait_timeout of this Options.

        Wait timeout in nanoseconds  # noqa: E501

        :param wait_timeout: The wait_timeout of this Options.  # noqa: E501
        :type: int
        """

        self._wait_timeout = wait_timeout

    @property
    def env(self):
        """Gets the env of this Options.  # noqa: E501

        Array of environment variables to set in the container  # noqa: E501

        :return: The env of this Options.  # noqa: E501
        :rtype: list[str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this Options.

        Array of environment variables to set in the container  # noqa: E501

        :param env: The env of this Options.  # noqa: E501
        :type: list[str]
        """

        self._env = env

    @property
    def tag(self):
        """Gets the tag of this Options.  # noqa: E501

        Docker image tag  # noqa: E501

        :return: The tag of this Options.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Options.

        Docker image tag  # noqa: E501

        :param tag: The tag of this Options.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Options):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Options):
            return True

        return self.to_dict() != other.to_dict()
