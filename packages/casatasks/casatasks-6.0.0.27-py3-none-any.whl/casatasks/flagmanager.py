##################### generated by xml-casa (v2) from flagmanager.xml ###############
##################### fb7f8cccd52c6e98ca5f6fd771b936f1 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_flagmanager import flagmanager as _flagmanager_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _flagmanager:
    """
    flagmanager ---- Enable list, save, restore, delete and rename flag version files.

    
    These flag version files are copies of the flag column for a
    measurement set.  They can be restored to the data set to get
    back to a previous flag version.  On running importvla, a flag
    version call 'Original' is automatically produced.
    

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file (MS)
    mode        Operation: list, save, restore, delete, rename
    versionname Flag version name
    oldname     Flag version to rename
    comment     Short description of a versionname
    merge       Merge option: replace will save or over-write the flags
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    
    
    The flag version files are copies of the FLAG column of a
    Measurement Set. They can be restored to the data set to obtain
    a previous flag version.  On running importasdm, a flag
    version called 'Original' is produced by default.  It is recommended to
    save a flagversion at the beginning or after serious editing.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none. example: vis='ngc5921.ms'
    
    mode -- Flag version operation
    default: 'list': it will list in the logger the existing flag versions of the MS.
    This option will also return by default a dictionary containing the
    name of the MS, the name of the flag version and the comment. This
    information is taken from the FLAG_VERSION_LIST file inside the
    .flagversions directory.
    
    'save': will save the FLAG column from vis to a specified flag file. If the name given
    in versionname already exists, the task will give a warning and rename it
    to a name with a suffix '.old.timestamp'. The respective entry in FLAG_VERSION_LIST
    will also be updated.
    
    'restore': will place the specified flag file into vis
    
    'delete': will delete specified flag file
    
    'rename': will rename a specified flag file
    
    versionname -- Flag version name
    default: none; example: versionname='original_data'
    No imbedded blanks in the versionname
    
    comment -- Short description of a versionname, when mode is 'save' or 'rename'
    default: ''; example: comment='Clip above 1.85'
    comment = versionname
    
    oldname -- When mode='rename', the flag file to rename
    
    merge -- Merge operation
    Options: 'or','and', but not recommended for now.
    
    


    """

    _info_group_ = """editing"""
    _info_desc_ = """Enable list, save, restore, delete and rename flag version files."""

    def __call__( self, vis='', mode='list', versionname='', oldname='', comment='', merge='replace' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'mode': {'type': 'cStr', 'allowed': [ 'rename', 'save', 'delete', 'list', 'restore' ]}, 'versionname': {'type': 'cStr'}, 'oldname': {'type': 'cStr'}, 'comment': {'type': 'cStr'}, 'merge': {'type': 'cStr'}}
        doc = {'vis': vis, 'mode': mode, 'versionname': versionname, 'oldname': oldname, 'comment': comment, 'merge': merge}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'flagmanager', [ 'vis=' + repr(_pc.document['vis']), 'mode=' + repr(_pc.document['mode']), 'versionname=' + repr(_pc.document['versionname']), 'oldname=' + repr(_pc.document['oldname']), 'comment=' + repr(_pc.document['comment']), 'merge=' + repr(_pc.document['merge']) ] )
        return _end_log( _logging_state_, 'flagmanager', _flagmanager_t( _pc.document['vis'], _pc.document['mode'], _pc.document['versionname'], _pc.document['oldname'], _pc.document['comment'], _pc.document['merge'] ) )

flagmanager = _flagmanager( )

