##################### generated by xml-casa (v2) from listobs.xml ###################
##################### 76e5c7b5ee11244e5ce802c0cf89bea1 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_listobs import listobs as _listobs_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _listobs:
    """
    listobs ---- List the summary of a data set in the logger or in a file

    
    List the summary information of a data set in the logger or in a file, based on
    a data selection. Only rows can be selected and printed. No in-row selection is
    possible (channel or correlation).
    
    Lists the following properties of a measurement set:
    scan list, field list, spectral window list with
    correlators, antenna locations, ms table information.
    

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file (MS)
    selectdata  Data selection parameters
    spw         Selection based on spectral-window/frequency/channel.
    field       Selection based on field names or field index numbers. Default is all.
    antenna     Selection based on antenna/baselines. Default is all.
    uvrange     Selection based on uv range. Default: entire range. Default units: meters.
    timerange   Selection based on time range. Default is entire range.
    correlation Selection based on correlation. Default is all.
    scan        Selection based on scan numbers. Default is all.
    intent      Selection based on observation intent. Default is all.
    feed        Selection based on multi-feed numbers: Not yet implemented
    array       Selection based on (sub)array numbers. Default is all.
    observation Selection based on observation ID. Default is all.
    verbose     Controls level of information detail reported. True reports more than False.
    listfile    Name of disk file to write output. Default is none (output is written to logger only).
    listunfl    List unflagged row counts? If true, it can have significant negative performance impact.
    cachesize   EXPERIMENTAL. Maximum size in megabytes of cache in which data structures can be held.
    overwrite   If True, tacitly overwrite listfile if it exists.
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    
    List the summary information of a data set in the logger or in a file, based on
    a data selection. Only rows can be selected and printed. No in-row selection is
    possible (channel or correlation). Refer to the task listvis to list visibilites.
    
    Lists the following properties of a measurement set:
    scan list, field list, spectral window list with
    correlators, antenna locations, ms table information.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none. example: vis='ngc5921.ms'
    
    selectdata -- Select a subset of data for flagging
    default: False
    options: True,False
    The summary listing will only apply to the specified selection.
    
    antenna -- Select data based on baseline
    default: '' (all); example: antenna='5&6' baseline 5-6
    antenna='5&6;7&8' #baseline 5-6 and 7-8
    antenna='5' # all cross-correlation baselines between antenna 5 and all other available
    antennas
    antenna='5,6' # all baselines with antennas 5 and 6
    antenna='1&&1' # only the auto-correlation baselines for antenna 1
    antenna='1&&*' # cross and auto-correlation baselines between antenna 1
    and all other available antennas
    antenna='1~7&&&' # only the auto-correlation baselines for antennas in range 1~7
    spw -- Select data based on spectral window and channels
    default: '' (all); example: spw='1'
    spw='<2' #spectral windows less than 2
    spw='>1' #spectral windows greater than 1
    correlation -- Correlation types
    default: '' (all);
    example: correlation='RR LL'
    field -- Select data based on field id(s) or name(s)
    default: '' (all); example: field='1'
    field='0~2' # field ids inclusive from 0 to 2
    field='3C*' # all field names starting with 3C
    uvrange -- Select data within uvrange (default units meters)
    default: '' (all); example:
    uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lamgda
    uvrange='>4klamda';uvranges greater than 4 kilo-lambda
    uvrange='0~1000km'; uvrange in kilometers
    timerange  -- Select data based on time range:
    default = '' (all); example,
    timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:0~09:54:0' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    scan -- Select data based on scan number
    default: '' (all); example: scan='>3'
    intent -- Select data based on observation intent
    default: '' (all); example: intent='*CAL*,*BAND*'
    feed -- Selection based on the feed - NOT IMPLEMENTED YET
    array -- Selection based on the antenna array
    observation -- Selection based on the observation ID
    default: '' (all); example: observation='1' or observation=1
    
    
    verbose -- level of detail
    verbose=True: (default); scan and antenna lists
    verbose=False: less information
    
    listfile -- name of disk file to write output.
    default: None. Example: listfile='list.txt'
    
    listunfl -- List unflagged row counts? If true, it can have significant negative performance impact.
    
    cachesize -- maximum size of the memory cache in megabytes in which data structures can be
    stored. For very large datasets this can be increased for possibly better performance.
    THIS IS ONLY EXPERIEMENTAL FOR NOW, AND INCREASING THE VALUE OF THIS PARAMETER DOES NOT GUARANTEE INCREASED
    SPEED. DEPENDING ON ITS (LACK OF) USEFULNESS, IT MAY BE REMOVED IN THE FUTURE.
    
    
    The 'Int (s)' column is the average of the MS's INTERVAL column
    for each scan, so in a time-averaged MS 'Int' = 9.83s more likely
    means 5 10s integrations and 1 9s integration (timebin) than 6
    9.83s integrations.
    
    DESCRIPTION OF ALGORITHM TO CALCULATE THE NUMBER OF UNFLAGGED ROWS
    The number of unflagged rows are only computed if listunfl=True. Computing these quantity
    can have a negative performance impact, especially for large datasets.
    The number of unflagged rows (the nUnflRows columns in the scans and fields portions of the listing) is
    calculated by summing the fractional unflagged bandwidth for each row (and hence why the number of unflagged
    rows, in general, is not an integer). Thus a row which has half of its
    total bandwidth flagged contributes 0.5 rows to the unflagged row count. A row with 20 of 32 channels of
    homogeneous width contributes 20/32 = 0.625 rows to the unflagged row count. A row with a value of False
    in the FLAG_ROW column is not counted in the number of unflagged rows.
    


    """

    _info_group_ = """information"""
    _info_desc_ = """List the summary of a data set in the logger or in a file"""

    def __call__( self, vis='', selectdata=True, spw='', field='', antenna='', uvrange='', timerange='', correlation='', scan='', intent='', feed='', array='', observation='', verbose=True, listfile='', listunfl=False, cachesize=float(50), overwrite=False ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'selectdata': {'type': 'cBool'}, 'spw': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'field': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'antenna': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'uvrange': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'timerange': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'correlation': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'scan': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'intent': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'feed': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'array': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'observation': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}]}, 'verbose': {'type': 'cBool'}, 'listfile': {'type': 'cStr'}, 'listunfl': {'type': 'cBool'}, 'cachesize': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'overwrite': {'type': 'cBool'}}
        doc = {'vis': vis, 'selectdata': selectdata, 'spw': spw, 'field': field, 'antenna': antenna, 'uvrange': uvrange, 'timerange': timerange, 'correlation': correlation, 'scan': scan, 'intent': intent, 'feed': feed, 'array': array, 'observation': observation, 'verbose': verbose, 'listfile': listfile, 'listunfl': listunfl, 'cachesize': cachesize, 'overwrite': overwrite}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'listobs', [ 'vis=' + repr(_pc.document['vis']), 'selectdata=' + repr(_pc.document['selectdata']), 'spw=' + repr(_pc.document['spw']), 'field=' + repr(_pc.document['field']), 'antenna=' + repr(_pc.document['antenna']), 'uvrange=' + repr(_pc.document['uvrange']), 'timerange=' + repr(_pc.document['timerange']), 'correlation=' + repr(_pc.document['correlation']), 'scan=' + repr(_pc.document['scan']), 'intent=' + repr(_pc.document['intent']), 'feed=' + repr(_pc.document['feed']), 'array=' + repr(_pc.document['array']), 'observation=' + repr(_pc.document['observation']), 'verbose=' + repr(_pc.document['verbose']), 'listfile=' + repr(_pc.document['listfile']), 'listunfl=' + repr(_pc.document['listunfl']), 'cachesize=' + repr(_pc.document['cachesize']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
        return _end_log( _logging_state_, 'listobs', _listobs_t( _pc.document['vis'], _pc.document['selectdata'], _pc.document['spw'], _pc.document['field'], _pc.document['antenna'], _pc.document['uvrange'], _pc.document['timerange'], _pc.document['correlation'], _pc.document['scan'], _pc.document['intent'], _pc.document['feed'], _pc.document['array'], _pc.document['observation'], _pc.document['verbose'], _pc.document['listfile'], _pc.document['listunfl'], _pc.document['cachesize'], _pc.document['overwrite'] ) )

listobs = _listobs( )

