##################### generated by xml-casa (v2) from accum.xml #####################
##################### 3c88c5c49b34bb3bcc2990b9115078bb ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_accum import accum as _accum_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _accum:
    """
    accum ---- Accumulate incremental calibration solutions into a calibration table

    
    Accum will interpolate and extrapolate a calibration table onto a new
    table that has a regularly-space time grid.
    
    The first run of accum defines the time grid and fills this table with
    the results from the input table.
    
    Subsequent use of accum will combine additional calibration tables
    onto the same grid of the initial accum table to obtain an output
    accum table.  See below for concrete examples.
    
    Accum tables are similar to CL tables in AIPS. Incremental tables are
    similar to SN tables in AIPS.

    --------- parameter descriptions ---------------------------------------------

    vis       Name of input visibility file
              Default: none
              
                 Example: vis='ngc5921.ms'
    tablein   Input cumulative calibration table
              Default: '' (none)
              
              On first execution of accum, tablein='' and
              accumtime is used to generate tablein with the
              specified time gridding.
    incrtable The calibration data to be interpolated onto the tablein
              file.
              Default: '' (must be specified)
    caltable  The output cumulative calibration table
              Default: '' (use tablein as the output file)
    field     Select field using field id(s) or field name(s)
              Default: '' --> all fields
              
              Use 'go listobs' to obtain the list id's or
              names. If field string is a non-negative
              integer, it is assumed a field index,
              otherwise, it is assumed a field name.
              
                 Examples:
                 field='0~2'; field ids 0,1,2
                 field='0,4,5~7'; field ids 0,4,5,6,7
                 field='3C286,3C295'; field named 3C286 and
                 3C295
                 field = '3,4C*'; field id 3, all names
                 starting with 4C
    calfield  Select field(s) from incrtable to process.
              Default: '' (all fields)
    interp    Interpolation type (in time[,freq]) to use for each
              gaintable.
                Default: '' ('linear,linear' for all gaintable(s))
                Options: Time: 'nearest', 'linear'
                         Freq: 'nearest', 'linear', 'cubic',
                         'spline'
              
              * When frequency interpolation is relevant (B, Df,
                Xf), separate time-dependent and freq-dependent
                interp types with a comma (freq _after_ the
                comma). 
              * Specifications for frequency are ignored when the
                calibration table has no channel-dependence.
              * Time-dependent interp options ending in 'PD'
                enable a "phase delay" correction per spw for
                non-channel-dependent calibration types.
              * For multi-obsId datasets, 'perobs' can be
                appended to the time-dependent interpolation
                specification to enforce obsId boundaries when
                interpolating in time.
              
                   Examples: 
                   interp='nearest' (in time, freq-dep will be
                   linear, if relevant)
                   interp='linear,cubic' (linear in time, cubic
                   in freq)
                   interp='linearperobs,spline' (linear in time
                   per obsId, spline in freq)
                   interp=',spline' (spline in freq; linear in
                   time by default)
                   interp=['nearest,spline','linear'] (for
                   multiple gaintables)
    accumtime The time separation when making tablein.
              Subparameter of tablein
              Default: 1.0  (1 second)
              
              Note: This time should not be less than the
              visibility sampling time, but should be less than
              about 30% of a typical scan length.
    spwmap    Spectral windows combinations to form for gaintable(s)
              Default: [] (apply solutions from each spw to
                           that spw only)
              
                 Examples: 
                 spwmap=[0,0,1,1] means apply the caltable
                 solutions from spw = 0 to the spw 0,1 
                 and spw 1 to spw 2,3.
                 spwmap=[[0,0,1,1],[0,1,0,1]] (for multiple
                 gaintables)
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of accum in CASA Docs:
    
    https://casa.nrao.edu/casadocs/
    
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Accumulate incremental calibration solutions into a calibration table"""

    def __call__( self, vis='', tablein='', incrtable='', caltable='', field=[  ], calfield=[  ], interp='linear', accumtime=float(1.0), spwmap=[ ] ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cStr'}, 'incrtable': {'type': 'cStr'}, 'caltable': {'type': 'cStr'}, 'field': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'calfield': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'interp': {'type': 'cStr'}, 'accumtime': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cInt'}]}, 'spwmap': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}
        doc = {'vis': vis, 'tablein': tablein, 'incrtable': incrtable, 'caltable': caltable, 'field': field, 'calfield': calfield, 'interp': interp, 'accumtime': accumtime, 'spwmap': spwmap}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'accum', [ 'vis=' + repr(_pc.document['vis']), 'tablein=' + repr(_pc.document['tablein']), 'incrtable=' + repr(_pc.document['incrtable']), 'caltable=' + repr(_pc.document['caltable']), 'field=' + repr(_pc.document['field']), 'calfield=' + repr(_pc.document['calfield']), 'interp=' + repr(_pc.document['interp']), 'accumtime=' + repr(_pc.document['accumtime']), 'spwmap=' + repr(_pc.document['spwmap']) ] )
        return _end_log( _logging_state_, 'accum', _accum_t( _pc.document['vis'], _pc.document['tablein'], _pc.document['incrtable'], _pc.document['caltable'], _pc.document['field'], _pc.document['calfield'], _pc.document['interp'], _pc.document['accumtime'], _pc.document['spwmap'] ) )

accum = _accum( )

