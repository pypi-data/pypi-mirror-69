##################### generated by xml-casa (v2) from importuvfits.xml ##############
##################### de23186d0c429b71861cff7ec55656e8 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_importuvfits import importuvfits as _importuvfits_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _importuvfits:
    """
    importuvfits ---- Convert a UVFITS file to a CASA visibility data set

    Convert a UVITS file to a CASA visiblity data set.
    Don't forget to flag autocorrelations using taskname flagdata, autocorr = true
    

    --------- parameter descriptions ---------------------------------------------

    fitsfile      Name of input UV FITS file
    vis           Name of output visibility file (MS)
    antnamescheme VLA/EVLA/CARMA only; \'new\' or \'old\'; \'VA04\' or \'04\' for VLA ant 4

    --------- examples -----------------------------------------------------------

    
    Convert a UVFITS file to a CASA visibility data set:
    
    Keyword arguments:
    fitsfile -- Name of input UV FITS file
    default = none; example='3C273XC1.fits'
    vis -- Name of output visibility file (MS)
    default = none; example: vis='3C273XC1.ms'
    antnamescheme -- Naming scheme for VLA/JVLA/CARMA antennas
    default = old;
    old: Antenna name is a number, '04'
    This option exists for backwards compatibility
    but can lead to ambiguous results when antenna
    indices are used for data selection.
    new: Antenna name is not a number, e.g., 'VA04' or 'EA04'
    With this scheme, data selection via
    antenna names and indices is non-ambiguous.
    
    Note: Don't forget to flag autocorrections using
    taskname flagdata, autocorr = true
    
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a UVFITS file to a CASA visibility data set"""

    def __call__( self, fitsfile='', vis='', antnamescheme='old' ):
        schema = {'fitsfile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'vis': {'type': 'cStr'}, 'antnamescheme': {'type': 'cStr', 'allowed': [ 'old', 'new' ]}}
        doc = {'fitsfile': fitsfile, 'vis': vis, 'antnamescheme': antnamescheme}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'importuvfits', [ 'fitsfile=' + repr(_pc.document['fitsfile']), 'vis=' + repr(_pc.document['vis']), 'antnamescheme=' + repr(_pc.document['antnamescheme']) ] )
        return _end_log( _logging_state_, 'importuvfits', _importuvfits_t( _pc.document['fitsfile'], _pc.document['vis'], _pc.document['antnamescheme'] ) )

importuvfits = _importuvfits( )

