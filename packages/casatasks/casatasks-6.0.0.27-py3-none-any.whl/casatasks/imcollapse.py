##################### generated by xml-casa (v2) from imcollapse.xml ################
##################### b131fe08644211a85ce28c27c66e74c8 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_imcollapse import imcollapse as _imcollapse_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _imcollapse:
    """
    imcollapse ---- Collapse image along one axis, aggregating pixel values along that axis.

    
    This task collapses an image along a specified axis or set of axes of
    N pixels to a single pixel on each specified axis. Both float valued
    and complex valued images are supported. It computes the specified
    aggregate function for pixel values along the specified axes and
    places those values in the single remaining plane of those axes in the
    output image.
    
    The reference pixel of the collapsed axis is set to 0 and its
    reference value is set to the mean of the the first and last values of
    that axis in the specified region of the input image. Convolution to a
    common beam is not performed automatically as part of the
    preprocessing before the collapse operation occurs. Therefore, if the
    input image has per-plane beams, then the user should consider first
    smoothing the data to have the same resolution, and use the resulting
    image as the input for imcollapse.

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
              Default: none
              
                 Example: imagename='ngc5921.im'
    function  Function used to compute aggregation of pixel values
              along the collapsed axis.
              Default: none
              Options: flux, madm, max, mean, median, min,
              npts, rms, stddev, sum, variance, xmadm
              
              Minimum match is supported for the function
              parameter (eg, function="r" will compute the rms
              of the pixel values).
              
              If one specifies function='flux', the following
              constraints must be true:
              1. The image must have a direction coordinate,
              2. The image must have at least one beam,
              3. The specified axes must be exactly the
              direction coordinate axes,
              4. Only one of the non-directional axes may be
              non-degenerate,
              5. The iamge brightness unit must be conformant
              with x*yJy/beam, where x is an optional unit
              (such as km/s for moments images) and y is an
              optional SI prefix.
    axes      Zero-based axis number(s) or minimal match strings to
              collapse.
              Default: [0]
              Axes can be specified as a single integer or
              array of integers indicating the zero-based axes
              along which to collapse the image. Axes may also
              be specified as a single or array of strings
              which minimally and uniquely match (ignoring
              case) world axes names in the image (eg "dec" or
              ["ri, "d"] for collapsing along the declination
              axis or along the right ascension and declination
              axes, respectively).
    outfile   Name of output CASA image. Must be specified.
              Default: none
              
                 Example: outfile='collapsed.im'
    box       Rectangular region to select in direction plane. 
              Default: '' (use the entire direction plane)
              
                 Example: box="100,100,200,200"
    region    Region selection.
              Default: '' (use the full image)
    chans     Channels to use. 
              Default: '' (use all channels)
    stokes    Stokes planes to use.
              Default: '' (use all stokes planes)
    mask      Mask to use.
              Default: none
    overwrite Overwrite output image if it exists?
              Default: False
              Options: False|True
    stretch   Stretch the mask if necessary and possible? 
              Default: False
              Options: False|True
              
              Stretch the input mask if necessary and
              possible. Only used if a mask is specified.
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMCOLLAPSE IN CASA DOCS:
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Collapse image along one axis, aggregating pixel values along that axis."""

    def __call__( self, imagename='', function='', axes=[ ], outfile='', box='', region='', chans='', stokes='', mask='', overwrite=False, stretch=False ):
        schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'function': {'type': 'cStr'}, 'axes': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'outfile': {'type': 'cStr'}, 'box': {'type': 'cStr'}, 'region': {'type': 'cStr'}, 'chans': {'type': 'cStr'}, 'stokes': {'type': 'cStr'}, 'mask': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}, 'stretch': {'type': 'cBool'}}
        doc = {'imagename': imagename, 'function': function, 'axes': axes, 'outfile': outfile, 'box': box, 'region': region, 'chans': chans, 'stokes': stokes, 'mask': mask, 'overwrite': overwrite, 'stretch': stretch}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'imcollapse', [ 'imagename=' + repr(_pc.document['imagename']), 'function=' + repr(_pc.document['function']), 'axes=' + repr(_pc.document['axes']), 'outfile=' + repr(_pc.document['outfile']), 'box=' + repr(_pc.document['box']), 'region=' + repr(_pc.document['region']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'overwrite=' + repr(_pc.document['overwrite']), 'stretch=' + repr(_pc.document['stretch']) ] )
        return _end_log( _logging_state_, 'imcollapse', _imcollapse_t( _pc.document['imagename'], _pc.document['function'], _pc.document['axes'], _pc.document['outfile'], _pc.document['box'], _pc.document['region'], _pc.document['chans'], _pc.document['stokes'], _pc.document['mask'], _pc.document['overwrite'], _pc.document['stretch'] ) )

imcollapse = _imcollapse( )

