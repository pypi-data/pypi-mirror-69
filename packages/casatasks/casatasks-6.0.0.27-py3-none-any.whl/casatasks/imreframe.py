##################### generated by xml-casa (v2) from imreframe.xml #################
##################### addb7a902072d749ebcfcceafa802606 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_imreframe import imreframe as _imreframe_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _imreframe:
    """
    imreframe ---- Change the frame in which the image reports its spectral values

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    output    Name of the output image
    outframe  Spectral frame in which the frequency or velocity values will be reported by default
    epoch     Epoch to be associated with this image
    restfreq  restfrequency to use for velocity values (e.g "1.420GHz" for the HI line)
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    imagename -- name of casa image file to process on
    output         -- name of output image  '' means modify the input image itself
    default: '';
    outframe     -- new spectral frame in which the frequency or
    velocity will be reported for.
    Options: 'lsrk','lsrd','bary','geo','topo','galacto',
    'lgroup','cmb'
    default: 'lsrk'
    >>>
    epoch    -- when outframe is 'topo' or 'geo' a time in UTC is needed
    to decide when to do the frequency conversion. '' is to use
    the epoch of the input image
    default= ''
    
    restfreq -- Specify rest frequency to use for output image
    default=''; '' means use the restfrequency already in input image
    For example for
    NH_3 (1,1) put restfreq='23.694496GHz'


    """

    _info_group_ = """analysis, information"""
    _info_desc_ = """Change the frame in which the image reports its spectral values"""

    def __call__( self, imagename='', output='', outframe='lsrk', epoch='', restfreq='' ):
        schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'output': {'type': 'cStr'}, 'outframe': {'type': 'cStr', 'allowed': [ 'geo', 'bary', 'lsrk', 'topo', 'lsrd', 'cmb', 'galacto', 'lgroup', '' ]}, 'epoch': {'type': 'cStr'}, 'restfreq': {'type': 'cStr'}}
        doc = {'imagename': imagename, 'output': output, 'outframe': outframe, 'epoch': epoch, 'restfreq': restfreq}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'imreframe', [ 'imagename=' + repr(_pc.document['imagename']), 'output=' + repr(_pc.document['output']), 'outframe=' + repr(_pc.document['outframe']), 'epoch=' + repr(_pc.document['epoch']), 'restfreq=' + repr(_pc.document['restfreq']) ] )
        return _end_log( _logging_state_, 'imreframe', _imreframe_t( _pc.document['imagename'], _pc.document['output'], _pc.document['outframe'], _pc.document['epoch'], _pc.document['restfreq'] ) )

imreframe = _imreframe( )

