##################### generated by xml-casa (v2) from uvmodelfit.xml ################
##################### 1baf060829647c3f632fd8515593efdb ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_uvmodelfit import uvmodelfit as _uvmodelfit_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _uvmodelfit:
    """
    uvmodelfit ---- Fit a single component source model to the uv data

    
    Fit a single component source model to the uv data

    --------- parameter descriptions ---------------------------------------------

    vis        Name of input visibility file
    field      Select field using field id(s) or field name(s)
    spw        Select spectral window/channels
    selectdata Other data selection parameters
    timerange  Select data based on time range
    uvrange    Select data within uvrange (default units meters)
    antenna    Select data based on antenna/baseline
    scan       Scan number range
    msselect   Optional complex data selection (ignore for now)
    niter      Number of fitting iterations to execute
    comptype   component model type: P(oint), G(aussian), or D(isk)
    sourcepar  Starting guess for component parameters (3 values for type P, 5 for G and D)
    varypar    Control which parameters to let vary in the fit
    outfile    Optional output component list table

    --------- examples -----------------------------------------------------------

    
    
    Fit a single component source model to the uv data.  Three models
    are available: P=point; G=Gaussian; D=Disk.  Fitting parameters can
    be held fixed.   The results are given in the log and placed in a
    components file.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    
    --- Data Selection
    field -- Select data based on field id(s) or name(s)
    default: '' (all); example: field='1'
    field='0~2' # field ids inclusive from 0 to 2
    field='3C*' # all field names starting with 3C
    spw -- Select data based on spectral window
    default: '' (all); example: spw='1'
    spw='<2' #spectral windows less than 2
    spw='>1' #spectral windows greater than 1
    selectdata -- Select a subset of the visibility using MSSelection
    default: False; example: selectdata=True
    timerange  -- Select data based on time range:
    default = '' (all); example,
    timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:0~09:54:0' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    uvrange -- Select data within uvrange (default units kilo-lambda)
    default: '' (all); example:
    uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lamgda
    uvrange='>4klambda';uvranges greater than 4 kilo lambda
    uvrange='0~1000km'; uvrange in kilometers
    antenna -- Select data based on antenna/baseline
    default: '' (all); example: antenna='5&6' baseline 5-6
    antenna='5&6;7&8' #baseline 5-6 and 7-8
    antenna='5' # all baselines with antenna 5
    antenna='5,6' # all baselines with antennas 5 and 6
    scan -- Select data based on scan number - New, under developement
    default: '' (all); example: scan='>3'
    msselect -- Optional data selection (field,spw,time,etc)
    default:'' means select all; example:msselect='FIELD_ID==0',
    msselect='FIELD_ID IN [0,1,2]' means select fields 0,1 and 2
    msselect='FIELD_ID <= 1 means select fields 0, 1
    msselect='FIELD_ID==0 && ANTENNA1 IN [0] && ANTENNA2 IN [2:26]'
    means select field 0 and antennas 0 to 26, except antenna 1.
    Other msselect fields are: 'DATA_DESC_ID', 'SPECTRAL_WINDOW_ID',
    'POLARIZATION_ID', 'SCAN_NUMBER', 'TIME', 'UVW'
    See ccokbook for more details
    
    niter -- Number of fitting iterations to execute
    default: 5; example: niter=20
    comptype -- component model type
    default: 'P';
    Options: 'P' (point source), 'G' (elliptical gaussian),
    'D' (elliptical disk)
    sourcepar -- Starting guess for component parameters
    default: [1,0,0];  (for comptype='P')
    IF comptype = 'P' then
    sourcepar = [flux,xoff,yoff] where
    flux = Jy, xoff = offset east (arcsec), yoff = offset north (arcsec).
    IF comptype = 'G' or 'D', then
    sourcepar = [flux,xoff,yoff,majax,axrat,pos] where
    majax = FWHM along the major axis (arcsec), axrat < 1 is
    the ratio of minor to major axis, pos=angle in deg
    varypar -- Control which parameters to let vary in the fit
    default: [] (all vary);
    example: vary=[F,T,T]
    
    examples:
    
    fit a point:
    comptype = 'P'
    sourcepar = [0.4,0.2,-0.3];
    varypar = [T,T,T]
    
    fit a circular Gaussian:
    comptype = 'G'
    sourcepar = [1.4,0.3,-0.2,0.3, 1, 0]
    varypar    = [ T , T ,  T , T , F, F]
    
    
    outfile -- Optional output component list table
    default: ''; example: outfile='componentlist.cl'
    
    
    How to get the output values:
    
    cl.open('componentlist.cl')
    fit = cl.getcompoent()             stores component information
    fit                                to see the whole mess
    flux = fit['flux']['value']        to store the I,Q,U,V, flux
    print flux
    
    ra = fit['shape']['direction']['m0']['value']
    dec =fit['shape']['direction']['m1']['value']
    print ra, dec
    
    bmaj = fit['shape']['majoraxis']['value']     to get major axis
    bmin = fit['shape']['minoraxis']['value']     to get minor axis
    


    """

    _info_group_ = """modeling, calibration"""
    _info_desc_ = """Fit a single component source model to the uv data"""

    def __call__( self, vis='', field='', spw='', selectdata=True, timerange='', uvrange='', antenna='', scan='', msselect='', niter=int(5), comptype='P', sourcepar=[ float(1.0),float(0.0),float(0.0) ], varypar=[  ], outfile='' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'field': {'type': 'cStr'}, 'spw': {'type': 'cStr'}, 'selectdata': {'type': 'cBool'}, 'timerange': {'type': 'cStr'}, 'uvrange': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'antenna': {'type': 'cStr'}, 'scan': {'type': 'cStr'}, 'msselect': {'type': 'cStr'}, 'niter': {'type': 'cInt'}, 'comptype': {'type': 'cStr', 'allowed': [ 'P', 'G', 'D' ]}, 'sourcepar': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'varypar': {'type': 'cBoolVec', 'coerce': [_coerce.to_list,_coerce.to_boolvec]}, 'outfile': {'type': 'cStr'}}
        doc = {'vis': vis, 'field': field, 'spw': spw, 'selectdata': selectdata, 'timerange': timerange, 'uvrange': uvrange, 'antenna': antenna, 'scan': scan, 'msselect': msselect, 'niter': niter, 'comptype': comptype, 'sourcepar': sourcepar, 'varypar': varypar, 'outfile': outfile}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'uvmodelfit', [ 'vis=' + repr(_pc.document['vis']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'selectdata=' + repr(_pc.document['selectdata']), 'timerange=' + repr(_pc.document['timerange']), 'uvrange=' + repr(_pc.document['uvrange']), 'antenna=' + repr(_pc.document['antenna']), 'scan=' + repr(_pc.document['scan']), 'msselect=' + repr(_pc.document['msselect']), 'niter=' + repr(_pc.document['niter']), 'comptype=' + repr(_pc.document['comptype']), 'sourcepar=' + repr(_pc.document['sourcepar']), 'varypar=' + repr(_pc.document['varypar']), 'outfile=' + repr(_pc.document['outfile']) ] )
        return _end_log( _logging_state_, 'uvmodelfit', _uvmodelfit_t( _pc.document['vis'], _pc.document['field'], _pc.document['spw'], _pc.document['selectdata'], _pc.document['timerange'], _pc.document['uvrange'], _pc.document['antenna'], _pc.document['scan'], _pc.document['msselect'], _pc.document['niter'], _pc.document['comptype'], _pc.document['sourcepar'], _pc.document['varypar'], _pc.document['outfile'] ) )

uvmodelfit = _uvmodelfit( )

