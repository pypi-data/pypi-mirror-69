##################### generated by xml-casa (v2) from smoothcal.xml #################
##################### 27bb5e296418dc1aacd925f324d07abd ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_smoothcal import smoothcal as _smoothcal_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _smoothcal:
    """
    smoothcal ---- Smooth calibration solution(s) derived from one or more sources:

    
    A G- or T-type gain calibration can be smoothed.  Amplitude and
    phase are currently smoothed with the same time.  Calibration values
    will be smoothed over all fields.
    

    --------- parameter descriptions ---------------------------------------------

    vis        Name of input visibility file (MS)
    tablein    Input calibration table
    caltable   Output calibration table (overwrite tablein if unspecified)
    field      Field name list
    smoothtype Smoothing filter to use
    smoothtime Smoothing time (sec)
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    
    
    A G- or T-type gain calibration can be smoothed.  The amplitude and
    phase smoothing times are currently the same.  Calibration values
    will be smoothed for only the specified fields.  Smoothing is
    performed independently per field, per spw, and per antenna.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    tablein -- Input calibration table (G or T)
    default: none; example: tablein='ngc5921.gcal'
    caltable -- Output calibration table (smoothed)
    default: ''  (will overwrite tablein);
    example: caltable='ngc5921_smooth.gcal'
    field -- subset of fields to select and smooth
    default: '' means all; example: field='0319_415_1,3C286'
    smoothtype -- The smoothing filter to be used for both amp and phase
    default: 'median'; example: smoothtype='mean'
    Options: 'median','mean'
    smoothtime -- Smoothing filter time (sec)
    default: 300.0; example: smoothtime=60.
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Smooth calibration solution(s) derived from one or more sources:"""

    def __call__( self, vis='', tablein='', caltable='', field=[  ], smoothtype='median', smoothtime=float(60.0) ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr'}, 'field': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'smoothtype': {'type': 'cStr', 'allowed': [ 'median', 'mean' ]}, 'smoothtime': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cInt'}]}}
        doc = {'vis': vis, 'tablein': tablein, 'caltable': caltable, 'field': field, 'smoothtype': smoothtype, 'smoothtime': smoothtime}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'smoothcal', [ 'vis=' + repr(_pc.document['vis']), 'tablein=' + repr(_pc.document['tablein']), 'caltable=' + repr(_pc.document['caltable']), 'field=' + repr(_pc.document['field']), 'smoothtype=' + repr(_pc.document['smoothtype']), 'smoothtime=' + repr(_pc.document['smoothtime']) ] )
        return _end_log( _logging_state_, 'smoothcal', _smoothcal_t( _pc.document['vis'], _pc.document['tablein'], _pc.document['caltable'], _pc.document['field'], _pc.document['smoothtype'], _pc.document['smoothtime'] ) )

smoothcal = _smoothcal( )

