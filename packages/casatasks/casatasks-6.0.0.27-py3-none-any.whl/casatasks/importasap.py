##################### generated by xml-casa (v2) from importasap.xml ################
##################### ec65ab2cf2f174bd09d7fa23ffac8585 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_importasap import importasap as _importasap_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _importasap:
    """
    importasap ---- Convert ASAP Scantable data  into a CASA visibility file (MS)

    
    Convert ASAP Scantable data  into a CASA visibility file (MS)

    --------- parameter descriptions ---------------------------------------------

    infile     Name of input ASAP Scantable data
               Default: none
               
                  Example: infile='mydata.asap'
    outputvis  Name of output visibility file
               Default: '' (same as vis)
               
                  Example: outputvis='myms.ms'
               
               NOTE: Note the .ms is NOT added
    flagbackup Back up flag column before applying flags.
               Default: True
               Options: True|False
    overwrite  Over write an existing MS(s)
               Default: False (do not overwrite)
               Options: False|True
    parallel   Turn on parallel execution
               Default: False (serial execution)
               Options: False|True
    [1;42mRETURNS[1;m       bool

    --------- examples -----------------------------------------------------------

    
    
    


    """

    _info_group_ = """single dish, import/export"""
    _info_desc_ = """Convert ASAP Scantable data  into a CASA visibility file (MS)"""

    def __call__( self, infile='', outputvis='', flagbackup=True, overwrite=False, parallel=False ):
        schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outputvis': {'type': 'cStr'}, 'flagbackup': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'parallel': {'type': 'cBool'}}
        doc = {'infile': infile, 'outputvis': outputvis, 'flagbackup': flagbackup, 'overwrite': overwrite, 'parallel': parallel}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'importasap', [ 'infile=' + repr(_pc.document['infile']), 'outputvis=' + repr(_pc.document['outputvis']), 'flagbackup=' + repr(_pc.document['flagbackup']), 'overwrite=' + repr(_pc.document['overwrite']), 'parallel=' + repr(_pc.document['parallel']) ] )
        return _end_log( _logging_state_, 'importasap', _importasap_t( _pc.document['infile'], _pc.document['outputvis'], _pc.document['flagbackup'], _pc.document['overwrite'], _pc.document['parallel'] ) )

importasap = _importasap( )

