##################### generated by xml-casa (v2) from listpartition.xml #############
##################### df5992dc6d4de4290021b028f3b34b13 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_listpartition import listpartition as _listpartition_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _listpartition:
    """
    listpartition ---- List the summary of a multi-MS data set in the logger or in a file

    
    Lists the following properties of a multi-measurement set:
    sub-MS name, scan list, spw list, list of number of channels per spw,
    number of rows for all scans.
    

    --------- parameter descriptions ---------------------------------------------

    vis        Name of Multi-MS or normal MS.
    createdict Create and return a dictionary with Sub-MS information
    listfile   Name of ASCII file to save output: ''==>to terminal
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    
    A multi-measurement set (MMS) is an MS that has been split into sub-MSs.
    An MMS contains a reference MS in the top directory and the sub-MSs are
    located in a directory called SUBMSS inside the MMS directory.
    Example of a MS that was partitioned in the 'scan' axis using the task partition:
    
    > ls ngc5921.mms
    ANTENNA           FLAG_CMD     POLARIZATION  SPECTRAL_WINDOW  table.dat
    DATA_DESCRIPTION  HISTORY      PROCESSOR     STATE            table.info
    FEED              OBSERVATION  SORTED_TABLE  SUBMSS           WEATHER
    FIELD             POINTING     SOURCE        SYSCAL
    
    > ls ngc5921.mms/SUBMSS/
    ngc5921.0000.ms/  ngc5921.0002.ms/  ngc5921.0004.ms/  ngc5921.0006.ms/
    ngc5921.0001.ms/  ngc5921.0003.ms/  ngc5921.0005.ms/
    
    The task lists the following properties of a multi-MS or MS:
    sub-MS name, scan, spw list, list of number of channels per spw,
    number of rows for each scan and the size in disk. Example of logger output:
    
    Sub-MS          Scan  Spw      Nchan    Nrows   Size
    ngc5921.0000.ms  1    [0]      [63]     4509    11M
    ngc5921.0001.ms  2    [0]      [63]     1890    6.4M
    ngc5921.0002.ms  3    [0]      [63]     6048    13M
    ngc5921.0003.ms  4    [0]      [63]     756     4.9M
    ngc5921.0004.ms  5    [0]      [63]     1134    6.4M
    ngc5921.0005.ms  6    [0]      [63]     6804    15M
    ngc5921.0006.ms  7    [0]      [63]     1512    6.4M
    
    
    ------- Detailed description of keyword arguments -------
    vis -- Name of multi-MS or normal MS.
    default: ''.
    example: vis='pScan.mms'
    
    createdict -- Create and return a dictionary containing scan summaries of each
    sub-MS.
    default: False
    
    If set to True, the returned dictionary will contain information from
    ms.getscansummary() and ms.getspectralwindowinfo(), with the addition of an
    index as the top key and the sub-MS name.
    Example:
    
    {0: {'MS': 'ngc5921.0000.ms',
    'scanId': {1: {'nchans': array([63], dtype=int32),
    'nrows': 4509,
    'spwIds': array([0], dtype=int32)}},
    'size': '11M'},
    1: {'MS': 'ngc5921.0001.ms',
    'scanId': {2: {'nchans': array([63], dtype=int32),
    'nrows': 1890,
    'spwIds': array([0], dtype=int32)}},
    'size': '6.4M'}}
    
    listfile -- Name of ASCII file to save output to. If empty, it will
    list on the logger/terminal.
    default: ''
    example: listfile='pscan.txt'
    
    


    """

    _info_group_ = """information"""
    _info_desc_ = """List the summary of a multi-MS data set in the logger or in a file"""

    def __call__( self, vis='', createdict=False, listfile='' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'createdict': {'type': 'cBool'}, 'listfile': {'type': 'cStr'}}
        doc = {'vis': vis, 'createdict': createdict, 'listfile': listfile}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'listpartition', [ 'vis=' + repr(_pc.document['vis']), 'createdict=' + repr(_pc.document['createdict']), 'listfile=' + repr(_pc.document['listfile']) ] )
        return _end_log( _logging_state_, 'listpartition', _listpartition_t( _pc.document['vis'], _pc.document['createdict'], _pc.document['listfile'] ) )

listpartition = _listpartition( )

