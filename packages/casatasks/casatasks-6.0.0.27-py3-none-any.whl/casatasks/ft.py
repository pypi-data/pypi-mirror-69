##################### generated by xml-casa (v2) from ft.xml ########################
##################### 9c1db93ee44949588c604c133f8691c6 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_ft import ft as _ft_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _ft:
    """
    ft ---- Insert a source model as a visibility set

    
    A source model (souce.model image) or components list is converted
    into model visibilities that is inserted into the MODEL_DATA column or
    alternatively is stored  in the header of the MS to be served on the
    fly when requested.
    
    Setjy will automatically make this ft step on the sources currently
    available, which are 3C48, 3C138, 3C147, 3C286 at 1.4, 5.0, 8.4, 15,
    22, 43 GHz.  Their location is site dependent.  In Charlottesville and
    Socorro, the models are in
    /usr/lib(lib64)/casapy/data/nrao/VLA/CalModels.

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file
                Default: none
                
                   Example: vis='ngc5921.ms'
    field       Select field using field id(s) or field name(s)
                Default: '' (all fields)
                
                BUT, only one source can be specified in a
                multi-source vis.
                
                
                   Examples: 
                   field = '1328+307'  specifies source
                   '1328+307'
                   field = '4' specified field with index 4
    spw         Select spectral window/channels
                Default: '' (all spectral windows and channels)
    model       Name of input model image(s)
                Default: '' (none)
                
                   Example:
                   model='/usr/lib/casapy/data/nrao/VLA/CalModels/3C286_X.im'
                
                NOTE: The model visibilities are scaled from the
                model frequency to the observed frequency of the
                data.
    nterms      Number of terms used to model the sky frequency
                dependence
                Default: 1 (one model image is required)
                
                   Example: nterms=3 - represents a 2nd order
                   Taylor-polynomial in frequency and should be
                   used in conjuction with coefficient model
                   images as
                   model=['xxx.model.tt0','xxx.model.tt1',
                   'xxx.model.tt2']
    reffreq     Reference-frequency about which this Taylor-expansion is
                defined.
                Default: '' (reads the reference frequency from
                the model image)
                
                   Example: reffreq = '1.5GHz'
    complist    Name of component list
                Default: none
                
                   Example: complist='test.cl'
                
                WARNING: component lists are difficult to make
    incremental Add model visibility to the existing model visibilties
                stored in the MS
                Default: False
                Options: False|True
    usescratch  Story visibilities in MODEL_DATA column?
                Default: False
                Options: False|True
                
                If True, model visibilities will be stored in the
                scratch column MODEL_DATA; if False, the model
                visibilities will be generated  on the fly (this
                mode may save some disk space equivalent to the
                volume of the observed data).
    [1;42mRETURNS[1;m        void

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF FT IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """imaging, calibration"""
    _info_desc_ = """Insert a source model as a visibility set"""

    def __call__( self, vis='', field='', spw='', model='', nterms=int(1), reffreq='', complist='', incremental=False, usescratch=False ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'field': {'type': 'cStr'}, 'spw': {'type': 'cStr'}, 'model': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'nterms': {'type': 'cInt'}, 'reffreq': {'type': 'cStr'}, 'complist': {'type': 'cStr'}, 'incremental': {'type': 'cBool'}, 'usescratch': {'type': 'cBool'}}
        doc = {'vis': vis, 'field': field, 'spw': spw, 'model': model, 'nterms': nterms, 'reffreq': reffreq, 'complist': complist, 'incremental': incremental, 'usescratch': usescratch}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'ft', [ 'vis=' + repr(_pc.document['vis']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'model=' + repr(_pc.document['model']), 'nterms=' + repr(_pc.document['nterms']), 'reffreq=' + repr(_pc.document['reffreq']), 'complist=' + repr(_pc.document['complist']), 'incremental=' + repr(_pc.document['incremental']), 'usescratch=' + repr(_pc.document['usescratch']) ] )
        return _end_log( _logging_state_, 'ft', _ft_t( _pc.document['vis'], _pc.document['field'], _pc.document['spw'], _pc.document['model'], _pc.document['nterms'], _pc.document['reffreq'], _pc.document['complist'], _pc.document['incremental'], _pc.document['usescratch'] ) )

ft = _ft( )

