##################### generated by xml-casa (v2) from sdsmooth.xml ##################
##################### 4adc637feb2162c6cb01967aafe1e4b0 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_sdsmooth import sdsmooth as _sdsmooth_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _sdsmooth:
    """
    sdsmooth ---- Smooth spectral data

    
    Task sdsmooth performs smoothing along spectral axis using user-specified
    smoothing kernel. Currently gaussian and boxcar kernels are supported.
    

    --------- parameter descriptions ---------------------------------------------

    infile     name of input SD dataset
    datacolumn name of data column to be used ["data", "float_data", or "corrected"]
    antenna    select data by antenna name or ID, e.g. "PM03"
    field      select data by field IDs and names, e.g. "3C2*" (""=all)
    spw        select data by spectral window IDs, e.g. "3,5,7" (""=all)
    timerange  select data by time range, e.g. "09:14:0~09:54:0" (""=all) (see examples in help)
    scan       select data by scan numbers, e.g. "21~23" (""=all)
    pol        select data by polarization IDs, e.g. "0,1" (""=all)
    intent     select data by observational intent, e.g. "*ON_SOURCE*" (""=all)
    reindex    Re-index indices in subtables based on data selection
    kernel     spectral smoothing kernel type
    kwidth     smoothing kernel width in channel
    outfile    name of output file
    overwrite  overwrite the output file if already exists
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    -----------------
    Keyword arguments
    -----------------
    infile -- name of input SD dataset
    datacolumn -- name of data column to be used
    options: 'data', 'float_data', or 'corrected'
    default: 'data'
    antenna -- select data by antenna name or ID
    default: '' (use all antennas)
    example: 'PM03'
    field -- select data by field IDs and names
    default: '' (use all fields)
    example: field='3C2*' (all names starting with 3C2)
    field='0,4,5~7' (field IDs 0,4,5,6,7)
    field='0,3C273' (field ID 0 or field named 3C273)
    this selection is in addition to the other selections to data
    spw -- select data by spectral window IDs/channels
    default: '' (use all spws and channels)
    example: spw='3,5,7' (spw IDs 3,5,7; all channels)
    spw='<2' (spw IDs less than 2, i.e., 0,1; all channels)
    spw='30~45GHz' (spw IDs with the center frequencies in range 30-45GHz; all channels)
    spw='0:5~61' (spw ID 0; channels 5 to 61; all channels)
    spw='3:10~20;50~60' (select multiple channel ranges within spw ID 3)
    spw='3:10~20,4:0~30' (select different channel ranges for spw IDs 3 and 4)
    spw='1~4;6:15~48' (for channels 15 through 48 for spw IDs 1,2,3,4 and 6)
    this selection is in addition to the other selections to data
    timerange -- select data by time range
    default: '' (use all)
    example: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:00~09:54:00' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    this selection is in addition to the other selections to data
    scan -- select data by scan numbers
    default: '' (use all scans)
    example: scan='21~23' (scan IDs 21,22,23)
    this selection is in addition to the other selections to data
    pol -- select data by polarization IDs
    default: '' (use all polarizations)
    example: pol='0,1' (polarization IDs 0,1)
    this selection is in addition to the other selections to data
    intent -- select data by observational intent, also referred to as 'scan intent'
    default: '' (use all scan intents)
    example: intent='*ON_SOURCE*' (any valid scan-intent expression accepted by the MSSelection module can be specified)
    this selection is in addition to the other selections to data
    reindex -- Re-index indices in subtables based on data selection.
    If True, DATA_DESCRIPTION, FEED, SPECTRAL_WINDOW, STATE, and SOURCE
    subtables are filtered based on data selection and re-indexed in output MS.
    default: True
    kernel -- type of spectral smoothing kernel
    options: 'gaussian', 'boxcar'
    default: 'gaussian' (no smoothing)
    
    >>>kernel expandable parameter
    kwidth -- width of spectral smoothing kernel
    options: (int) in channels
    default: 5
    outfile -- name of output file
    default: '' (<infile>_bs)
    overwrite -- overwrite the output file if already exists
    options: (bool) True, False
    default: False
    NOTE this parameter is ignored when outform='ASCII'
    
    
    -----------
    DESCRIPTION
    -----------
    Task sdsmooth performs smoothing along spectral axis using user-specified
    smoothing kernel. Currently gaussian and boxcar kernels are supported.
    
    
    


    """

    _info_group_ = """single dish"""
    _info_desc_ = """Smooth spectral data """

    def __call__( self, infile='', datacolumn='data', antenna='', field='', spw='', timerange='', scan='', pol='', intent='', reindex=True, kernel='gaussian', kwidth=int(5), outfile='', overwrite=False ):
        schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'datacolumn': {'type': 'cStr', 'allowed': [ 'data', 'float_data', 'corrected' ]}, 'antenna': {'type': 'cStr'}, 'field': {'type': 'cStr'}, 'spw': {'type': 'cStr'}, 'timerange': {'type': 'cStr'}, 'scan': {'type': 'cStr'}, 'pol': {'type': 'cStr'}, 'intent': {'type': 'cStr'}, 'reindex': {'type': 'cBool'}, 'kernel': {'type': 'cStr', 'allowed': [ 'gaussian', 'boxcar' ]}, 'kwidth': {'type': 'cInt'}, 'outfile': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}}
        doc = {'infile': infile, 'datacolumn': datacolumn, 'antenna': antenna, 'field': field, 'spw': spw, 'timerange': timerange, 'scan': scan, 'pol': pol, 'intent': intent, 'reindex': reindex, 'kernel': kernel, 'kwidth': kwidth, 'outfile': outfile, 'overwrite': overwrite}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'sdsmooth', [ 'infile=' + repr(_pc.document['infile']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'antenna=' + repr(_pc.document['antenna']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'timerange=' + repr(_pc.document['timerange']), 'scan=' + repr(_pc.document['scan']), 'pol=' + repr(_pc.document['pol']), 'intent=' + repr(_pc.document['intent']), 'reindex=' + repr(_pc.document['reindex']), 'kernel=' + repr(_pc.document['kernel']), 'kwidth=' + repr(_pc.document['kwidth']), 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
        return _end_log( _logging_state_, 'sdsmooth', _sdsmooth_t( _pc.document['infile'], _pc.document['datacolumn'], _pc.document['antenna'], _pc.document['field'], _pc.document['spw'], _pc.document['timerange'], _pc.document['scan'], _pc.document['pol'], _pc.document['intent'], _pc.document['reindex'], _pc.document['kernel'], _pc.document['kwidth'], _pc.document['outfile'], _pc.document['overwrite'] ) )

sdsmooth = _sdsmooth( )

