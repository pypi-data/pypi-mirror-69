##################### generated by xml-casa (v2) from importgmrt.xml ################
##################### fd7e58d81ab4ab0e310f3539c4d4f84b ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_importgmrt import importgmrt as _importgmrt_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _importgmrt:
    """
    importgmrt ---- Convert a UVFITS file to a CASA visibility data set

    
    Convert a GRMT FITS file to a CASA visiblity data set.
    Also read GMRT flag file(s) and flag data based on the contents of the
    files.
    

    --------- parameter descriptions ---------------------------------------------

    fitsfile Name of input UV FITS file
             Default: none
             
                Example: fitsimage='3C273XC1.fits'
    flagfile List of files containing flagging information.
             Default: none
             
                Examples:
                flagfile='3c273XC1.flag'
                flagfile=['3c273Cc1_1.flag','3c273Cc2_1.flag',']
    vis      Name of input visibility file
             Default: none
             
                Example: vis='ngc5921.ms'

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTGMRT IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a UVFITS file to a CASA visibility data set"""

    def __call__( self, fitsfile='', flagfile='', vis='' ):
        schema = {'fitsfile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'flagfile': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'vis': {'type': 'cStr'}}
        doc = {'fitsfile': fitsfile, 'flagfile': flagfile, 'vis': vis}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'importgmrt', [ 'fitsfile=' + repr(_pc.document['fitsfile']), 'flagfile=' + repr(_pc.document['flagfile']), 'vis=' + repr(_pc.document['vis']) ] )
        return _end_log( _logging_state_, 'importgmrt', _importgmrt_t( _pc.document['fitsfile'], _pc.document['flagfile'], _pc.document['vis'] ) )

importgmrt = _importgmrt( )

