##################### generated by xml-casa (v2) from conjugatevis.xml ##############
##################### e23f0fe961baed8459695d63c3e9b33a ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_conjugatevis import conjugatevis as _conjugatevis_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _conjugatevis:
    """
    conjugatevis ---- Change the sign of the phases in all visibility columns.

    
    Change the sign of the phases in all visibility columns.

    --------- parameter descriptions ---------------------------------------------

    vis       Name of input visibility file
              Default: none
              
                 Example: vis='ngc5921.ms'
    spwlist   Spectral window selection
              Default:[] (all spws will be conjugated)
              
                 Example: spw=[1,2]
    outputvis Name of output visibility file
              Default: 'conjugated_'+vis
              
                 Example: outputvis='conjugated.ms'
    overwrite Overwrite the outputvis if it exists?
              Default: False
              Options: False|True

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of conjugatevis in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """utility, manipulation"""
    _info_desc_ = """Change the sign of the phases in all visibility columns."""

    def __call__( self, vis='', spwlist=[ ], outputvis='', overwrite=False ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'spwlist': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'outputvis': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}}
        doc = {'vis': vis, 'spwlist': spwlist, 'outputvis': outputvis, 'overwrite': overwrite}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'conjugatevis', [ 'vis=' + repr(_pc.document['vis']), 'spwlist=' + repr(_pc.document['spwlist']), 'outputvis=' + repr(_pc.document['outputvis']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
        return _end_log( _logging_state_, 'conjugatevis', _conjugatevis_t( _pc.document['vis'], _pc.document['spwlist'], _pc.document['outputvis'], _pc.document['overwrite'] ) )

conjugatevis = _conjugatevis( )

