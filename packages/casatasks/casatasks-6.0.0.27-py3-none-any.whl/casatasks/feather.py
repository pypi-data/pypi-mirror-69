##################### generated by xml-casa (v2) from feather.xml ###################
##################### 4522695859f175b9c2dc5bdc50749847 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_feather import feather as _feather_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _feather:
    """
    feather ---- Combine two images using their Fourier transforms

    
    This task can be used as one method of combining single-dish and
    interferometric images after they have been separately made.
    
    The algorithm converts each image to the gridded visibility plane,
    combines them, and reconverts them into an combined image.  Each image
    must include a well-defined beam shape (clean beam) in order for
    feathering to work well.  The two images must have the same flux
    density normalization scale.

    --------- parameter descriptions ---------------------------------------------

    imagename       Name of output feathered image
                    Default: none
                    
                       Example: imagename='orion_combined.im'
    highres         Name of high resolution (interferometer) image
                    Default: none
                    
                       Example: imagename='orion_vla.im'
    lowres          Name of low resolution (single dish) image
                    Default: none
                    
                       Example: imagename='orion_gbt.im'
    sdfactor        Value by which to scale the Single Dish image.
                    Default: 1.0
                    
                    Basically modifying the flux scale of the SD image
    effdishdiam     New effective SingleDish diameter to use in m 
                    Default: -1.0 (leave as is)
                    
                    Obviously one can only reduce the dish
                    effective dish diameter in feathering.
    lowpassfiltersd Filter out the high spatial frequencies of the SD image
                    Default: False
                    
                    If True the high spatial frequency in the SD
                    image is rejected.
                    
                    Any data outside the maximum uv distance
                    that the SD has illuminated  is filtered
                    out.

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of feather in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """imaging"""
    _info_desc_ = """Combine two images using their Fourier transforms"""

    def __call__( self, imagename='', highres='', lowres='', sdfactor=float(1.0), effdishdiam=float(-1.0), lowpassfiltersd=False ):
        schema = {'imagename': {'type': 'cStr'}, 'highres': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'lowres': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'sdfactor': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'effdishdiam': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'lowpassfiltersd': {'type': 'cBool'}}
        doc = {'imagename': imagename, 'highres': highres, 'lowres': lowres, 'sdfactor': sdfactor, 'effdishdiam': effdishdiam, 'lowpassfiltersd': lowpassfiltersd}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'feather', [ 'imagename=' + repr(_pc.document['imagename']), 'highres=' + repr(_pc.document['highres']), 'lowres=' + repr(_pc.document['lowres']), 'sdfactor=' + repr(_pc.document['sdfactor']), 'effdishdiam=' + repr(_pc.document['effdishdiam']), 'lowpassfiltersd=' + repr(_pc.document['lowpassfiltersd']) ] )
        return _end_log( _logging_state_, 'feather', _feather_t( _pc.document['imagename'], _pc.document['highres'], _pc.document['lowres'], _pc.document['sdfactor'], _pc.document['effdishdiam'], _pc.document['lowpassfiltersd'] ) )

feather = _feather( )

