##################### generated by xml-casa (v2) from rmtables.xml ##################
##################### 0f9caa90a910ad84baf22d5de83f4325 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_rmtables import rmtables as _rmtables_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _rmtables:
    """
    rmtables ---- Remove tables cleanly, use this instead of rm -rf

    
    This task removes tables if they are not being currently accessed via
    the casapy process. Note: if you have multiple sessions running bad things
    could happen if you remove a table being accessed by another process.
    

    --------- parameter descriptions ---------------------------------------------

    tablenames Name of the tables

    --------- examples -----------------------------------------------------------

    
    Removes tables cleanly.
    Arguments may contain * or ?. Ranges [] are support but
    not ~ expansion.
    


    """

    _info_group_ = """utility"""
    _info_desc_ = """Remove tables cleanly, use this instead of rm -rf"""

    def __call__( self, tablenames=[  ] ):
        schema = {'tablenames': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}}
        doc = {'tablenames': tablenames}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'rmtables', [ 'tablenames=' + repr(_pc.document['tablenames']) ] )
        return _end_log( _logging_state_, 'rmtables', _rmtables_t( _pc.document['tablenames'] ) )

rmtables = _rmtables( )

