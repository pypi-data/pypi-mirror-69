##################### generated by xml-casa (v2) from simanalyze.xml ################
##################### 7d3a26f1b8ab6d33edd31cc90d95f01a ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_simanalyze import simanalyze as _simanalyze_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _simanalyze:
    """
    simanalyze ---- image and analyze measurement sets created with simobserve

    
    This task is for imaging and analyzing measurement sets (MSs) simulated
    with simobserve or simalma.
    

    --------- parameter descriptions ---------------------------------------------

    project        root prefix for input and output file names.  
                   This must be the directory of results generated by running 
                   simobserve or simalma. In particular $project/$project.skymodel 
                   will be required in order to compare output and input images.
    image          (re)image $project.*.ms to $project.image
    imagename      simulation output image to analyze (default = first $project/*.image found)
    skymodel       skymodel image to analyze (the .skymodel image created by simobserve or simalma and used by one of those tasks to create an MS; if unspecified, will try to find one similar to your specified output image name)
    vis            Measurement Set(s) to image
    modelimage     lower resolution prior image to use in clean e.g. existing total power image
    imsize         output image size in pixels (x,y) or 0 to match model
    imdirection    set output image direction, (otherwise center on the model)
    cell           cell size with units e.g. "10arcsec" or "" to equal model
    interactive    interactive clean?  (make sure to set niter>0 also)
    niter          maximum number of iterations (0 for dirty image)
    threshold      flux level (+units) to stop cleaning
    weighting      weighting to apply to visibilities.  briggs will use robust=0.5
    mask           Cleanbox(es), mask image(s), region(s), or a level
    outertaper     uv-taper on outer baselines in uv-plane
    pbcor          correct the output of synthesis images for primary beam response?
    stokes         Stokes params to image
    featherimage   image (e.g. total power) to feather with new image
    analyze        (only first 6 selected outputs will be displayed)
    showuv         display uv coverage
    showpsf        display synthesized (dirty) beam (ignored in single dish simulation)
    showmodel      display sky model at original resolution
    showconvolved  display sky model convolved with output clean beam
    showclean      display the synthesized image
    showresidual   display the clean residual image (ignored in single dish simulation)
    showdifference display difference between output cleaned image and input model sky image convolved with output clean beam
    showfidelity   display fidelity (see help)
    graphics       display graphics at each stage to [screen|file|both|none]
    verbose        
    overwrite      overwrite files starting with $project
    dryrun         only print information [experimental; only for interfermetric data]
    logfile        
    [1;42mRETURNS[1;m           void

    --------- examples -----------------------------------------------------------

    
    * "project" needs to be the directory of results generated by running
    simobserve or simalma. In particular $project/$project.skymodel
    will be required in order to compare output and input images.
    
    -------------------------------
    mode image=True:
    * One should input one or more simulated MSs using the "vis" parameter.
    These can include a total power MS.
    Simanalyze will grid any total power MS,
    clean (invert and deconvolve) any interferometric MSs,
    and feather the results.
    
    * the "vis" parameter:
    - example: single MS: vis="mysim.alma.out03.ms"
    - example: multiple MSs: vis="mysim.alma.out03.ms,mysim.aca.tp.ms"
    - one can use "$project" and let the task automatically replace it with
    the project name, e.g., vis="$project.noisy.ms,$project.noisy.sd.ms".
    However, note that if you created measurement set(s) using simobserve,
    MS names will include the configuration, e.g.
    "$project.alma_out20.noisy.ms"
    - setting "vis" to "default" will find and attempt to image
    all measurement sets (interferometric and single dish) in the
    project directory
    
    * Sometimes it is preferable to grid the single dish MS using the
    sdimaging task for more control.  In that case one can input
    the resulting single dish imaging under "featherimage", only
    put interferometric MSs in "vis", and simanalyze  will clean the
    interferometric and feather with your "featherimage".
    
    * Sometimes it is preferable to use a low resolution (single dish or
    synthesis) image as a prior model during clean deconvolution
    of a higher resolution interferometric MS.  That is accomplished
    by putting the low-resolution image in "modelimage" and the MS
    to be deconvolved in "vis". NOTE: This is not the original skymodel
    that was used in simobserve or simalma.  It is recommended to
    leave this blank unless the user is familiar with using a prior
    in clean deconvolution. (see casaguides) NOTE 2: modelimage will
    not be used if the MS to be imaged is total power.
    
    * uses Cotton-Schwab clean for single fields and Mosaic gridding
    for multiple fields (with Clark PSF calculation in minor cycles).
    
    * interactive clean or use of more parameters than the subset
    visible here are available by simply running the clean task directly,
    then using simanalyze in the mode image=False (see below).
    
    * if graphics are turned on, this step will display the clean image
    and residual image
    
    * the "mask" parameter:
    Specification of cleanbox(es), mask image(s), primary beam
    coverage level, and/or region(s) to be used for cleaning.
    clean tends to perform better, and is less likely to diverge, if
    the clean component placement is limited by a mask to where real
    emission is expected to be.  e.g. pixel ranges mask=[110,110,150,145],
    filename of mask image mask='myimage.mask', or a file with mask
    regions --  see help for the clean task for more information.
    
    * NOTE: simanalyze was designed to be used after one or more runs of
    simobserve, and as such it assumes it will be able to find a
    sky model image called $project/$project.skymodel, .newmodel, or
    .compskymodel in the $project/ subdirectory.  If the simulated
    MS has been created by means other than simply calling simobserve,
    the user may have to copy their sky model image into the $project
    subdirectory and call it "$project.skymodel"
    
    -------------------------------
    mode image=False:
    * Sometimes the user has created a synthesized image themselves,
    most likely using the clean task, perhaps along with
    sdimaging and feather, or a previous call to simanalyze with image=True
    * The user should input that simulated image as "imagename".
    It will have suffix .image if created by clean, simanalyze, or simalma
    * simanalyze will attempt to find an appropriate skymodel image -
    this is the *.skymodel image created by simobserve or simalma,
    the (optionally rescaled) original sky model, which was used
    to create the measurement set.
    simanalyze will look in the project directory, but if there are
    multuple skymodels present it may not find the right one, so the
    "skymodel" parameter allows explicit specification.
    
    -------------------------------
    mode analyze=True is used to create an image of the difference between
    the input skymodel and the simulated output image (whether that output
    image is being generated in the same call to simanalyze, with
    image=True, or has already been generated, and simanalyze is being
    called with image=False).
    
    showuv -- display uv coverage
    showpsf -- display synthesized (dirty) beam (ignored in single dish simulation)
    showmodel -- display sky model at original resolution
    showconvolved -- display sky model convolved with output beam
    showclean -- display the synthesized image
    showresidual -- display the clean residual image (ignored in single dish simulation)
    showdifference -- display difference between output cleaned image and
    input model sky image convolved with output clean beam
    showfidelity -- display fidelity image
    fidelity = abs(input) / max[ abs(input-output), 0.7*rms(output) ]
    
    
    Note that the RMS is calculated in the lower quarter of the image.
    This is likely not the best choice, so you are encouraged to
    measure RMS yourself in an off-source region using the viewer.
    
    dryrun=True is an advanced technical mode only useful for interferometric
    (not single dish) data.
    
    -------------------------------
    Output produced: (not all will always exist, depending on input parameters)
    To support different runs with different arrays, the names have the
    configuration name from antennalist appended.
    -------------------------------
    project.[cfg].skymodel.flat.regrid.conv = input sky regridded to match
    the output image, and convolved with the output clean beam
    
    project.[cfg].image = synthesized image
    project.[cfg].flux.pbcoverage = primary beam correction for mosaic image
    project.[cfg].residual = residual image after cleaning
    project.[cfg].clean.last = parameter file of what parameters were used in
    the clean task
    project.[cfg].psf = synthesized (dirty) beam calculated from weighted uv
    distribution
    project.[cfg].image.png = diagnostic figure of clean image and residual
    
    project.[cfg].fidelity = fidelity image
    project.[cfg].analysis.png = diagnostic figure of difference and fidelity
    
    project.[cfg].simanalyze.last = saved input parameters for simanalyze task
    
    -------------------------------
    Please see http://casaguides.nrao.edu, and contact the CASA helpdesk
    with questions.
    


    """

    _info_group_ = """simulation"""
    _info_desc_ = """image and analyze measurement sets created with simobserve"""

    def __call__( self, project='sim', image=True, imagename='default', skymodel='', vis='default', modelimage='', imsize=[ int(0),int(0) ], imdirection='', cell='', interactive=False, niter=int(0), threshold='0.1mJy', weighting='natural', mask=[  ], outertaper=[  ], pbcor=True, stokes='I', featherimage='', analyze=False, showuv=True, showpsf=True, showmodel=True, showconvolved=False, showclean=True, showresidual=False, showdifference=True, showfidelity=True, graphics='both', verbose=False, overwrite=True, dryrun=False, logfile='' ):
        schema = {'project': {'type': 'cStr'}, 'image': {'type': 'cBool'}, 'imagename': {'type': 'cStr'}, 'skymodel': {'type': 'cStr'}, 'vis': {'type': 'cStr'}, 'modelimage': {'type': 'cStr'}, 'imsize': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'imdirection': {'type': 'cStr'}, 'cell': {'type': 'cStr'}, 'interactive': {'type': 'cBool'}, 'niter': {'type': 'cInt'}, 'threshold': {'type': 'cStr'}, 'weighting': {'type': 'cStr', 'allowed': [ 'natural', 'uniform', 'briggs' ]}, 'mask': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'outertaper': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'pbcor': {'type': 'cBool'}, 'stokes': {'type': 'cStr', 'allowed': [ 'I', 'IQUV', 'RRLL', 'QU', 'YY', 'RR', 'IV', 'XX', 'XXYY', 'LL' ]}, 'featherimage': {'type': 'cStr'}, 'analyze': {'type': 'cBool'}, 'showuv': {'type': 'cBool'}, 'showpsf': {'type': 'cBool'}, 'showmodel': {'type': 'cBool'}, 'showconvolved': {'type': 'cBool'}, 'showclean': {'type': 'cBool'}, 'showresidual': {'type': 'cBool'}, 'showdifference': {'type': 'cBool'}, 'showfidelity': {'type': 'cBool'}, 'graphics': {'type': 'cStr', 'allowed': [ 'none', 'file', 'both', 'screen', '' ]}, 'verbose': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'dryrun': {'type': 'cBool'}, 'logfile': {'type': 'cStr'}}
        doc = {'project': project, 'image': image, 'imagename': imagename, 'skymodel': skymodel, 'vis': vis, 'modelimage': modelimage, 'imsize': imsize, 'imdirection': imdirection, 'cell': cell, 'interactive': interactive, 'niter': niter, 'threshold': threshold, 'weighting': weighting, 'mask': mask, 'outertaper': outertaper, 'pbcor': pbcor, 'stokes': stokes, 'featherimage': featherimage, 'analyze': analyze, 'showuv': showuv, 'showpsf': showpsf, 'showmodel': showmodel, 'showconvolved': showconvolved, 'showclean': showclean, 'showresidual': showresidual, 'showdifference': showdifference, 'showfidelity': showfidelity, 'graphics': graphics, 'verbose': verbose, 'overwrite': overwrite, 'dryrun': dryrun, 'logfile': logfile}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'simanalyze', [ 'project=' + repr(_pc.document['project']), 'image=' + repr(_pc.document['image']), 'imagename=' + repr(_pc.document['imagename']), 'skymodel=' + repr(_pc.document['skymodel']), 'vis=' + repr(_pc.document['vis']), 'modelimage=' + repr(_pc.document['modelimage']), 'imsize=' + repr(_pc.document['imsize']), 'imdirection=' + repr(_pc.document['imdirection']), 'cell=' + repr(_pc.document['cell']), 'interactive=' + repr(_pc.document['interactive']), 'niter=' + repr(_pc.document['niter']), 'threshold=' + repr(_pc.document['threshold']), 'weighting=' + repr(_pc.document['weighting']), 'mask=' + repr(_pc.document['mask']), 'outertaper=' + repr(_pc.document['outertaper']), 'pbcor=' + repr(_pc.document['pbcor']), 'stokes=' + repr(_pc.document['stokes']), 'featherimage=' + repr(_pc.document['featherimage']), 'analyze=' + repr(_pc.document['analyze']), 'showuv=' + repr(_pc.document['showuv']), 'showpsf=' + repr(_pc.document['showpsf']), 'showmodel=' + repr(_pc.document['showmodel']), 'showconvolved=' + repr(_pc.document['showconvolved']), 'showclean=' + repr(_pc.document['showclean']), 'showresidual=' + repr(_pc.document['showresidual']), 'showdifference=' + repr(_pc.document['showdifference']), 'showfidelity=' + repr(_pc.document['showfidelity']), 'graphics=' + repr(_pc.document['graphics']), 'verbose=' + repr(_pc.document['verbose']), 'overwrite=' + repr(_pc.document['overwrite']), 'dryrun=' + repr(_pc.document['dryrun']), 'logfile=' + repr(_pc.document['logfile']) ] )
        return _end_log( _logging_state_, 'simanalyze', _simanalyze_t( _pc.document['project'], _pc.document['image'], _pc.document['imagename'], _pc.document['skymodel'], _pc.document['vis'], _pc.document['modelimage'], _pc.document['imsize'], _pc.document['imdirection'], _pc.document['cell'], _pc.document['interactive'], _pc.document['niter'], _pc.document['threshold'], _pc.document['weighting'], _pc.document['mask'], _pc.document['outertaper'], _pc.document['pbcor'], _pc.document['stokes'], _pc.document['featherimage'], _pc.document['analyze'], _pc.document['showuv'], _pc.document['showpsf'], _pc.document['showmodel'], _pc.document['showconvolved'], _pc.document['showclean'], _pc.document['showresidual'], _pc.document['showdifference'], _pc.document['showfidelity'], _pc.document['graphics'], _pc.document['verbose'], _pc.document['overwrite'], _pc.document['dryrun'], _pc.document['logfile'] ) )

simanalyze = _simanalyze( )

