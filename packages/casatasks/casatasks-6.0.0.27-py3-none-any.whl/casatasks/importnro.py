##################### generated by xml-casa (v2) from importnro.xml #################
##################### 9fcdaf90a9119a91d27be1bef9c08703 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_importnro import importnro as _importnro_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _importnro:
    """
    importnro ---- Convert NOSTAR data into a CASA visibility file (MS)

    
    Task importnro enables one to convert the data obtained with the
    NRO45m telescope into the CASA MS2 format. At this moment, only the
    OTF data (NOSTAR data) obtained with the SAM45 spectrometer is
    supported, and the OTF data obtained with the other spectrometers
    (e.g., AOS) and the PSW data (NEWSTAR data) are outside of scope
    (Jan./25/2017)

    --------- parameter descriptions ---------------------------------------------

    infile    Name of input NOSTAR data
              Default: none
    outputvis Root name of the ms to be created. Note the .ms is NOT
              added 
              Default: none
              
                 Example: outputvis='myms.ms'
    overwrite Over write an existing MS(s)
              Default: False (do not overwrite)
              Options: False|True
    parallel  Turn on parallel execution
              Default: False (serial execution)
              Options: False|True
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTNRO IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """single dish, import/export"""
    _info_desc_ = """Convert NOSTAR data into a CASA visibility file (MS)"""

    def __call__( self, infile='', outputvis='', overwrite=False, parallel=False ):
        schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outputvis': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}, 'parallel': {'type': 'cBool'}}
        doc = {'infile': infile, 'outputvis': outputvis, 'overwrite': overwrite, 'parallel': parallel}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'importnro', [ 'infile=' + repr(_pc.document['infile']), 'outputvis=' + repr(_pc.document['outputvis']), 'overwrite=' + repr(_pc.document['overwrite']), 'parallel=' + repr(_pc.document['parallel']) ] )
        return _end_log( _logging_state_, 'importnro', _importnro_t( _pc.document['infile'], _pc.document['outputvis'], _pc.document['overwrite'], _pc.document['parallel'] ) )

importnro = _importnro( )

