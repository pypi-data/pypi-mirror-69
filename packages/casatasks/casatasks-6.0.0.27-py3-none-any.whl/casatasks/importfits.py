##################### generated by xml-casa (v2) from importfits.xml ################
##################### e8fdf1ac06c4c663eca53aef832d20ef ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_importfits import importfits as _importfits_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _importfits:
    """
    importfits ---- Convert an image FITS file into a CASA image

    
    Convert an image FITS file into a CASA image

    --------- parameter descriptions ---------------------------------------------

    fitsimage         Name of input image FITS file
                      Default: none
                      
                         Example: fitsimage='3C273XC1.fits'
    imagename         Name of output CASA image
                      Default: none
                      
                         Example: fitsimage='3C273XC1.image'
    whichrep          If fits image has multiple coordinate reps, choose one.
                      Default: 0 (means first)
                      
                         Example: whichrep=1
    whichhdu          If fits file contains multiple images, choose one
                      Default: -1 (use the first valid one)
                      
                      NOTE: 0 = first HDU, -1 = first valid image
                      
                         Example: whichhdu=1
    zeroblanks        Set blanked pixels to zero (not NaN)
                      Default: True
                      Options: True|False
    overwrite         Overwrite output file if it exists?
                      Default: False
                      Options: False|True
    defaultaxes       Add the default 4D coordinate axes where they are
                      missing
                      Default: False
                      Options: False|True
                      
                      IMPORTANT: value True requires setting defaultaxesvalues
    defaultaxesvalues List of values to assign to added degenerate axes when
                      defaultaxes==True (ra,dec,freq,stokes)
                      Default: []
                      
                      For existing axes, empty strings can be given as
                      values. For the directions and spectral values,
                      any valid angle/frequency expressions can be
                      given.
                      
                         Example: defaultaxesvalues=['19h30m00',
                         '-02d30m00', '88.5GHz', 'Q']
    beam              List of values to be used to define the synthesized beam
                      [BMAJ,BMIN,BPA] (as in the FITS keywords)
                      Default: [] (i.e.take from FITS file)
                      
                         Example: beam=['0.35arcsec', '0.24arcsec',
                         '25deg']

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTFITS IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert an image FITS file into a CASA image"""

    def __call__( self, fitsimage='', imagename='', whichrep=int(0), whichhdu=int(-1), zeroblanks=True, overwrite=False, defaultaxes=False, defaultaxesvalues=[ ], beam=[ ] ):
        schema = {'fitsimage': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'imagename': {'type': 'cStr'}, 'whichrep': {'type': 'cInt'}, 'whichhdu': {'type': 'cInt'}, 'zeroblanks': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'defaultaxes': {'type': 'cBool'}, 'defaultaxesvalues': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'beam': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}
        doc = {'fitsimage': fitsimage, 'imagename': imagename, 'whichrep': whichrep, 'whichhdu': whichhdu, 'zeroblanks': zeroblanks, 'overwrite': overwrite, 'defaultaxes': defaultaxes, 'defaultaxesvalues': defaultaxesvalues, 'beam': beam}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'importfits', [ 'fitsimage=' + repr(_pc.document['fitsimage']), 'imagename=' + repr(_pc.document['imagename']), 'whichrep=' + repr(_pc.document['whichrep']), 'whichhdu=' + repr(_pc.document['whichhdu']), 'zeroblanks=' + repr(_pc.document['zeroblanks']), 'overwrite=' + repr(_pc.document['overwrite']), 'defaultaxes=' + repr(_pc.document['defaultaxes']), 'defaultaxesvalues=' + repr(_pc.document['defaultaxesvalues']), 'beam=' + repr(_pc.document['beam']) ] )
        return _end_log( _logging_state_, 'importfits', _importfits_t( _pc.document['fitsimage'], _pc.document['imagename'], _pc.document['whichrep'], _pc.document['whichhdu'], _pc.document['zeroblanks'], _pc.document['overwrite'], _pc.document['defaultaxes'], _pc.document['defaultaxesvalues'], _pc.document['beam'] ) )

importfits = _importfits( )

