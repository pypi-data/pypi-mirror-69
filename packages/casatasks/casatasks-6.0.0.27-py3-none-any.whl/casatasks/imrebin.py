##################### generated by xml-casa (v2) from imrebin.xml ###################
##################### 1926c969a32046a9d705aa63ccd9a15f ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_imrebin import imrebin as _imrebin_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _imrebin:
    """
    imrebin ---- Rebin an image by the specified integer factors

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    outfile   Output image name.
    factor    Binning factors for each axis. Use imhead or ia.summary to determine axis ordering.
    region    Region selection. Default is to use the full image.
    box       Rectangular region to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes. Stokes planes cannot be rebinned.
    mask      Mask to use. Default is none.
    dropdeg   Drop degenerate axes?
    overwrite Overwrite the output if it exists? Default False
    stretch   Stretch the mask if necessary and possible?
    crop      Remove pixels from the end of an axis to be rebinned if there are not enough to form an integral bin?
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    PARAMETER SUMMARY
    imagename        Name of the input (CASA, FITS, MIRIAD) image
    outfile          Name of output CASA image. Must be specified.
    factor           Array of binning factors for each axis, eg [2,3]. Use imhead or ia.summary()
    to determine order of axes in your image.
    region           Region selection. Default is to use the
    full image.
    box              Rectangular region to select in direction plane.  for
    details. Default is to use the entire direction plane.
    chans            Channels to use. Default is to use all channels.
    stokes           Stokes planes to use. Default is to use all
    Stokes planes. Stokes planes cannot be rebiined.
    mask             Mask to use. Default is none.
    dropdeg          Drop degenerate axes?
    overwrite        Should the image of the same name as specified in outfile be overwritten?
    If true, the file if it exists is automatically overwritten.
    stretch          Stretch the input mask if necessary and possible.
    crop             Only considered if the length of the input axis is not an integral multiple of
    the associated binning factor. If True, pixels at the end of the axis that do not
    form a complete bin are not included in the binning. If False, the remaining extra
    pixels are averaged to form the final bin along the axis.
    
    DESCRIPTION
    
    This application rebins the specified image by the specified integer binning
    factors for each axis. It supports both float valued and complex valued images.
    The corresponding output pixel value is the average of the
    input pixel values. The output pixel will be masked False if there
    were no good input pixels.  A polarization axis cannot be rebinned.
    
    The binning factors array must contain at least one element and no more
    elements than the number of input image axes. If the number of elements
    specified is less than the number of image axes, then the remaining axes
    not specified are not rebinned. All specified values must be positive. A
    value of one indicates that no rebinning of the associated axis will occur.
    Should this array contain any float values, they will be rounded to the next
    lowest integer. Note that in many images with both frequency and polarization
    axes, the polarization axis preceeds the frequency axis. If you wish to rebin
    the frequency axis, it is recommended that you inspect your image with imhead
    or ia.summary() to determine the axis ordering.
    
    Binning starts from the origin pixel of the bounding box of the selected region or
    the origin pixel of the input image if no region is specified. The value of crop
    is used to determine how to handle cases where there are pixels
    at the end of the axis that do not form a complete bin. If crop=True,
    extra pixels at the end of the axis are discarded. If crop=False, the remaining
    pixels are averaged into the final bin along that axis. Should the length
    of the axis to be rebinned be an integral multiple of the associated binning
    factor, the value of crop is irrelevant.
    
    A value of dropdeg=True will result in the output image not containing
    axes that are degenerate in the specified region or in the input image if no
    region is specified. Note that, however, the binning
    factors array must still account for degenerate axes, and the binning
    factor associated with a degenerate axis must always be 1.
    
    EXAMPLE
    
    # rebin the first two axes (normally the direction axes)
    imrebin(imagename="my.im", outfile="rebinned.im", factor=[2,3])
    
    # rebin the frequency axis, which is the fourth axis in this image
    imrebin(imagename="my2.im", outfile="rebinned2.im", factor=[1,1,1,4])
    
    


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Rebin an image by the specified integer factors"""

    def __call__( self, imagename='', outfile='', factor=[ ], region='', box='', chans='', stokes='', mask='', dropdeg=False, overwrite=False, stretch=False, crop=True ):
        schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outfile': {'type': 'cStr'}, 'factor': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'region': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'box': {'type': 'cStr'}, 'chans': {'type': 'cStr'}, 'stokes': {'type': 'cStr'}, 'mask': {'type': 'cStr'}, 'dropdeg': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'stretch': {'type': 'cBool'}, 'crop': {'type': 'cBool'}}
        doc = {'imagename': imagename, 'outfile': outfile, 'factor': factor, 'region': region, 'box': box, 'chans': chans, 'stokes': stokes, 'mask': mask, 'dropdeg': dropdeg, 'overwrite': overwrite, 'stretch': stretch, 'crop': crop}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'imrebin', [ 'imagename=' + repr(_pc.document['imagename']), 'outfile=' + repr(_pc.document['outfile']), 'factor=' + repr(_pc.document['factor']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'dropdeg=' + repr(_pc.document['dropdeg']), 'overwrite=' + repr(_pc.document['overwrite']), 'stretch=' + repr(_pc.document['stretch']), 'crop=' + repr(_pc.document['crop']) ] )
        return _end_log( _logging_state_, 'imrebin', _imrebin_t( _pc.document['imagename'], _pc.document['outfile'], _pc.document['factor'], _pc.document['region'], _pc.document['box'], _pc.document['chans'], _pc.document['stokes'], _pc.document['mask'], _pc.document['dropdeg'], _pc.document['overwrite'], _pc.document['stretch'], _pc.document['crop'] ) )

imrebin = _imrebin( )

