##################### generated by xml-casa (v2) from rerefant.xml ##################
##################### 1d674a2e53982cb07b5d454a7790818f ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_rerefant import rerefant as _rerefant_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _rerefant:
    """
    rerefant ---- Re-apply refant to a caltable

    
    TBD
    

    --------- parameter descriptions ---------------------------------------------

    vis        Name of input visibility file (MS)
    tablein    Input calibration table
    caltable   Output calibration table (overwrite tablein if unspecified)
    refantmode Refant algorithm to use
    refant     Reference antenna name(s)
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    
    
    TBD...
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    tablein -- Input calibration table (G or T)
    default: none; example: tablein='ngc5921.gcal'
    caltable -- Output calibration table
    default: ''  (will overwrite tablein);
    example: caltable='ngc5921_newrefant.gcal'
    refantmode -- The phase refant algorithm to use
    default: 'flex'; example: refantmode='flex'
    Options: 'flex','strict'
    refant -- Reference antenna name(s); a prioritized list may be specified
    default: '' => no refant applied
    example: refant='4' (antenna with index 4)
    refant='VA04' (VLA antenna #4)
    refant='EA02,EA23,EA13' (EVLA antenna EA02, use
    EA23 and EA13 as alternates if/when EA02
    drops out)
    Use taskname=listobs for antenna listing
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Re-apply refant to a caltable"""

    def __call__( self, vis='', tablein='', caltable='', refantmode='flex', refant='' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr'}, 'refantmode': {'type': 'cStr', 'allowed': [ 'flex', 'strict' ]}, 'refant': {'type': 'cStr'}}
        doc = {'vis': vis, 'tablein': tablein, 'caltable': caltable, 'refantmode': refantmode, 'refant': refant}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'rerefant', [ 'vis=' + repr(_pc.document['vis']), 'tablein=' + repr(_pc.document['tablein']), 'caltable=' + repr(_pc.document['caltable']), 'refantmode=' + repr(_pc.document['refantmode']), 'refant=' + repr(_pc.document['refant']) ] )
        return _end_log( _logging_state_, 'rerefant', _rerefant_t( _pc.document['vis'], _pc.document['tablein'], _pc.document['caltable'], _pc.document['refantmode'], _pc.document['refant'] ) )

rerefant = _rerefant( )

