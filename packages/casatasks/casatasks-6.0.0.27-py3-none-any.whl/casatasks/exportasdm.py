##################### generated by xml-casa (v2) from exportasdm.xml ################
##################### c865af059e45d860085c5dddd003ab19 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_exportasdm import exportasdm as _exportasdm_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _exportasdm:
    """
    exportasdm ---- Convert a CASA visibility file (MS) into an ALMA or EVLA Science Data Model

    
    Convert a CASA visibility file (MS) into an ALMA or EVLA Science Data Model

    --------- parameter descriptions ---------------------------------------------

    vis             Name of input visibility file
                    Default: none
                    
                       Example: vis='ngc5921.ms'
    asdm            Name of output ASDM directory (on disk)
                    Default: none
    datacolumn      Which data column(s) to use for processing
                                     (case-insensitive).
                                     Default: 'corrected'
                                     Options: 'data', 'model', 'corrected',
                                     'all','float_data', 'lag_data',
                                     'float_data,data', 'lag_data,data'
                    
                                        Example: datacolumn='data'
                    
                                     NOTE: 'all' = whichever of the above that are
                                     present. If the requested column does not exist,
                                     the task will exit with an error.
    archiveid       The X0 in uid://X0/X1/X2
                    Default: 'S0'
    rangeid         The X1 in uid://X0/X1/X2
                    Default: 'X1'
    subscanduration Maximum duration of a subscan in the output ASDM
                    Default: 24h
    sbduration      Maximum duration of a scheduling block (and therefore
                    exec block) in the output ASDM
                    Default: '2700s'
                    
                    The sbduration parameter controls the number of
                    execution blocks (EBs) into which exportasdm
                    subdivides the visibilities from your input
                    MS. If the total observation time in the MS is
                    shorter than what is given in sbduration, a
                    single EB will be created.
    apcorrected     Data to be marked as having atmospheric phase correction
                    Default: False
                    Options: False|True
    verbose         Produce log output?
                    Default: True
                    Options: True|False
    showversion     Report the version of ASDM class set being used
                    Default: True
                    Options: True|False
    useversion      Selects the version of MS2asdm to be used
                    Default: 'v3'
    [1;42mRETURNS[1;m            bool

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of exportasdm in CASA Docs:
    
    https://casa.nrao.edu/casadocs/
    
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a CASA visibility file (MS) into an ALMA or EVLA Science Data Model"""

    def __call__( self, vis='', asdm='', datacolumn='data', archiveid='S0', rangeid='X1', subscanduration='24h', sbduration='2700s', apcorrected=False, verbose=True, showversion=True, useversion='v3' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'asdm': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'datacolumn': {'type': 'cStr', 'allowed': [ 'data', 'corrected', 'model' ]}, 'archiveid': {'type': 'cStr'}, 'rangeid': {'type': 'cStr'}, 'subscanduration': {'type': 'cStr'}, 'sbduration': {'type': 'cStr'}, 'apcorrected': {'type': 'cBool'}, 'verbose': {'type': 'cBool'}, 'showversion': {'type': 'cBool'}, 'useversion': {'type': 'cStr', 'allowed': [ 'v3', '' ]}}
        doc = {'vis': vis, 'asdm': asdm, 'datacolumn': datacolumn, 'archiveid': archiveid, 'rangeid': rangeid, 'subscanduration': subscanduration, 'sbduration': sbduration, 'apcorrected': apcorrected, 'verbose': verbose, 'showversion': showversion, 'useversion': useversion}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'exportasdm', [ 'vis=' + repr(_pc.document['vis']), 'asdm=' + repr(_pc.document['asdm']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'archiveid=' + repr(_pc.document['archiveid']), 'rangeid=' + repr(_pc.document['rangeid']), 'subscanduration=' + repr(_pc.document['subscanduration']), 'sbduration=' + repr(_pc.document['sbduration']), 'apcorrected=' + repr(_pc.document['apcorrected']), 'verbose=' + repr(_pc.document['verbose']), 'showversion=' + repr(_pc.document['showversion']), 'useversion=' + repr(_pc.document['useversion']) ] )
        return _end_log( _logging_state_, 'exportasdm', _exportasdm_t( _pc.document['vis'], _pc.document['asdm'], _pc.document['datacolumn'], _pc.document['archiveid'], _pc.document['rangeid'], _pc.document['subscanduration'], _pc.document['sbduration'], _pc.document['apcorrected'], _pc.document['verbose'], _pc.document['showversion'], _pc.document['useversion'] ) )

exportasdm = _exportasdm( )

