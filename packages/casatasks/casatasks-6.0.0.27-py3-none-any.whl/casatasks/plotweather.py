##################### generated by xml-casa (v2) from plotweather.xml ###############
##################### 9aa23d1d63c67599652ec0f6a285d29c ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_plotweather import plotweather as _plotweather_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _plotweather:
    """
    plotweather ---- Plot elements of the weather table; estimate opacity.

    --------- parameter descriptions ---------------------------------------------

    vis             MS name
    seasonal_weight weight of the seasonal model
    doPlot          set this to True to create a plot
    plotName        (Optional) the name of the plot file

    --------- examples -----------------------------------------------------------

    
    Generates opacity estimates from both the weather data and a seasonal model; intended for VLA use only.
    By default the returned opacity is the mean of these predictions, but this can be adjusted with seasonal_weight.
    
    These methods and models are described in detail in EVLA Memo 143, VLA Test Memo 232, VLA Scientific Memo 176, and references therein.
    
    Saves the plot to the following default file:  MS name + .plotweather.png
    Custom plot filenames must end in one of: .png, .pdf, .ps, .eps or .svg
    
    If run as a function, will return the mean zenith opacity per spectral window.
    
    The wind direction is defined as the direction where the wind is coming from.
    The wind direction is thus in the opposite side of the arrow, with north at
    the top and counterclockwise through west, south, and east.
    
    Written by Josh Marvil, revised 02/06/12
    
    example:
    myTau = plotweather(vis='myMS.ms',seasonal_weight=0.5, doPlot=True)


    """

    _info_group_ = """visualization"""
    _info_desc_ = """Plot elements of the weather table; estimate opacity."""

    def __call__( self, vis='', seasonal_weight=float(0.5), doPlot=True, plotName='' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'seasonal_weight': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'doPlot': {'type': 'cBool'}, 'plotName': {'type': 'cStr'}}
        doc = {'vis': vis, 'seasonal_weight': seasonal_weight, 'doPlot': doPlot, 'plotName': plotName}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'plotweather', [ 'vis=' + repr(_pc.document['vis']), 'seasonal_weight=' + repr(_pc.document['seasonal_weight']), 'doPlot=' + repr(_pc.document['doPlot']), 'plotName=' + repr(_pc.document['plotName']) ] )
        return _end_log( _logging_state_, 'plotweather', _plotweather_t( _pc.document['vis'], _pc.document['seasonal_weight'], _pc.document['doPlot'], _pc.document['plotName'] ) )

plotweather = _plotweather( )

