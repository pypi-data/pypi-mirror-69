##################### generated by xml-casa (v2) from simobserve.xml ################
##################### d25d8f6d372d2b8366f025e8a0914ce4 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_simobserve import simobserve as _simobserve_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _simobserve:
    """
    simobserve ---- visibility simulation task

    
    This task simulates interferometric or total power measurment sets. It
    is currently optimized for JVLA and ALMA, although many observatories
    are included, and adding your own is simply a matter of providing an
    antenna location file (see below).
    
    simobserve is meant to work in conjunction with the simanalyze
    task. Calling simobserve one more times will produce simulated
    measurement set(s), which are then gridded, inverted and deconvolved
    into output simulated images using simanalyze.
    
    ALMA users are encouraged to use the simalma task, which provides
    additional information on the multiple simobserve and simanalyze calls
    required to simulate an ALMA observation which may consist of 12m
    interferometric, 7m interferometric, and 12m total power data.
    
    More information and examples are availible at
    http://casaguides.nrao.edu/index.php?title=Simulating_Observations_in_CASA
    Please contact the Helpdesk with any questions (see
    https://casa.nrao.edu/help_desk_all.shtml)

    --------- parameter descriptions ---------------------------------------------

    project         root prefix for output file names
    skymodel        Model image to observe
                    
                    * simobserve uses a CASA or fits image. If you
                      merely have a grid of numbers, you will need to
                      write them out as fits or write a CASA script to
                      read them in and use the ia tool to create an
                      image and insert the data.
                    
                    * simobserve does NOT require a coordinate system
                      in the header. If the coordinate information is
                      incomplete, missing, or you would like to
                      override it, set the appropriate "in"
                      parameters. NOTE that setting those parameters
                      simply changes the header values, ignoring any
                      values already in the image. No regridding is
                      performed. 
                    
                    * You can also manipulate an image header manually
                      with the "imhead" task. 
                    
                    * If you have a proper Coordinate System,
                      simobserve will do its best to generate
                      visibilities from that.
    inbright        Peak brightness to scale the image to, in Jy/pixel
                    Subparameter of skymodel
                    Default: '' (i.e., unchanged)
                    
                       Example: inbright='1.2Jy/pixel'
                    
                    Note: "unchanged" will take the numerical values
                    in your image and assume they are in Jy/pixel,
                    even if it says some other unit in the header.
    indirection     Central direction to place the sky model image
                    Subparameter of skymodel
                    Default: '' (use whatever is in the image
                    already)
                    
                       Example: indirection='J2000 19h00m00
                       -40d00m00'
    incell          set new cell/pixel size
                    Subparameter of skymodel
                    Default: '' (use whatever is in the image
                    already)
                    
                       Example: incell='0.1arcsec'
    incenter        Frequency to use for the center channel (or only channel,
                    if the skymodel is 2D)
                    Subparameter of skymodel
                    Default: '' (use whatever is in the image
                    already)
                    
                       Example: incenter='89GHz'
    inwidth         Set new channel width 
                      Subparameter of skymodel
                      Default: '' (use whatever is in the image
                      already)
                      
                      Should be a string representing a quantity with
                      units e.g. inwidth='10MHz'
                    
                      NOTES: 
                    * Only works reliably with frequencies, not
                      velocities 
                    * It is not possible to change the number of
                      spectral planes of the sky model, only to relabel
                      them with different frequencies That kind of
                      regridding can be accomplished with the CASA
                      toolkit.
    complist        Component list model of the sky, added to or instead of skymodel. See https://casaguides.nrao.edu/index.php/Simulation_Guide_Component_Lists_(CASA_5.4)
    compwidth       Bandwidth of components
                    Subparameter of complist
                    
                    If simulating from components only, this defines
                    the bandwidth of the MS and output images
                    
                       Example: compwidth='8GHz'
    comp_nchan      Channelization of components
                    Subparameter of complist
                    
                    If simulating from components only, this defines
                    the number of channels of the MeasurementSet
                    
                       Example: comp_nchan=256
    setpointings    If true, calculate a map of pointings and write ptgfile. If false, read pointings from ptgfile.
                    Default: True
                    
                    If graphics are on, display the pointings shown
                    on the model image
    ptgfile         A text file specifying directions
                    Subparameter of setpointings=False
                    
                    The text file should have the following format,
                    with optional integration times:
                    Epoch     RA          DEC      TIME(optional)
                    J2000 23h59m28.10 -019d52m12.35 10.0
                    
                    If the time column is not present in the file, it
                    will use "integration" for all pointings.
                    
                    NOTE: at this time the file should contain only
                    science pointings: simobserve will observe these,
                    then optionally the calibrator, then the list of
                    science pointings again, etc, until totaltime is
                    used up.
    integration     Time interval for each integration
                    Subparameter of setpointings=False
                    
                       Example: integration='10s'
                    
                    NOTE: to simulate a "scan" longer than one
                    integration, use  setpointings to generate a
                    pointing file, and then edit the file to increase
                    the time at each point to be larger than the
                    parameter integration time.
    direction       Mosaic center direction.
                      Subparameter of setpointings=True
                    
                         Example: "J2000 19h00m00 -40d00m00" or "" to
                         center on model
                    
                      If unset, will use the center of the skymodel
                      image.
                    * can optionally be a list of pointings, otherwise
                    * simobserve will cover a region of size mapsize
                      according to maptype
    mapsize         Angular size of of mosaic map to simulate.
                    Subparameter of setpointings=True
                    
                    Set to "" to cover model
    maptype         How to calculate the pointings for the mosaic
                    observation?
                    Subparameter of setpointings=True
                    Options: hexagonal, square (raster), ALMA, etc
                    
                    "ALMA" for the same hex algorithm as the ALMA
                    Cycle 1 OT or "ALMA2012" for the algorithm used
                    in the Cycle 0 OT
    pointingspacing Spacing in between pointings. 
                    Subparameter of setpointings=True
                    
                       Examples: 
                       pointingspacing="0.25PB" 
                       pointingspacing="" for ALMA default
                       INT=lambda/D/sqrt(3), SD=lambda/D/3
    caldirection    pt source calibrator [experimental]
    calflux         pt source calibrator flux [experimental]
    obsmode         Observation mode to simulate
                      Options: int(interferometer)|sd(singledish)|""(none)
                    
                      Observation mode to calculate visibilities from a
                      skymodel image (which may have been modified
                      above), an optional component list, and a
                      pointing file (which also may have been generated
                      above).
                    
                      This parameter takes two possible values:
                      - interferometer (or int)
                      - singledish (or sd)
                    * If graphics are on, this observe step will
                      display the array (similar to plotants), the uv
                      coverage, the synthesized (dirty) beam, and
                      ephemeris information 
                    * If simulating from a component list, you should
                      specify "compwidth", the desired bandwidth; and 
                    		     specify "comp_nchan", the desired channelization
                    		     if more than one output channel is desired
    refdate         Date of simulated observation
                    Subparameter of obsmode='int|sd'
                    Not critical unless concatting simulations
                    
                       Example: refdate="2014/05/21"
    hourangle       Hour angle of observation center.
                    Subparameter of obsmode='int|sd'
                    
                        Examples:
                        hourangle="-3:00:00", "5h", or "transit"
    totaltime       Total time of observation or number of repetitions
                    Subparameter of obsmode='int|sd'
                    
                        Example:
                        totaltime='7200s'
                        If a number without units, interpreted as the
                        number of times to repeat the mosaic.
    antennalist     Ascii file containing antenna positions.
                      Subparameter of obsmode='int|""'
                    
                      Each row has x y z coordinates and antenna
                      diameter; header lines are required to specify
                      # observatory=ALMA
                      # coordsys=UTM
                      # datum=WGS84
                      # zone=19
                    
                    * Standard arrays are found in your CASA data
                      repository,
                    * If "", simobserve will not not produce an
                      interferometric MS 
                    * A string of the form "alma;0.5arcsec" will be
                    parsed into a full 12m ALMA configuration.
    sdantlist       single dish antenna position file
                    Subparameter of obsmode='sd|""'
    sdant           Index of the antenna in the list to use for total power.  
                    Subparameter of obsmode='sd|""'
                    Default: first antenna on the list.
    outframe        spectral frame of MS to create
                    Subparameter of obsmode='sd|""'
    thermalnoise    add thermal noise.
                                        Options: tsys-atm, tsys-manual, ""
                    
                                        This parameter accepts two settings:
                                        - tsys-atm: J. Pardo's ATM library will be used
                                        to construct an atmospheric profile for the ALMA
                                        site: altitude 5000m, ground pressure 650mbar,
                                        relhum=20%, a water layer of user_pwv at altitude
                                        of 2km, the sky brightness temperature returned
                                        by ATM, and internally tabulated receiver
                                        temperatures.
                                        - tsys-manual: instead of using the ATM model,
                                        specify the zenith  sky brightness and opacity
                                        manually.  Noise is added and then the visibility
                                        flux scale is referenced above the atmosphere.
                    
                                        If left unset (empty string) no thermalnoise
                                        corruption is performed.
                    
                                        In either mode, noise is calculated using an
                                        antenna spillover efficiency of 0.96, taper of
                                        0.86, surface accuracy of 25 and 300 microns for
                                        ALMA and EVLA respectively (using the Ruze
                                        formula for surface efficiency), correlator
                                        efficiencies of 0.95 and 0.91 for ALMA and EVLA,
                                        receiver temperatures 
                                        for ALMA of 17, 30, 37, 51, 65,
                                        83,147,196,175,230 K interpolated between 35,
                                        75,110,145,185,230,345,409,675,867 GHz, 
                                        for EVLA of 500, 70,  60,  55,  100, 130, 350 K
                                        interpolated between
                                        0.33,1.47,4.89,8.44,22.5,33.5,43.3 GHz, 
                                        for SMA of 67,  116, 134, 500 K interpolated
                                        between 212.,310.,383.,660. GHz.
                    
                                        Note: These are only approximate numbers and do
                                        not take into account performance at edges of
                                        receiver bands, neither are they guaranteed to
                                        reflect the most recent measurements.  Caveat
                                        emptor. Use the sm tool to add noise if you want
                                        more precise control, and use the ALMA exposure
                                        time calculator for sensitivity numbers in
                                        proposals.
    user_pwv        Precipitable water vapor if constructing an atmospheric
                    model (in mm)
                    Subparameter of thermalnoise='tsys-atm'
    t_ground        Ground/spillover temperature in K
                    Subparameter of
                    thermalnoise='tsys-atm|tsys-manual'
    t_sky           Atmospheric temperature in K
                    Subparameter of thermalnoise='tsys-manual'
    tau0            Zenith opacity at observing frequency
                    Subparameter of thermalnoise='tsys-manual'
                    
                    https://casaguides.nrao.edu/index.php/Corrupt
                    for more information on noise, in particular how
                    to add a phase screen using the toolkit
    seed            Random number seed
                    Subparameter of
                    thermalnoise='tsys-atm|tsys-manual'
    leakage         add cross polarization corruption of this fractional
                    magnitude (interferometer only)
    graphics        View plots on the screen, saved to file, both, or neither
                    Options: screen|file|both|none
    verbose         Print extra information to the logger and terminal
                    Default: False
                    Options: True|False
    overwrite       Overwrite files starting with $project
                    Default: False
                    Options: True|False
    [1;42mRETURNS[1;m            bool

    --------- examples -----------------------------------------------------------

    
    
    
    For more information, see the task pages of simobserve in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """simulation"""
    _info_desc_ = """visibility simulation task"""

    def __call__( self, project='sim', skymodel='', inbright='', indirection='', incell='', incenter='', inwidth='', complist='', compwidth='"8GHz"', comp_nchan=int(1), setpointings=True, ptgfile='$project.ptg.txt', integration='10s', direction=[  ], mapsize=[ '','' ], maptype='hexagonal', pointingspacing='', caldirection='', calflux='1Jy', obsmode='int', refdate='2014/01/01', hourangle='transit', totaltime='7200s', antennalist='', sdantlist='aca.tp.cfg', sdant=int(0), outframe='LSRK', thermalnoise='tsys-atm', user_pwv=float(0.5), t_ground=float(270.), t_sky=float(260.), tau0=float(0.1), seed=int(11111), leakage=float(0.0), graphics='both', verbose=False, overwrite=True ):
        schema = {'project': {'type': 'cStr'}, 'skymodel': {'type': 'cStr'}, 'inbright': {'type': 'cStr'}, 'indirection': {'type': 'cStr'}, 'incell': {'type': 'cStr'}, 'incenter': {'type': 'cStr'}, 'inwidth': {'type': 'cStr'}, 'complist': {'type': 'cStr'}, 'compwidth': {'type': 'cStr'}, 'comp_nchan': {'type': 'cInt'}, 'setpointings': {'type': 'cBool'}, 'ptgfile': {'type': 'cStr'}, 'integration': {'type': 'cStr'}, 'direction': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'mapsize': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'maptype': {'type': 'cStr', 'allowed': [ 'alma', 'square', 'hexagonal', 'ALMA-OT', 'ALMA', 'ALMA2012', 'hex' ]}, 'pointingspacing': {'type': 'cStr'}, 'caldirection': {'type': 'cStr'}, 'calflux': {'type': 'cStr'}, 'obsmode': {'type': 'cStr', 'allowed': [ '', 'int', 'sd' ]}, 'refdate': {'type': 'cStr'}, 'hourangle': {'type': 'cStr'}, 'totaltime': {'type': 'cStr'}, 'antennalist': {'type': 'cStr'}, 'sdantlist': {'type': 'cStr'}, 'sdant': {'type': 'cInt'}, 'outframe': {'type': 'cStr'}, 'thermalnoise': {'type': 'cStr', 'allowed': [ '', 'tsys-atm', 'tsys-manual' ]}, 'user_pwv': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': 0}, 't_ground': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': 0}, 't_sky': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': 0}, 'tau0': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': 0}, 'seed': {'type': 'cInt'}, 'leakage': {'type': 'cFloat', 'coerce': _coerce.to_float, 'min': 0}, 'graphics': {'type': 'cStr', 'allowed': [ 'none', 'file', 'both', 'screen', '' ]}, 'verbose': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}}
        doc = {'project': project, 'skymodel': skymodel, 'inbright': inbright, 'indirection': indirection, 'incell': incell, 'incenter': incenter, 'inwidth': inwidth, 'complist': complist, 'compwidth': compwidth, 'comp_nchan': comp_nchan, 'setpointings': setpointings, 'ptgfile': ptgfile, 'integration': integration, 'direction': direction, 'mapsize': mapsize, 'maptype': maptype, 'pointingspacing': pointingspacing, 'caldirection': caldirection, 'calflux': calflux, 'obsmode': obsmode, 'refdate': refdate, 'hourangle': hourangle, 'totaltime': totaltime, 'antennalist': antennalist, 'sdantlist': sdantlist, 'sdant': sdant, 'outframe': outframe, 'thermalnoise': thermalnoise, 'user_pwv': user_pwv, 't_ground': t_ground, 't_sky': t_sky, 'tau0': tau0, 'seed': seed, 'leakage': leakage, 'graphics': graphics, 'verbose': verbose, 'overwrite': overwrite}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'simobserve', [ 'project=' + repr(_pc.document['project']), 'skymodel=' + repr(_pc.document['skymodel']), 'inbright=' + repr(_pc.document['inbright']), 'indirection=' + repr(_pc.document['indirection']), 'incell=' + repr(_pc.document['incell']), 'incenter=' + repr(_pc.document['incenter']), 'inwidth=' + repr(_pc.document['inwidth']), 'complist=' + repr(_pc.document['complist']), 'compwidth=' + repr(_pc.document['compwidth']), 'comp_nchan=' + repr(_pc.document['comp_nchan']), 'setpointings=' + repr(_pc.document['setpointings']), 'ptgfile=' + repr(_pc.document['ptgfile']), 'integration=' + repr(_pc.document['integration']), 'direction=' + repr(_pc.document['direction']), 'mapsize=' + repr(_pc.document['mapsize']), 'maptype=' + repr(_pc.document['maptype']), 'pointingspacing=' + repr(_pc.document['pointingspacing']), 'caldirection=' + repr(_pc.document['caldirection']), 'calflux=' + repr(_pc.document['calflux']), 'obsmode=' + repr(_pc.document['obsmode']), 'refdate=' + repr(_pc.document['refdate']), 'hourangle=' + repr(_pc.document['hourangle']), 'totaltime=' + repr(_pc.document['totaltime']), 'antennalist=' + repr(_pc.document['antennalist']), 'sdantlist=' + repr(_pc.document['sdantlist']), 'sdant=' + repr(_pc.document['sdant']), 'outframe=' + repr(_pc.document['outframe']), 'thermalnoise=' + repr(_pc.document['thermalnoise']), 'user_pwv=' + repr(_pc.document['user_pwv']), 't_ground=' + repr(_pc.document['t_ground']), 't_sky=' + repr(_pc.document['t_sky']), 'tau0=' + repr(_pc.document['tau0']), 'seed=' + repr(_pc.document['seed']), 'leakage=' + repr(_pc.document['leakage']), 'graphics=' + repr(_pc.document['graphics']), 'verbose=' + repr(_pc.document['verbose']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
        return _end_log( _logging_state_, 'simobserve', _simobserve_t( _pc.document['project'], _pc.document['skymodel'], _pc.document['inbright'], _pc.document['indirection'], _pc.document['incell'], _pc.document['incenter'], _pc.document['inwidth'], _pc.document['complist'], _pc.document['compwidth'], _pc.document['comp_nchan'], _pc.document['setpointings'], _pc.document['ptgfile'], _pc.document['integration'], _pc.document['direction'], _pc.document['mapsize'], _pc.document['maptype'], _pc.document['pointingspacing'], _pc.document['caldirection'], _pc.document['calflux'], _pc.document['obsmode'], _pc.document['refdate'], _pc.document['hourangle'], _pc.document['totaltime'], _pc.document['antennalist'], _pc.document['sdantlist'], _pc.document['sdant'], _pc.document['outframe'], _pc.document['thermalnoise'], _pc.document['user_pwv'], _pc.document['t_ground'], _pc.document['t_sky'], _pc.document['tau0'], _pc.document['seed'], _pc.document['leakage'], _pc.document['graphics'], _pc.document['verbose'], _pc.document['overwrite'] ) )

simobserve = _simobserve( )

