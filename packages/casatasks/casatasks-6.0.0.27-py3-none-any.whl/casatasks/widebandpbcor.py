##################### generated by xml-casa (v2) from widebandpbcor.xml #############
##################### 56faf64d36bc394b34f3d061962c207a ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_widebandpbcor import widebandpbcor as _widebandpbcor_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _widebandpbcor:
    """
    widebandpbcor ---- Wideband PB-correction on the output of the MS-MFS algorithm

    WideBand Primary-beam correction. It computes a set of PBs at the specified frequencies, calculates Taylor-coefficient images that represent the PB spectrum, performs a polynomial division to PB-correct the output Taylor-coefficient images from clean(nterms>1), and recompute spectral index (and curvature) using the PB-corrected Taylor-coefficient images

    --------- parameter descriptions ---------------------------------------------

    vis        Name of measurement set.
    imagename  Name-prefix of multi-termimages to operate on.
    nterms     Number of taylor terms to use
    threshold  Intensity above which to re-calculate spectral index
    action     PB-correction (pbcor) or only calc spectral-index (calcalpha)
    reffreq    Reference frequency (if specified in clean)
    pbmin      PB threshold below which to not correct
    field      Fields to include in the PB calculation
    spwlist    List of N spw ids
    chanlist   List of N channel ids
    weightlist List of N weights (relative)
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    
    Wide-band Primary-beam correction
    
    (1) Compute a set of Primary Beams at the specified frequencies
    (2) Calculate Taylor-coefficient images that represent the PB spectrum
    (3) Perform a polynomial division to PB-correct the output Taylor-coefficient
    images from the MS-MFS algorithm ( clean(nterms>1) )
    (4) Recompute spectral index (and curvature) using the corrected Taylor-coefficient images.
    
    [ Optionally, skip PB-correction, and only recalculate spectral index
    with a different threshold ]
    
    This is a temporary task, meant for use until a widebandpbcor option is enabled from
    within the tclean task.
    
    An output directory named imagename.pbcor.workdirectory is created, and filled with
    an image-cube of the evaluated primary beams at all specified frequencies,
    Taylor-coefficients, and a 'spectral index' due to the primary beam.
    Note that for the actual pb-correction, only the Taylor-coefficient images are used.
    
    Task parameters :
    
    vis -- Name of input visibility file
    example : vis = 'ngc5921.ms'
    Only one MS can be specified here, and it must contain at-least one
    timestep of data at all frequencies required to calculate the PB spectrum.
    
    Note : If the imaging was done using a list of MSs, and any one MS covers
    the entire frequency range, then it will suffice to supply only that one
    MS.  This MS is used only to extract frequencies at which to compute
    primary beams before fitting Taylor polynomials.
    
    Note : In case of multiple MSs that cover different frequency ranges,
    please split/concat a small fraction of the data from each MS to form
    one single MS that contains the full frequency range. This task uses
    the MS only for frequency meta-data.
    
    imagename -- Pre-name of input and output images. Same as in the clean task.
    example : imagename = 'run1'
    Restored-images ( run1.image.tt0,etc) and residual images ( run1.residual.tt0, etc.. )
    must be available on disk.
    
    nterms -- Number of Taylor terms to be used to model the frequency-dependence
    of the primary beam.
    example : nterms = 2
    nterms must be less than or equal to the number of frequencies specified via
    spwlist, chanlist and weightlist.
    nterms=1 will do a standard division by the average PB computed over all
    specified frequencies.
    
    threshold -- Flux level in the restored intensity map, below which to not
    recalculate spectral index.
    example : threshold = '0.1Jy'
    
    action -- Choice of PB-correction with spectral-index recalculation
    or only spectral-index recalculation (using the specified threshold)
    example : action='pbcor'  or action='calcalpha'
    
    With action='pbcor', the following output images are created/overwritten.
    
    - imagename.pbcor.workdirectory  :  This directory contains an image cube with
    PBs at the list of specified frequencies, and Taylor-coefficient images that
    describe the PB spectrum.
    -  imagename.pb.cube : Concatenated cube of PBs
    -  imagename.pb.tt0, tt1, ... : Taylor coefficients describing the PB spectrum
    -  imagename.pb.alpha : Spectral index of the PB (for information only)
    - imagename.image.pbcor.tt0,tt1,... : Corrected Taylor coefficients
    - imagename.pbcor.image.alpha : Corrected Spectral Index
    - imagename.pbcor.image.alpha.error : New error map.
    
    With action='calcalpha', the following output images are created/overwritten
    - imagename.image.alpha : Corrected Spectral Index
    - imagename.image.alpha.error : New error map.
    
    reffreq -- Reference frequency about which the Taylor-expansion is defined.
    example : reffreq = '1.5GHz'
    If left unspecified, it is picked from the input restored image.
    Note : If reffreq was specified during task clean to produce the images
    it must be specified here.
    
    pbmin -- PB gain level below which to not compute Taylor-coefficients or
    apply PB-corrections.
    example : pbmin = 0.1
    
    field -- Field selection for the Primary Beam calculation.
    example : field = '3C291'
    This field selection must be identical to that used in 'clean'
    
    spwlist -- List of SPW ids for which to make separate Primary Beams
    chanlist -- List of channel ids, within the above SPW ids, at which to make PBs.
    
    example :  spwlist=[0,1,2], chanlist=[32,32,32]
    Make PBs at frequencies corresponding to channel 32 of
    spws 0,1 and 2.
    example :  spwlist=[0,0,0], chanlist=[0,10,20]
    Make PBs at frequencies corresponding to channels 0,10,20
    of spw 0
    
    Primary beams are computed at these specified frequencies and
    for pointings selected by 'field'.  Taylor-coefficients that represent
    the PB spectrum are computed from these images.
    
    weightlist -- List of relative weights to apply to the PBs selected via the
    spwlist,chanlist parameters. Weights should approximately represent the
    sum-of-weights applicable during imaging each of these frequencies.
    example : weightlist=[0.5,1.0,1.0]
    The first frequency had less usable data due to flagged RFI,
    but the other two had relatively equal weight.
    These weights are applied to the PB spectrum while computing
    PB Taylor-coefficients. Setting weights to anything other than 1.0
    makes a difference only with very lop-sided weights.
    
    
    NOTE : One frequently asked question relates to how best to choose spwlist,chanlist,weightlist.
    
    The basic principles at work here are
    
    (1) Imaging = fitting a polynomial to a noisy spectrum (with weights).
    The polynomial represents I(nu) x P(nu)
    
    (2) PB model = fitting a polynomial to a collection of PBs at different
    frequencies (with weights). The polynomial represents P(nu)
    
    (3) Dividing the two polynomials via their coefficients.
    
    Steps (1) and (2) need to be consistent with each other (w.r.to frequencies used
    and their weights) to produce fits that when divided give exactly only the sky parameters.
    Unless you use the same math (and code) for both, they won't be exactly consistent.
    The way to minimize differences is to choose a list of frequencies (via spws/chans)
    and weights for widebandpbcor that resemble the frequency structure of the data you
    have used for imaging.
    For example, if you have 3 spws in your data and the middle spw has a factor of 10
    less weight in the data, then, using just one channel each from the two outer spws for
    the PB modeling may be close enough to using all 3 spws. Or, you could also pick
    the middle channel of all 3 spws, and assign weights as [1.0, 0.1, 1.0].
    
    
    


    """

    _info_group_ = """imaging"""
    _info_desc_ = """Wideband PB-correction on the output of the MS-MFS algorithm"""

    def __call__( self, vis='', imagename='', nterms=int(2), threshold='', action='pbcor', reffreq='', pbmin=float(0.2), field='', spwlist=[ int() ], chanlist=[ int() ], weightlist=[ float() ] ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'imagename': {'type': 'cStr'}, 'nterms': {'type': 'cInt'}, 'threshold': {'type': 'cStr'}, 'action': {'type': 'cStr', 'allowed': [ 'pbcor', 'calcalpha' ]}, 'reffreq': {'type': 'cStr'}, 'pbmin': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'field': {'type': 'cStr'}, 'spwlist': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'chanlist': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'weightlist': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}}
        doc = {'vis': vis, 'imagename': imagename, 'nterms': nterms, 'threshold': threshold, 'action': action, 'reffreq': reffreq, 'pbmin': pbmin, 'field': field, 'spwlist': spwlist, 'chanlist': chanlist, 'weightlist': weightlist}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'widebandpbcor', [ 'vis=' + repr(_pc.document['vis']), 'imagename=' + repr(_pc.document['imagename']), 'nterms=' + repr(_pc.document['nterms']), 'threshold=' + repr(_pc.document['threshold']), 'action=' + repr(_pc.document['action']), 'reffreq=' + repr(_pc.document['reffreq']), 'pbmin=' + repr(_pc.document['pbmin']), 'field=' + repr(_pc.document['field']), 'spwlist=' + repr(_pc.document['spwlist']), 'chanlist=' + repr(_pc.document['chanlist']), 'weightlist=' + repr(_pc.document['weightlist']) ] )
        return _end_log( _logging_state_, 'widebandpbcor', _widebandpbcor_t( _pc.document['vis'], _pc.document['imagename'], _pc.document['nterms'], _pc.document['threshold'], _pc.document['action'], _pc.document['reffreq'], _pc.document['pbmin'], _pc.document['field'], _pc.document['spwlist'], _pc.document['chanlist'], _pc.document['weightlist'] ) )

widebandpbcor = _widebandpbcor( )

