##################### generated by xml-casa (v2) from specflux.xml ##################
##################### edf88dbe880251182e1e339469f85d6e ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_specflux import specflux as _specflux_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _specflux:
    """
    specflux ---- Report spectral profile and calculate spectral flux over a user specified region

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    region    Region selection. Default is to use the full image.
    box       Rectangular region to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes.
    mask      Mask to use. Default is none.
    stretch   Stretch the mask if necessary and possible?
    function  Aggregate function to use for computing per channel values. Supported values are "flux density", "mean", "median", "sum". Minimal match supported.
    unit      Unit to use for the spectral flux calculation. Must be conformant with a typical spectral axis unit.
    major     Major axis of overriding restoring beam. If specified, must be a valid quantity.
    minor     Minor axis of overriding restoring beam. If specified, must be a valid quantity
    logfile   File which to write details. Default is to not write to a file.
    overwrite Overwrite exisitng ouput file if it exists?
    [1;42mRETURNS[1;m      record

    --------- examples -----------------------------------------------------------

    
    PARAMETER SUMMARY
    imagename        Name of the input (CASA, FITS, MIRIAD) image
    region           Region selection. Default is to use
    the full image.
    box              Rectangular region to select in direction plane.
    for details. Default is to use the entire direction plane.
    chans            Channels to use. Default is to use
    all channels.
    stokes           Stokes planes to use. Default is to use
    all Stokes planes.
    mask             Mask to use. Default is none.
    stretch          Stretch the input mask if necessary and possible. Only used if a mask is specified.
    
    function         Aggregate function to use for computing per channel values. Supported values are
    "flux density", "mean", "median", "sum". Minimal match supported.
    unit             Unit to use for the spectral flux calculation. Must be conformant with a typical
    spectral axis unit (ie something conformant with a velocity, frequency, or length).
    Velocity units may only be used if the spectral coordinate has a rest frequency and
    if it is > 0.
    major            Major axis of overriding restoring beam. If specified, must be a valid quantity
    If specified, minor must also be specified. The overriding beam is used for computing
    flux and flux density values. Ignored if the image brightness units do not contain
    "/beam". Example "4arcsec".
    minor            Minor axis of overriding restoring beam. If specified, must be a valid quantity.
    If specified, major must also be specified. See help on parameter major for details.
    Example: "3arcsec".
    logfile          Name of file to which to write tabular output. Default is to not write to a file.
    overwrite        Controls if an already existing log file by the
    same name can be overwritten. If true, the user is not prompted, the file
    if it exists is automatically overwritten.
    
    This application retrieves details of an image spectrum which has been integrated over a specified
    region (or the entire image if no region has been specified).
    
    One may specify which function to use to aggregate pixel values using the function parameter. Supported
    values are "flux density", "mean", "median", and "sum". Minimal match is supported.
    
    The spectral flux is reported in units flux density consistent with the image brightness unit times the
    specified spectral unit (eg, Jy*km/s, K*arcsec2*km/s). If the units are K*arcsec2..., multiply the
    reported value by 2.3504430539098e-8*d*d, where d is the distance in pc, to convert to units of K*pc2...
    If provided, major and minor will be used to compute the beam size, and hence the per channel flux
    densities (if function="flux density"), overriding the input image beam information, if present.
    
    # write spectrum to file that has been integrated over
    # rectangular region, using only pixels with non-negative values.
    # if the log file already exists, overwrite it with the new data.
    specflux(imagename="my.im", box="10,10,45,50", mask="my.im>=0", unit="km/s", logfile="my.log", overwrite=True)
    
    # Extract the spectral profile using "sum" as the aggregate function from a cube over a given region:
    specflux(imagename="myimage.image", box="10,10,45,50", mask="my.im>=0", function="sum", unit="km/s", logfile="profile.log", overwrite=True)
    
    # Calculate the integrated line flux over a given region and channel range
    # (this value will be reported as "Total Flux" in the output of specflux)
    specflux(imagename="myimage.image", region="myregion.crtf", chans="14~25", unit="km/s", logfile="integrated_line_flux.log", overwrite=True)


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Report spectral profile and calculate spectral flux over a user specified region"""

    def __call__( self, imagename='', region='', box='', chans='', stokes='', mask='', stretch=False, function='flux density', unit='km/s', major='', minor='', logfile='', overwrite=False ):
        schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'region': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'box': {'type': 'cStr'}, 'chans': {'type': 'cStr'}, 'stokes': {'type': 'cStr'}, 'mask': {'type': 'cStr'}, 'stretch': {'type': 'cBool'}, 'function': {'type': 'cStr'}, 'unit': {'type': 'cStr'}, 'major': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'minor': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'logfile': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}}
        doc = {'imagename': imagename, 'region': region, 'box': box, 'chans': chans, 'stokes': stokes, 'mask': mask, 'stretch': stretch, 'function': function, 'unit': unit, 'major': major, 'minor': minor, 'logfile': logfile, 'overwrite': overwrite}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'specflux', [ 'imagename=' + repr(_pc.document['imagename']), 'region=' + repr(_pc.document['region']), 'box=' + repr(_pc.document['box']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'stretch=' + repr(_pc.document['stretch']), 'function=' + repr(_pc.document['function']), 'unit=' + repr(_pc.document['unit']), 'major=' + repr(_pc.document['major']), 'minor=' + repr(_pc.document['minor']), 'logfile=' + repr(_pc.document['logfile']), 'overwrite=' + repr(_pc.document['overwrite']) ] )
        return _end_log( _logging_state_, 'specflux', _specflux_t( _pc.document['imagename'], _pc.document['region'], _pc.document['box'], _pc.document['chans'], _pc.document['stokes'], _pc.document['mask'], _pc.document['stretch'], _pc.document['function'], _pc.document['unit'], _pc.document['major'], _pc.document['minor'], _pc.document['logfile'], _pc.document['overwrite'] ) )

specflux = _specflux( )

