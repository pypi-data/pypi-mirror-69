##################### generated by xml-casa (v2) from impbcor.xml ###################
##################### 46477554fa6713e92bf4cae56c722f18 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_impbcor import impbcor as _impbcor_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _impbcor:
    """
    impbcor ---- Construct a primary beam corrected image from an image and a primary beam pattern.

    
    Correct an image for primary beam attenuation using an image of the
    primary beam pattern. The primary beam pattern can be provided as an
    image, in which case 1. it must have the same shape as the input image
    and its coordinate system must be the same, or 2. it must be a 2-D
    image in which case its coordinate system must consist of a (2-D)
    direction coordinate which is the same as the direction coordinate in
    the input image and its direction plane must be the same shape as that
    of the input image. Alternatively, pbimage can be an array of pixel
    values in which case the same dimensionality and shape constraints
    apply.
    
    One can choose between dividing the image by the primary beam pattern
    (mode="divide") or multiplying the image by the primary beam pattern
    (mode="multiply"). One can also choose to specify a cutoff limit for
    the primary beam pattern. For mode="divide", for all pixels below this
    cutoff in the primary beam pattern, the output image will be
    masked. In the case of mode="multiply", all pixels in the output will
    be masked corresponding to pixels with values greater than the cutoff
    in the primary beam pattern. A negative value for cutoff means that no
    cutoff will be applied, which is the default.

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input (CASA, FITS, MIRIAD) image
    pbimage   Name of the image (CASA, FITS, MIRIAD) of the primary
              beam pattern or an array of pixel values.
              Default: ''
    outfile   Name of output CASA image. 
              Default: none. Must be specified.
    overwrite If output file is specified, controls if an already
              existing file by the same name can be overwritten. 
              Default: True
              Options: True|False
              
              If true, the user is not prompted, the file if it
              exists is automatically overwritten.
    box       Rectangular region to select in direction plane.
              Default: '' (use the entire direction plane)
    region    Region selection. 
              Default: '' (use the full image)
    chans     Channels to use. 
              Default: '' (use all channels)
    stokes    Stokes planes to use.
              Default: '' (use all Stokes planes)
    mask      Mask to use.
              Default: none
    mode      Divide or multiply the image by the primary beam image. 
              Default: 'divide'
              
              Minimal match supported.
    cutoff    Primary beam cutoff.
              Default: -1.0 (no cutoff)
              
              If mode is "d", all values less than this will be
              masked. If "m", all values greater will be
              masked. Less than 0, no cutoff (default)
    stretch   Stretch the mask if necessary and possible? 
              Default: False
              Options: False|True
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPBCOR IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Construct a primary beam corrected image from an image and a primary beam pattern."""

    def __call__( self, imagename='', pbimage=[ ], outfile='', overwrite=False, box='', region='', chans='', stokes='', mask='', mode='divide', cutoff=float(-1.0), stretch=False ):
        schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'pbimage': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'outfile': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}, 'box': {'type': 'cStr'}, 'region': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'chans': {'type': 'cStr'}, 'stokes': {'type': 'cStr'}, 'mask': {'type': 'cStr'}, 'mode': {'type': 'cStr'}, 'cutoff': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'stretch': {'type': 'cBool'}}
        doc = {'imagename': imagename, 'pbimage': pbimage, 'outfile': outfile, 'overwrite': overwrite, 'box': box, 'region': region, 'chans': chans, 'stokes': stokes, 'mask': mask, 'mode': mode, 'cutoff': cutoff, 'stretch': stretch}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'impbcor', [ 'imagename=' + repr(_pc.document['imagename']), 'pbimage=' + repr(_pc.document['pbimage']), 'outfile=' + repr(_pc.document['outfile']), 'overwrite=' + repr(_pc.document['overwrite']), 'box=' + repr(_pc.document['box']), 'region=' + repr(_pc.document['region']), 'chans=' + repr(_pc.document['chans']), 'stokes=' + repr(_pc.document['stokes']), 'mask=' + repr(_pc.document['mask']), 'mode=' + repr(_pc.document['mode']), 'cutoff=' + repr(_pc.document['cutoff']), 'stretch=' + repr(_pc.document['stretch']) ] )
        return _end_log( _logging_state_, 'impbcor', _impbcor_t( _pc.document['imagename'], _pc.document['pbimage'], _pc.document['outfile'], _pc.document['overwrite'], _pc.document['box'], _pc.document['region'], _pc.document['chans'], _pc.document['stokes'], _pc.document['mask'], _pc.document['mode'], _pc.document['cutoff'], _pc.document['stretch'] ) )

impbcor = _impbcor( )

