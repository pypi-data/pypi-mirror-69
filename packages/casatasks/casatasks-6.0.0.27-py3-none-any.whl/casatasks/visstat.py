##################### generated by xml-casa (v2) from visstat.xml ###################
##################### d4f21bf7d9ad2f7b6b8def291f70b5d7 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_visstat import visstat as _visstat_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _visstat:
    """
    visstat ---- Displays statistical information from a MeasurementSet, or from a Multi-MS

    --------- parameter descriptions ---------------------------------------------

    vis                   Name of MeasurementSet or Multi-MS
    axis                  Values on which to compute statistics
    datacolumn            Which data column to use (data, corrected, model, float_data)
    useflags              Take flagging into account?
    spw                   spectral-window/frequency/channel
    field                 Field names or field index numbers: \'\'==>all, field=\'0~2,3C286\'
    selectdata            More data selection parameters (antenna, timerange etc)
    antenna               antenna/baselines: \'\'==>all, antenna = \'3,VA04\'
    uvrange               uv range: \'\'==>all; uvrange = \'0~100klambda\', default units=meters
    timerange             time range: \'\'==>all, timerange=\'09:14:0~09:54:0\'
    correlation           Select data based on correlation
    scan                  scan numbers: \'\'==>all
    array                 (sub)array numbers: \'\'==>all
    observation           observation ID number(s): \'\' = all
    timeaverage           Average data in time.
    timebin               Bin width for time averaging.
    timespan              Span the timebin across scan, state or both.
    maxuvwdistance        Maximum separation of start-to-end baselines that can be included in an average. (meters)
    disableparallel       Hidden parameter for internal use only. Do not change it!
    ddistart              Hidden parameter for internal use only. Do not change it!
    taql                  Table query for nested selections
    monolithic_processing Hidden parameter for internal use only. Do not change it!
    intent                Select data by scan intent.
    reportingaxes         Which reporting axis to use (ddid, field, integration)
    [1;42mRETURNS[1;m                  record

    --------- examples -----------------------------------------------------------

    
    
    This task returns statistical information about data in a MeasurementSet
    or Multi-MS.
    
    The following statistics are computed: mean value, sum of values, sum of
    squared values, median, median absolute deviation, first and third
    quartiles, minimum, maximum, variance, standard deviation, and root mean
    square.
    
    Statistics may be computed on any of the following values: flag, antenna1,
    antenna2, feed1, feed2, field_id, array_id, data_desc_id, flag_row,
    interval, scan_number, time, weight_spectrum, amplitude, phase, real,
    imaginary, and uvrange (for the 'axis' parameter value, 'amp' is treated
    as an alias for amplitude, as are 'imag' for imaginary, and 'scan' for
    scan_number.)
    
    The 'reportingaxes' argument is used to partition the sample set along an
    axis. For example, setting its value to 'ddid' will result in the
    statistics of the chosen sample values partitioned by unique values of the
    data description id. Thus setting 'axis' to 'amp' and 'reportingaxes' to
    'ddid' will report statistics of visibility amplitudes for each unique
    value of data description id in the MeasurementSet.
    
    Optionally, the statistical information can be computed based only
    on a given subset of the MeasurementSet.
    
    Note: If the MS consists of inhomogeneous data, for example several
    spectral windows each having a different number of channels, it may be
    necessary to use selection parameters to select a homogeneous subset of
    the MS, e.g. spw='2'.
    
    Keyword arguments:
    
    vis  --- Name of input MeasurementSet or Multi-MS
    default: '', example: vis='my.ms'
    
    axis -- Which data to analyze.
    
    default: 'amplitude'
    axis='phase'
    axis='imag'
    axis='scan_number'
    axis='flag'
    
    The phase of a complex number is in radians in the range [-pi; pi].
    
    
    datacolumn -- Which data column to use for complex data.
    default: 'data'
    datacolumn='data'
    datacolumn='corrected'
    datacolumn='model'
    datacolumn='float_data'
    
    useflags -- Take MS flags into account?
    default: True
    useflags=False
    useflags=True
    If useflags=False, flagged values are included in the statistics.
    If useflags=True, any flagged values are not used in the statistics.
    
    spw -- Select data based on spectral window and channels
    default: '' (all); example: spw='1'
    spw='<2' #spectral windows less than 2
    spw='>1' #spectral windows greater than 1
    spw='0:0~10' # first 10 channels from spw 0
    spw='0:0~5;56~60' # multiple separated channel chunks.
    
    field -- Select data based on field id(s) or name(s)
    default: '' (all); example: field='1'
    field='0~2' # field ids inclusive from 0 to 2
    field='3C*' # all field names starting with 3C
    
    selectdata -- Other data selection parameters
    default: True
    antenna -- Select data based on baseline
    default: '' (all); example: antenna='5&6' baseline 5-6
    antenna='5&6;7&8' #baseline 5-6 and 7-8
    antenna='5' # all baselines with antenna 5
    antenna='5,6' # all baselines with antennas 5 and 6
    correlation -- Correlation types
    default: '' (all);
    example: correlation='RR LL'
    uvrange -- Select data within uvrange (default units meters)
    default: '' (all); example:
    uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda
    uvrange='>4klambda';uvranges greater than 4 kilo-lambda
    uvrange='0~1000km'; uvrange in kilometers
    timerange  -- Select data based on time range:
    default = '' (all); example,
    timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
    Note: YYYY/MM/DD can be dropped as needed:
    timerange='09:14:0~09:54:0' # this time range
    timerange='09:44:00' # data within one integration of time
    timerange='>10:24:00' # data after this time
    timerange='09:44:00+00:13:00' #data 13 minutes after time
    scan -- Select data based on scan number
    default: '' (all); example: scan='>3'
    array -- Selection based on the antenna array
    observation -- Selection by observation ID(s).
    default: '' (all); example: observation='1~3'
    
    
    
    
    --- Time averaging parameters ---
    timeaverage -- Average data in time. Flagged data will be included in the
    average calculation, unless the parameter useflags is set to True. In this
    case only partially flagged rows will be used in the average.
    default: False
    
    timebin -- Bin width for time averaging.
    default: '0s'
    
    timespan -- Let the timebin span across scan, state or both.
    State is equivalent to sub-scans. One scan may have several
    state ids. For ALMA MSs, the sub-scans are limited to about
    30s duration each. In these cases, the task will automatically
    add state to the timespan parameter. To see the number of states
    in an MS, use the msmd tool. See help msmd.
    
    default: '' (separate time bins by both of the above)
    options: 'scan', 'state', 'state,scan'
    
    examples:
    timespan = 'scan'; can be useful when the scan number
    goes up with each integration as in many WSRT MSs.
    timespan = ['scan', 'state']: disregard scan and state
    numbers when time averaging.
    timespan = 'state,scan'; same as above.
    
    maxuvwdistance -- Provide a maximum separation of start-to-end baselines
    that can be included in an average. (int)
    default: 0.0 (given in meters)
    
    
    
    
    
    
    
    


    """

    _info_group_ = """information"""
    _info_desc_ = """Displays statistical information from a MeasurementSet, or from a Multi-MS"""

    def __call__( self, vis='', axis='amplitude', datacolumn='data', useflags=True, spw='', field='', selectdata=True, antenna='', uvrange='', timerange='', correlation='', scan='', array='', observation='', timeaverage=False, timebin='0s', timespan='', maxuvwdistance=float(0.0), disableparallel=False, ddistart=int(-1), taql='', monolithic_processing=False, intent='', reportingaxes='ddid' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'axis': {'type': 'cStr', 'allowed': [ 'data_desc_id', 'field_id', 'flag', 'imaginary', 'feed1', 'flag_row', 'interval', 'imag', 'phase', 'array_id', 'amp', 'real', 'antenna2', 'weight_spectrum', 'scan_number', 'amplitude', 'uvrange', 'antenna1', 'feed2', 'time', 'scan' ]}, 'datacolumn': {'type': 'cStr', 'allowed': [ 'data', 'corrected', 'model', 'float_data' ]}, 'useflags': {'type': 'cBool'}, 'spw': {'type': 'cStr'}, 'field': {'type': 'cStr'}, 'selectdata': {'type': 'cBool'}, 'antenna': {'type': 'cStr'}, 'uvrange': {'type': 'cStr'}, 'timerange': {'type': 'cStr'}, 'correlation': {'type': 'cStr'}, 'scan': {'type': 'cStr'}, 'array': {'type': 'cStr'}, 'observation': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}]}, 'timeaverage': {'type': 'cBool'}, 'timebin': {'type': 'cStr'}, 'timespan': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'maxuvwdistance': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'disableparallel': {'type': 'cBool'}, 'ddistart': {'type': 'cInt'}, 'taql': {'type': 'cStr'}, 'monolithic_processing': {'type': 'cBool'}, 'intent': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cInt'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'reportingaxes': {'type': 'cStr', 'allowed': [ 'ddid', 'field', 'integration' ]}}
        doc = {'vis': vis, 'axis': axis, 'datacolumn': datacolumn, 'useflags': useflags, 'spw': spw, 'field': field, 'selectdata': selectdata, 'antenna': antenna, 'uvrange': uvrange, 'timerange': timerange, 'correlation': correlation, 'scan': scan, 'array': array, 'observation': observation, 'timeaverage': timeaverage, 'timebin': timebin, 'timespan': timespan, 'maxuvwdistance': maxuvwdistance, 'disableparallel': disableparallel, 'ddistart': ddistart, 'taql': taql, 'monolithic_processing': monolithic_processing, 'intent': intent, 'reportingaxes': reportingaxes}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'visstat', [ 'vis=' + repr(_pc.document['vis']), 'axis=' + repr(_pc.document['axis']), 'datacolumn=' + repr(_pc.document['datacolumn']), 'useflags=' + repr(_pc.document['useflags']), 'spw=' + repr(_pc.document['spw']), 'field=' + repr(_pc.document['field']), 'selectdata=' + repr(_pc.document['selectdata']), 'antenna=' + repr(_pc.document['antenna']), 'uvrange=' + repr(_pc.document['uvrange']), 'timerange=' + repr(_pc.document['timerange']), 'correlation=' + repr(_pc.document['correlation']), 'scan=' + repr(_pc.document['scan']), 'array=' + repr(_pc.document['array']), 'observation=' + repr(_pc.document['observation']), 'timeaverage=' + repr(_pc.document['timeaverage']), 'timebin=' + repr(_pc.document['timebin']), 'timespan=' + repr(_pc.document['timespan']), 'maxuvwdistance=' + repr(_pc.document['maxuvwdistance']), 'disableparallel=' + repr(_pc.document['disableparallel']), 'ddistart=' + repr(_pc.document['ddistart']), 'taql=' + repr(_pc.document['taql']), 'monolithic_processing=' + repr(_pc.document['monolithic_processing']), 'intent=' + repr(_pc.document['intent']), 'reportingaxes=' + repr(_pc.document['reportingaxes']) ] )
        return _end_log( _logging_state_, 'visstat', _visstat_t( _pc.document['vis'], _pc.document['axis'], _pc.document['datacolumn'], _pc.document['useflags'], _pc.document['spw'], _pc.document['field'], _pc.document['selectdata'], _pc.document['antenna'], _pc.document['uvrange'], _pc.document['timerange'], _pc.document['correlation'], _pc.document['scan'], _pc.document['array'], _pc.document['observation'], _pc.document['timeaverage'], _pc.document['timebin'], _pc.document['timespan'], _pc.document['maxuvwdistance'], _pc.document['disableparallel'], _pc.document['ddistart'], _pc.document['taql'], _pc.document['monolithic_processing'], _pc.document['intent'], _pc.document['reportingaxes'] ) )

visstat = _visstat( )

