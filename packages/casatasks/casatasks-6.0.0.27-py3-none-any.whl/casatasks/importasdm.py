##################### generated by xml-casa (v2) from importasdm.xml ################
##################### d5576137cce46dde1eda68ba8b57d4ca ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from .private.task_importasdm import importasdm as _importasdm_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log

class _importasdm:
    """
    importasdm ---- Convert an ALMA Science Data Model observation into a CASA visibility file (MS)

    
    Convert an ALMA Science Data Model observation into a CASA visibility
    file (MS)

    --------- parameter descriptions ---------------------------------------------

    asdm                     Name of input ASDM file (directory)
                             Default: none
                             
                                Example: asdm='ExecBlock3'
    vis                      Root ms name. 
                             Default: none
                             
                             Note that a prefix (.ms) is NOT appended to this
                             name.
    createmms                Create a Multi-MS partitioned according to the given
                             separation axis.
                             Default: False
                             Options: False|True
                             
                             For more detailed documentation on partition,
                             Multi-MS and the MPI use in CASA, please see CASA
                             Docs (https://casa.nrao.edu/casadocs/).
    separationaxis           Axis to do parallelization across
                             Default: 'auto'
                             Options: 'scan', 'spw', 'baseline', 'auto'
                             
                             * auto: will partition per scan/spw to obtain
                               optimal load balancing with the following
                               criteria:    
                               1 - Maximize the scan/spw/field distribution
                               across sub-MSs
                               2 - Generate sub-MSs with similar size
                             * 'scan' or 'spw': will partition the MS into
                               scan or spw. The individual sub-MSs may not be
                               balanced with respect to the number of rows.
                             * 'baseline': mostly useful for Single-Dish
                               data. This axis will partition the MS based on
                               the available baselines. If the user wants only
                               auto-correlations, use the
                               ocorr_mode='ao'. Note that if numsubms='auto',
                               partition will try to create as many subMSs as
                               the number of available servers in the
                               cluster. If the user wants to have one subMS
                               for each baseline, set the numsubms parameter
                               to a number higher than the number of baselines
                               to achieve this.
    numsubms                 The number of sub-MSs to create in the Multi-Ms.
                             Default: 'auto'
                             Options: any integer number (example: numsubms=4)
                             
                             The default 'auto' is to partition using the
                             number of available servers given when launching
                             CASA. If the task is unable to determine the
                             number of running servers, or the user did not
                             start CASA using mpicasa, numsubms will use 8 as
                             the default.
                             
                                Example: Launch CASA with 5 engines, where 4
                                of them will be used to create the MMS (the
                                first engine is used as the MPIClient):
                                mpicasa -n 5 casa --nogui --log2term
                                CASA> importasdm('uid__A1', createmms=True)
    corr_mode                Correlation mode to be considered on input.
                             Default: 'all'
                             Options: ao, co, ac, or all
    srt                      Spectral resolution type.
                             Default: 'all'
                             Options: fr, ca, bw, or all
    time_sampling            Specifies the time sampling (INTEGRATION and/or
                             SUBINTEGRATION) to be considered on input. 
                             Default: 'all'
                             Options: i, si, or all
                             
                             A quoted string containing a sequence of i, si,
                             or all separated by whitespaces is expected
    ocorr_mode               Output data for correlation mode AUTO_ONLY (ao) or
                             CROSS_ONLY (co) or CROSS_AND_AUTO (ca)
                             Default: 'ca'
                             Options: ao, co, ca
    compression              Produce compressed columns in the resulting measurement
                             set.
                             Default: False
                             Options: False|True
    lazy                     Make the MS DATA column read the ASDM Binary data
                             directly (faster import, smaller MS).
                             Default: False
                             Options: False|True
                             
                             Instead of writing a copy of the visibilities
                             into a standard DATA column, lazy=True will make
                             importasdm only write a lookup-table such that
                             later access to the DATA column will read the
                             ASDM binary visibility data directly. This
                             requires that the ASDM not be removed from its
                             location as long the the DATA column is
                             needed. Use method ms.asdmref() to query and
                             manipulate the reference to the ASDM.
                             
                             lazy=True will save ca. 50% disk space and
                             accelerate the DATA column access by
                             ca. 10%. lazy=True will only work when there is
                             visibility data in the ASDM, not with pure
                             radiometer data.
    asis                     Creates verbatim copies of the ASDM tables in the output
                             measurement set.
                             Default: none
                             
                             The value given to this option must be a list of
                             table names separated by space characters; the
                             wildcard character '*' is  allowed in table
                             names.
    wvr_corrected_data       Specifies which values are considerd in the ASDM binary
                             data to fill the DATA column in the MAIN table of the MS.
                             Default: no
                             Options: no|yes|both
                             
                             * no: uncorrected data
                             * yes: corrected data
                             * both: for corrected and uncorrected data. Note
                               if both is selected, two measurement sets are
                               created, one with uncorrected data and the
                               other with corrected data (which name is
                               suffixed by '-wvr-corrected')
    scans                    Processes only the scans specified in the option's value.
                             Default: none (all scans)
                             
                             This value is a semicolon separated list of scan
                             specifications. A scan specification consists in
                             an exec bock index  followed by the character ':'
                             followed by a comma separated list of scan
                             indexes or scan index ranges. A scan index is
                             relative to the exec block it belongs to. Scan
                             indexes are  1-based while exec blocks's are
                             0-based. 
                             
                                Examples: 
                                '0:1' 
                                '2:2~6' 
                                '0:1;1:2~6,8;2:,3:24~30'
                                '1,2' 
                                '3:' alone will be interpreted as 'all the
                                scans of the exec block#3'. An scan index or a
                                scan index range not preceded by an exec block
                                index will be interpreted as 'all the scans
                                with such indexes in all the exec blocks'.
    ignore_time              All the rows of the tables Feed, History, Pointing,
                             Source, SysCal, CalDevice, SysPower, and Weather are processed
                             independently of the time range of the selected exec block / scan.
                             Default: False
                             Options: False|True
    process_syspower         s processed if and only if this
                             parameter is set to true.
                             Default: True
                             Options: True|False
    process_caldevice        The CalDevice table is processed if and only if this
                             parameter is set to true.
                             Default: True
                             Options: True|False
    process_pointing         The Pointing table is processed if and only if this
                             parameter is set to true. 
                             Default: True
                             Options: True|False
                             
                             If set to False, the POINTING table is empty in
                             the resulting MS
    process_flags            Create online flags based on the Flag.xml, Antenna.xml
                             and SpectralWindow.xml files and copy them to the FLAG_CMD sub-table
                             of the MS.
                             Default: True
                             Options: True|False
                             
                             The flags will NOT be applied unless  the
                             parameter applyflags is set to True. Optionally,
                             the flags can also be saved to an external ASCII
                             file if savecmds is set to True.
    tbuff                    Time padding buffer (seconds)
                             Subparameter of process_flags=True
                             Default: 0.0
                             
                             NOTE: this time is in seconds. You should
                             currently set the value of tbuff to be 1.5x the
                             correlator integration time if greater than 1
                             second. For example, if the SDM has integrations
                             of 3 seconds, set tbuff=4.5.  Likewise, set
                             tbuff=15.0 for 10-sec integrations.
    applyflags               Apply the online flags to the MS.
                             Subparameter of process_flags=True
                             Default: False
                             Options: False|True
    savecmds                 Save the flag commands to an ASCII file given by the
                             parameter outfile. 
                             Subparameter of process_flags=True
                             Default: False
                             Options: False|True
    outfile                  Filename or list of filenames where to save the online
                             flag commands.
                             Subparameter of process_flags=True
                             Default: '' (it will save on a filename composed
                             from the MS name(s).) E.g., for vis='uid_A02.ms',
                             the outfile will be 'uid_A02_cmd.txt'.
    flagbackup               Back up flag column before applying flags.
                             Default: True
                             Options: True|False
    verbose                  Produce log output as asdm2MS is being run
                             Default: False
                             Options: False|True
    overwrite                Over write an existing MS(s) or MS(s), if the option
                             wvr_corrected_data='both'
                             Default: False  (do not overwrite)
                             Options: False|True
                             
                             NOTE: the overwrite parameter affects all the
                             output of the task. If any of the following
                             exist, it will not overwrite them. MS(s),
                             .flagversions, online flag files. When set to
                             True, it will overwrite the MS, .flagversions and
                             online flag file.
    showversion              Report the version of asdm2MS being used
                             Default: False
                             Options: False|True
    useversion               Version of asdm2MS to be used
                             Default: 'v3' (should work for all data)
    bdfflags                 Set the MS FLAG column according to the ASDM _binary_
                             flags
                             Default: False
                             Options: False|True
    with_pointing_correction Add (ASDM::Pointing::encoder -
                             ASDM::Pointing::pointingDirection) to the value to be written in
                             MS::Pointing::direction
                             Default: False
                             Options: False|True
    remove_ref_undef         If set to True then apply fixspwbackport on the resulting
                             MS(es).
                             Default: False
                             Options: False|True
    convert_ephem2geo        if True, convert any attached ephemerides to the GEO
                             reference frame (time-spacing not changed)
                             Default: True
                             Options: True|False
                             
                             ALMA uses ephemerides with observer location
                             equal to the ALMA site. For later processing of
                             the radial velocity information in, e.g. cvel,  a
                             geocentric ephemeris is needed. Setting this
                             option to True will perform the conversion of
                             positions and velocities on all attached
                             ephemerides in the imported MS. This will neither
                             change the time-spacing nor the duration of the
                             ephemeris. No interpolation in time is done.
    polyephem_tabtimestep    Timestep (days) for the tabulation of polynomial
                             ephemerides. A value less than or equal to 0 disables tabulation.
                             Default: 0
                             
                             Presently, VLA data can contain polynomial
                             ephemerides. ALMA data uses tabulated values.
    [1;42mRETURNS[1;m                     void

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTASDM IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert an ALMA Science Data Model observation into a CASA visibility file (MS)"""

    def __call__( self, asdm='', vis='', createmms=False, separationaxis='auto', numsubms='auto', corr_mode='all', srt='all', time_sampling='all', ocorr_mode='ca', compression=False, lazy=False, asis='', wvr_corrected_data='no', scans='', ignore_time=False, process_syspower=True, process_caldevice=True, process_pointing=True, process_flags=True, tbuff=float(0.0), applyflags=False, savecmds=False, outfile='', flagbackup=True, verbose=False, overwrite=False, showversion=False, useversion='v3', bdfflags=False, with_pointing_correction=False, remove_ref_undef=False, convert_ephem2geo=True, polyephem_tabtimestep=float(0.) ):
        schema = {'asdm': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'vis': {'type': 'cStr'}, 'createmms': {'type': 'cBool'}, 'separationaxis': {'type': 'cStr', 'allowed': [ 'baseline', 'AUTO', 'SPW', 'SCAN', 'auto', 'spw', 'BASELINE', 'scan' ]}, 'numsubms': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}]}, 'corr_mode': {'type': 'cStr'}, 'srt': {'type': 'cStr'}, 'time_sampling': {'type': 'cStr'}, 'ocorr_mode': {'type': 'cStr', 'allowed': [ 'co', 'ao', 'ca' ]}, 'compression': {'type': 'cBool'}, 'lazy': {'type': 'cBool'}, 'asis': {'type': 'cStr'}, 'wvr_corrected_data': {'type': 'cStr', 'allowed': [ 'no', 'yes', 'both' ]}, 'scans': {'type': 'cStr'}, 'ignore_time': {'type': 'cBool'}, 'process_syspower': {'type': 'cBool'}, 'process_caldevice': {'type': 'cBool'}, 'process_pointing': {'type': 'cBool'}, 'process_flags': {'type': 'cBool'}, 'tbuff': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'applyflags': {'type': 'cBool'}, 'savecmds': {'type': 'cBool'}, 'outfile': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'flagbackup': {'type': 'cBool'}, 'verbose': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'showversion': {'type': 'cBool'}, 'useversion': {'type': 'cStr', 'allowed': [ 'v3', '' ]}, 'bdfflags': {'type': 'cBool'}, 'with_pointing_correction': {'type': 'cBool'}, 'remove_ref_undef': {'type': 'cBool'}, 'convert_ephem2geo': {'type': 'cBool'}, 'polyephem_tabtimestep': {'type': 'cFloat', 'coerce': _coerce.to_float}}
        doc = {'asdm': asdm, 'vis': vis, 'createmms': createmms, 'separationaxis': separationaxis, 'numsubms': numsubms, 'corr_mode': corr_mode, 'srt': srt, 'time_sampling': time_sampling, 'ocorr_mode': ocorr_mode, 'compression': compression, 'lazy': lazy, 'asis': asis, 'wvr_corrected_data': wvr_corrected_data, 'scans': scans, 'ignore_time': ignore_time, 'process_syspower': process_syspower, 'process_caldevice': process_caldevice, 'process_pointing': process_pointing, 'process_flags': process_flags, 'tbuff': tbuff, 'applyflags': applyflags, 'savecmds': savecmds, 'outfile': outfile, 'flagbackup': flagbackup, 'verbose': verbose, 'overwrite': overwrite, 'showversion': showversion, 'useversion': useversion, 'bdfflags': bdfflags, 'with_pointing_correction': with_pointing_correction, 'remove_ref_undef': remove_ref_undef, 'convert_ephem2geo': convert_ephem2geo, 'polyephem_tabtimestep': polyephem_tabtimestep}
        assert _pc.validate(doc,schema), str(_pc.errors)
        _logging_state_ = _start_log( 'importasdm', [ 'asdm=' + repr(_pc.document['asdm']), 'vis=' + repr(_pc.document['vis']), 'createmms=' + repr(_pc.document['createmms']), 'separationaxis=' + repr(_pc.document['separationaxis']), 'numsubms=' + repr(_pc.document['numsubms']), 'corr_mode=' + repr(_pc.document['corr_mode']), 'srt=' + repr(_pc.document['srt']), 'time_sampling=' + repr(_pc.document['time_sampling']), 'ocorr_mode=' + repr(_pc.document['ocorr_mode']), 'compression=' + repr(_pc.document['compression']), 'lazy=' + repr(_pc.document['lazy']), 'asis=' + repr(_pc.document['asis']), 'wvr_corrected_data=' + repr(_pc.document['wvr_corrected_data']), 'scans=' + repr(_pc.document['scans']), 'ignore_time=' + repr(_pc.document['ignore_time']), 'process_syspower=' + repr(_pc.document['process_syspower']), 'process_caldevice=' + repr(_pc.document['process_caldevice']), 'process_pointing=' + repr(_pc.document['process_pointing']), 'process_flags=' + repr(_pc.document['process_flags']), 'tbuff=' + repr(_pc.document['tbuff']), 'applyflags=' + repr(_pc.document['applyflags']), 'savecmds=' + repr(_pc.document['savecmds']), 'outfile=' + repr(_pc.document['outfile']), 'flagbackup=' + repr(_pc.document['flagbackup']), 'verbose=' + repr(_pc.document['verbose']), 'overwrite=' + repr(_pc.document['overwrite']), 'showversion=' + repr(_pc.document['showversion']), 'useversion=' + repr(_pc.document['useversion']), 'bdfflags=' + repr(_pc.document['bdfflags']), 'with_pointing_correction=' + repr(_pc.document['with_pointing_correction']), 'remove_ref_undef=' + repr(_pc.document['remove_ref_undef']), 'convert_ephem2geo=' + repr(_pc.document['convert_ephem2geo']), 'polyephem_tabtimestep=' + repr(_pc.document['polyephem_tabtimestep']) ] )
        return _end_log( _logging_state_, 'importasdm', _importasdm_t( _pc.document['asdm'], _pc.document['vis'], _pc.document['createmms'], _pc.document['separationaxis'], _pc.document['numsubms'], _pc.document['corr_mode'], _pc.document['srt'], _pc.document['time_sampling'], _pc.document['ocorr_mode'], _pc.document['compression'], _pc.document['lazy'], _pc.document['asis'], _pc.document['wvr_corrected_data'], _pc.document['scans'], _pc.document['ignore_time'], _pc.document['process_syspower'], _pc.document['process_caldevice'], _pc.document['process_pointing'], _pc.document['process_flags'], _pc.document['tbuff'], _pc.document['applyflags'], _pc.document['savecmds'], _pc.document['outfile'], _pc.document['flagbackup'], _pc.document['verbose'], _pc.document['overwrite'], _pc.document['showversion'], _pc.document['useversion'], _pc.document['bdfflags'], _pc.document['with_pointing_correction'], _pc.document['remove_ref_undef'], _pc.document['convert_ephem2geo'], _pc.document['polyephem_tabtimestep'] ) )

importasdm = _importasdm( )

