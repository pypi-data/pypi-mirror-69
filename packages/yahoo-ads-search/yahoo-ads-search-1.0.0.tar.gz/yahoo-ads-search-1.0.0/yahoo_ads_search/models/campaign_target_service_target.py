# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_ads_search.configuration import Configuration


class CampaignTargetServiceTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location_target': 'CampaignTargetServiceLocationTarget',
        'network_target': 'CampaignTargetServiceNetworkTarget',
        'platform_target': 'CampaignTargetServicePlatformTarget',
        'schedule_target': 'CampaignTargetServiceScheduleTarget',
        'target_id': 'str',
        'target_type': 'CampaignTargetServiceTargetType'
    }

    attribute_map = {
        'location_target': 'locationTarget',
        'network_target': 'networkTarget',
        'platform_target': 'platformTarget',
        'schedule_target': 'scheduleTarget',
        'target_id': 'targetId',
        'target_type': 'targetType'
    }

    def __init__(self, location_target=None, network_target=None, platform_target=None, schedule_target=None, target_id=None, target_type=None, local_vars_configuration=None):  # noqa: E501
        """CampaignTargetServiceTarget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._location_target = None
        self._network_target = None
        self._platform_target = None
        self._schedule_target = None
        self._target_id = None
        self._target_type = None
        self.discriminator = None

        self.location_target = location_target
        self.network_target = network_target
        self.platform_target = platform_target
        self.schedule_target = schedule_target
        self.target_id = target_id
        self.target_type = target_type

    @property
    def location_target(self):
        """Gets the location_target of this CampaignTargetServiceTarget.  # noqa: E501


        :return: The location_target of this CampaignTargetServiceTarget.  # noqa: E501
        :rtype: CampaignTargetServiceLocationTarget
        """
        return self._location_target

    @location_target.setter
    def location_target(self, location_target):
        """Sets the location_target of this CampaignTargetServiceTarget.


        :param location_target: The location_target of this CampaignTargetServiceTarget.  # noqa: E501
        :type: CampaignTargetServiceLocationTarget
        """

        self._location_target = location_target

    @property
    def network_target(self):
        """Gets the network_target of this CampaignTargetServiceTarget.  # noqa: E501


        :return: The network_target of this CampaignTargetServiceTarget.  # noqa: E501
        :rtype: CampaignTargetServiceNetworkTarget
        """
        return self._network_target

    @network_target.setter
    def network_target(self, network_target):
        """Sets the network_target of this CampaignTargetServiceTarget.


        :param network_target: The network_target of this CampaignTargetServiceTarget.  # noqa: E501
        :type: CampaignTargetServiceNetworkTarget
        """

        self._network_target = network_target

    @property
    def platform_target(self):
        """Gets the platform_target of this CampaignTargetServiceTarget.  # noqa: E501


        :return: The platform_target of this CampaignTargetServiceTarget.  # noqa: E501
        :rtype: CampaignTargetServicePlatformTarget
        """
        return self._platform_target

    @platform_target.setter
    def platform_target(self, platform_target):
        """Sets the platform_target of this CampaignTargetServiceTarget.


        :param platform_target: The platform_target of this CampaignTargetServiceTarget.  # noqa: E501
        :type: CampaignTargetServicePlatformTarget
        """

        self._platform_target = platform_target

    @property
    def schedule_target(self):
        """Gets the schedule_target of this CampaignTargetServiceTarget.  # noqa: E501


        :return: The schedule_target of this CampaignTargetServiceTarget.  # noqa: E501
        :rtype: CampaignTargetServiceScheduleTarget
        """
        return self._schedule_target

    @schedule_target.setter
    def schedule_target(self, schedule_target):
        """Sets the schedule_target of this CampaignTargetServiceTarget.


        :param schedule_target: The schedule_target of this CampaignTargetServiceTarget.  # noqa: E501
        :type: CampaignTargetServiceScheduleTarget
        """

        self._schedule_target = schedule_target

    @property
    def target_id(self):
        """Gets the target_id of this CampaignTargetServiceTarget.  # noqa: E501

        <div lang=\"ja\">ターゲットIDです。<br> このフィールドは、ADD時は無視され、SETおよびREMOVE時は必須となります。<br> ※LocationCampaignTargetServiceTargetの場合、ADD時に必須となります。<br> ※PlatformCampaignTargetServiceTargetの場合、SET時に無視されます。</div> <div lang=\"en\">CampaignTargetServiceTarget ID.<br> This field will be ignored in ADD operation, and is required in ADD and REMOVE operation.<br> *For LocationCampaignTargetServiceTarget, this is required in ADD operation.<br> *For PlatformCampaignTargetServiceTarget, this will be ignored in SET operation.</div>   # noqa: E501

        :return: The target_id of this CampaignTargetServiceTarget.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this CampaignTargetServiceTarget.

        <div lang=\"ja\">ターゲットIDです。<br> このフィールドは、ADD時は無視され、SETおよびREMOVE時は必須となります。<br> ※LocationCampaignTargetServiceTargetの場合、ADD時に必須となります。<br> ※PlatformCampaignTargetServiceTargetの場合、SET時に無視されます。</div> <div lang=\"en\">CampaignTargetServiceTarget ID.<br> This field will be ignored in ADD operation, and is required in ADD and REMOVE operation.<br> *For LocationCampaignTargetServiceTarget, this is required in ADD operation.<br> *For PlatformCampaignTargetServiceTarget, this will be ignored in SET operation.</div>   # noqa: E501

        :param target_id: The target_id of this CampaignTargetServiceTarget.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def target_type(self):
        """Gets the target_type of this CampaignTargetServiceTarget.  # noqa: E501


        :return: The target_type of this CampaignTargetServiceTarget.  # noqa: E501
        :rtype: CampaignTargetServiceTargetType
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this CampaignTargetServiceTarget.


        :param target_type: The target_type of this CampaignTargetServiceTarget.  # noqa: E501
        :type: CampaignTargetServiceTargetType
        """

        self._target_type = target_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignTargetServiceTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignTargetServiceTarget):
            return True

        return self.to_dict() != other.to_dict()
