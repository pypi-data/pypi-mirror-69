# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_ads_search.configuration import Configuration


class BiddingStrategy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'bidding_scheme': 'BiddingStrategyServiceBiddingScheme',
        'bidding_strategy_id': 'int',
        'bidding_strategy_name': 'str',
        'type': 'BiddingStrategyServiceType'
    }

    attribute_map = {
        'account_id': 'accountId',
        'bidding_scheme': 'biddingScheme',
        'bidding_strategy_id': 'biddingStrategyId',
        'bidding_strategy_name': 'biddingStrategyName',
        'type': 'type'
    }

    def __init__(self, account_id=None, bidding_scheme=None, bidding_strategy_id=None, bidding_strategy_name=None, type=None, local_vars_configuration=None):  # noqa: E501
        """BiddingStrategy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._bidding_scheme = None
        self._bidding_strategy_id = None
        self._bidding_strategy_name = None
        self._type = None
        self.discriminator = None

        self.account_id = account_id
        self.bidding_scheme = bidding_scheme
        self.bidding_strategy_id = bidding_strategy_id
        self.bidding_strategy_name = bidding_strategy_name
        self.type = type

    @property
    def account_id(self):
        """Gets the account_id of this BiddingStrategy.  # noqa: E501

        <div lang=\"ja\">アカウントIDです。<br> このフィールドは、いずれの場合でも必須です。</div> <div lang=\"en\">Account ID.<br> This field is required in any cases.</div>   # noqa: E501

        :return: The account_id of this BiddingStrategy.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BiddingStrategy.

        <div lang=\"ja\">アカウントIDです。<br> このフィールドは、いずれの場合でも必須です。</div> <div lang=\"en\">Account ID.<br> This field is required in any cases.</div>   # noqa: E501

        :param account_id: The account_id of this BiddingStrategy.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def bidding_scheme(self):
        """Gets the bidding_scheme of this BiddingStrategy.  # noqa: E501


        :return: The bidding_scheme of this BiddingStrategy.  # noqa: E501
        :rtype: BiddingStrategyServiceBiddingScheme
        """
        return self._bidding_scheme

    @bidding_scheme.setter
    def bidding_scheme(self, bidding_scheme):
        """Sets the bidding_scheme of this BiddingStrategy.


        :param bidding_scheme: The bidding_scheme of this BiddingStrategy.  # noqa: E501
        :type: BiddingStrategyServiceBiddingScheme
        """

        self._bidding_scheme = bidding_scheme

    @property
    def bidding_strategy_id(self):
        """Gets the bidding_strategy_id of this BiddingStrategy.  # noqa: E501

        <div lang=\"ja\">自動入札IDです。<br> SET時およびREMOVE時、このフィールドは必須となります。</div> <div lang=\"en\">Auto bidding ID.<br> This field is optional in SET and REMOVE operation.</div>   # noqa: E501

        :return: The bidding_strategy_id of this BiddingStrategy.  # noqa: E501
        :rtype: int
        """
        return self._bidding_strategy_id

    @bidding_strategy_id.setter
    def bidding_strategy_id(self, bidding_strategy_id):
        """Sets the bidding_strategy_id of this BiddingStrategy.

        <div lang=\"ja\">自動入札IDです。<br> SET時およびREMOVE時、このフィールドは必須となります。</div> <div lang=\"en\">Auto bidding ID.<br> This field is optional in SET and REMOVE operation.</div>   # noqa: E501

        :param bidding_strategy_id: The bidding_strategy_id of this BiddingStrategy.  # noqa: E501
        :type: int
        """

        self._bidding_strategy_id = bidding_strategy_id

    @property
    def bidding_strategy_name(self):
        """Gets the bidding_strategy_name of this BiddingStrategy.  # noqa: E501

        <div lang=\"ja\">自動入札名です（50文字以内になります）。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。</div> <div lang=\"en\">Auto bidding name(Can set up to 50 characters).<br> This field is required in ADD operation, and will be optional in SET operation.</div>   # noqa: E501

        :return: The bidding_strategy_name of this BiddingStrategy.  # noqa: E501
        :rtype: str
        """
        return self._bidding_strategy_name

    @bidding_strategy_name.setter
    def bidding_strategy_name(self, bidding_strategy_name):
        """Sets the bidding_strategy_name of this BiddingStrategy.

        <div lang=\"ja\">自動入札名です（50文字以内になります）。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。</div> <div lang=\"en\">Auto bidding name(Can set up to 50 characters).<br> This field is required in ADD operation, and will be optional in SET operation.</div>   # noqa: E501

        :param bidding_strategy_name: The bidding_strategy_name of this BiddingStrategy.  # noqa: E501
        :type: str
        """

        self._bidding_strategy_name = bidding_strategy_name

    @property
    def type(self):
        """Gets the type of this BiddingStrategy.  # noqa: E501


        :return: The type of this BiddingStrategy.  # noqa: E501
        :rtype: BiddingStrategyServiceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BiddingStrategy.


        :param type: The type of this BiddingStrategy.  # noqa: E501
        :type: BiddingStrategyServiceType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BiddingStrategy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BiddingStrategy):
            return True

        return self.to_dict() != other.to_dict()
