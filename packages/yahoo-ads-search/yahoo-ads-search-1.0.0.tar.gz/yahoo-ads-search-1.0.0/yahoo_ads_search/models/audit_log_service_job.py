# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_ads_search.configuration import Configuration


class AuditLogServiceJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'date_range': 'AuditLogServiceDateRange',
        'encoding': 'AuditLogServiceEncoding',
        'event_selector': 'list[AuditLogServiceEventSelector]',
        'job_id': 'int',
        'job_name': 'str',
        'job_status': 'AuditLogServiceJobStatus',
        'lang': 'AuditLogServiceLang',
        'output': 'AuditLogServiceOutput',
        'source_type': 'AuditLogServiceSourceType'
    }

    attribute_map = {
        'account_id': 'accountId',
        'date_range': 'dateRange',
        'encoding': 'encoding',
        'event_selector': 'eventSelector',
        'job_id': 'jobId',
        'job_name': 'jobName',
        'job_status': 'jobStatus',
        'lang': 'lang',
        'output': 'output',
        'source_type': 'sourceType'
    }

    def __init__(self, account_id=None, date_range=None, encoding=None, event_selector=None, job_id=None, job_name=None, job_status=None, lang=None, output=None, source_type=None, local_vars_configuration=None):  # noqa: E501
        """AuditLogServiceJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._date_range = None
        self._encoding = None
        self._event_selector = None
        self._job_id = None
        self._job_name = None
        self._job_status = None
        self._lang = None
        self._output = None
        self._source_type = None
        self.discriminator = None

        self.account_id = account_id
        self.date_range = date_range
        self.encoding = encoding
        self.event_selector = event_selector
        self.job_id = job_id
        self.job_name = job_name
        self.job_status = job_status
        self.lang = lang
        self.output = output
        self.source_type = source_type

    @property
    def account_id(self):
        """Gets the account_id of this AuditLogServiceJob.  # noqa: E501

        <div lang=\"ja\">アカウントIDです。<br>このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Account ID.<br>Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :return: The account_id of this AuditLogServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AuditLogServiceJob.

        <div lang=\"ja\">アカウントIDです。<br>このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Account ID.<br>Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :param account_id: The account_id of this AuditLogServiceJob.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def date_range(self):
        """Gets the date_range of this AuditLogServiceJob.  # noqa: E501


        :return: The date_range of this AuditLogServiceJob.  # noqa: E501
        :rtype: AuditLogServiceDateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this AuditLogServiceJob.


        :param date_range: The date_range of this AuditLogServiceJob.  # noqa: E501
        :type: AuditLogServiceDateRange
        """

        self._date_range = date_range

    @property
    def encoding(self):
        """Gets the encoding of this AuditLogServiceJob.  # noqa: E501


        :return: The encoding of this AuditLogServiceJob.  # noqa: E501
        :rtype: AuditLogServiceEncoding
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this AuditLogServiceJob.


        :param encoding: The encoding of this AuditLogServiceJob.  # noqa: E501
        :type: AuditLogServiceEncoding
        """

        self._encoding = encoding

    @property
    def event_selector(self):
        """Gets the event_selector of this AuditLogServiceJob.  # noqa: E501


        :return: The event_selector of this AuditLogServiceJob.  # noqa: E501
        :rtype: list[AuditLogServiceEventSelector]
        """
        return self._event_selector

    @event_selector.setter
    def event_selector(self, event_selector):
        """Sets the event_selector of this AuditLogServiceJob.


        :param event_selector: The event_selector of this AuditLogServiceJob.  # noqa: E501
        :type: list[AuditLogServiceEventSelector]
        """

        self._event_selector = event_selector

    @property
    def job_id(self):
        """Gets the job_id of this AuditLogServiceJob.  # noqa: E501

        <div lang=\"ja\">ジョブIDです。<br>このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Job ID.<br>Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :return: The job_id of this AuditLogServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this AuditLogServiceJob.

        <div lang=\"ja\">ジョブIDです。<br>このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Job ID.<br>Although this field will be returned in the response, it will be ignored on input.</div>   # noqa: E501

        :param job_id: The job_id of this AuditLogServiceJob.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this AuditLogServiceJob.  # noqa: E501

        <div lang=\"ja\">ジョブ名です。<br>このフィールドは、省略可能となります。</div> <div lang=\"en\">Name of job.<br>This field is optional.</div>   # noqa: E501

        :return: The job_name of this AuditLogServiceJob.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this AuditLogServiceJob.

        <div lang=\"ja\">ジョブ名です。<br>このフィールドは、省略可能となります。</div> <div lang=\"en\">Name of job.<br>This field is optional.</div>   # noqa: E501

        :param job_name: The job_name of this AuditLogServiceJob.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def job_status(self):
        """Gets the job_status of this AuditLogServiceJob.  # noqa: E501


        :return: The job_status of this AuditLogServiceJob.  # noqa: E501
        :rtype: AuditLogServiceJobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this AuditLogServiceJob.


        :param job_status: The job_status of this AuditLogServiceJob.  # noqa: E501
        :type: AuditLogServiceJobStatus
        """

        self._job_status = job_status

    @property
    def lang(self):
        """Gets the lang of this AuditLogServiceJob.  # noqa: E501


        :return: The lang of this AuditLogServiceJob.  # noqa: E501
        :rtype: AuditLogServiceLang
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this AuditLogServiceJob.


        :param lang: The lang of this AuditLogServiceJob.  # noqa: E501
        :type: AuditLogServiceLang
        """

        self._lang = lang

    @property
    def output(self):
        """Gets the output of this AuditLogServiceJob.  # noqa: E501


        :return: The output of this AuditLogServiceJob.  # noqa: E501
        :rtype: AuditLogServiceOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this AuditLogServiceJob.


        :param output: The output of this AuditLogServiceJob.  # noqa: E501
        :type: AuditLogServiceOutput
        """

        self._output = output

    @property
    def source_type(self):
        """Gets the source_type of this AuditLogServiceJob.  # noqa: E501


        :return: The source_type of this AuditLogServiceJob.  # noqa: E501
        :rtype: AuditLogServiceSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AuditLogServiceJob.


        :param source_type: The source_type of this AuditLogServiceJob.  # noqa: E501
        :type: AuditLogServiceSourceType
        """

        self._source_type = source_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLogServiceJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditLogServiceJob):
            return True

        return self.to_dict() != other.to_dict()
