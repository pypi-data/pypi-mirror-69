# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import yahoo_ads_search
from yahoo_ads_search.models.campaign_service_return_value import CampaignServiceReturnValue  # noqa: E501
from yahoo_ads_search.rest import ApiException

class TestCampaignServiceReturnValue(unittest.TestCase):
    """CampaignServiceReturnValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CampaignServiceReturnValue
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = yahoo_ads_search.models.campaign_service_return_value.CampaignServiceReturnValue()  # noqa: E501
        if include_optional :
            return CampaignServiceReturnValue(
                values = [
                    yahoo_ads_search.models.campaign_service_value.CampaignServiceValue(
                        campaign = yahoo_ads_search.models.campaign.Campaign(
                            account_id = 56,
                            app_id = '0',
                            app_store = 'IOS',
                            bidding_strategy_configuration = yahoo_ads_search.models.campaign_service_bidding_strategy.CampaignServiceBiddingStrategy(
                                bidding_scheme = yahoo_ads_search.models.campaign_service_bidding_scheme.CampaignServiceBiddingScheme(
                                    bidding_strategy_type = 'MANUAL_CPC',
                                    manual_cpc_bidding_scheme = yahoo_ads_search.models.campaign_service_manual_cpc_bidding_scheme.CampaignServiceManualCpcBiddingScheme(
                                        enhanced_cpc_enabled = 'TRUE', ),
                                    target_cpa_bidding_scheme = yahoo_ads_search.models.campaign_service_target_cpa_bidding_scheme.CampaignServiceTargetCpaBiddingScheme(
                                        bid_ceiling = 56,
                                        bid_floor = 56,
                                        target_cpa = 56, ),
                                    target_roas_bidding_scheme = yahoo_ads_search.models.campaign_service_target_roas_bidding_scheme.CampaignServiceTargetRoasBiddingScheme(
                                        bid_ceiling = 56,
                                        bid_floor = 56,
                                        target_roas = 1.337, ),
                                    target_spend_bidding_scheme = yahoo_ads_search.models.campaign_service_target_spend_bidding_scheme.CampaignServiceTargetSpendBiddingScheme(
                                        bid_ceiling = 56, ), ),
                                bidding_strategy_id = 56,
                                bidding_strategy_name = '0',
                                bidding_strategy_source = 'CAMPAIGN',
                                bidding_strategy_type = 'MANUAL_CPC', ),
                            bidding_strategy_failed_reason = 'FAILURE',
                            budget = yahoo_ads_search.models.campaign_service_budget.CampaignServiceBudget(
                                amount = 56,
                                budget_period = 'DAILY', ),
                            campaign_id = 56,
                            campaign_name = '0',
                            campaign_track_id = 56,
                            conversion_optimizer_eligibility = 'ENABLE',
                            custom_parameters = yahoo_ads_search.models.campaign_service_custom_parameters.CampaignServiceCustomParameters(
                                is_remove = 'TRUE',
                                parameters = [
                                    yahoo_ads_search.models.campaign_service_custom_parameter.CampaignServiceCustomParameter(
                                        key = '0',
                                        value = '0', )
                                    ], ),
                            end_date = '0',
                            failed_bidding_strategy_configuration = yahoo_ads_search.models.campaign_service_bidding_strategy.CampaignServiceBiddingStrategy(
                                bidding_strategy_id = 56,
                                bidding_strategy_name = '0', ),
                            labels = [
                                yahoo_ads_search.models.campaign_service_label.CampaignServiceLabel(
                                    color = '0',
                                    description = '0',
                                    label_id = 56,
                                    label_name = '0', )
                                ],
                            serving_status = 'SERVING',
                            settings = [
                                yahoo_ads_search.models.campaign_service_settings.CampaignServiceSettings(
                                    dynamic_ads_for_search_setting = yahoo_ads_search.models.campaign_service_dynamic_ads_for_search_setting.CampaignServiceDynamicAdsForSearchSetting(
                                        feed_ids = [
                                            56
                                            ], ),
                                    geo_target_type_setting = yahoo_ads_search.models.campaign_service_geo_target_type_setting.CampaignServiceGeoTargetTypeSetting(
                                        negative_geo_target_type = 'DONT_CARE',
                                        positive_geo_target_type = 'DONT_CARE', ),
                                    setting_type = 'GEO_TARGET_TYPE_SETTING',
                                    targeting_setting = yahoo_ads_search.models.campaign_service_targeting_setting.CampaignServiceTargetingSetting(
                                        target_all = 'ACTIVE', ), )
                                ],
                            start_date = '0',
                            tracking_url = '0',
                            type = 'STANDARD',
                            url_review_data = yahoo_ads_search.models.campaign_service_url_review_data.CampaignServiceUrlReviewData(
                                disapproval_reason_codes = [
                                    '0'
                                    ],
                                disapproval_review_url = yahoo_ads_search.models.campaign_service_review_url.CampaignServiceReviewUrl(
                                    tracking_url = '0', ),
                                in_review_url = yahoo_ads_search.models.campaign_service_review_url.CampaignServiceReviewUrl(
                                    tracking_url = '0', ),
                                url_approval_status = 'NONE', ),
                            user_status = 'ACTIVE', ),
                        errors = [
                            yahoo_ads_search.models.error.Error(
                                code = '0',
                                message = '0',
                                details = [
                                    yahoo_ads_search.models.error_detail.ErrorDetail(
                                        request_key = '0',
                                        request_value = '0', )
                                    ], )
                            ],
                        operation_succeeded = True, )
                    ]
            )
        else :
            return CampaignServiceReturnValue(
        )

    def testCampaignServiceReturnValue(self):
        """Test CampaignServiceReturnValue"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
