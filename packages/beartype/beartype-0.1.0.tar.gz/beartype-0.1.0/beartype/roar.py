#!/usr/bin/env python3
# --------------------( LICENSE                           )--------------------
# Copyright (c) 2014-2020 Cecil Curry.
# See "LICENSE" for further details.

'''
**Hear beartype roar** as it handles errors and warnings.

This submodule defines hierarchies of :mod:`beartype`-specific exceptions
and warnings emitted by the :func:`beartype.beartype` decorator.
'''

# ....................{ IMPORTS                           }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: To avoid polluting the public module namespace, external attributes
# should be locally imported at module scope *ONLY* under alternate private
# names (e.g., "from argparse import ArgumentParser as _ArgumentParser" rather
# than merely "from argparse import ArgumentParser").
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

from abc import ABCMeta as _ABCMeta

# See the "beartype.__init__" submodule for further commentary.
__all__ = ['STAR_IMPORTS_CONSIDERED_HARMFUL']

# ....................{ EXCEPTIONS                        }....................
#FIXME: Differentiate these two types of exceptions: e.g.,
#
#* Define a new "BeartypeDecorException(BeartypeException)" raised only
#  at decoration time.
#* Define a new "BeartypeCheckException(BeartypeException)" raised only at
#  callable call time.
class BeartypeException(Exception, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype exceptions.**

    Instances of subclasses of this exception are raised either:

    * At decoration time from the :func:`beartype.beartype` decorator.
    * At call time from the new callable generated by the
      :func:`beartype.beartype` decorator to wrap the original callable.
    '''

    pass

# ....................{ EXCEPTIONS ~ cave                 }....................
class BeartypeCaveException(BeartypeException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype cave exceptions.**

    Instances of subclasses of this exception are raised at usage time from
    various types published by the :func:`beartype.cave` submodule.
    '''

    pass


class BeartypeCaveNoneTypeOrKeyException(BeartypeCaveException):
    '''
    **Beartype cave ``None`` tuple factory exception.**

    This exception is raised when indexing the :func:`beartype.cave.NoneTypeOr`
    dictionary with a key that is neither a:

    * **Type** (i.e., :class:`beartype.cave.ClassType` instance).
    * **Tuple of types** (i.e., :class:`tuple` whose items are all
      :class:`beartype.cave.ClassType` instances).
    '''

    pass

# ....................{ EXCEPTIONS ~ decor                }....................
class BeartypeDecorException(BeartypeException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype decorator exceptions.**

    Instances of subclasses of this exception are raised at decoration time
    from the :func:`beartype.beartype` decorator.
    '''

    pass


class BeartypeDecorParseException(BeartypeDecorException):
    '''
    **Beartype decorator parse exception.**

    This exception is raised at decoration time from the
    :func:`beartype.beartype` decorator on generating an unparseable (i.e.,
    syntactically invalid) new callable to wrap the original callable.
    '''

    pass

# ....................{ EXCEPTIONS ~ decor : hint         }....................
class BeartypeDecorHintException(BeartypeDecorException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype decorator type hinting exceptions.**

    Instances of subclasses of this exception are raised at decoration time
    from the :func:`beartype.beartype` decorator on receiving a callable
    type-hinted with invalid annotations.
    '''

    pass


class BeartypeDecorHintValueException(BeartypeDecorHintException):
    '''
    **Beartype decorator "full" type hinting exception.**

    This exception is raised at decoration time from the
    :func:`beartype.beartype` decorator on receiving a callable type-hinted
    with an invalid object (e.g., which is neither a class, fully-qualified
    classname, nor tuple of classes and/or classnames).
    '''

    pass

# ....................{ EXCEPTIONS ~ decor : param        }....................
class BeartypeDecorParamException(BeartypeDecorException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartype decorator parameter exceptions.**

    Instances of subclasses of this exception are raised at decoration time
    from the :func:`beartype.beartype` decorator on receiving a callable
    declaring invalid parameters.
    '''

    pass


class BeartypeDecorParamNameException(BeartypeDecorParamException):
    '''
    **Beartype decorator hinted tuple item invalid exception.**

    This exception is raised at decoration time from the
    :func:`beartype.beartype` decorator on receiving a callable declaring
    parameters with invalid names.
    '''

    pass

# ....................{ EXCEPTIONS ~ call                 }....................
class BeartypeCallException(BeartypeException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartyped callable exceptions.**

    Instances of subclasses of this exception are raised from the **generated
    callable** (i.e., generated by the :func:`beartype.beartype` decorator to
    wrap the callable decorated by that decorator).
    '''

    pass

# ....................{ EXCEPTIONS ~ call : type          }....................
class BeartypeCallTypeException(BeartypeCallException, metaclass=_ABCMeta):
    '''
    Abstract base class of all **beartyped callable type exceptions.**

    This exception is raised from the **generated callable** (i.e., generated
    by the :func:`beartype.beartype` decorator to wrap the callable decorated
    by that decorator) either passed a parameter or returning an object whose
    value is of an unexpected type and thus violates type hints annotated for
    that parameter or return value.
    '''

    pass


class BeartypeCallTypeParamException(BeartypeCallTypeException):
    '''
    **Beartyped callable parameter type exception.**

    This exception is raised from the **generated callable** (i.e., generated
    by the :func:`beartype.beartype` decorator to wrap the callable decorated
    by that decorator) passed a parameter whose value is of an unexpected type
    and thus violates type hints annotated for that parameter.
    '''

    pass


class BeartypeCallTypeReturnException(BeartypeCallTypeException):
    '''
    **Beartyped callable return type exception.**

    This exception is raised from the **generated callable** (i.e., generated
    by the :func:`beartype.beartype` decorator to wrap the callable decorated
    by that decorator) returning an object whose value is of an unexpected type
    and thus violates type hints annotated for that return value.
    '''

    pass
