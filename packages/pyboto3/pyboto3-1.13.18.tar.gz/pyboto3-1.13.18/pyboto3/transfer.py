'''

The MIT License (MIT)

Copyright (c) 2016 WavyCloud

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''

def can_paginate(operation_name=None):
    """
    Check if an operation can be paginated.
    
    :type operation_name: string
    :param operation_name: The operation name. This is the same name\nas the method name on the client. For example, if the\nmethod name is create_foo, and you\'d normally invoke the\noperation as client.create_foo(**kwargs), if the\ncreate_foo operation can be paginated, you can use the\ncall client.get_paginator('create_foo').

    """
    pass

def create_server(Certificate=None, EndpointDetails=None, EndpointType=None, HostKey=None, IdentityProviderDetails=None, IdentityProviderType=None, LoggingRole=None, Protocols=None, Tags=None):
    """
    Instantiates an autoscaling virtual server based on the selected file transfer protocol in AWS. When you make updates to your file transfer protocol-enabled server or when you work with users, use the service-generated ServerId property that is assigned to the newly created server.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.create_server(
        Certificate='string',
        EndpointDetails={
            'AddressAllocationIds': [
                'string',
            ],
            'SubnetIds': [
                'string',
            ],
            'VpcEndpointId': 'string',
            'VpcId': 'string'
        },
        EndpointType='PUBLIC'|'VPC'|'VPC_ENDPOINT',
        HostKey='string',
        IdentityProviderDetails={
            'Url': 'string',
            'InvocationRole': 'string'
        },
        IdentityProviderType='SERVICE_MANAGED'|'API_GATEWAY',
        LoggingRole='string',
        Protocols=[
            'SFTP'|'FTP'|'FTPS',
        ],
        Tags=[
            {
                'Key': 'string',
                'Value': 'string'
            },
        ]
    )
    
    
    :type Certificate: string
    :param Certificate: The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when Protocols is set to FTPS .

    :type EndpointDetails: dict
    :param EndpointDetails: The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled server. When you host your endpoint within your VPC, you can make it accessible only to resources within your VPC, or you can attach Elastic IPs and make it accessible to clients over the internet. Your VPC\'s default security groups are automatically assigned to your endpoint.\n\nAddressAllocationIds (list) --A list of address allocation IDs that are required to attach an Elastic IP address to your file transfer protocol-enabled server\'s endpoint. This is only valid in the UpdateServer API.\n\nNote\nThis property can only be use when EndpointType is set to VPC .\n\n\n(string) --\n\n\nSubnetIds (list) --A list of subnet IDs that are required to host your file transfer protocol-enabled server endpoint in your VPC.\n\n(string) --\n\n\nVpcEndpointId (string) --The ID of the VPC endpoint.\n\nVpcId (string) --The VPC ID of the VPC in which a file transfer protocol-enabled server\'s endpoint will be hosted.\n\n\n

    :type EndpointType: string
    :param EndpointType: The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can restrict access to your server and resources only within your VPC.

    :type HostKey: string
    :param HostKey: The RSA private key as generated by the ssh-keygen -N '' -f my-new-server-key command.\n\nWarning\nIf you aren\'t planning to migrate existing users from an existing SFTP-enabled server to a new server, don\'t update the host key. Accidentally changing a server\'s host key can be disruptive.\n\nFor more information, see Changing the Host Key for Your AWS Transfer Family Server in the AWS Transfer Family User Guide .\n

    :type IdentityProviderDetails: dict
    :param IdentityProviderDetails: Required when IdentityProviderType is set to API_GATEWAY . Accepts an array containing all of the information required to call a customer-supplied authentication API, including the API Gateway URL. Not required when IdentityProviderType is set to SERVICE_MANAGED .\n\nUrl (string) --Contains the location of the service endpoint used to authenticate users.\n\nInvocationRole (string) --Provides the type of InvocationRole used to authenticate the user account.\n\n\n

    :type IdentityProviderType: string
    :param IdentityProviderType: Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is SERVICE_MANAGED , which allows you to store and access user credentials within the AWS Transfer Family service. Use the API_GATEWAY value to integrate with an identity provider of your choosing. The API_GATEWAY setting requires you to provide an API Gateway endpoint URL to call for authentication using the IdentityProviderDetails parameter.

    :type LoggingRole: string
    :param LoggingRole: Allows the service to write your users\' activity to your Amazon CloudWatch logs for monitoring and auditing purposes.

    :type Protocols: list
    :param Protocols: Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server\'s endpoint. The available protocols are:\n\nSecure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH\nFile Transfer Protocol Secure (FTPS): File transfer with TLS encryption\nFile Transfer Protocol (FTP): Unencrypted file transfer\n\n\n(string) --\n\n

    :type Tags: list
    :param Tags: Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.\n\n(dict) --Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called Group and assign the values Research and Accounting to that group.\n\nKey (string) -- [REQUIRED]The name assigned to the tag that you create.\n\nValue (string) -- [REQUIRED]Contains one or more values that you assigned to the key name you create.\n\n\n\n\n

    :rtype: dict

ReturnsResponse Syntax
{
    'ServerId': 'string'
}


Response Structure

(dict) --

ServerId (string) --
The service-assigned ID of the file transfer protocol-enabled server that is created.







Exceptions

Transfer.Client.exceptions.AccessDeniedException
Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceExistsException
Transfer.Client.exceptions.ThrottlingException


    :return: {
        'ServerId': 'string'
    }
    
    
    :returns: 
    Transfer.Client.exceptions.AccessDeniedException
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceExistsException
    Transfer.Client.exceptions.ThrottlingException
    
    """
    pass

def create_user(HomeDirectory=None, HomeDirectoryType=None, HomeDirectoryMappings=None, Policy=None, Role=None, ServerId=None, SshPublicKeyBody=None, Tags=None, UserName=None):
    """
    Creates a user and associates them with an existing file transfer protocol-enabled server. You can only create and associate users with servers that have the IdentityProviderType set to SERVICE_MANAGED . Using parameters for CreateUser , you can specify the user name, set the home directory, store the user\'s public key, and assign the user\'s AWS Identity and Access Management (IAM) role. You can also optionally add a scope-down policy, and assign metadata with tags that can be used to group and search for users.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.create_user(
        HomeDirectory='string',
        HomeDirectoryType='PATH'|'LOGICAL',
        HomeDirectoryMappings=[
            {
                'Entry': 'string',
                'Target': 'string'
            },
        ],
        Policy='string',
        Role='string',
        ServerId='string',
        SshPublicKeyBody='string',
        Tags=[
            {
                'Key': 'string',
                'Value': 'string'
            },
        ],
        UserName='string'
    )
    
    
    :type HomeDirectory: string
    :param HomeDirectory: The landing directory (folder) for a user when they log in to the file transfer protocol-enabled server using the client.\nAn example is your-Amazon-S3-bucket-name>/home/username .\n

    :type HomeDirectoryType: string
    :param HomeDirectoryType: The type of landing directory (folder) you want your users\' home directory to be when they log into the file transfer protocol-enabled server. If you set it to PATH , the user will see the absolute Amazon S3 bucket paths as is in their file transfer protocol clients. If you set it LOGICAL , you will need to provide mappings in the HomeDirectoryMappings for how you want to make Amazon S3 paths visible to your users.

    :type HomeDirectoryMappings: list
    :param HomeDirectoryMappings: Logical directory mappings that specify what Amazon S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the 'Entry ' and 'Target ' pair, where Entry shows how the path is made visible and Target is the actual Amazon S3 path. If you only specify a target, it will be displayed as is. You will need to also make sure that your AWS IAM Role provides access to paths in Target . The following is an example.\n\n\'[ '/bucket2/documentation', { 'Entry': 'your-personal-report.pdf', 'Target': '/bucket3/customized-reports/${transfer:UserName}.pdf' } ]\'\nIn most cases, you can use this value instead of the scope-down policy to lock your user down to the designated home directory ('chroot'). To do this, you can set Entry to \'/\' and set Target to the HomeDirectory parameter value.\n\nNote\nIf the target of a logical directory entry does not exist in Amazon S3, the entry will be ignored. As a workaround, you can use the Amazon S3 api to create 0 byte objects as place holders for your directory. If using the CLI, use the s3api call instead of s3 so you can use the put-object operation. For example, you use the following: aws s3api put-object --bucket bucketname --key path/to/folder/ . Make sure that the end of the key name ends in a \'/\' for it to be considered a folder.\n\n\n(dict) --Represents an object that contains entries and a targets for HomeDirectoryMappings .\n\nEntry (string) -- [REQUIRED]Represents an entry and a target for HomeDirectoryMappings .\n\nTarget (string) -- [REQUIRED]Represents the map target that is used in a HomeDirectorymapEntry .\n\n\n\n\n

    :type Policy: string
    :param Policy: A scope-down policy for your user so you can use the same IAM role across multiple users. This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you can use inside this policy include ${Transfer:UserName} , ${Transfer:HomeDirectory} , and ${Transfer:HomeBucket} .\n\nNote\nFor scope-down policies, AWS Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the Policy argument.\nFor an example of a scope-down policy, see Creating a Scope-Down Policy .\nFor more information, see AssumeRole in the AWS Security Token Service API Reference .\n\n

    :type Role: string
    :param Role: [REQUIRED]\nThe IAM role that controls your users\' access to your Amazon S3 bucket. The policies attached to this role will determine the level of access you want to provide your users when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also contain a trust relationship that allows the file transfer protocol-enabled server to access your resources when servicing your users\' transfer requests.\n

    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server instance. This is the specific server that you added your user to.\n

    :type SshPublicKeyBody: string
    :param SshPublicKeyBody: The public portion of the Secure Shell (SSH) key used to authenticate the user to the file transfer protocol-enabled server.

    :type Tags: list
    :param Tags: Key-value pairs that can be used to group and search for users. Tags are metadata attached to users for any purpose.\n\n(dict) --Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called Group and assign the values Research and Accounting to that group.\n\nKey (string) -- [REQUIRED]The name assigned to the tag that you create.\n\nValue (string) -- [REQUIRED]Contains one or more values that you assigned to the key name you create.\n\n\n\n\n

    :type UserName: string
    :param UserName: [REQUIRED]\nA unique string that identifies a user and is associated with a file transfer protocol-enabled server as specified by the ServerId . This user name must be a minimum of 3 and a maximum of 32 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name can\'t start with a hyphen.\n

    :rtype: dict

ReturnsResponse Syntax
{
    'ServerId': 'string',
    'UserName': 'string'
}


Response Structure

(dict) --

ServerId (string) --
The ID of the file transfer protocol-enabled server that the user is attached to.

UserName (string) --
A unique string that identifies a user account associated with a file transfer protocol-enabled server.







Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceExistsException
Transfer.Client.exceptions.ResourceNotFoundException


    :return: {
        'ServerId': 'string',
        'UserName': 'string'
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceExistsException
    Transfer.Client.exceptions.ResourceNotFoundException
    
    """
    pass

def delete_server(ServerId=None):
    """
    Deletes the file transfer protocol-enabled server that you specify.
    No response returns from this operation.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.delete_server(
        ServerId='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA unique system-assigned identifier for a file transfer protocol-enabled server instance.\n

    """
    pass

def delete_ssh_public_key(ServerId=None, SshPublicKeyId=None, UserName=None):
    """
    Deletes a user\'s Secure Shell (SSH) public key.
    No response is returned from this operation.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.delete_ssh_public_key(
        ServerId='string',
        SshPublicKeyId='string',
        UserName='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server instance that has the user assigned to it.\n

    :type SshPublicKeyId: string
    :param SshPublicKeyId: [REQUIRED]\nA unique identifier used to reference your user\'s specific SSH key.\n

    :type UserName: string
    :param UserName: [REQUIRED]\nA unique string that identifies a user whose public key is being deleted.\n

    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    Transfer.Client.exceptions.ThrottlingException
    
    """
    pass

def delete_user(ServerId=None, UserName=None):
    """
    Deletes the user belonging to a file transfer protocol-enabled server you specify.
    No response returns from this operation.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.delete_user(
        ServerId='string',
        UserName='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server instance that has the user assigned to it.\n

    :type UserName: string
    :param UserName: [REQUIRED]\nA unique string that identifies a user that is being deleted from a file transfer protocol-enabled server.\n

    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    
    """
    pass

def describe_server(ServerId=None):
    """
    Describes a file transfer protocol-enabled server that you specify by passing the ServerId parameter.
    The response contains a description of a server\'s properties. When you set EndpointType to VPC, the response will contain the EndpointDetails .
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.describe_server(
        ServerId='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server.\n

    :rtype: dict
ReturnsResponse Syntax{
    'Server': {
        'Arn': 'string',
        'Certificate': 'string',
        'EndpointDetails': {
            'AddressAllocationIds': [
                'string',
            ],
            'SubnetIds': [
                'string',
            ],
            'VpcEndpointId': 'string',
            'VpcId': 'string'
        },
        'EndpointType': 'PUBLIC'|'VPC'|'VPC_ENDPOINT',
        'HostKeyFingerprint': 'string',
        'IdentityProviderDetails': {
            'Url': 'string',
            'InvocationRole': 'string'
        },
        'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY',
        'LoggingRole': 'string',
        'Protocols': [
            'SFTP'|'FTP'|'FTPS',
        ],
        'ServerId': 'string',
        'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
        'Tags': [
            {
                'Key': 'string',
                'Value': 'string'
            },
        ],
        'UserCount': 123
    }
}


Response Structure

(dict) --
Server (dict) --An array containing the properties of a file transfer protocol-enabled server with the ServerID you specified.

Arn (string) --Specifies the unique Amazon Resource Name (ARN) for a file transfer protocol-enabled server to be described.

Certificate (string) --The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when Protocols is set to FTPS .

EndpointDetails (dict) --The virtual private cloud (VPC) endpoint settings that you configured for your file transfer protocol-enabled server.

AddressAllocationIds (list) --A list of address allocation IDs that are required to attach an Elastic IP address to your file transfer protocol-enabled server\'s endpoint. This is only valid in the UpdateServer API.

Note
This property can only be use when EndpointType is set to VPC .


(string) --


SubnetIds (list) --A list of subnet IDs that are required to host your file transfer protocol-enabled server endpoint in your VPC.

(string) --


VpcEndpointId (string) --The ID of the VPC endpoint.

VpcId (string) --The VPC ID of the VPC in which a file transfer protocol-enabled server\'s endpoint will be hosted.



EndpointType (string) --The type of endpoint that your file transfer protocol-enabled server is connected to. If your server is connected to a VPC endpoint, your server isn\'t accessible over the public internet.

HostKeyFingerprint (string) --Contains the message-digest algorithm (MD5) hash of a file transfer protocol-enabled server\'s host key. This value is equivalent to the output of the ssh-keygen -l -E md5 -f my-new-server-key command.

IdentityProviderDetails (dict) --Specifies information to call a customer-supplied authentication API. This field is not populated when the IdentityProviderType of a file transfer protocol-enabled server is SERVICE_MANAGED .

Url (string) --Contains the location of the service endpoint used to authenticate users.

InvocationRole (string) --Provides the type of InvocationRole used to authenticate the user account.



IdentityProviderType (string) --Defines the mode of authentication method enabled for this service. A value of SERVICE_MANAGED means that you are using this file transfer protocol-enabled server to store and access user credentials within the service. A value of API_GATEWAY indicates that you have integrated an API Gateway endpoint that will be invoked for authenticating your user into the service.

LoggingRole (string) --An AWS Identity and Access Management (IAM) entity that allows a file transfer protocol-enabled server to turn on Amazon CloudWatch logging for Amazon S3 events. When set, user activity can be viewed in your CloudWatch logs.

Protocols (list) --Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server\'s endpoint. The available protocols are:

Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
File Transfer Protocol (FTP): Unencrypted file transfer


(string) --


ServerId (string) --Unique system-assigned identifier for a file transfer protocol-enabled server that you instantiate.

State (string) --The condition of a file transfer protocol-enabled server for the server that was described. A value of ONLINE indicates that the server can accept jobs and transfer files. A State value of OFFLINE means that the server cannot perform file transfer operations.
The states of STARTING and STOPPING indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of START_FAILED or STOP_FAILED can indicate an error condition.

Tags (list) --Contains the key-value pairs that you can use to search for and group file transfer protocol-enabled servers that were assigned to the server that was described.

(dict) --Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called Group and assign the values Research and Accounting to that group.

Key (string) --The name assigned to the tag that you create.

Value (string) --Contains one or more values that you assigned to the key name you create.





UserCount (integer) --The number of users that are assigned to a file transfer protocol-enabled server you specified with the ServerId .








Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceNotFoundException


    :return: {
        'Server': {
            'Arn': 'string',
            'Certificate': 'string',
            'EndpointDetails': {
                'AddressAllocationIds': [
                    'string',
                ],
                'SubnetIds': [
                    'string',
                ],
                'VpcEndpointId': 'string',
                'VpcId': 'string'
            },
            'EndpointType': 'PUBLIC'|'VPC'|'VPC_ENDPOINT',
            'HostKeyFingerprint': 'string',
            'IdentityProviderDetails': {
                'Url': 'string',
                'InvocationRole': 'string'
            },
            'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY',
            'LoggingRole': 'string',
            'Protocols': [
                'SFTP'|'FTP'|'FTPS',
            ],
            'ServerId': 'string',
            'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ],
            'UserCount': 123
        }
    }
    
    
    :returns: 
    (string) --
    
    """
    pass

def describe_user(ServerId=None, UserName=None):
    """
    Describes the user assigned to the specific file transfer protocol-enabled server, as identified by its ServerId property.
    The response from this call returns the properties of the user associated with the ServerId value that was specified.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.describe_user(
        ServerId='string',
        UserName='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server that has this user assigned.\n

    :type UserName: string
    :param UserName: [REQUIRED]\nThe name of the user assigned to one or more file transfer protocol-enabled servers. User names are part of the sign-in credentials to use the AWS Transfer Family service and perform file transfer tasks.\n

    :rtype: dict

ReturnsResponse Syntax
{
    'ServerId': 'string',
    'User': {
        'Arn': 'string',
        'HomeDirectory': 'string',
        'HomeDirectoryMappings': [
            {
                'Entry': 'string',
                'Target': 'string'
            },
        ],
        'HomeDirectoryType': 'PATH'|'LOGICAL',
        'Policy': 'string',
        'Role': 'string',
        'SshPublicKeys': [
            {
                'DateImported': datetime(2015, 1, 1),
                'SshPublicKeyBody': 'string',
                'SshPublicKeyId': 'string'
            },
        ],
        'Tags': [
            {
                'Key': 'string',
                'Value': 'string'
            },
        ],
        'UserName': 'string'
    }
}


Response Structure

(dict) --

ServerId (string) --
A system-assigned unique identifier for a file transfer protocol-enabled server that has this user assigned.

User (dict) --
An array containing the properties of the user account for the ServerID value that you specified.

Arn (string) --
Contains the unique Amazon Resource Name (ARN) for the user that was requested to be described.

HomeDirectory (string) --
Specifies the landing directory (or folder), which is the location that files are written to or read from in an Amazon S3 bucket for the described user. An example is ``/your s3 bucket name /home/username `` .

HomeDirectoryMappings (list) --
Logical directory mappings that you specified for what Amazon S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the "Entry " and "Target " pair, where Entry shows how the path is made visible and Target is the actual Amazon S3 path. If you only specify a target, it will be displayed as is. You will need to also make sure that your AWS IAM Role provides access to paths in Target .
In most cases, you can use this value instead of the scope-down policy to lock your user down to the designated home directory ("chroot"). To do this, you can set Entry to \'/\' and set Target to the HomeDirectory parameter value.

(dict) --
Represents an object that contains entries and a targets for HomeDirectoryMappings .

Entry (string) --
Represents an entry and a target for HomeDirectoryMappings .

Target (string) --
Represents the map target that is used in a HomeDirectorymapEntry .





HomeDirectoryType (string) --
The type of landing directory (folder) you mapped for your users to see when they log into the file transfer protocol-enabled server. If you set it to PATH , the user will see the absolute Amazon S3 bucket paths as is in their file transfer protocol clients. If you set it LOGICAL , you will need to provide mappings in the HomeDirectoryMappings for how you want to make Amazon S3 paths visible to your users.

Policy (string) --
Specifies the name of the policy in use for the described user.

Role (string) --
Specifies the IAM role that controls your users\' access to your Amazon S3 bucket. The policies attached to this role will determine the level of access you want to provide your users when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also contain a trust relationship that allows a file transfer protocol-enabled server to access your resources when servicing your users\' transfer requests.

SshPublicKeys (list) --
Contains the public key portion of the Secure Shell (SSH) keys stored for the described user.

(dict) --
Provides information about the public Secure Shell (SSH) key that is associated with a user account for the specific file transfer protocol-enabled server (as identified by ServerId ). The information returned includes the date the key was imported, the public key contents, and the public key ID. A user can store more than one SSH public key associated with their user name on a specific server.

DateImported (datetime) --
The date that the public key was added to the user account.

SshPublicKeyBody (string) --
The content of the SSH public key as specified by the PublicKeyId .

SshPublicKeyId (string) --
The SshPublicKeyId parameter contains the identifier of the public key.





Tags (list) --
Contains the key-value pairs for the user requested. Tag can be used to search for and group users for a variety of purposes.

(dict) --
Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called Group and assign the values Research and Accounting to that group.

Key (string) --
The name assigned to the tag that you create.

Value (string) --
Contains one or more values that you assigned to the key name you create.





UserName (string) --
The name of the user that was requested to be described. User names are used for authentication purposes. This is the string that will be used by your user when they log in to your file transfer protocol-enabled server.









Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceNotFoundException


    :return: {
        'ServerId': 'string',
        'User': {
            'Arn': 'string',
            'HomeDirectory': 'string',
            'HomeDirectoryMappings': [
                {
                    'Entry': 'string',
                    'Target': 'string'
                },
            ],
            'HomeDirectoryType': 'PATH'|'LOGICAL',
            'Policy': 'string',
            'Role': 'string',
            'SshPublicKeys': [
                {
                    'DateImported': datetime(2015, 1, 1),
                    'SshPublicKeyBody': 'string',
                    'SshPublicKeyId': 'string'
                },
            ],
            'Tags': [
                {
                    'Key': 'string',
                    'Value': 'string'
                },
            ],
            'UserName': 'string'
        }
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    
    """
    pass

def generate_presigned_url(ClientMethod=None, Params=None, ExpiresIn=None, HttpMethod=None):
    """
    Generate a presigned url given a client, its method, and arguments
    
    :type ClientMethod: string
    :param ClientMethod: The client method to presign for

    :type Params: dict
    :param Params: The parameters normally passed to\nClientMethod.

    :type ExpiresIn: int
    :param ExpiresIn: The number of seconds the presigned url is valid\nfor. By default it expires in an hour (3600 seconds)

    :type HttpMethod: string
    :param HttpMethod: The http method to use on the generated url. By\ndefault, the http method is whatever is used in the method\'s model.

    """
    pass

def get_paginator(operation_name=None):
    """
    Create a paginator for an operation.
    
    :type operation_name: string
    :param operation_name: The operation name. This is the same name\nas the method name on the client. For example, if the\nmethod name is create_foo, and you\'d normally invoke the\noperation as client.create_foo(**kwargs), if the\ncreate_foo operation can be paginated, you can use the\ncall client.get_paginator('create_foo').

    :rtype: L{botocore.paginate.Paginator}
ReturnsA paginator object.


    """
    pass

def get_waiter(waiter_name=None):
    """
    Returns an object that can wait for some condition.
    
    :type waiter_name: str
    :param waiter_name: The name of the waiter to get. See the waiters\nsection of the service docs for a list of available waiters.

    :rtype: botocore.waiter.Waiter


    """
    pass

def import_ssh_public_key(ServerId=None, SshPublicKeyBody=None, UserName=None):
    """
    Adds a Secure Shell (SSH) public key to a user account identified by a UserName value assigned to the specific file transfer protocol-enabled server, identified by ServerId .
    The response returns the UserName value, the ServerId value, and the name of the SshPublicKeyId .
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.import_ssh_public_key(
        ServerId='string',
        SshPublicKeyBody='string',
        UserName='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server.\n

    :type SshPublicKeyBody: string
    :param SshPublicKeyBody: [REQUIRED]\nThe public key portion of an SSH key pair.\n

    :type UserName: string
    :param UserName: [REQUIRED]\nThe name of the user account that is assigned to one or more file transfer protocol-enabled servers.\n

    :rtype: dict

ReturnsResponse Syntax
{
    'ServerId': 'string',
    'SshPublicKeyId': 'string',
    'UserName': 'string'
}


Response Structure

(dict) --
Identifies the user, the file transfer protocol-enabled server they belong to, and the identifier of the SSH public key associated with that user. A user can have more than one key on each server that they are associated with.

ServerId (string) --
A system-assigned unique identifier for a file transfer protocol-enabled server.

SshPublicKeyId (string) --
The name given to a public key by the system that was imported.

UserName (string) --
A user name assigned to the ServerID value that you specified.







Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceExistsException
Transfer.Client.exceptions.ResourceNotFoundException
Transfer.Client.exceptions.ThrottlingException


    :return: {
        'ServerId': 'string',
        'SshPublicKeyId': 'string',
        'UserName': 'string'
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceExistsException
    Transfer.Client.exceptions.ResourceNotFoundException
    Transfer.Client.exceptions.ThrottlingException
    
    """
    pass

def list_servers(MaxResults=None, NextToken=None):
    """
    Lists the file transfer protocol-enabled servers that are associated with your AWS account.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.list_servers(
        MaxResults=123,
        NextToken='string'
    )
    
    
    :type MaxResults: integer
    :param MaxResults: Specifies the number of file transfer protocol-enabled servers to return as a response to the ListServers query.

    :type NextToken: string
    :param NextToken: When additional results are obtained from the``ListServers`` command, a NextToken parameter is returned in the output. You can then pass the NextToken parameter in a subsequent command to continue listing additional file transfer protocol-enabled servers.

    :rtype: dict

ReturnsResponse Syntax
{
    'NextToken': 'string',
    'Servers': [
        {
            'Arn': 'string',
            'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY',
            'EndpointType': 'PUBLIC'|'VPC'|'VPC_ENDPOINT',
            'LoggingRole': 'string',
            'ServerId': 'string',
            'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
            'UserCount': 123
        },
    ]
}


Response Structure

(dict) --

NextToken (string) --
When you can get additional results from the ListServers operation, a NextToken parameter is returned in the output. In a following command, you can pass in the NextToken parameter to continue listing additional file transfer protocol-enabled servers.

Servers (list) --
An array of file transfer protocol-enabled servers that were listed.

(dict) --
Returns properties of a file transfer protocol-enabled server that was specified.

Arn (string) --
The unique Amazon Resource Name (ARN) for a file transfer protocol-enabled server to be listed.

IdentityProviderType (string) --
The authentication method used to validate a user for a file transfer protocol-enabled server that was specified. This can include Secure Shell (SSH), user name and password combinations, or your own custom authentication method. Valid values include SERVICE_MANAGED or API_GATEWAY .

EndpointType (string) --
The type of VPC endpoint that your file transfer protocol-enabled server is connected to. If your server is connected to a VPC endpoint, your server isn\'t accessible over the public internet.

LoggingRole (string) --
The AWS Identity and Access Management (IAM) entity that allows a file transfer protocol-enabled server to turn on Amazon CloudWatch logging.

ServerId (string) --
The unique system assigned identifier for a file transfer protocol-enabled servers that were listed.

State (string) --
Describes the condition of a file transfer protocol-enabled server for the server that was described. A value of ONLINE indicates that the server can accept jobs and transfer files. A State value of OFFLINE means that the server cannot perform file transfer operations.
The states of STARTING and STOPPING indicate that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of START_FAILED or STOP_FAILED can indicate an error condition.

UserCount (integer) --
A numeric value that indicates the number of users that are assigned to a file transfer protocol-enabled server you specified with the ServerId .











Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidNextTokenException
Transfer.Client.exceptions.InvalidRequestException


    :return: {
        'NextToken': 'string',
        'Servers': [
            {
                'Arn': 'string',
                'IdentityProviderType': 'SERVICE_MANAGED'|'API_GATEWAY',
                'EndpointType': 'PUBLIC'|'VPC'|'VPC_ENDPOINT',
                'LoggingRole': 'string',
                'ServerId': 'string',
                'State': 'OFFLINE'|'ONLINE'|'STARTING'|'STOPPING'|'START_FAILED'|'STOP_FAILED',
                'UserCount': 123
            },
        ]
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidNextTokenException
    Transfer.Client.exceptions.InvalidRequestException
    
    """
    pass

def list_tags_for_resource(Arn=None, MaxResults=None, NextToken=None):
    """
    Lists all of the tags associated with the Amazon Resource Number (ARN) you specify. The resource can be a user, server, or role.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.list_tags_for_resource(
        Arn='string',
        MaxResults=123,
        NextToken='string'
    )
    
    
    :type Arn: string
    :param Arn: [REQUIRED]\nRequests the tags associated with a particular Amazon Resource Name (ARN). An ARN is an identifier for a specific AWS resource, such as a server, user, or role.\n

    :type MaxResults: integer
    :param MaxResults: Specifies the number of tags to return as a response to the ListTagsForResource request.

    :type NextToken: string
    :param NextToken: When you request additional results from the ListTagsForResource operation, a NextToken parameter is returned in the input. You can then pass in a subsequent command to the NextToken parameter to continue listing additional tags.

    :rtype: dict

ReturnsResponse Syntax
{
    'Arn': 'string',
    'NextToken': 'string',
    'Tags': [
        {
            'Key': 'string',
            'Value': 'string'
        },
    ]
}


Response Structure

(dict) --

Arn (string) --
The ARN you specified to list the tags of.

NextToken (string) --
When you can get additional results from the ListTagsForResource call, a NextToken parameter is returned in the output. You can then pass in a subsequent command to the NextToken parameter to continue listing additional tags.

Tags (list) --
Key-value pairs that are assigned to a resource, usually for the purpose of grouping and searching for items. Tags are metadata that you define.

(dict) --
Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called Group and assign the values Research and Accounting to that group.

Key (string) --
The name assigned to the tag that you create.

Value (string) --
Contains one or more values that you assigned to the key name you create.











Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidNextTokenException
Transfer.Client.exceptions.InvalidRequestException


    :return: {
        'Arn': 'string',
        'NextToken': 'string',
        'Tags': [
            {
                'Key': 'string',
                'Value': 'string'
            },
        ]
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidNextTokenException
    Transfer.Client.exceptions.InvalidRequestException
    
    """
    pass

def list_users(MaxResults=None, NextToken=None, ServerId=None):
    """
    Lists the users for a file transfer protocol-enabled server that you specify by passing the ServerId parameter.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.list_users(
        MaxResults=123,
        NextToken='string',
        ServerId='string'
    )
    
    
    :type MaxResults: integer
    :param MaxResults: Specifies the number of users to return as a response to the ListUsers request.

    :type NextToken: string
    :param NextToken: When you can get additional results from the ListUsers call, a NextToken parameter is returned in the output. You can then pass in a subsequent command to the NextToken parameter to continue listing additional users.

    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server that has users assigned to it.\n

    :rtype: dict

ReturnsResponse Syntax
{
    'NextToken': 'string',
    'ServerId': 'string',
    'Users': [
        {
            'Arn': 'string',
            'HomeDirectory': 'string',
            'HomeDirectoryType': 'PATH'|'LOGICAL',
            'Role': 'string',
            'SshPublicKeyCount': 123,
            'UserName': 'string'
        },
    ]
}


Response Structure

(dict) --

NextToken (string) --
When you can get additional results from the ListUsers call, a NextToken parameter is returned in the output. You can then pass in a subsequent command to the NextToken parameter to continue listing additional users.

ServerId (string) --
A system-assigned unique identifier for a file transfer protocol-enabled server that the users are assigned to.

Users (list) --
Returns the user accounts and their properties for the ServerId value that you specify.

(dict) --
Returns properties of the user that you specify.

Arn (string) --
The unique Amazon Resource Name (ARN) for the user that you want to learn about.

HomeDirectory (string) --
Specifies the location that files are written to or read from an Amazon S3 bucket for the user you specify by their ARN.

HomeDirectoryType (string) --
The type of landing directory (folder) you mapped for your users\' home directory. If you set it to PATH , the user will see the absolute Amazon S3 bucket paths as is in their file transfer protocol clients. If you set it LOGICAL , you will need to provide mappings in the HomeDirectoryMappings for how you want to make Amazon S3 paths visible to your users.

Role (string) --
The role in use by this user. A role is an AWS Identity and Access Management (IAM) entity that, in this case, allows a file transfer protocol-enabled server to act on a user\'s behalf. It allows the server to inherit the trust relationship that enables that user to perform file operations to their Amazon S3 bucket.

SshPublicKeyCount (integer) --
The number of SSH public keys stored for the user you specified.

UserName (string) --
The name of the user whose ARN was specified. User names are used for authentication purposes.











Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidNextTokenException
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceNotFoundException


    :return: {
        'NextToken': 'string',
        'ServerId': 'string',
        'Users': [
            {
                'Arn': 'string',
                'HomeDirectory': 'string',
                'HomeDirectoryType': 'PATH'|'LOGICAL',
                'Role': 'string',
                'SshPublicKeyCount': 123,
                'UserName': 'string'
            },
        ]
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidNextTokenException
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    
    """
    pass

def start_server(ServerId=None):
    """
    Changes the state of a file transfer protocol-enabled server from OFFLINE to ONLINE . It has no impact on a server that is already ONLINE . An ONLINE server can accept and process file transfer jobs.
    The state of STARTING indicates that the server is in an intermediate state, either not fully able to respond, or not fully online. The values of START_FAILED can indicate an error condition.
    No response is returned from this call.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.start_server(
        ServerId='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server that you start.\n

    """
    pass

def stop_server(ServerId=None):
    """
    Changes the state of a file transfer protocol-enabled server from ONLINE to OFFLINE . An OFFLINE server cannot accept and process file transfer jobs. Information tied to your server, such as server and user properties, are not affected by stopping your server. Stopping the server will not reduce or impact your file transfer protocol endpoint billing.
    The state of STOPPING indicates that the server is in an intermediate state, either not fully able to respond, or not fully offline. The values of STOP_FAILED can indicate an error condition.
    No response is returned from this call.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.stop_server(
        ServerId='string'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server that you stopped.\n

    """
    pass

def tag_resource(Arn=None, Tags=None):
    """
    Attaches a key-value pair to a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.
    There is no response returned from this call.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.tag_resource(
        Arn='string',
        Tags=[
            {
                'Key': 'string',
                'Value': 'string'
            },
        ]
    )
    
    
    :type Arn: string
    :param Arn: [REQUIRED]\nAn Amazon Resource Name (ARN) for a specific AWS resource, such as a server, user, or role.\n

    :type Tags: list
    :param Tags: [REQUIRED]\nKey-value pairs assigned to ARNs that you can use to group and search for resources by type. You can attach this metadata to user accounts for any purpose.\n\n(dict) --Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called Group and assign the values Research and Accounting to that group.\n\nKey (string) -- [REQUIRED]The name assigned to the tag that you create.\n\nValue (string) -- [REQUIRED]Contains one or more values that you assigned to the key name you create.\n\n\n\n\n

    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    
    """
    pass

def test_identity_provider(ServerId=None, UserName=None, UserPassword=None, ServerProtocol=None):
    """
    If the IdentityProviderType of a file transfer protocol-enabled server is API_Gateway , tests whether your API Gateway is set up successfully. We highly recommend that you call this operation to test your authentication method as soon as you create your server. By doing so, you can troubleshoot issues with the API Gateway integration to ensure that your users can successfully use the service.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.test_identity_provider(
        ServerId='string',
        UserName='string',
        UserPassword='string',
        ServerProtocol='SFTP'|'FTP'|'FTPS'
    )
    
    
    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned identifier for a specific file transfer protocol-enabled server. That server\'s user authentication method is tested with a user name and password.\n

    :type UserName: string
    :param UserName: [REQUIRED]\nThe name of the user account to be tested.\n

    :type UserPassword: string
    :param UserPassword: The password of the user account to be tested.

    :type ServerProtocol: string
    :param ServerProtocol: The type of file transfer protocol to be tested.\nThe available protocols are:\n\nSecure Shell (SSH) File Transfer Protocol (SFTP)\nFile Transfer Protocol Secure (FTPS)\nFile Transfer Protocol (FTP)\n\n

    :rtype: dict

ReturnsResponse Syntax
{
    'Response': 'string',
    'StatusCode': 123,
    'Message': 'string',
    'Url': 'string'
}


Response Structure

(dict) --

Response (string) --
The response that is returned from your API Gateway.

StatusCode (integer) --
The HTTP status code that is the response from your API Gateway.

Message (string) --
A message that indicates whether the test was successful or not.

Url (string) --
The endpoint of the service used to authenticate a user.







Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceNotFoundException


    :return: {
        'Response': 'string',
        'StatusCode': 123,
        'Message': 'string',
        'Url': 'string'
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    
    """
    pass

def untag_resource(Arn=None, TagKeys=None):
    """
    Detaches a key-value pair from a resource, as identified by its Amazon Resource Name (ARN). Resources are users, servers, roles, and other entities.
    No response is returned from this call.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.untag_resource(
        Arn='string',
        TagKeys=[
            'string',
        ]
    )
    
    
    :type Arn: string
    :param Arn: [REQUIRED]\nThe value of the resource that will have the tag removed. An Amazon Resource Name (ARN) is an identifier for a specific AWS resource, such as a server, user, or role.\n

    :type TagKeys: list
    :param TagKeys: [REQUIRED]\nTagKeys are key-value pairs assigned to ARNs that can be used to group and search for resources by type. This metadata can be attached to resources for any purpose.\n\n(string) --\n\n

    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    
    """
    pass

def update_server(Certificate=None, EndpointDetails=None, EndpointType=None, HostKey=None, IdentityProviderDetails=None, LoggingRole=None, Protocols=None, ServerId=None):
    """
    Updates the file transfer protocol-enabled server\'s properties after that server has been created.
    The UpdateServer call returns the ServerId of the server you updated.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.update_server(
        Certificate='string',
        EndpointDetails={
            'AddressAllocationIds': [
                'string',
            ],
            'SubnetIds': [
                'string',
            ],
            'VpcEndpointId': 'string',
            'VpcId': 'string'
        },
        EndpointType='PUBLIC'|'VPC'|'VPC_ENDPOINT',
        HostKey='string',
        IdentityProviderDetails={
            'Url': 'string',
            'InvocationRole': 'string'
        },
        LoggingRole='string',
        Protocols=[
            'SFTP'|'FTP'|'FTPS',
        ],
        ServerId='string'
    )
    
    
    :type Certificate: string
    :param Certificate: The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when Protocols is set to FTPS .

    :type EndpointDetails: dict
    :param EndpointDetails: The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled server. With a VPC endpoint, you can restrict access to your server to resources only within your VPC. To control incoming internet traffic, you will need to associate one or more Elastic IP addresses with your server\'s endpoint.\n\nAddressAllocationIds (list) --A list of address allocation IDs that are required to attach an Elastic IP address to your file transfer protocol-enabled server\'s endpoint. This is only valid in the UpdateServer API.\n\nNote\nThis property can only be use when EndpointType is set to VPC .\n\n\n(string) --\n\n\nSubnetIds (list) --A list of subnet IDs that are required to host your file transfer protocol-enabled server endpoint in your VPC.\n\n(string) --\n\n\nVpcEndpointId (string) --The ID of the VPC endpoint.\n\nVpcId (string) --The VPC ID of the VPC in which a file transfer protocol-enabled server\'s endpoint will be hosted.\n\n\n

    :type EndpointType: string
    :param EndpointType: The type of endpoint that you want your file transfer protocol-enabled server to connect to. You can choose to connect to the public internet or a VPC endpoint. With a VPC endpoint, your server isn\'t accessible over the public internet.

    :type HostKey: string
    :param HostKey: The RSA private key as generated by ssh-keygen -N '' -f my-new-server-key .\n\nWarning\nIf you aren\'t planning to migrate existing users from an existing file transfer protocol-enabled server to a new server, don\'t update the host key. Accidentally changing a server\'s host key can be disruptive.\n\nFor more information, see Changing the Host Key for Your AWS Transfer Family Server in the AWS Transfer Family User Guide .\n

    :type IdentityProviderDetails: dict
    :param IdentityProviderDetails: An array containing all of the information required to call a customer\'s authentication API method.\n\nUrl (string) --Contains the location of the service endpoint used to authenticate users.\n\nInvocationRole (string) --Provides the type of InvocationRole used to authenticate the user account.\n\n\n

    :type LoggingRole: string
    :param LoggingRole: Changes the AWS Identity and Access Management (IAM) role that allows Amazon S3 events to be logged in Amazon CloudWatch, turning logging on or off.

    :type Protocols: list
    :param Protocols: Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server\'s endpoint. The available protocols are:\n\nSecure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH\nFile Transfer Protocol Secure (FTPS): File transfer with TLS encryption\nFile Transfer Protocol (FTP): Unencrypted file transfer\n\n\n(string) --\n\n

    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server instance that the user account is assigned to.\n

    :rtype: dict

ReturnsResponse Syntax
{
    'ServerId': 'string'
}


Response Structure

(dict) --

ServerId (string) --
A system-assigned unique identifier for a file transfer protocol-enabled server that the user account is assigned to.







Exceptions

Transfer.Client.exceptions.AccessDeniedException
Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.ConflictException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceExistsException
Transfer.Client.exceptions.ResourceNotFoundException
Transfer.Client.exceptions.ThrottlingException


    :return: {
        'ServerId': 'string'
    }
    
    
    :returns: 
    Transfer.Client.exceptions.AccessDeniedException
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.ConflictException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceExistsException
    Transfer.Client.exceptions.ResourceNotFoundException
    Transfer.Client.exceptions.ThrottlingException
    
    """
    pass

def update_user(HomeDirectory=None, HomeDirectoryType=None, HomeDirectoryMappings=None, Policy=None, Role=None, ServerId=None, UserName=None):
    """
    Assigns new properties to a user. Parameters you pass modify any or all of the following: the home directory, role, and policy for the UserName and ServerId you specify.
    The response returns the ServerId and the UserName for the updated user.
    See also: AWS API Documentation
    
    Exceptions
    
    :example: response = client.update_user(
        HomeDirectory='string',
        HomeDirectoryType='PATH'|'LOGICAL',
        HomeDirectoryMappings=[
            {
                'Entry': 'string',
                'Target': 'string'
            },
        ],
        Policy='string',
        Role='string',
        ServerId='string',
        UserName='string'
    )
    
    
    :type HomeDirectory: string
    :param HomeDirectory: Specifies the landing directory (folder) for a user when they log in to the file transfer protocol-enabled server using their file transfer protocol client.\nAn example is your-Amazon-S3-bucket-name>/home/username .\n

    :type HomeDirectoryType: string
    :param HomeDirectoryType: The type of landing directory (folder) you want your users\' home directory to be when they log into the file transfer protocol-enabled server. If you set it to PATH , the user will see the absolute Amazon S3 bucket paths as is in their file transfer protocol clients. If you set it LOGICAL , you will need to provide mappings in the HomeDirectoryMappings for how you want to make Amazon S3 paths visible to your users.

    :type HomeDirectoryMappings: list
    :param HomeDirectoryMappings: Logical directory mappings that specify what Amazon S3 paths and keys should be visible to your user and how you want to make them visible. You will need to specify the 'Entry ' and 'Target ' pair, where Entry shows how the path is made visible and Target is the actual Amazon S3 path. If you only specify a target, it will be displayed as is. You will need to also make sure that your AWS IAM Role provides access to paths in Target . The following is an example.\n\n\'[ '/bucket2/documentation', { 'Entry': 'your-personal-report.pdf', 'Target': '/bucket3/customized-reports/${transfer:UserName}.pdf' } ]\'\nIn most cases, you can use this value instead of the scope-down policy to lock your user down to the designated home directory ('chroot'). To do this, you can set Entry to \'/\' and set Target to the HomeDirectory parameter value.\n\nNote\nIf the target of a logical directory entry does not exist in Amazon S3, the entry will be ignored. As a workaround, you can use the Amazon S3 api to create 0 byte objects as place holders for your directory. If using the CLI, use the s3api call instead of s3 so you can use the put-object operation. For example, you use the following: aws s3api put-object --bucket bucketname --key path/to/folder/ . Make sure that the end of the key name ends in a / for it to be considered a folder.\n\n\n(dict) --Represents an object that contains entries and a targets for HomeDirectoryMappings .\n\nEntry (string) -- [REQUIRED]Represents an entry and a target for HomeDirectoryMappings .\n\nTarget (string) -- [REQUIRED]Represents the map target that is used in a HomeDirectorymapEntry .\n\n\n\n\n

    :type Policy: string
    :param Policy: Allows you to supply a scope-down policy for your user so you can use the same AWS Identity and Access Management (IAM) role across multiple users. The policy scopes down user access to portions of your Amazon S3 bucket. Variables you can use inside this policy include ${Transfer:UserName} , ${Transfer:HomeDirectory} , and ${Transfer:HomeBucket} .\n\nNote\nFor scope-down policies, AWS Transfer Family stores the policy as a JSON blob, instead of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass it in the Policy argument.\nFor an example of a scope-down policy, see Creating a Scope-Down Policy .\nFor more information, see AssumeRole in the AWS Security Token Service API Reference .\n\n

    :type Role: string
    :param Role: The IAM role that controls your users\' access to your Amazon S3 bucket. The policies attached to this role will determine the level of access you want to provide your users when transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also contain a trust relationship that allows the file transfer protocol-enabled server to access your resources when servicing your users\' transfer requests.

    :type ServerId: string
    :param ServerId: [REQUIRED]\nA system-assigned unique identifier for a file transfer protocol-enabled server instance that the user account is assigned to.\n

    :type UserName: string
    :param UserName: [REQUIRED]\nA unique string that identifies a user and is associated with a file transfer protocol-enabled server as specified by the ServerId . This is the string that will be used by your user when they log in to your server. This user name is a minimum of 3 and a maximum of 32 characters long. The following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name can\'t start with a hyphen.\n

    :rtype: dict

ReturnsResponse Syntax
{
    'ServerId': 'string',
    'UserName': 'string'
}


Response Structure

(dict) --

UpdateUserResponse returns the user name and file transfer protocol-enabled server identifier for the request to update a user\'s properties.


ServerId (string) --
A system-assigned unique identifier for a file transfer protocol-enabled server instance that the user account is assigned to.

UserName (string) --
The unique identifier for a user that is assigned to a file transfer protocol-enabled server instance that was specified in the request.







Exceptions

Transfer.Client.exceptions.ServiceUnavailableException
Transfer.Client.exceptions.InternalServiceError
Transfer.Client.exceptions.InvalidRequestException
Transfer.Client.exceptions.ResourceNotFoundException
Transfer.Client.exceptions.ThrottlingException


    :return: {
        'ServerId': 'string',
        'UserName': 'string'
    }
    
    
    :returns: 
    Transfer.Client.exceptions.ServiceUnavailableException
    Transfer.Client.exceptions.InternalServiceError
    Transfer.Client.exceptions.InvalidRequestException
    Transfer.Client.exceptions.ResourceNotFoundException
    Transfer.Client.exceptions.ThrottlingException
    
    """
    pass

