# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import common_pb2 as common__pb2
from . import operationLogService_pb2 as operationLogService__pb2


class OperationLogServiceStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Log = channel.unary_unary(
                '/longleding.operation_log.OperationLogService/Log',
                request_serializer=operationLogService__pb2.OperationLogMessage.SerializeToString,
                response_deserializer=common__pb2.ResponseMessage.FromString,
                )
        self.GetOperationLogs = channel.unary_unary(
                '/longleding.operation_log.OperationLogService/GetOperationLogs',
                request_serializer=operationLogService__pb2.GetOperationLogsRequest.SerializeToString,
                response_deserializer=common__pb2.ResponseMessage.FromString,
                )


class OperationLogServiceServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Log(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOperationLogs(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OperationLogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Log': grpc.unary_unary_rpc_method_handler(
                    servicer.Log,
                    request_deserializer=operationLogService__pb2.OperationLogMessage.FromString,
                    response_serializer=common__pb2.ResponseMessage.SerializeToString,
            ),
            'GetOperationLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOperationLogs,
                    request_deserializer=operationLogService__pb2.GetOperationLogsRequest.FromString,
                    response_serializer=common__pb2.ResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'longleding.operation_log.OperationLogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OperationLogService(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Log(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/longleding.operation_log.OperationLogService/Log',
            operationLogService__pb2.OperationLogMessage.SerializeToString,
            common__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOperationLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/longleding.operation_log.OperationLogService/GetOperationLogs',
            operationLogService__pb2.GetOperationLogsRequest.SerializeToString,
            common__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class OpLogStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Log = channel.unary_unary(
                '/longleding.operation_log.OpLog/Log',
                request_serializer=common__pb2.RequestMessage.SerializeToString,
                response_deserializer=common__pb2.ResponseMessage.FromString,
                )
        self.GetOperationLogs = channel.unary_unary(
                '/longleding.operation_log.OpLog/GetOperationLogs',
                request_serializer=common__pb2.RequestMessage.SerializeToString,
                response_deserializer=common__pb2.ResponseMessage.FromString,
                )


class OpLogServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Log(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOperationLogs(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OpLogServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Log': grpc.unary_unary_rpc_method_handler(
                    servicer.Log,
                    request_deserializer=common__pb2.RequestMessage.FromString,
                    response_serializer=common__pb2.ResponseMessage.SerializeToString,
            ),
            'GetOperationLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOperationLogs,
                    request_deserializer=common__pb2.RequestMessage.FromString,
                    response_serializer=common__pb2.ResponseMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'longleding.operation_log.OpLog', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OpLog(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Log(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/longleding.operation_log.OpLog/Log',
            common__pb2.RequestMessage.SerializeToString,
            common__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOperationLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/longleding.operation_log.OpLog/GetOperationLogs',
            common__pb2.RequestMessage.SerializeToString,
            common__pb2.ResponseMessage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
