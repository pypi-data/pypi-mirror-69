# sqlalchemy_turbodbc/dialect.py
# Copyright (C) 2016 Dirk Jonker
#
# This module is released under
# the MIT License: https://opensource.org/licenses/MIT
#
# Adapted from SQLAlchemy
# dialects/mssql/pyodbc.py
# Copyright (C) 2005-2016 the SQLAlchemy authors and contributors

"""
.. dialect:: mssql+turbodbc
    :name: Turbodbc
    :dbapi: Turbodbc
    :connectstring: mssql+turbodbc://<username>:<password>@<dsnname>
    :url: https://github.com/blue-yonder/turbodbc
"""

import re

from sqlalchemy.dialects.mssql.base import MSExecutionContext, MSDialect
from sqlalchemy import exc

from .connector import TurbodbcConnector


class MSExecutionContext_turbodbc(MSExecutionContext):
    _embedded_scope_identity = False

    def create_cursor(self):
        """Set the arraysize to 100 by default to speed up fetchmany's."""
        return self._dbapi_connection.cursor()

    def pre_exec(self):
        """where appropriate, issue "select scope_identity()" in the same
        statement.

        Background on why "scope_identity()" is preferable to "@@identity":
        http://msdn.microsoft.com/en-us/library/ms190315.aspx

        Background on why we attempt to embed "scope_identity()" into the same
        statement as the INSERT:
        http://code.google.com/p/pyodbc/wiki/FAQs#How_do_I_retrieve_autogenerated/identity_values?

        """

        super(MSExecutionContext_turbodbc, self).pre_exec()

        # don't embed the scope_identity select into an
        # "INSERT .. DEFAULT VALUES"
        if self._select_lastrowid and \
                self.dialect.use_scope_identity and \
                len(self.parameters[0]):
            self._embedded_scope_identity = True

            self.statement += "; select scope_identity()"


class MSDialect_turbodbc(TurbodbcConnector, MSDialect):

    default_paramstyle = 'qmark'

    execution_ctx_cls = MSExecutionContext_turbodbc

    def __init__(self, description_encoding=None, **params):
        if 'description_encoding' in params:
            self.description_encoding = params.pop('description_encoding')
        super(MSDialect_turbodbc, self).__init__(**params)
        self.use_scope_identity = False

    def do_executemany(self, cursor, statement, parameters, context=None):
        cursor.executemany(statement, list(parameters))

    def _get_server_version_info(self, connection):
        try:
            # SERVERPROPERTY returns the SQL_VARIANT type which is not
            # supported, so we cast it to varchar
            stmt = "SELECT CAST(SERVERPROPERTY('ProductVersion') AS VARCHAR)"
            raw = connection.scalar(stmt)
        except exc.DBAPIError:
            # SQL Server docs indicate this function isn't present prior to
            # 2008; additionally, unknown combinations of drivers aren't
            # able to run this query.
            return (10, 0, 0)
        else:
            version = []
            r = re.compile(r'[.\-]')
            for n in r.split(raw):
                try:
                    version.append(int(n))
                except ValueError:
                    version.append(n)
            return tuple(version)
