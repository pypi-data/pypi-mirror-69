# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusSlamPy
else:
    import _VisusSlamPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusSlamPy.delete_SwigPyIterator

    def value(self):
        return _VisusSlamPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusSlamPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusSlamPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusSlamPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusSlamPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusSlamPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusSlamPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusSlamPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusSlamPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusSlamPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusSlamPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusSlamPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusSlamPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusSlamPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusSlamPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusSlamPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusSlamPy:
_VisusSlamPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusSlamPy.SHARED_PTR_DISOWN
class VectorOfCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusSlamPy.VectorOfCamera_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusSlamPy.VectorOfCamera___nonzero__(self)

    def __bool__(self):
        return _VisusSlamPy.VectorOfCamera___bool__(self)

    def __len__(self):
        return _VisusSlamPy.VectorOfCamera___len__(self)

    def __getslice__(self, i, j):
        return _VisusSlamPy.VectorOfCamera___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusSlamPy.VectorOfCamera___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusSlamPy.VectorOfCamera___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusSlamPy.VectorOfCamera___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusSlamPy.VectorOfCamera___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusSlamPy.VectorOfCamera___setitem__(self, *args)

    def pop(self):
        return _VisusSlamPy.VectorOfCamera_pop(self)

    def append(self, x):
        return _VisusSlamPy.VectorOfCamera_append(self, x)

    def empty(self):
        return _VisusSlamPy.VectorOfCamera_empty(self)

    def size(self):
        return _VisusSlamPy.VectorOfCamera_size(self)

    def swap(self, v):
        return _VisusSlamPy.VectorOfCamera_swap(self, v)

    def begin(self):
        return _VisusSlamPy.VectorOfCamera_begin(self)

    def end(self):
        return _VisusSlamPy.VectorOfCamera_end(self)

    def rbegin(self):
        return _VisusSlamPy.VectorOfCamera_rbegin(self)

    def rend(self):
        return _VisusSlamPy.VectorOfCamera_rend(self)

    def clear(self):
        return _VisusSlamPy.VectorOfCamera_clear(self)

    def get_allocator(self):
        return _VisusSlamPy.VectorOfCamera_get_allocator(self)

    def pop_back(self):
        return _VisusSlamPy.VectorOfCamera_pop_back(self)

    def erase(self, *args):
        return _VisusSlamPy.VectorOfCamera_erase(self, *args)

    def __init__(self, *args):
        _VisusSlamPy.VectorOfCamera_swiginit(self, _VisusSlamPy.new_VectorOfCamera(*args))

    def push_back(self, x):
        return _VisusSlamPy.VectorOfCamera_push_back(self, x)

    def front(self):
        return _VisusSlamPy.VectorOfCamera_front(self)

    def back(self):
        return _VisusSlamPy.VectorOfCamera_back(self)

    def assign(self, n, x):
        return _VisusSlamPy.VectorOfCamera_assign(self, n, x)

    def resize(self, *args):
        return _VisusSlamPy.VectorOfCamera_resize(self, *args)

    def insert(self, *args):
        return _VisusSlamPy.VectorOfCamera_insert(self, *args)

    def reserve(self, n):
        return _VisusSlamPy.VectorOfCamera_reserve(self, n)

    def capacity(self):
        return _VisusSlamPy.VectorOfCamera_capacity(self)
    __swig_destroy__ = _VisusSlamPy.delete_VectorOfCamera

# Register VectorOfCamera in _VisusSlamPy:
_VisusSlamPy.VectorOfCamera_swigregister(VectorOfCamera)

class VectorOfMatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusSlamPy.VectorOfMatch_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusSlamPy.VectorOfMatch___nonzero__(self)

    def __bool__(self):
        return _VisusSlamPy.VectorOfMatch___bool__(self)

    def __len__(self):
        return _VisusSlamPy.VectorOfMatch___len__(self)

    def __getslice__(self, i, j):
        return _VisusSlamPy.VectorOfMatch___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusSlamPy.VectorOfMatch___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusSlamPy.VectorOfMatch___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusSlamPy.VectorOfMatch___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusSlamPy.VectorOfMatch___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusSlamPy.VectorOfMatch___setitem__(self, *args)

    def pop(self):
        return _VisusSlamPy.VectorOfMatch_pop(self)

    def append(self, x):
        return _VisusSlamPy.VectorOfMatch_append(self, x)

    def empty(self):
        return _VisusSlamPy.VectorOfMatch_empty(self)

    def size(self):
        return _VisusSlamPy.VectorOfMatch_size(self)

    def swap(self, v):
        return _VisusSlamPy.VectorOfMatch_swap(self, v)

    def begin(self):
        return _VisusSlamPy.VectorOfMatch_begin(self)

    def end(self):
        return _VisusSlamPy.VectorOfMatch_end(self)

    def rbegin(self):
        return _VisusSlamPy.VectorOfMatch_rbegin(self)

    def rend(self):
        return _VisusSlamPy.VectorOfMatch_rend(self)

    def clear(self):
        return _VisusSlamPy.VectorOfMatch_clear(self)

    def get_allocator(self):
        return _VisusSlamPy.VectorOfMatch_get_allocator(self)

    def pop_back(self):
        return _VisusSlamPy.VectorOfMatch_pop_back(self)

    def erase(self, *args):
        return _VisusSlamPy.VectorOfMatch_erase(self, *args)

    def __init__(self, *args):
        _VisusSlamPy.VectorOfMatch_swiginit(self, _VisusSlamPy.new_VectorOfMatch(*args))

    def push_back(self, x):
        return _VisusSlamPy.VectorOfMatch_push_back(self, x)

    def front(self):
        return _VisusSlamPy.VectorOfMatch_front(self)

    def back(self):
        return _VisusSlamPy.VectorOfMatch_back(self)

    def assign(self, n, x):
        return _VisusSlamPy.VectorOfMatch_assign(self, n, x)

    def resize(self, *args):
        return _VisusSlamPy.VectorOfMatch_resize(self, *args)

    def insert(self, *args):
        return _VisusSlamPy.VectorOfMatch_insert(self, *args)

    def reserve(self, n):
        return _VisusSlamPy.VectorOfMatch_reserve(self, n)

    def capacity(self):
        return _VisusSlamPy.VectorOfMatch_capacity(self)
    __swig_destroy__ = _VisusSlamPy.delete_VectorOfMatch

# Register VectorOfMatch in _VisusSlamPy:
_VisusSlamPy.VectorOfMatch_swigregister(VectorOfMatch)

class VectorOfKeyPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusSlamPy.VectorOfKeyPoint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusSlamPy.VectorOfKeyPoint___nonzero__(self)

    def __bool__(self):
        return _VisusSlamPy.VectorOfKeyPoint___bool__(self)

    def __len__(self):
        return _VisusSlamPy.VectorOfKeyPoint___len__(self)

    def __getslice__(self, i, j):
        return _VisusSlamPy.VectorOfKeyPoint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusSlamPy.VectorOfKeyPoint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___setitem__(self, *args)

    def pop(self):
        return _VisusSlamPy.VectorOfKeyPoint_pop(self)

    def append(self, x):
        return _VisusSlamPy.VectorOfKeyPoint_append(self, x)

    def empty(self):
        return _VisusSlamPy.VectorOfKeyPoint_empty(self)

    def size(self):
        return _VisusSlamPy.VectorOfKeyPoint_size(self)

    def swap(self, v):
        return _VisusSlamPy.VectorOfKeyPoint_swap(self, v)

    def begin(self):
        return _VisusSlamPy.VectorOfKeyPoint_begin(self)

    def end(self):
        return _VisusSlamPy.VectorOfKeyPoint_end(self)

    def rbegin(self):
        return _VisusSlamPy.VectorOfKeyPoint_rbegin(self)

    def rend(self):
        return _VisusSlamPy.VectorOfKeyPoint_rend(self)

    def clear(self):
        return _VisusSlamPy.VectorOfKeyPoint_clear(self)

    def get_allocator(self):
        return _VisusSlamPy.VectorOfKeyPoint_get_allocator(self)

    def pop_back(self):
        return _VisusSlamPy.VectorOfKeyPoint_pop_back(self)

    def erase(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint_erase(self, *args)

    def __init__(self, *args):
        _VisusSlamPy.VectorOfKeyPoint_swiginit(self, _VisusSlamPy.new_VectorOfKeyPoint(*args))

    def push_back(self, x):
        return _VisusSlamPy.VectorOfKeyPoint_push_back(self, x)

    def front(self):
        return _VisusSlamPy.VectorOfKeyPoint_front(self)

    def back(self):
        return _VisusSlamPy.VectorOfKeyPoint_back(self)

    def assign(self, n, x):
        return _VisusSlamPy.VectorOfKeyPoint_assign(self, n, x)

    def resize(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint_resize(self, *args)

    def insert(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint_insert(self, *args)

    def reserve(self, n):
        return _VisusSlamPy.VectorOfKeyPoint_reserve(self, n)

    def capacity(self):
        return _VisusSlamPy.VectorOfKeyPoint_capacity(self)
    __swig_destroy__ = _VisusSlamPy.delete_VectorOfKeyPoint

# Register VectorOfKeyPoint in _VisusSlamPy:
_VisusSlamPy.VectorOfKeyPoint_swigregister(VectorOfKeyPoint)

import VisusKernelPy
class Pose(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    q = property(_VisusSlamPy.Pose_q_get, _VisusSlamPy.Pose_q_set)
    t = property(_VisusSlamPy.Pose_t_get, _VisusSlamPy.Pose_t_set)

    def __init__(self, *args):
        _VisusSlamPy.Pose_swiginit(self, _VisusSlamPy.new_Pose(*args))

    @staticmethod
    def identity():
        return _VisusSlamPy.Pose_identity()

    @staticmethod
    def lookingDown(t):
        return _VisusSlamPy.Pose_lookingDown(t)

    def R(self):
        return _VisusSlamPy.Pose_R(self)

    def isIdentity(self):
        return _VisusSlamPy.Pose_isIdentity(self)

    def toMatrix(self):
        return _VisusSlamPy.Pose_toMatrix(self)

    def __mul__(self, p2):
        return _VisusSlamPy.Pose___mul__(self, p2)

    def inverse(self):
        return _VisusSlamPy.Pose_inverse(self)

    def worldToCamera(self, worldpos):
        return _VisusSlamPy.Pose_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusSlamPy.Pose_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusSlamPy.Pose_getWorldCenter(self)

    def write(self, ar):
        return _VisusSlamPy.Pose_write(self, ar)

    def read(self, ar):
        return _VisusSlamPy.Pose_read(self, ar)
    __swig_destroy__ = _VisusSlamPy.delete_Pose

# Register Pose in _VisusSlamPy:
_VisusSlamPy.Pose_swigregister(Pose)

def Pose_identity():
    return _VisusSlamPy.Pose_identity()

def Pose_lookingDown(t):
    return _VisusSlamPy.Pose_lookingDown(t)

class Calibration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_VisusSlamPy.Calibration_f_get, _VisusSlamPy.Calibration_f_set)
    cx = property(_VisusSlamPy.Calibration_cx_get, _VisusSlamPy.Calibration_cx_set)
    cy = property(_VisusSlamPy.Calibration_cy_get, _VisusSlamPy.Calibration_cy_set)
    bFixed = property(_VisusSlamPy.Calibration_bFixed_get, _VisusSlamPy.Calibration_bFixed_set)

    def __init__(self, f_=1, cx_=0, cy_=0):
        _VisusSlamPy.Calibration_swiginit(self, _VisusSlamPy.new_Calibration(f_, cx_, cy_))

    def toMatrix(self):
        return _VisusSlamPy.Calibration_toMatrix(self)

    def screenToCamera(self, screen):
        return _VisusSlamPy.Calibration_screenToCamera(self, screen)

    def cameraToScreen(self, eye):
        return _VisusSlamPy.Calibration_cameraToScreen(self, eye)

    def write(self, ar):
        return _VisusSlamPy.Calibration_write(self, ar)

    def read(self, ar):
        return _VisusSlamPy.Calibration_read(self, ar)
    __swig_destroy__ = _VisusSlamPy.delete_Calibration

# Register Calibration in _VisusSlamPy:
_VisusSlamPy.Calibration_swigregister(Calibration)

class KeyPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusSlamPy.KeyPoint_x_get, _VisusSlamPy.KeyPoint_x_set)
    y = property(_VisusSlamPy.KeyPoint_y_get, _VisusSlamPy.KeyPoint_y_set)
    size = property(_VisusSlamPy.KeyPoint_size_get, _VisusSlamPy.KeyPoint_size_set)
    angle = property(_VisusSlamPy.KeyPoint_angle_get, _VisusSlamPy.KeyPoint_angle_set)
    response = property(_VisusSlamPy.KeyPoint_response_get, _VisusSlamPy.KeyPoint_response_set)
    octave = property(_VisusSlamPy.KeyPoint_octave_get, _VisusSlamPy.KeyPoint_octave_set)
    class_id = property(_VisusSlamPy.KeyPoint_class_id_get, _VisusSlamPy.KeyPoint_class_id_set)

    def __init__(self, _x=0, _y=0, _size=0, _angle=-1, _response=0, _octave=0, _class_id=-1):
        _VisusSlamPy.KeyPoint_swiginit(self, _VisusSlamPy.new_KeyPoint(_x, _y, _size, _angle, _response, _octave, _class_id))

    @staticmethod
    def adaptiveNonMaximalSuppression(responses, xs, ys, anms):
        return _VisusSlamPy.KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms)
    __swig_destroy__ = _VisusSlamPy.delete_KeyPoint

# Register KeyPoint in _VisusSlamPy:
_VisusSlamPy.KeyPoint_swigregister(KeyPoint)

def KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms):
    return _VisusSlamPy.KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms)

class Match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    queryIdx = property(_VisusSlamPy.Match_queryIdx_get, _VisusSlamPy.Match_queryIdx_set)
    trainIdx = property(_VisusSlamPy.Match_trainIdx_get, _VisusSlamPy.Match_trainIdx_set)
    imgIdx = property(_VisusSlamPy.Match_imgIdx_get, _VisusSlamPy.Match_imgIdx_set)
    distance = property(_VisusSlamPy.Match_distance_get, _VisusSlamPy.Match_distance_set)

    def __init__(self, *args):
        _VisusSlamPy.Match_swiginit(self, _VisusSlamPy.new_Match(*args))

    def __lt__(self, m):
        return _VisusSlamPy.Match___lt__(self, m)
    __swig_destroy__ = _VisusSlamPy.delete_Match

# Register Match in _VisusSlamPy:
_VisusSlamPy.Match_swigregister(Match)

class SlamEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    origin = property(_VisusSlamPy.SlamEdge_origin_get, _VisusSlamPy.SlamEdge_origin_set)
    other = property(_VisusSlamPy.SlamEdge_other_get, _VisusSlamPy.SlamEdge_other_set)
    text = property(_VisusSlamPy.SlamEdge_text_get, _VisusSlamPy.SlamEdge_text_set)
    matches = property(_VisusSlamPy.SlamEdge_matches_get, _VisusSlamPy.SlamEdge_matches_set)

    def __init__(self, origin_, other_):
        _VisusSlamPy.SlamEdge_swiginit(self, _VisusSlamPy.new_SlamEdge(origin_, other_))

    def getNumberOfMatches(self):
        return _VisusSlamPy.SlamEdge_getNumberOfMatches(self)

    def isGood(self):
        return _VisusSlamPy.SlamEdge_isGood(self)

    def setMatches(self, matches, text):
        return _VisusSlamPy.SlamEdge_setMatches(self, matches, text)
    __swig_destroy__ = _VisusSlamPy.delete_SlamEdge

# Register SlamEdge in _VisusSlamPy:
_VisusSlamPy.SlamEdge_swigregister(SlamEdge)

class Camera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_VisusSlamPy.Camera_id_get, _VisusSlamPy.Camera_id_set)
    idx_filename = property(_VisusSlamPy.Camera_idx_filename_get, _VisusSlamPy.Camera_idx_filename_set)
    filenames = property(_VisusSlamPy.Camera_filenames_get, _VisusSlamPy.Camera_filenames_set)
    color = property(_VisusSlamPy.Camera_color_get, _VisusSlamPy.Camera_color_set)
    keypoints = property(_VisusSlamPy.Camera_keypoints_get, _VisusSlamPy.Camera_keypoints_set)
    descriptors = property(_VisusSlamPy.Camera_descriptors_get, _VisusSlamPy.Camera_descriptors_set)
    pose = property(_VisusSlamPy.Camera_pose_get, _VisusSlamPy.Camera_pose_set)
    bFixed = property(_VisusSlamPy.Camera_bFixed_get, _VisusSlamPy.Camera_bFixed_set)
    edges = property(_VisusSlamPy.Camera_edges_get, _VisusSlamPy.Camera_edges_set)
    homography = property(_VisusSlamPy.Camera_homography_get, _VisusSlamPy.Camera_homography_set)
    quad = property(_VisusSlamPy.Camera_quad_get, _VisusSlamPy.Camera_quad_set)

    def __init__(self):
        _VisusSlamPy.Camera_swiginit(self, _VisusSlamPy.new_Camera())
    __swig_destroy__ = _VisusSlamPy.delete_Camera

    def getNumberOfKeyPoints(self):
        return _VisusSlamPy.Camera_getNumberOfKeyPoints(self)

    def worldToCamera(self, worldpos):
        return _VisusSlamPy.Camera_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusSlamPy.Camera_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusSlamPy.Camera_getWorldCenter(self)

    def getWorldViewDirection(self):
        return _VisusSlamPy.Camera_getWorldViewDirection(self)

    def addLocalCamera(self, camera1):
        return _VisusSlamPy.Camera_addLocalCamera(self, camera1)

    def getEdge(self, other):
        return _VisusSlamPy.Camera_getEdge(self, other)

    def removeLocalCamera(self, camera1):
        return _VisusSlamPy.Camera_removeLocalCamera(self, camera1)

    def getAllLocalCameras(self):
        return _VisusSlamPy.Camera_getAllLocalCameras(self)

    def getGoodLocalCameras(self):
        return _VisusSlamPy.Camera_getGoodLocalCameras(self)

# Register Camera in _VisusSlamPy:
_VisusSlamPy.Camera_swigregister(Camera)

class Slam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    url = property(_VisusSlamPy.Slam_url_get, _VisusSlamPy.Slam_url_set)
    width = property(_VisusSlamPy.Slam_width_get, _VisusSlamPy.Slam_width_set)
    height = property(_VisusSlamPy.Slam_height_get, _VisusSlamPy.Slam_height_set)
    dtype = property(_VisusSlamPy.Slam_dtype_get, _VisusSlamPy.Slam_dtype_set)
    cameras = property(_VisusSlamPy.Slam_cameras_get, _VisusSlamPy.Slam_cameras_set)
    calibration = property(_VisusSlamPy.Slam_calibration_get, _VisusSlamPy.Slam_calibration_set)

    def __init__(self):
        if self.__class__ == Slam:
            _self = None
        else:
            _self = self
        _VisusSlamPy.Slam_swiginit(self, _VisusSlamPy.new_Slam(_self, ))
    __swig_destroy__ = _VisusSlamPy.delete_Slam

    def addCamera(self, disown):
        return _VisusSlamPy.Slam_addCamera(self, disown)

    def previousCamera(self, camera):
        return _VisusSlamPy.Slam_previousCamera(self, camera)

    def nextCamera(self, camera):
        return _VisusSlamPy.Slam_nextCamera(self, camera)

    def removeCamera(self, camera2):
        return _VisusSlamPy.Slam_removeCamera(self, camera2)

    def findGroups(self):
        return _VisusSlamPy.Slam_findGroups(self)

    def removeDisconnectedCameras(self):
        return _VisusSlamPy.Slam_removeDisconnectedCameras(self)

    def removeCamerasWithTooMuchSkew(self):
        return _VisusSlamPy.Slam_removeCamerasWithTooMuchSkew(self)

    def computeWorldQuad(self, camera):
        return _VisusSlamPy.Slam_computeWorldQuad(self, camera)

    def getQuadsBox(self):
        return _VisusSlamPy.Slam_getQuadsBox(self)

    def refreshQuads(self):
        return _VisusSlamPy.Slam_refreshQuads(self)

    def loadKeyPoints(self, camera2, filename):
        return _VisusSlamPy.Slam_loadKeyPoints(self, camera2, filename)

    def saveKeyPoints(self, camera2, filename):
        return _VisusSlamPy.Slam_saveKeyPoints(self, camera2, filename)

    def removeOutlierMatches(self, max_reproj_error):
        return _VisusSlamPy.Slam_removeOutlierMatches(self, max_reproj_error)

    def bundleAdjustment(self, *args):
        return _VisusSlamPy.Slam_bundleAdjustment(self, *args)

    def doPostIterationAction(self):
        return _VisusSlamPy.Slam_doPostIterationAction(self)
    def __disown__(self):
        self.this.disown()
        _VisusSlamPy.disown_Slam(self)
        return weakref.proxy(self)

# Register Slam in _VisusSlamPy:
_VisusSlamPy.Slam_swigregister(Slam)



