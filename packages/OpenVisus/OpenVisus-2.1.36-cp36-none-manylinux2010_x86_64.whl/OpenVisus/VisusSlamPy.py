# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusSlamPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusSlamPy')
    _VisusSlamPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusSlamPy', [dirname(__file__)])
        except ImportError:
            import _VisusSlamPy
            return _VisusSlamPy
        try:
            _mod = imp.load_module('_VisusSlamPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusSlamPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusSlamPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusSlamPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusSlamPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusSlamPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusSlamPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusSlamPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusSlamPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusSlamPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusSlamPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusSlamPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusSlamPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusSlamPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusSlamPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusSlamPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusSlamPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusSlamPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusSlamPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusSlamPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusSlamPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusSlamPy.SHARED_PTR_DISOWN
class VectorOfCamera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfCamera, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusSlamPy.VectorOfCamera_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusSlamPy.VectorOfCamera___nonzero__(self)

    def __bool__(self):
        return _VisusSlamPy.VectorOfCamera___bool__(self)

    def __len__(self):
        return _VisusSlamPy.VectorOfCamera___len__(self)

    def __getslice__(self, i, j):
        return _VisusSlamPy.VectorOfCamera___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusSlamPy.VectorOfCamera___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusSlamPy.VectorOfCamera___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusSlamPy.VectorOfCamera___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusSlamPy.VectorOfCamera___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusSlamPy.VectorOfCamera___setitem__(self, *args)

    def pop(self):
        return _VisusSlamPy.VectorOfCamera_pop(self)

    def append(self, x):
        return _VisusSlamPy.VectorOfCamera_append(self, x)

    def empty(self):
        return _VisusSlamPy.VectorOfCamera_empty(self)

    def size(self):
        return _VisusSlamPy.VectorOfCamera_size(self)

    def swap(self, v):
        return _VisusSlamPy.VectorOfCamera_swap(self, v)

    def begin(self):
        return _VisusSlamPy.VectorOfCamera_begin(self)

    def end(self):
        return _VisusSlamPy.VectorOfCamera_end(self)

    def rbegin(self):
        return _VisusSlamPy.VectorOfCamera_rbegin(self)

    def rend(self):
        return _VisusSlamPy.VectorOfCamera_rend(self)

    def clear(self):
        return _VisusSlamPy.VectorOfCamera_clear(self)

    def get_allocator(self):
        return _VisusSlamPy.VectorOfCamera_get_allocator(self)

    def pop_back(self):
        return _VisusSlamPy.VectorOfCamera_pop_back(self)

    def erase(self, *args):
        return _VisusSlamPy.VectorOfCamera_erase(self, *args)

    def __init__(self, *args):
        this = _VisusSlamPy.new_VectorOfCamera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusSlamPy.VectorOfCamera_push_back(self, x)

    def front(self):
        return _VisusSlamPy.VectorOfCamera_front(self)

    def back(self):
        return _VisusSlamPy.VectorOfCamera_back(self)

    def assign(self, n, x):
        return _VisusSlamPy.VectorOfCamera_assign(self, n, x)

    def resize(self, *args):
        return _VisusSlamPy.VectorOfCamera_resize(self, *args)

    def insert(self, *args):
        return _VisusSlamPy.VectorOfCamera_insert(self, *args)

    def reserve(self, n):
        return _VisusSlamPy.VectorOfCamera_reserve(self, n)

    def capacity(self):
        return _VisusSlamPy.VectorOfCamera_capacity(self)
    __swig_destroy__ = _VisusSlamPy.delete_VectorOfCamera
    __del__ = lambda self: None
VectorOfCamera_swigregister = _VisusSlamPy.VectorOfCamera_swigregister
VectorOfCamera_swigregister(VectorOfCamera)

class VectorOfMatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfMatch, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusSlamPy.VectorOfMatch_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusSlamPy.VectorOfMatch___nonzero__(self)

    def __bool__(self):
        return _VisusSlamPy.VectorOfMatch___bool__(self)

    def __len__(self):
        return _VisusSlamPy.VectorOfMatch___len__(self)

    def __getslice__(self, i, j):
        return _VisusSlamPy.VectorOfMatch___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusSlamPy.VectorOfMatch___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusSlamPy.VectorOfMatch___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusSlamPy.VectorOfMatch___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusSlamPy.VectorOfMatch___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusSlamPy.VectorOfMatch___setitem__(self, *args)

    def pop(self):
        return _VisusSlamPy.VectorOfMatch_pop(self)

    def append(self, x):
        return _VisusSlamPy.VectorOfMatch_append(self, x)

    def empty(self):
        return _VisusSlamPy.VectorOfMatch_empty(self)

    def size(self):
        return _VisusSlamPy.VectorOfMatch_size(self)

    def swap(self, v):
        return _VisusSlamPy.VectorOfMatch_swap(self, v)

    def begin(self):
        return _VisusSlamPy.VectorOfMatch_begin(self)

    def end(self):
        return _VisusSlamPy.VectorOfMatch_end(self)

    def rbegin(self):
        return _VisusSlamPy.VectorOfMatch_rbegin(self)

    def rend(self):
        return _VisusSlamPy.VectorOfMatch_rend(self)

    def clear(self):
        return _VisusSlamPy.VectorOfMatch_clear(self)

    def get_allocator(self):
        return _VisusSlamPy.VectorOfMatch_get_allocator(self)

    def pop_back(self):
        return _VisusSlamPy.VectorOfMatch_pop_back(self)

    def erase(self, *args):
        return _VisusSlamPy.VectorOfMatch_erase(self, *args)

    def __init__(self, *args):
        this = _VisusSlamPy.new_VectorOfMatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusSlamPy.VectorOfMatch_push_back(self, x)

    def front(self):
        return _VisusSlamPy.VectorOfMatch_front(self)

    def back(self):
        return _VisusSlamPy.VectorOfMatch_back(self)

    def assign(self, n, x):
        return _VisusSlamPy.VectorOfMatch_assign(self, n, x)

    def resize(self, *args):
        return _VisusSlamPy.VectorOfMatch_resize(self, *args)

    def insert(self, *args):
        return _VisusSlamPy.VectorOfMatch_insert(self, *args)

    def reserve(self, n):
        return _VisusSlamPy.VectorOfMatch_reserve(self, n)

    def capacity(self):
        return _VisusSlamPy.VectorOfMatch_capacity(self)
    __swig_destroy__ = _VisusSlamPy.delete_VectorOfMatch
    __del__ = lambda self: None
VectorOfMatch_swigregister = _VisusSlamPy.VectorOfMatch_swigregister
VectorOfMatch_swigregister(VectorOfMatch)

class VectorOfKeyPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfKeyPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfKeyPoint, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusSlamPy.VectorOfKeyPoint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusSlamPy.VectorOfKeyPoint___nonzero__(self)

    def __bool__(self):
        return _VisusSlamPy.VectorOfKeyPoint___bool__(self)

    def __len__(self):
        return _VisusSlamPy.VectorOfKeyPoint___len__(self)

    def __getslice__(self, i, j):
        return _VisusSlamPy.VectorOfKeyPoint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusSlamPy.VectorOfKeyPoint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint___setitem__(self, *args)

    def pop(self):
        return _VisusSlamPy.VectorOfKeyPoint_pop(self)

    def append(self, x):
        return _VisusSlamPy.VectorOfKeyPoint_append(self, x)

    def empty(self):
        return _VisusSlamPy.VectorOfKeyPoint_empty(self)

    def size(self):
        return _VisusSlamPy.VectorOfKeyPoint_size(self)

    def swap(self, v):
        return _VisusSlamPy.VectorOfKeyPoint_swap(self, v)

    def begin(self):
        return _VisusSlamPy.VectorOfKeyPoint_begin(self)

    def end(self):
        return _VisusSlamPy.VectorOfKeyPoint_end(self)

    def rbegin(self):
        return _VisusSlamPy.VectorOfKeyPoint_rbegin(self)

    def rend(self):
        return _VisusSlamPy.VectorOfKeyPoint_rend(self)

    def clear(self):
        return _VisusSlamPy.VectorOfKeyPoint_clear(self)

    def get_allocator(self):
        return _VisusSlamPy.VectorOfKeyPoint_get_allocator(self)

    def pop_back(self):
        return _VisusSlamPy.VectorOfKeyPoint_pop_back(self)

    def erase(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint_erase(self, *args)

    def __init__(self, *args):
        this = _VisusSlamPy.new_VectorOfKeyPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusSlamPy.VectorOfKeyPoint_push_back(self, x)

    def front(self):
        return _VisusSlamPy.VectorOfKeyPoint_front(self)

    def back(self):
        return _VisusSlamPy.VectorOfKeyPoint_back(self)

    def assign(self, n, x):
        return _VisusSlamPy.VectorOfKeyPoint_assign(self, n, x)

    def resize(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint_resize(self, *args)

    def insert(self, *args):
        return _VisusSlamPy.VectorOfKeyPoint_insert(self, *args)

    def reserve(self, n):
        return _VisusSlamPy.VectorOfKeyPoint_reserve(self, n)

    def capacity(self):
        return _VisusSlamPy.VectorOfKeyPoint_capacity(self)
    __swig_destroy__ = _VisusSlamPy.delete_VectorOfKeyPoint
    __del__ = lambda self: None
VectorOfKeyPoint_swigregister = _VisusSlamPy.VectorOfKeyPoint_swigregister
VectorOfKeyPoint_swigregister(VectorOfKeyPoint)

import VisusKernelPy
class Pose(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pose, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pose, name)
    __repr__ = _swig_repr
    __swig_setmethods__["q"] = _VisusSlamPy.Pose_q_set
    __swig_getmethods__["q"] = _VisusSlamPy.Pose_q_get
    if _newclass:
        q = _swig_property(_VisusSlamPy.Pose_q_get, _VisusSlamPy.Pose_q_set)
    __swig_setmethods__["t"] = _VisusSlamPy.Pose_t_set
    __swig_getmethods__["t"] = _VisusSlamPy.Pose_t_get
    if _newclass:
        t = _swig_property(_VisusSlamPy.Pose_t_get, _VisusSlamPy.Pose_t_set)

    def __init__(self, *args):
        this = _VisusSlamPy.new_Pose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        identity = staticmethod(_VisusSlamPy.Pose_identity)
    else:
        identity = _VisusSlamPy.Pose_identity
    if _newclass:
        lookingDown = staticmethod(_VisusSlamPy.Pose_lookingDown)
    else:
        lookingDown = _VisusSlamPy.Pose_lookingDown

    def R(self):
        return _VisusSlamPy.Pose_R(self)

    def isIdentity(self):
        return _VisusSlamPy.Pose_isIdentity(self)

    def toMatrix(self):
        return _VisusSlamPy.Pose_toMatrix(self)

    def __mul__(self, p2):
        return _VisusSlamPy.Pose___mul__(self, p2)

    def inverse(self):
        return _VisusSlamPy.Pose_inverse(self)

    def worldToCamera(self, worldpos):
        return _VisusSlamPy.Pose_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusSlamPy.Pose_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusSlamPy.Pose_getWorldCenter(self)

    def write(self, ar):
        return _VisusSlamPy.Pose_write(self, ar)

    def read(self, ar):
        return _VisusSlamPy.Pose_read(self, ar)
    __swig_destroy__ = _VisusSlamPy.delete_Pose
    __del__ = lambda self: None
Pose_swigregister = _VisusSlamPy.Pose_swigregister
Pose_swigregister(Pose)

def Pose_identity():
    return _VisusSlamPy.Pose_identity()
Pose_identity = _VisusSlamPy.Pose_identity

def Pose_lookingDown(t):
    return _VisusSlamPy.Pose_lookingDown(t)
Pose_lookingDown = _VisusSlamPy.Pose_lookingDown

class Calibration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Calibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Calibration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _VisusSlamPy.Calibration_f_set
    __swig_getmethods__["f"] = _VisusSlamPy.Calibration_f_get
    if _newclass:
        f = _swig_property(_VisusSlamPy.Calibration_f_get, _VisusSlamPy.Calibration_f_set)
    __swig_setmethods__["cx"] = _VisusSlamPy.Calibration_cx_set
    __swig_getmethods__["cx"] = _VisusSlamPy.Calibration_cx_get
    if _newclass:
        cx = _swig_property(_VisusSlamPy.Calibration_cx_get, _VisusSlamPy.Calibration_cx_set)
    __swig_setmethods__["cy"] = _VisusSlamPy.Calibration_cy_set
    __swig_getmethods__["cy"] = _VisusSlamPy.Calibration_cy_get
    if _newclass:
        cy = _swig_property(_VisusSlamPy.Calibration_cy_get, _VisusSlamPy.Calibration_cy_set)
    __swig_setmethods__["bFixed"] = _VisusSlamPy.Calibration_bFixed_set
    __swig_getmethods__["bFixed"] = _VisusSlamPy.Calibration_bFixed_get
    if _newclass:
        bFixed = _swig_property(_VisusSlamPy.Calibration_bFixed_get, _VisusSlamPy.Calibration_bFixed_set)

    def __init__(self, f_=1, cx_=0, cy_=0):
        this = _VisusSlamPy.new_Calibration(f_, cx_, cy_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toMatrix(self):
        return _VisusSlamPy.Calibration_toMatrix(self)

    def screenToCamera(self, screen):
        return _VisusSlamPy.Calibration_screenToCamera(self, screen)

    def cameraToScreen(self, eye):
        return _VisusSlamPy.Calibration_cameraToScreen(self, eye)

    def write(self, ar):
        return _VisusSlamPy.Calibration_write(self, ar)

    def read(self, ar):
        return _VisusSlamPy.Calibration_read(self, ar)
    __swig_destroy__ = _VisusSlamPy.delete_Calibration
    __del__ = lambda self: None
Calibration_swigregister = _VisusSlamPy.Calibration_swigregister
Calibration_swigregister(Calibration)

class KeyPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusSlamPy.KeyPoint_x_set
    __swig_getmethods__["x"] = _VisusSlamPy.KeyPoint_x_get
    if _newclass:
        x = _swig_property(_VisusSlamPy.KeyPoint_x_get, _VisusSlamPy.KeyPoint_x_set)
    __swig_setmethods__["y"] = _VisusSlamPy.KeyPoint_y_set
    __swig_getmethods__["y"] = _VisusSlamPy.KeyPoint_y_get
    if _newclass:
        y = _swig_property(_VisusSlamPy.KeyPoint_y_get, _VisusSlamPy.KeyPoint_y_set)
    __swig_setmethods__["size"] = _VisusSlamPy.KeyPoint_size_set
    __swig_getmethods__["size"] = _VisusSlamPy.KeyPoint_size_get
    if _newclass:
        size = _swig_property(_VisusSlamPy.KeyPoint_size_get, _VisusSlamPy.KeyPoint_size_set)
    __swig_setmethods__["angle"] = _VisusSlamPy.KeyPoint_angle_set
    __swig_getmethods__["angle"] = _VisusSlamPy.KeyPoint_angle_get
    if _newclass:
        angle = _swig_property(_VisusSlamPy.KeyPoint_angle_get, _VisusSlamPy.KeyPoint_angle_set)
    __swig_setmethods__["response"] = _VisusSlamPy.KeyPoint_response_set
    __swig_getmethods__["response"] = _VisusSlamPy.KeyPoint_response_get
    if _newclass:
        response = _swig_property(_VisusSlamPy.KeyPoint_response_get, _VisusSlamPy.KeyPoint_response_set)
    __swig_setmethods__["octave"] = _VisusSlamPy.KeyPoint_octave_set
    __swig_getmethods__["octave"] = _VisusSlamPy.KeyPoint_octave_get
    if _newclass:
        octave = _swig_property(_VisusSlamPy.KeyPoint_octave_get, _VisusSlamPy.KeyPoint_octave_set)
    __swig_setmethods__["class_id"] = _VisusSlamPy.KeyPoint_class_id_set
    __swig_getmethods__["class_id"] = _VisusSlamPy.KeyPoint_class_id_get
    if _newclass:
        class_id = _swig_property(_VisusSlamPy.KeyPoint_class_id_get, _VisusSlamPy.KeyPoint_class_id_set)

    def __init__(self, _x=0, _y=0, _size=0, _angle=-1, _response=0, _octave=0, _class_id=-1):
        this = _VisusSlamPy.new_KeyPoint(_x, _y, _size, _angle, _response, _octave, _class_id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        adaptiveNonMaximalSuppression = staticmethod(_VisusSlamPy.KeyPoint_adaptiveNonMaximalSuppression)
    else:
        adaptiveNonMaximalSuppression = _VisusSlamPy.KeyPoint_adaptiveNonMaximalSuppression
    __swig_destroy__ = _VisusSlamPy.delete_KeyPoint
    __del__ = lambda self: None
KeyPoint_swigregister = _VisusSlamPy.KeyPoint_swigregister
KeyPoint_swigregister(KeyPoint)

def KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms):
    return _VisusSlamPy.KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms)
KeyPoint_adaptiveNonMaximalSuppression = _VisusSlamPy.KeyPoint_adaptiveNonMaximalSuppression

class Match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queryIdx"] = _VisusSlamPy.Match_queryIdx_set
    __swig_getmethods__["queryIdx"] = _VisusSlamPy.Match_queryIdx_get
    if _newclass:
        queryIdx = _swig_property(_VisusSlamPy.Match_queryIdx_get, _VisusSlamPy.Match_queryIdx_set)
    __swig_setmethods__["trainIdx"] = _VisusSlamPy.Match_trainIdx_set
    __swig_getmethods__["trainIdx"] = _VisusSlamPy.Match_trainIdx_get
    if _newclass:
        trainIdx = _swig_property(_VisusSlamPy.Match_trainIdx_get, _VisusSlamPy.Match_trainIdx_set)
    __swig_setmethods__["imgIdx"] = _VisusSlamPy.Match_imgIdx_set
    __swig_getmethods__["imgIdx"] = _VisusSlamPy.Match_imgIdx_get
    if _newclass:
        imgIdx = _swig_property(_VisusSlamPy.Match_imgIdx_get, _VisusSlamPy.Match_imgIdx_set)
    __swig_setmethods__["distance"] = _VisusSlamPy.Match_distance_set
    __swig_getmethods__["distance"] = _VisusSlamPy.Match_distance_get
    if _newclass:
        distance = _swig_property(_VisusSlamPy.Match_distance_get, _VisusSlamPy.Match_distance_set)

    def __init__(self, *args):
        this = _VisusSlamPy.new_Match(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, m):
        return _VisusSlamPy.Match___lt__(self, m)
    __swig_destroy__ = _VisusSlamPy.delete_Match
    __del__ = lambda self: None
Match_swigregister = _VisusSlamPy.Match_swigregister
Match_swigregister(Match)

class SlamEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlamEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlamEdge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _VisusSlamPy.SlamEdge_origin_set
    __swig_getmethods__["origin"] = _VisusSlamPy.SlamEdge_origin_get
    if _newclass:
        origin = _swig_property(_VisusSlamPy.SlamEdge_origin_get, _VisusSlamPy.SlamEdge_origin_set)
    __swig_setmethods__["other"] = _VisusSlamPy.SlamEdge_other_set
    __swig_getmethods__["other"] = _VisusSlamPy.SlamEdge_other_get
    if _newclass:
        other = _swig_property(_VisusSlamPy.SlamEdge_other_get, _VisusSlamPy.SlamEdge_other_set)
    __swig_setmethods__["text"] = _VisusSlamPy.SlamEdge_text_set
    __swig_getmethods__["text"] = _VisusSlamPy.SlamEdge_text_get
    if _newclass:
        text = _swig_property(_VisusSlamPy.SlamEdge_text_get, _VisusSlamPy.SlamEdge_text_set)
    __swig_setmethods__["matches"] = _VisusSlamPy.SlamEdge_matches_set
    __swig_getmethods__["matches"] = _VisusSlamPy.SlamEdge_matches_get
    if _newclass:
        matches = _swig_property(_VisusSlamPy.SlamEdge_matches_get, _VisusSlamPy.SlamEdge_matches_set)

    def __init__(self, origin_, other_):
        this = _VisusSlamPy.new_SlamEdge(origin_, other_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumberOfMatches(self):
        return _VisusSlamPy.SlamEdge_getNumberOfMatches(self)

    def isGood(self):
        return _VisusSlamPy.SlamEdge_isGood(self)

    def setMatches(self, matches, text):
        return _VisusSlamPy.SlamEdge_setMatches(self, matches, text)
    __swig_destroy__ = _VisusSlamPy.delete_SlamEdge
    __del__ = lambda self: None
SlamEdge_swigregister = _VisusSlamPy.SlamEdge_swigregister
SlamEdge_swigregister(SlamEdge)

class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _VisusSlamPy.Camera_id_set
    __swig_getmethods__["id"] = _VisusSlamPy.Camera_id_get
    if _newclass:
        id = _swig_property(_VisusSlamPy.Camera_id_get, _VisusSlamPy.Camera_id_set)
    __swig_setmethods__["idx_filename"] = _VisusSlamPy.Camera_idx_filename_set
    __swig_getmethods__["idx_filename"] = _VisusSlamPy.Camera_idx_filename_get
    if _newclass:
        idx_filename = _swig_property(_VisusSlamPy.Camera_idx_filename_get, _VisusSlamPy.Camera_idx_filename_set)
    __swig_setmethods__["filenames"] = _VisusSlamPy.Camera_filenames_set
    __swig_getmethods__["filenames"] = _VisusSlamPy.Camera_filenames_get
    if _newclass:
        filenames = _swig_property(_VisusSlamPy.Camera_filenames_get, _VisusSlamPy.Camera_filenames_set)
    __swig_setmethods__["color"] = _VisusSlamPy.Camera_color_set
    __swig_getmethods__["color"] = _VisusSlamPy.Camera_color_get
    if _newclass:
        color = _swig_property(_VisusSlamPy.Camera_color_get, _VisusSlamPy.Camera_color_set)
    __swig_setmethods__["keypoints"] = _VisusSlamPy.Camera_keypoints_set
    __swig_getmethods__["keypoints"] = _VisusSlamPy.Camera_keypoints_get
    if _newclass:
        keypoints = _swig_property(_VisusSlamPy.Camera_keypoints_get, _VisusSlamPy.Camera_keypoints_set)
    __swig_setmethods__["descriptors"] = _VisusSlamPy.Camera_descriptors_set
    __swig_getmethods__["descriptors"] = _VisusSlamPy.Camera_descriptors_get
    if _newclass:
        descriptors = _swig_property(_VisusSlamPy.Camera_descriptors_get, _VisusSlamPy.Camera_descriptors_set)
    __swig_setmethods__["pose"] = _VisusSlamPy.Camera_pose_set
    __swig_getmethods__["pose"] = _VisusSlamPy.Camera_pose_get
    if _newclass:
        pose = _swig_property(_VisusSlamPy.Camera_pose_get, _VisusSlamPy.Camera_pose_set)
    __swig_setmethods__["bFixed"] = _VisusSlamPy.Camera_bFixed_set
    __swig_getmethods__["bFixed"] = _VisusSlamPy.Camera_bFixed_get
    if _newclass:
        bFixed = _swig_property(_VisusSlamPy.Camera_bFixed_get, _VisusSlamPy.Camera_bFixed_set)
    __swig_setmethods__["edges"] = _VisusSlamPy.Camera_edges_set
    __swig_getmethods__["edges"] = _VisusSlamPy.Camera_edges_get
    if _newclass:
        edges = _swig_property(_VisusSlamPy.Camera_edges_get, _VisusSlamPy.Camera_edges_set)
    __swig_setmethods__["homography"] = _VisusSlamPy.Camera_homography_set
    __swig_getmethods__["homography"] = _VisusSlamPy.Camera_homography_get
    if _newclass:
        homography = _swig_property(_VisusSlamPy.Camera_homography_get, _VisusSlamPy.Camera_homography_set)
    __swig_setmethods__["quad"] = _VisusSlamPy.Camera_quad_set
    __swig_getmethods__["quad"] = _VisusSlamPy.Camera_quad_get
    if _newclass:
        quad = _swig_property(_VisusSlamPy.Camera_quad_get, _VisusSlamPy.Camera_quad_set)

    def __init__(self):
        this = _VisusSlamPy.new_Camera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusSlamPy.delete_Camera
    __del__ = lambda self: None

    def getNumberOfKeyPoints(self):
        return _VisusSlamPy.Camera_getNumberOfKeyPoints(self)

    def worldToCamera(self, worldpos):
        return _VisusSlamPy.Camera_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusSlamPy.Camera_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusSlamPy.Camera_getWorldCenter(self)

    def getWorldViewDirection(self):
        return _VisusSlamPy.Camera_getWorldViewDirection(self)

    def addLocalCamera(self, camera1):
        return _VisusSlamPy.Camera_addLocalCamera(self, camera1)

    def getEdge(self, other):
        return _VisusSlamPy.Camera_getEdge(self, other)

    def removeLocalCamera(self, camera1):
        return _VisusSlamPy.Camera_removeLocalCamera(self, camera1)

    def getAllLocalCameras(self):
        return _VisusSlamPy.Camera_getAllLocalCameras(self)

    def getGoodLocalCameras(self):
        return _VisusSlamPy.Camera_getGoodLocalCameras(self)
Camera_swigregister = _VisusSlamPy.Camera_swigregister
Camera_swigregister(Camera)

class Slam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["url"] = _VisusSlamPy.Slam_url_set
    __swig_getmethods__["url"] = _VisusSlamPy.Slam_url_get
    if _newclass:
        url = _swig_property(_VisusSlamPy.Slam_url_get, _VisusSlamPy.Slam_url_set)
    __swig_setmethods__["width"] = _VisusSlamPy.Slam_width_set
    __swig_getmethods__["width"] = _VisusSlamPy.Slam_width_get
    if _newclass:
        width = _swig_property(_VisusSlamPy.Slam_width_get, _VisusSlamPy.Slam_width_set)
    __swig_setmethods__["height"] = _VisusSlamPy.Slam_height_set
    __swig_getmethods__["height"] = _VisusSlamPy.Slam_height_get
    if _newclass:
        height = _swig_property(_VisusSlamPy.Slam_height_get, _VisusSlamPy.Slam_height_set)
    __swig_setmethods__["dtype"] = _VisusSlamPy.Slam_dtype_set
    __swig_getmethods__["dtype"] = _VisusSlamPy.Slam_dtype_get
    if _newclass:
        dtype = _swig_property(_VisusSlamPy.Slam_dtype_get, _VisusSlamPy.Slam_dtype_set)
    __swig_setmethods__["cameras"] = _VisusSlamPy.Slam_cameras_set
    __swig_getmethods__["cameras"] = _VisusSlamPy.Slam_cameras_get
    if _newclass:
        cameras = _swig_property(_VisusSlamPy.Slam_cameras_get, _VisusSlamPy.Slam_cameras_set)
    __swig_setmethods__["calibration"] = _VisusSlamPy.Slam_calibration_set
    __swig_getmethods__["calibration"] = _VisusSlamPy.Slam_calibration_get
    if _newclass:
        calibration = _swig_property(_VisusSlamPy.Slam_calibration_get, _VisusSlamPy.Slam_calibration_set)

    def __init__(self):
        if self.__class__ == Slam:
            _self = None
        else:
            _self = self
        this = _VisusSlamPy.new_Slam(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusSlamPy.delete_Slam
    __del__ = lambda self: None

    def addCamera(self, disown):
        return _VisusSlamPy.Slam_addCamera(self, disown)

    def previousCamera(self, camera):
        return _VisusSlamPy.Slam_previousCamera(self, camera)

    def nextCamera(self, camera):
        return _VisusSlamPy.Slam_nextCamera(self, camera)

    def removeCamera(self, camera2):
        return _VisusSlamPy.Slam_removeCamera(self, camera2)

    def findGroups(self):
        return _VisusSlamPy.Slam_findGroups(self)

    def removeDisconnectedCameras(self):
        return _VisusSlamPy.Slam_removeDisconnectedCameras(self)

    def removeCamerasWithTooMuchSkew(self):
        return _VisusSlamPy.Slam_removeCamerasWithTooMuchSkew(self)

    def computeWorldQuad(self, camera):
        return _VisusSlamPy.Slam_computeWorldQuad(self, camera)

    def getQuadsBox(self):
        return _VisusSlamPy.Slam_getQuadsBox(self)

    def refreshQuads(self):
        return _VisusSlamPy.Slam_refreshQuads(self)

    def loadKeyPoints(self, camera2, filename):
        return _VisusSlamPy.Slam_loadKeyPoints(self, camera2, filename)

    def saveKeyPoints(self, camera2, filename):
        return _VisusSlamPy.Slam_saveKeyPoints(self, camera2, filename)

    def removeOutlierMatches(self, max_reproj_error):
        return _VisusSlamPy.Slam_removeOutlierMatches(self, max_reproj_error)

    def bundleAdjustment(self, *args):
        return _VisusSlamPy.Slam_bundleAdjustment(self, *args)

    def doPostIterationAction(self):
        return _VisusSlamPy.Slam_doPostIterationAction(self)
    def __disown__(self):
        self.this.disown()
        _VisusSlamPy.disown_Slam(self)
        return weakref_proxy(self)
Slam_swigregister = _VisusSlamPy.Slam_swigregister
Slam_swigregister(Slam)

# This file is compatible with both classic and new-style classes.


