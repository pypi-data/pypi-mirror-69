Metadata-Version: 1.1
Name: terraformtestinglib
Version: 1.4.4
Summary: A library implementing linting and testing of terraform resources based on a provided rule set.
Home-page: https://github.com/schubergphilis/terraformtestinglib.git
Author: Costas Tyfoxylos
Author-email: ctyfoxylos@schubergphilis.com
License: MIT
Description: ===================
        terraformtestinglib
        ===================
        
        A library that implements linting and testing of terraform resources based on rules.
        
        
        * Documentation: https://terraformtestinglib.readthedocs.org/en/latest
        
        
        
        Development Workflow
        ====================
        
        The workflow supports the following steps
        
         * lint
         * test
         * build
         * document
         * upload
         * graph
        
        These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
        Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.
        
        The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
        It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project
        
        Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
        So for the initial delivery one would call
        
            $ _tag --minor
        
        which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.
        
        
        So the full workflow after git is initialized is:
        
         * repeat as necessary (of course it could be test - code - lint :) )
           * code
           * lint
           * test
         * commit and push
         * develop more through the code-lint-test cycle
         * tag (with the appropriate argument)
         * build
         * upload (if you want to host your package in pypi)
         * document (of course this could be run at any point)
        
        
        Important Information
        =====================
        
        This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
        So when building a package out of this **do not** simple call
        
            $ python setup.py sdist bdist_egg
        
        **as this will produce an unusable artifact with files missing.**
        Instead use the provided build and upload scripts that create all the necessary files in the artifact.
        
        
        
        Project Features
        ================
        
        * Lints terraform files based on provided rules
        * Enforces positioning of resources on files based on provided rules
        
        
        
        
        History
        -------
        
        0.1.0 (24-05-2018)
        ------------------
        
        * First release
        
        
        1.0.0 (16-10-2018)
        ------------------
        
        * Implemented variable, count attribute and format method interpolation on both linting and testing capabilities
        * Implemented testing capabilities with conditional filtering for resources
        * Ported the pipeline portion to python 3.7
        * Dropped official support for python2.7
        
        
        1.0.3 (17-10-2018)
        ------------------
        
        * Implemented interactive setting of the changelog in HISTORY.rst file on tagging
        
        
        1.0.4 (25-10-2018)
        ------------------
        
        * Updated template and dependencies
        
        
        1.1.0 (07-01-2019)
        ------------------
        
        * Added support for attributes with same name and filtering attributes on value
        
        
        1.1.1 (14-01-2019)
        ------------------
        
        * Correctly handle lists in resource data.
        
        
        1.1.2 (18-01-2019)
        ------------------
        
        * Casting to string for replacement in case it is a number
        
        
        1.2.0 (19-01-2019)
        ------------------
        
        * Added support for "length" method and multi variable strings
        
        
        1.2.1 (20-01-2019)
        ------------------
        
        * fixed bug where count was a string breaking the range calculation
        
        
        1.2.2 (22-01-2019)
        ------------------
        
        * added support for multiple same keys that end up being handled as a list internally.
        
        
        1.2.3 (22-01-2019)
        ------------------
        
        * added capabilities to skip a test based on a "skip-testing" tag on the resource
        
        
        1.3.0 (06-02-2019)
        ------------------
        
        * implemented all terraform supported entities like, data, terraform and provider.
        
        
        1.4.0 (07-02-2019)
        ------------------
        
        * implemented skipping positioning checking for a disaster_recovery.tf file. Refactored container object to expose filtering.
        
        
        1.4.1 (07-02-2019)
        ------------------
        
        * fixed instantiation of Stack object
        
        
        1.4.2 (22-10-2019)
        ------------------
        
        * Updated template and bumped dependencies.
        
        
        1.4.3 (22-10-2019)
        ------------------
        
        * Fixed yaml deprecation errors and breakage of format method.
        
        
        1.4.4 (22-05-2020)
        ------------------
        
        * Bumped depenencies, getting terraform 12 compatibility.
        
Keywords: terraformtestinglib terraform lint test
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
