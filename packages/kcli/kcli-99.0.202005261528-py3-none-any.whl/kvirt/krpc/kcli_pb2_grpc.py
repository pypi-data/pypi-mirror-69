# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import kvirt.krpc.kcli_pb2 as kcli__pb2


class KcliStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.info = channel.unary_unary(
                '/Kcli/info',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.vminfo.FromString,
                )
        self.list = channel.unary_unary(
                '/Kcli/list',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.vmlist.FromString,
                )
        self.list_disks = channel.unary_unary(
                '/Kcli/list_disks',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.diskslist.FromString,
                )
        self.list_images = channel.unary_unary(
                '/Kcli/list_images',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.imageslist.FromString,
                )
        self.list_networks = channel.unary_unary(
                '/Kcli/list_networks',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.networkslist.FromString,
                )
        self.list_isos = channel.unary_unary(
                '/Kcli/list_isos',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.isoslist.FromString,
                )
        self.list_pools = channel.unary_unary(
                '/Kcli/list_pools',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.poolslist.FromString,
                )
        self.list_subnets = channel.unary_unary(
                '/Kcli/list_subnets',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.subnetslist.FromString,
                )
        self.restart = channel.unary_unary(
                '/Kcli/restart',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.start = channel.unary_unary(
                '/Kcli/start',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.stop = channel.unary_unary(
                '/Kcli/stop',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete = channel.unary_unary(
                '/Kcli/delete',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.get_lastvm = channel.unary_unary(
                '/Kcli/get_lastvm',
                request_serializer=kcli__pb2.client.SerializeToString,
                response_deserializer=kcli__pb2.vm.FromString,
                )


class KcliServicer(object):
    """Missing associated documentation comment in .proto file"""

    def info(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_disks(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_images(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_networks(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_isos(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_pools(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_subnets(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_lastvm(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KcliServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'info': grpc.unary_unary_rpc_method_handler(
                    servicer.info,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.vminfo.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.vmlist.SerializeToString,
            ),
            'list_disks': grpc.unary_unary_rpc_method_handler(
                    servicer.list_disks,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.diskslist.SerializeToString,
            ),
            'list_images': grpc.unary_unary_rpc_method_handler(
                    servicer.list_images,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.imageslist.SerializeToString,
            ),
            'list_networks': grpc.unary_unary_rpc_method_handler(
                    servicer.list_networks,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.networkslist.SerializeToString,
            ),
            'list_isos': grpc.unary_unary_rpc_method_handler(
                    servicer.list_isos,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.isoslist.SerializeToString,
            ),
            'list_pools': grpc.unary_unary_rpc_method_handler(
                    servicer.list_pools,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.poolslist.SerializeToString,
            ),
            'list_subnets': grpc.unary_unary_rpc_method_handler(
                    servicer.list_subnets,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.subnetslist.SerializeToString,
            ),
            'restart': grpc.unary_unary_rpc_method_handler(
                    servicer.restart,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'get_lastvm': grpc.unary_unary_rpc_method_handler(
                    servicer.get_lastvm,
                    request_deserializer=kcli__pb2.client.FromString,
                    response_serializer=kcli__pb2.vm.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Kcli', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Kcli(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/info',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.vminfo.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.vmlist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_disks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_disks',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.diskslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_images(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_images',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.imageslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_networks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_networks',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.networkslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_isos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_isos',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.isoslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_pools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_pools',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.poolslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_subnets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_subnets',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.subnetslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/restart',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/start',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/stop',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/delete',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_lastvm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/get_lastvm',
            kcli__pb2.client.SerializeToString,
            kcli__pb2.vm.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class KconfigStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list_hosts = channel.unary_unary(
                '/Kconfig/list_hosts',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.clientslist.FromString,
                )
        self.list_keywords = channel.unary_unary(
                '/Kconfig/list_keywords',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.keywordslist.FromString,
                )
        self.list_kubes = channel.unary_unary(
                '/Kconfig/list_kubes',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.kubeslist.FromString,
                )
        self.list_lbs = channel.unary_unary(
                '/Kconfig/list_lbs',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.lbslist.FromString,
                )
        self.list_plans = channel.unary_unary(
                '/Kconfig/list_plans',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.planslist.FromString,
                )
        self.list_profiles = channel.unary_unary(
                '/Kconfig/list_profiles',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.profileslist.FromString,
                )


class KconfigServicer(object):
    """Missing associated documentation comment in .proto file"""

    def list_hosts(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_keywords(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_kubes(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_lbs(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_plans(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_profiles(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KconfigServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list_hosts': grpc.unary_unary_rpc_method_handler(
                    servicer.list_hosts,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.clientslist.SerializeToString,
            ),
            'list_keywords': grpc.unary_unary_rpc_method_handler(
                    servicer.list_keywords,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.keywordslist.SerializeToString,
            ),
            'list_kubes': grpc.unary_unary_rpc_method_handler(
                    servicer.list_kubes,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.kubeslist.SerializeToString,
            ),
            'list_lbs': grpc.unary_unary_rpc_method_handler(
                    servicer.list_lbs,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.lbslist.SerializeToString,
            ),
            'list_plans': grpc.unary_unary_rpc_method_handler(
                    servicer.list_plans,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.planslist.SerializeToString,
            ),
            'list_profiles': grpc.unary_unary_rpc_method_handler(
                    servicer.list_profiles,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.profileslist.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Kconfig', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Kconfig(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def list_hosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_hosts',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.clientslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_keywords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_keywords',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.keywordslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_kubes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_kubes',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.kubeslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_lbs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_lbs',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.lbslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_plans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_plans',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.planslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_profiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_profiles',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.profileslist.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
