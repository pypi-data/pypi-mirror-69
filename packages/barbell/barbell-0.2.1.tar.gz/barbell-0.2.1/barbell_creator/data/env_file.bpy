import gym
from barbell_environment import BarbellWorld, BarbellViewer, BarbellContact, BarbellStatistics
from barbell_utils import parse_file

# CONSTANTS
FPS = 50  # desired FPS rate


class %ENV_ID_PASCALCASE%ContactDetector(BarbellContact):
    def __init__(self, env):
        BarbellContact.__init__(self)
        self.env = env

    def BeginContact(self, contact):
        pass

    def EndContact(self, contact):
        pass


class %ENV_ID_PASCALCASE%(gym.Env):
    metadata = {
        'render.modes': ['human', 'rgb_array'],
        'video.frames_per_second': FPS
    }

    def __init__(self):
        self.viewer = None
        self.viewport_width = None
        self.viewport_height = None
        self.gravity = None
        self.drawlist = {}
        self.partslist = {}
        self.jointslist = []
        self.name = '%ENV_ID%-v0'
        self.world = None
        self.current_step = 0
        self.current_epoch = 0
        self.statistics = False
        self.statisticsRecorder = None

        self.initialize_world({})

    def initialize_world(self, objects):
        if self.world is not None:
            for body in self.world.objects:
                self.world.DestroyBody(self.world.objects[body])
        self.world = BarbellWorld(gravity=self.gravity)
        self.world.initialized_contact_detector = %ENV_ID_PASCALCASE%ContactDetector(self)
        self.world.contactListener = self.world.initialized_contact_detector

    def get_object(self, object_name):
        return self.world.objects[object_name]

    def get_joint(self, object_a, object_b):
        return self.world.joints["%s_%s" % object_a, object_b]

    def set_definition_file(self, filename):
        parse_file(filename, self)

    # FILL ME IN!
    def reset(self):
        self.current_step = 0
        self.total_reward = 0
        self.current_epoch += 1

    # FILL ME IN!
    def observation(self):
        pass

    # FILL ME IN!
    def reward(self):
        pass

    # FILL ME IN!
    def done(self):
        pass

    # FILL ME IN!
    def step(self, action):
        reward = self.reward()
        observation = self.observation()
        done = self.done()
        self.world.Step(1.0 / FPS, 6 * 30, 2 * 30)
        if done and self.statistics:
            if self.statisticsRecorder is None:
                self.statisticsRecorder = BarbellStatistics(self.env_name)
            self.statisticsRecorder.save(self.current_epoch, self.total_reward)
        return observation, reward, done

    def render(self, mode='human', close=False):
        if self.viewer is None:
                    self.viewer = BarbellViewer(viewport_width=self.viewport_width, viewport_height=self.viewport_height)

        self.viewer.draw_objects(self.world.objects)
        return self.viewer.render(return_rgb_array=(mode == 'rgb_array'))
