# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libinjection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libinjection')
    _libinjection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libinjection', [dirname(__file__)])
        except ImportError:
            import _libinjection
            return _libinjection
        try:
            _mod = imp.load_module('_libinjection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libinjection = swig_import_helper()
    del swig_import_helper
else:
    import _libinjection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def version():
    return _libinjection.version()
version = _libinjection.version

def sqli(s, fingerprint):
    return _libinjection.sqli(s, fingerprint)
sqli = _libinjection.sqli

def xss(s):
    return _libinjection.xss(s)
xss = _libinjection.xss
FLAG_NONE = _libinjection.FLAG_NONE
FLAG_QUOTE_NONE = _libinjection.FLAG_QUOTE_NONE
FLAG_QUOTE_SINGLE = _libinjection.FLAG_QUOTE_SINGLE
FLAG_QUOTE_DOUBLE = _libinjection.FLAG_QUOTE_DOUBLE
FLAG_SQL_ANSI = _libinjection.FLAG_SQL_ANSI
FLAG_SQL_MYSQL = _libinjection.FLAG_SQL_MYSQL
LOOKUP_WORD = _libinjection.LOOKUP_WORD
LOOKUP_TYPE = _libinjection.LOOKUP_TYPE
LOOKUP_OPERATOR = _libinjection.LOOKUP_OPERATOR
LOOKUP_FINGERPRINT = _libinjection.LOOKUP_FINGERPRINT
class sqli_token(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sqli_token, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sqli_token, name)
    __repr__ = _swig_repr
    __swig_getmethods__["pos"] = _libinjection.sqli_token_pos_get
    if _newclass:
        pos = _swig_property(_libinjection.sqli_token_pos_get)
    __swig_getmethods__["len"] = _libinjection.sqli_token_len_get
    if _newclass:
        len = _swig_property(_libinjection.sqli_token_len_get)
    __swig_getmethods__["count"] = _libinjection.sqli_token_count_get
    if _newclass:
        count = _swig_property(_libinjection.sqli_token_count_get)
    __swig_getmethods__["type"] = _libinjection.sqli_token_type_get
    if _newclass:
        type = _swig_property(_libinjection.sqli_token_type_get)
    __swig_getmethods__["str_open"] = _libinjection.sqli_token_str_open_get
    if _newclass:
        str_open = _swig_property(_libinjection.sqli_token_str_open_get)
    __swig_getmethods__["str_close"] = _libinjection.sqli_token_str_close_get
    if _newclass:
        str_close = _swig_property(_libinjection.sqli_token_str_close_get)
    __swig_getmethods__["val"] = _libinjection.sqli_token_val_get
    if _newclass:
        val = _swig_property(_libinjection.sqli_token_val_get)

    def __init__(self):
        this = _libinjection.new_sqli_token()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libinjection.delete_sqli_token
    __del__ = lambda self: None
sqli_token_swigregister = _libinjection.sqli_token_swigregister
sqli_token_swigregister(sqli_token)

class sqli_state(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sqli_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sqli_state, name)
    __repr__ = _swig_repr
    __swig_getmethods__["s"] = _libinjection.sqli_state_s_get
    if _newclass:
        s = _swig_property(_libinjection.sqli_state_s_get)
    __swig_getmethods__["slen"] = _libinjection.sqli_state_slen_get
    if _newclass:
        slen = _swig_property(_libinjection.sqli_state_slen_get)
    __swig_getmethods__["lookup"] = _libinjection.sqli_state_lookup_get
    if _newclass:
        lookup = _swig_property(_libinjection.sqli_state_lookup_get)
    __swig_getmethods__["userdata"] = _libinjection.sqli_state_userdata_get
    if _newclass:
        userdata = _swig_property(_libinjection.sqli_state_userdata_get)
    __swig_getmethods__["flags"] = _libinjection.sqli_state_flags_get
    if _newclass:
        flags = _swig_property(_libinjection.sqli_state_flags_get)
    __swig_getmethods__["pos"] = _libinjection.sqli_state_pos_get
    if _newclass:
        pos = _swig_property(_libinjection.sqli_state_pos_get)
    __swig_getmethods__["current"] = _libinjection.sqli_state_current_get
    if _newclass:
        current = _swig_property(_libinjection.sqli_state_current_get)
    __swig_getmethods__["fingerprint"] = _libinjection.sqli_state_fingerprint_get
    if _newclass:
        fingerprint = _swig_property(_libinjection.sqli_state_fingerprint_get)
    __swig_getmethods__["reason"] = _libinjection.sqli_state_reason_get
    if _newclass:
        reason = _swig_property(_libinjection.sqli_state_reason_get)
    __swig_getmethods__["stats_comment_ddw"] = _libinjection.sqli_state_stats_comment_ddw_get
    if _newclass:
        stats_comment_ddw = _swig_property(_libinjection.sqli_state_stats_comment_ddw_get)
    __swig_getmethods__["stats_comment_ddx"] = _libinjection.sqli_state_stats_comment_ddx_get
    if _newclass:
        stats_comment_ddx = _swig_property(_libinjection.sqli_state_stats_comment_ddx_get)
    __swig_getmethods__["stats_comment_c"] = _libinjection.sqli_state_stats_comment_c_get
    if _newclass:
        stats_comment_c = _swig_property(_libinjection.sqli_state_stats_comment_c_get)
    __swig_getmethods__["stats_comment_hash"] = _libinjection.sqli_state_stats_comment_hash_get
    if _newclass:
        stats_comment_hash = _swig_property(_libinjection.sqli_state_stats_comment_hash_get)
    __swig_getmethods__["stats_folds"] = _libinjection.sqli_state_stats_folds_get
    if _newclass:
        stats_folds = _swig_property(_libinjection.sqli_state_stats_folds_get)
    __swig_getmethods__["stats_tokens"] = _libinjection.sqli_state_stats_tokens_get
    if _newclass:
        stats_tokens = _swig_property(_libinjection.sqli_state_stats_tokens_get)

    def __init__(self):
        this = _libinjection.new_sqli_state()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libinjection.delete_sqli_state
    __del__ = lambda self: None
sqli_state_swigregister = _libinjection.sqli_state_swigregister
sqli_state_swigregister(sqli_state)


def sqli_get_token(sqlistate, i):
    return _libinjection.sqli_get_token(sqlistate, i)
sqli_get_token = _libinjection.sqli_get_token

def sqli_init(sql_state, s, flags):
    return _libinjection.sqli_init(sql_state, s, flags)
sqli_init = _libinjection.sqli_init

def is_sqli(sql_state):
    return _libinjection.is_sqli(sql_state)
is_sqli = _libinjection.is_sqli

def sqli_callback(sql_state, fn):
    return _libinjection.sqli_callback(sql_state, fn)
sqli_callback = _libinjection.sqli_callback

def sqli_reset(sql_state, flags):
    return _libinjection.sqli_reset(sql_state, flags)
sqli_reset = _libinjection.sqli_reset

def sqli_fingerprint(sql_state, flags):
    return _libinjection.sqli_fingerprint(sql_state, flags)
sqli_fingerprint = _libinjection.sqli_fingerprint

def sqli_lookup_word(sql_state, lookup_type, s):
    return _libinjection.sqli_lookup_word(sql_state, lookup_type, s)
sqli_lookup_word = _libinjection.sqli_lookup_word

def sqli_tokenize(sql_state):
    return _libinjection.sqli_tokenize(sql_state)
sqli_tokenize = _libinjection.sqli_tokenize

def sqli_fold(sql_state):
    return _libinjection.sqli_fold(sql_state)
sqli_fold = _libinjection.sqli_fold

def sqli_check_fingerprint(sql_state):
    return _libinjection.sqli_check_fingerprint(sql_state)
sqli_check_fingerprint = _libinjection.sqli_check_fingerprint

def sqli_blacklist(sql_state):
    return _libinjection.sqli_blacklist(sql_state)
sqli_blacklist = _libinjection.sqli_blacklist

def sqli_not_whitelist(sql_state):
    return _libinjection.sqli_not_whitelist(sql_state)
sqli_not_whitelist = _libinjection.sqli_not_whitelist
# This file is compatible with both classic and new-style classes.


