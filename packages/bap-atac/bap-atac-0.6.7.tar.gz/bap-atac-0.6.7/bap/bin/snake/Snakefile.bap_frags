import os
import subprocess
import shutil
import re
import pysam

from os.path import join
from collections import Counter

configfile: config["cfp"]     
outdir = config["output"]
script_dir = config["script_dir"]   

bgzip = config["bgzip"]
tabix = config["tabix"]

samtools = config["samtools"]
bedtools = config["bedtools"]     
R = config["R"] 

name = config["name"] 
output = config["output"]
threads_max = int(config["ncores"])
nc_threshold = str(config["nc_threshold"])

bead_tag = config["bead_tag"] 
barcodeTranslateFile = config["barcodeTranslateFile"] 
blacklistRegionsFile = config["blacklistFile"] 

# Determine .bam files to execute for fragment overlap analysis
infile_nuclear = outdir + "/.internal/samples/" + name + ".chrbam.txt"
with open(infile_nuclear) as f:
    SAMPLES = f.readlines()
SAMPLES = [x.strip() for x in SAMPLES]

with open(outdir + "/.internal/samples/" + name + ".mitochrbam.txt") as f:
	mito_sample = f.readlines()

# Merge mito to the others
SAMPLES_noMito = SAMPLES

# Create vectors of inputs
chrOut = [x.replace("/filt_split/", "/drop_barcode/") for x in SAMPLES_noMito]
simple = [re.sub(".raw.bam$", "", x.replace(output + "/temp/filt_split/", "")) for x in SAMPLES]

simple_noMito = [re.sub(".raw.bam$", "", x.replace(output + "/temp/filt_split/", "")) for x in SAMPLES_noMito]
HQfragsfiles = [output + "/temp/filt_split/" + x + ".frag.bedpe.annotated.dedup.tsv" for x in simple_noMito]
sumstats_nomito = [output + "/temp/filt_split/" + x + "_frag.sumstats.tsv" for x in simple_noMito]


# Filepaths to executable scripts
annotate_fragments_R_versionA = script_dir + "/bin/R/21a_annotate_fragments_bap2_frags.R"
reannoFrags_R = script_dir + "/bin/R/24_reannoFrags_bap2.R"


rule all:
	input:
		outdir + "/final/"+name+".fragments.tsv.gz"

rule assemble_fragments:
	input:
		rawbam = output + "/temp/filt_split/" + "{name}" + ".raw.bam"
	output:
		outbedpe = output + "/temp/filt_split/" + "{name}" + ".frag.bedpe.gz",
		outlog = output + "/logs/frag/" + "{name}" + ".bedtools.fragmerge.log"
	threads:
		1
	run:
		namesort_bam = input.rawbam.replace(".raw.bam", "_nameSorted.bam")
		os.system(samtools + " collate -o " + namesort_bam + " " + input.rawbam)
		l1 = "("+bedtools+" bamtobed -i "+ namesort_bam
		l2 = ''' -bedpe | awk -v OFS="\t" '{if($9=="+"){print $1,$2+4,$6+4,$7}else if($9=="-"){print $1,$2-5,$6-5,$7}}' | gzip > ''' 
		l3 = output.outbedpe + ") 2> " + output.outlog
		call_frag_gen = l1 + l2 + l3
		os.system(call_frag_gen)


# here, the blacklist is enforced
# and unlike standard bap2, we do the nc-filter here
# This is because before, we didn't necessarily know which barcodes would pass the knee and thus be candidates to be filtered out
rule annotate_fragments:
	input:
		inbedpe = output + "/temp/filt_split/" + "{name}" + ".frag.bedpe.gz"
	output:
		outbedpe = output + "/temp/filt_split/" + "{name}" + ".frag.bedpe.annotated.tsv.gz",
		outbeadcounts = output + "/temp/filt_split/" + "{name}" + ".bead_counts.tsv"
	threads:
		1
	run:
		read_bead_file = input.inbedpe.replace(".frag.bedpe.gz", ".read_bead.tsv.gz")
		temp_anno_bedpe = output.outbedpe.replace(".gz", "")
		r_call1 = " ".join([R+"script", annotate_fragments_R_versionA, blacklistRegionsFile, input.inbedpe, read_bead_file, nc_threshold, temp_anno_bedpe, output.outbeadcounts])
		os.system(r_call1)
		os.system("gzip " + temp_anno_bedpe)


rule reannotate_fragments_get_summary_stats_chr:
	input:
		annobedpe = output + "/temp/filt_split/" + "{name}" + ".frag.bedpe.annotated.tsv.gz",
		bc_translate_tsv = barcodeTranslateFile
	output:
		cleanbedpe = output + "/temp/filt_split/" + "{name}" + ".frag.bedpe.annotated.dedup.tsv",
		frag_ss = output + "/temp/filt_split/" + "{name}" + "_frag.sumstats.tsv"
	run:
		R_call_reanno_ss = " ".join([R+"script", reannoFrags_R, input.annobedpe, input.bc_translate_tsv, output.cleanbedpe, output.frag_ss])
		os.system(R_call_reanno_ss)

		
rule final_frag_merge:
	input:
		HQfragsfiles = HQfragsfiles
	output:
		finalfrags = outdir + "/final/"+name+".fragments.tsv.gz"
	threads:
		1
	run:
		infiles = " ".join(HQfragsfiles)
		raw_out = output.finalfrags[:-3]
		os.system("cat " + infiles + " > " + raw_out)
		os.system(bgzip + " " + raw_out)
		os.system(tabix + " " + raw_out + ".gz -p bed")
