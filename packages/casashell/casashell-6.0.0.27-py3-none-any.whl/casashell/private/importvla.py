##################### generated by xml-casa (v2) from importvla.xml #################
##################### b803d2294e3bbe2af64178265f4004b5 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import importvla as _importvla_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _importvla:
    """
    importvla ---- Import VLA archive file(s) to a measurement set

    
    Imports an arbitrary number of VLA archive-format data sets into a
    casa measurement set.  If more than one band is present, they will be
    put in the same measurement set but in a separate spectral window.
    The task will handle old style and new style VLA (after July 2007)
    archive data and apply the tsys to the data and to the weights.

    --------- parameter descriptions ---------------------------------------------

    archivefiles  Name of input VLA archive file(s)
                  Default: none.  Must be supplied
                  
                     Examples: 
                     archivefiles = 'AP314_A959519.xp1'
                     archivefiles=['AP314_A950519.xp1',
                     'AP314_A950519.xp2']
    vis           Name of output visibility file
                  Default: none.  Must be supplied
                  
                     Example: vis='NGC7538.ms'
                  
                  NOTE: Will not over-write existing ms of same
                  name. A backup flag-file version 'Original' will
                  be made in vis.flagversions.  See help
                  flagmanager.
    bandname      VLA frequency band name:
                  Default: '' (obtain all bands in the archive
                  file)
                  Options: '4'=48-96 MHz,'P'=298-345
                  MHz,'L'=1.15-1.75 GHz, 'C'=4.2-5.1
                  GHz,'X'=6.8-9.6 GHz,'U'=13.5-16.3 GHz,
                  'K'=20.8-25.8 GHz,'Q'=38-51 GHz
                  
                     Example: bandname='K'
    frequencytol  Tolerance in frequency shift in making spectral windows
                  Default: = 150000.0Hz'
                  
                     Example: frequencytol = 1500000.0 (units = Hz)
                  
                  For Doppler shifted data, less than 10000 Hz may
                  may produce too many unnecessary spectral
                  windows.
    project       Project name to import from archive files
                  Default: '' (all projects in file)
                  
                     Example: project='AL519'             
                     Project = 'al519' or AL519 will work. 
                  
                  WARNING: Do not include leading zeros; project =
                  'AL0519' will not work.
    starttime     Time after which data will be considered for importing
                  Default: '' (all)
                  
                  syntax: starttime = '2003/1/31/05:05:23'. Date
                  must be included!
    stoptime      Time before which data will be considered for
                  importing
                  Default: '' (all)
                  
                  syntax: starttime = '2003/1/31/08:05:23'. Date
                  must be included!
    applytsys     Apply data scaling and weight scaling by nominal
                  sensitivity (~Tsys)
                  Default: True (strongly recommended)
                  Options: True|False
    autocorr      Import autocorrelations to MS
                  Default: False (no autocorrelations)
                  Options: False|True
    antnamescheme 'old' or 'new' antenna names.
                  Default: 'new'
                  Options: new|old
                  
                  * 'new' gives antnenna names 'VA04' or 'EA13 for
                    VLA telescopse 04 and 13 (EVLA)
                  * 'old' gives names '04' or '13'
    keepblanks    Should sources with blank names be filled into the data
                  base?
                  Default: False (do not fill)
                  Options: False|True
                  
                  These scans are tipping scans (as of June 1,
                  2009) and should not be filled in the visibility
                  data set.
    evlabands     Use the EVLA's center frequency and bandwidths for
                  frequencies specified via wavelength or band.
                  Default: False
                  Options: False|True

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTVLA IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Import VLA archive file(s) to a measurement set"""

    __schema = {'archivefiles': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'vis': {'type': 'cStr'}, 'bandname': {'type': 'cStr'}, 'frequencytol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'project': {'type': 'cStr'}, 'starttime': {'type': 'cStr'}, 'stoptime': {'type': 'cStr'}, 'applytsys': {'type': 'cBool'}, 'autocorr': {'type': 'cBool'}, 'antnamescheme': {'type': 'cStr'}, 'keepblanks': {'type': 'cBool'}, 'evlabands': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __project_dflt( self, glb ):
        return ''

    def __project( self, glb ):
        if 'project' in glb: return glb['project']
        return ''

    def __stoptime_dflt( self, glb ):
        return ''

    def __stoptime( self, glb ):
        if 'stoptime' in glb: return glb['stoptime']
        return ''

    def __evlabands_dflt( self, glb ):
        return False

    def __evlabands( self, glb ):
        if 'evlabands' in glb: return glb['evlabands']
        return False

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __archivefiles_dflt( self, glb ):
        return [  ]

    def __archivefiles( self, glb ):
        if 'archivefiles' in glb: return glb['archivefiles']
        return [  ]

    def __antnamescheme_dflt( self, glb ):
        return 'new'

    def __antnamescheme( self, glb ):
        if 'antnamescheme' in glb: return glb['antnamescheme']
        return 'new'

    def __starttime_dflt( self, glb ):
        return ''

    def __starttime( self, glb ):
        if 'starttime' in glb: return glb['starttime']
        return ''

    def __autocorr_dflt( self, glb ):
        return False

    def __autocorr( self, glb ):
        if 'autocorr' in glb: return glb['autocorr']
        return False

    def __keepblanks_dflt( self, glb ):
        return False

    def __keepblanks( self, glb ):
        if 'keepblanks' in glb: return glb['keepblanks']
        return False

    def __bandname_dflt( self, glb ):
        return ''

    def __bandname( self, glb ):
        if 'bandname' in glb: return glb['bandname']
        return ''

    def __applytsys_dflt( self, glb ):
        return True

    def __applytsys( self, glb ):
        if 'applytsys' in glb: return glb['applytsys']
        return True

    def __frequencytol_dflt( self, glb ):
        return '150000.0Hz'

    def __frequencytol( self, glb ):
        if 'frequencytol' in glb: return glb['frequencytol']
        return '150000.0Hz'



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __archivefiles_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input VLA archive file(s)'
        value = self.__archivefiles( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'archivefiles': value},{'archivefiles': self.__schema['archivefiles']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('archivefiles',pre,self.__to_string_(value),post,description))
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of output visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __bandname_inp(self):
        out = self.__stdout or sys.stdout
        description = 'VLA frequency band name:\'\'=>obtain all bands in the archive file'
        value = self.__bandname( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'bandname': value},{'bandname': self.__schema['bandname']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('bandname',pre,self.__to_string_(value),post,description))
    def __frequencytol_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Frequency shift to define a unique spectra window (Hz)'
        value = self.__frequencytol( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'frequencytol': value},{'frequencytol': self.__schema['frequencytol']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('frequencytol',pre,self.__to_string_(value),post,description))
    def __project_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Project name: \'\' => all projects in files'
        value = self.__project( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'project': value},{'project': self.__schema['project']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('project',pre,self.__to_string_(value),post,description))
    def __starttime_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Start time to search for data'
        value = self.__starttime( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'starttime': value},{'starttime': self.__schema['starttime']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('starttime',pre,self.__to_string_(value),post,description))
    def __stoptime_inp(self):
        out = self.__stdout or sys.stdout
        description = 'End time to search for data'
        value = self.__stoptime( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'stoptime': value},{'stoptime': self.__schema['stoptime']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('stoptime',pre,self.__to_string_(value),post,description))
    def __applytsys_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Apply nominal sensitivity scaling to data and weights'
        value = self.__applytsys( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'applytsys': value},{'applytsys': self.__schema['applytsys']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('applytsys',pre,self.__to_string_(value),post,description))
    def __autocorr_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Import autocorrelations to MS, if set to True'
        value = self.__autocorr( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'autocorr': value},{'autocorr': self.__schema['autocorr']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('autocorr',pre,self.__to_string_(value),post,description))
    def __antnamescheme_inp(self):
        out = self.__stdout or sys.stdout
        description = '\'old\' or \'new\'; \'VA04\' or \'04\' for VLA ant 4'
        value = self.__antnamescheme( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'antnamescheme': value},{'antnamescheme': self.__schema['antnamescheme']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('antnamescheme',pre,self.__to_string_(value),post,description))
    def __keepblanks_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Fill scans with blank (empty) source names (e.g. tipping scans)'
        value = self.__keepblanks( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'keepblanks': value},{'keepblanks': self.__schema['keepblanks']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('keepblanks',pre,self.__to_string_(value),post,description))
    def __evlabands_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Use updated eVLA frequencies and bandwidths for bands and wavelengths'
        value = self.__evlabands( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'evlabands': value},{'evlabands': self.__schema['evlabands']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('evlabands',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'archivefiles' in glb: del glb['archivefiles']
        if 'applytsys' in glb: del glb['applytsys']
        if 'project' in glb: del glb['project']
        if 'keepblanks' in glb: del glb['keepblanks']
        if 'evlabands' in glb: del glb['evlabands']
        if 'vis' in glb: del glb['vis']
        if 'bandname' in glb: del glb['bandname']
        if 'frequencytol' in glb: del glb['frequencytol']
        if 'starttime' in glb: del glb['starttime']
        if 'antnamescheme' in glb: del glb['antnamescheme']
        if 'stoptime' in glb: del glb['stoptime']
        if 'autocorr' in glb: del glb['autocorr']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__archivefiles_inp( )
        self.__vis_inp( )
        self.__bandname_inp( )
        self.__frequencytol_inp( )
        self.__project_inp( )
        self.__starttime_inp( )
        self.__stoptime_inp( )
        self.__applytsys_inp( )
        self.__autocorr_inp( )
        self.__antnamescheme_inp( )
        self.__keepblanks_inp( )
        self.__evlabands_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("importvla.last"):
                filename = "importvla.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, archivefiles=None, vis=None, bandname=None, frequencytol=None, project=None, starttime=None, stoptime=None, applytsys=None, autocorr=None, antnamescheme=None, keepblanks=None, evlabands=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('importvla.pre')
        _postfile = os.path.realpath('importvla.last')
        _return_result_ = None
        _arguments = [archivefiles,vis,bandname,frequencytol,project,starttime,stoptime,applytsys,autocorr,antnamescheme,keepblanks,evlabands]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if archivefiles is not None: local_global['archivefiles'] = archivefiles
            if vis is not None: local_global['vis'] = vis
            if bandname is not None: local_global['bandname'] = bandname
            if frequencytol is not None: local_global['frequencytol'] = frequencytol
            if project is not None: local_global['project'] = project
            if starttime is not None: local_global['starttime'] = starttime
            if stoptime is not None: local_global['stoptime'] = stoptime
            if applytsys is not None: local_global['applytsys'] = applytsys
            if autocorr is not None: local_global['autocorr'] = autocorr
            if antnamescheme is not None: local_global['antnamescheme'] = antnamescheme
            if keepblanks is not None: local_global['keepblanks'] = keepblanks
            if evlabands is not None: local_global['evlabands'] = evlabands

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['archivefiles'] = self.__archivefiles( local_global )
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['bandname'] = self.__bandname( local_global )
            _invocation_parameters['frequencytol'] = self.__frequencytol( local_global )
            _invocation_parameters['project'] = self.__project( local_global )
            _invocation_parameters['starttime'] = self.__starttime( local_global )
            _invocation_parameters['stoptime'] = self.__stoptime( local_global )
            _invocation_parameters['applytsys'] = self.__applytsys( local_global )
            _invocation_parameters['autocorr'] = self.__autocorr( local_global )
            _invocation_parameters['antnamescheme'] = self.__antnamescheme( local_global )
            _invocation_parameters['keepblanks'] = self.__keepblanks( local_global )
            _invocation_parameters['evlabands'] = self.__evlabands( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['archivefiles'] = self.__archivefiles( self.__globals_( ) )
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['bandname'] = self.__bandname( self.__globals_( ) )
            _invocation_parameters['frequencytol'] = self.__frequencytol( self.__globals_( ) )
            _invocation_parameters['project'] = self.__project( self.__globals_( ) )
            _invocation_parameters['starttime'] = self.__starttime( self.__globals_( ) )
            _invocation_parameters['stoptime'] = self.__stoptime( self.__globals_( ) )
            _invocation_parameters['applytsys'] = self.__applytsys( self.__globals_( ) )
            _invocation_parameters['autocorr'] = self.__autocorr( self.__globals_( ) )
            _invocation_parameters['antnamescheme'] = self.__antnamescheme( self.__globals_( ) )
            _invocation_parameters['keepblanks'] = self.__keepblanks( self.__globals_( ) )
            _invocation_parameters['evlabands'] = self.__evlabands( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-13s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importvla( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _importvla_t( _invocation_parameters['archivefiles'],_invocation_parameters['vis'],_invocation_parameters['bandname'],_invocation_parameters['frequencytol'],_invocation_parameters['project'],_invocation_parameters['starttime'],_invocation_parameters['stoptime'],_invocation_parameters['applytsys'],_invocation_parameters['autocorr'],_invocation_parameters['antnamescheme'],_invocation_parameters['keepblanks'],_invocation_parameters['evlabands'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

importvla = _importvla( )

