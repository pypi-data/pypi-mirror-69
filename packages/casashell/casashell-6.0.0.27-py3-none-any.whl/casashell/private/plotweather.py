##################### generated by xml-casa (v2) from plotweather.xml ###############
##################### 9aa23d1d63c67599652ec0f6a285d29c ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import plotweather as _plotweather_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _plotweather:
    """
    plotweather ---- Plot elements of the weather table; estimate opacity.

    --------- parameter descriptions ---------------------------------------------

    vis             MS name
    seasonal_weight weight of the seasonal model
    doPlot          set this to True to create a plot
    plotName        (Optional) the name of the plot file

    --------- examples -----------------------------------------------------------

    
    Generates opacity estimates from both the weather data and a seasonal model; intended for VLA use only.
    By default the returned opacity is the mean of these predictions, but this can be adjusted with seasonal_weight.
    
    These methods and models are described in detail in EVLA Memo 143, VLA Test Memo 232, VLA Scientific Memo 176, and references therein.
    
    Saves the plot to the following default file:  MS name + .plotweather.png
    Custom plot filenames must end in one of: .png, .pdf, .ps, .eps or .svg
    
    If run as a function, will return the mean zenith opacity per spectral window.
    
    The wind direction is defined as the direction where the wind is coming from.
    The wind direction is thus in the opposite side of the arrow, with north at
    the top and counterclockwise through west, south, and east.
    
    Written by Josh Marvil, revised 02/06/12
    
    example:
    myTau = plotweather(vis='myMS.ms',seasonal_weight=0.5, doPlot=True)


    """

    _info_group_ = """visualization"""
    _info_desc_ = """Plot elements of the weather table; estimate opacity."""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'seasonal_weight': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'doPlot': {'type': 'cBool'}, 'plotName': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __seasonal_weight_dflt( self, glb ):
        return float(0.5)

    def __seasonal_weight( self, glb ):
        if 'seasonal_weight' in glb: return glb['seasonal_weight']
        return float(0.5)

    def __doPlot_dflt( self, glb ):
        return True

    def __doPlot( self, glb ):
        if 'doPlot' in glb: return glb['doPlot']
        return True

    def __plotName_dflt( self, glb ):
        return ''

    def __plotName( self, glb ):
        if 'plotName' in glb: return glb['plotName']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __seasonal_weight_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__seasonal_weight( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'seasonal_weight': value},{'seasonal_weight': self.__schema['seasonal_weight']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('seasonal_weight',pre,self.__to_string_(value),post,description))
    def __doPlot_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__doPlot( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'doPlot': value},{'doPlot': self.__schema['doPlot']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('doPlot',pre,self.__to_string_(value),post,description))
    def __plotName_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__plotName( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'plotName': value},{'plotName': self.__schema['plotName']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('plotName',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'seasonal_weight' in glb: del glb['seasonal_weight']
        if 'doPlot' in glb: del glb['doPlot']
        if 'plotName' in glb: del glb['plotName']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__seasonal_weight_inp( )
        self.__doPlot_inp( )
        self.__plotName_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("plotweather.last"):
                filename = "plotweather.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, seasonal_weight=None, doPlot=None, plotName=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('plotweather.pre')
        _postfile = os.path.realpath('plotweather.last')
        _return_result_ = None
        _arguments = [vis,seasonal_weight,doPlot,plotName]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if seasonal_weight is not None: local_global['seasonal_weight'] = seasonal_weight
            if doPlot is not None: local_global['doPlot'] = doPlot
            if plotName is not None: local_global['plotName'] = plotName

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['seasonal_weight'] = self.__seasonal_weight( local_global )
            _invocation_parameters['doPlot'] = self.__doPlot( local_global )
            _invocation_parameters['plotName'] = self.__plotName( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['seasonal_weight'] = self.__seasonal_weight( self.__globals_( ) )
            _invocation_parameters['doPlot'] = self.__doPlot( self.__globals_( ) )
            _invocation_parameters['plotName'] = self.__plotName( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-15s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotweather( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _plotweather_t( _invocation_parameters['vis'],_invocation_parameters['seasonal_weight'],_invocation_parameters['doPlot'],_invocation_parameters['plotName'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

plotweather = _plotweather( )

