##################### generated by xml-casa (v2) from delmod.xml ####################
##################### 5579157d68ef9b73b456c84f50d26ecc ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import delmod as _delmod_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _delmod:
    """
    delmod ---- Deletes model representations in the MS

    
    This utility task is to be used to delete the model visibility data
    representations in the MS.

    --------- parameter descriptions ---------------------------------------------

    vis     Name of input visibility file (MS)
    otf     Delete the on-the-fly model data keywords
            Default=True
            
            The 'otf' representation is the 'scratch-less'
            model data, stored as keywords in the MS header
            containing model data formation instructions.  It
            is generated by the setjy, ft, and tclean tasks
            (usescratch=False), and if present, overrides the
            MODEL_DATA column (if present). If a user wishes
            to use the MODEL_DATA column _after_ having
            operated with the 'otf' representation, this task
            can be used to delete the 'otf' represenatation
            to make the MODEL_DATA column visible.  (Create
            the MODEL_DATA column by using usescratch=True in
            setjy, ft, or clean; or by running the clearcal
            task with addmodel=True.)
    field   Select field using field id(s) or field name(s)
            Subparameter of otf
            Default: '' (all fields' models will be deleted)
    scr     Delete the MODEL_DATA scr col (if it exists)
            Default: False
            
            Note: it is not possible to delete the MODEL_DATA
            column per field.
            
            If otf=F and scr=F, delmod will provide a listing
            of the header field records.
    [1;42mRETURNS[1;m    void

    --------- examples -----------------------------------------------------------

    
    
    
    For more information, see the task pages of delmod in CASA Docs:
    
    https://casa.nrao.edu/casadocs/
    
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Deletes model representations in the MS"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'otf': {'type': 'cBool'}, 'field': {'type': 'cStr'}, 'scr': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __otf_dflt( self, glb ):
        return True

    def __otf( self, glb ):
        if 'otf' in glb: return glb['otf']
        return True

    def __scr_dflt( self, glb ):
        return False

    def __scr( self, glb ):
        if 'scr' in glb: return glb['scr']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __field_dflt( self, glb ):
        if self.__otf( glb ) == bool(True): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        dflt = self.__field_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file (MS)'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __otf_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Delete the on-the-fly model data keywords'
        value = self.__otf( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'otf': value},{'otf': self.__schema['otf']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('otf',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        if self.__field_dflt( self.__globals_( ) ) is not None:
             description = 'Select field using field id(s) or field name(s)'
             value = self.__field( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-5.5s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __scr_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Delete the MODEL_DATA scr col (if it exists)'
        value = self.__scr( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'scr': value},{'scr': self.__schema['scr']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('scr',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'otf' in glb: del glb['otf']
        if 'field' in glb: del glb['field']
        if 'scr' in glb: del glb['scr']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__otf_inp( )
        self.__field_inp( )
        self.__scr_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("delmod.last"):
                filename = "delmod.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, otf=None, field=None, scr=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('delmod.pre')
        _postfile = os.path.realpath('delmod.last')
        _return_result_ = None
        _arguments = [vis,otf,field,scr]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if otf is not None: local_global['otf'] = otf
            if scr is not None: local_global['scr'] = scr

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['otf'] = self.__otf( local_global )
            _invocation_parameters['scr'] = self.__scr( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['field'] = self.__field( _invocation_parameters ) if field is None else field

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['otf'] = self.__otf( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['scr'] = self.__scr( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-5s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#delmod( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _delmod_t( _invocation_parameters['vis'],_invocation_parameters['otf'],_invocation_parameters['field'],_invocation_parameters['scr'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

delmod = _delmod( )

