##################### generated by xml-casa (v2) from imstat.xml ####################
##################### 275e6df9b03ba71023a49b41c024fd26 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import imstat as _imstat_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imstat:
    """
    imstat ---- Displays statistical information from an image or image region

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    axes      List of axes to evaluate statistics over. Default is all axes.
    region    Region selection. Default is to use the full image.
    box       Rectangular region(s) to select in direction plane. Default is to use the entire direction plane.
    chans     Channels to use. Default is to use all channels.
    stokes    Stokes planes to use. Default is to use all Stokes planes.
    listit    Print stats and bounding box to logger?
    verbose   Print additional messages to logger?
    mask      Mask to use. Default is none.
    stretch   Stretch the mask if necessary and possible?
    logfile   Name of file to write fit results.
    append    If logfile exists, append to it if True or overwrite it if False
    algorithm Algorithm to use. Supported values are "biweight", "chauvenet", "classic", "fit-half", and "hinges-fences". Minimum match is supported.
    fence     Fence value for hinges-fences. A negative value means use the entire data set (ie default to the "classic" algorithm). Ignored if algorithm is not "hinges-fences".
    center    Center to use for fit-half. Valid choices are "mean", "median", and "zero". Ignored if algorithm is not "fit-half".
    lside     For fit-half, use values <= center for real data if True? If False, use values >= center as real data. Ignored if algorithm is not "fit-half".
    zscore    For chauvenet, this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenet"s criterion. Ignored if algorithm is not "chauvenet".
    maxiter   For chauvenet, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if algorithm is not "chauvenet".
    clmethod  Method to use for calculating classical statistics. Supported methods are "auto", "tiled", and "framework". Ignored if algorithm is not "classic".
    niter     For biweight, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, do a fast, simple computation (see description). Ignored if the algorithm is not "biweight".
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    Many parameters are determined from the specified region of an image.
    For this version, the region can be specified by a set of rectangular
    pixel coordinates, the channel ranges and the Stokes.
    
    For directed output, run as
    myoutput = imstat()
    
    
    Keyword arguments:
    imagename    Name of input image
    Default: none; Example: imagename='ngc5921_task.im'
    axes         axes to compute statistics over. -1 => all axes.
    region       Region selection. Default is
    to use the full image.
    box          Rectangular region(s) to select in direction plane. See
    Default is to use the entire direction plane.
    Example: box='10,10,50,50'
    box = '10,10,30,30,35,35,50,50' (two boxes)
    chans        Channels to use. Default is to use all channels.
    Example: chans='3~20'
    stokes       Stokes planes to use. Default is to
    use all Stokes planes.
    Example:stokes='I,Q'
    listit       Print stats and bounding box to logger?
    verbose      Print additional messages to logger?
    mask         Mask to use. Default is none.
    stretch      Stretch the mask if necessary and possible?
    logfile      Name of file to write fit results.
    append       If logfile exists, append to it (True) or overwrite it (False).
    alogortihm   Algorithm to use to compute statistics. Supported values are "classic"
    and "hinges-fences" (minimum match supported.)
    fence        Fence factor when algorithm = "hinges-fences". Negative values are not
    applicable and in these cases, the classic algorithm is used.
    center       Center to use for "fit-half". Valid choices are "mean" (mean value of the
    selected pixels), "median" (median value of the selected pixels), and "zero"
    (0.0 is used as the center value). Ignored if algorithm is not "fit-half".
    lside        For fit-half, use values <= center for the real data? If false, use
    values >= center as the real data. Ignored if algorithm is not "fit-half"
    zscore       For chauvenet, this is the target maximum number of standard deviations data
    may have to be included. If negative, use Chauvenet's criterion. Ignored if
    algorithm is not "chauvenet".
    maxiter      For chauvenet, this is the maximum number of iterations to attempt. Iterating
    will stop when either this limit is reached, or the zscore criterion is met.
    If negative, iterate until the zscore criterion is met. Ignored if algorithm is
    not "chauvenet".
    clmethod     Method to use for calculating classical statistics. Supported methods are "auto",
    "tiled", and "framework". Ignored if algorithm is not "classic".
    
    General procedure:
    
    1.  Specify inputs, then
    
    2.  myoutput = imstat()
    or specify inputs directly in calling sequence to task
    myoutput = imstat(imagename='image.im', etc)
    
    3.  myoutput['KEYS'] will contain the result associated with any
    of the keys given below
    
    KEYS CURRENTLY AVAILABLE
    blc          - absolute PIXEL coordinate of the bottom left corner of
    the bounding box surrounding the selected region
    blcf         - Same as blc, but uses WORLD coordinates instead of pixels
    trc          - the absolute PIXEL coordinate of the top right corner
    of the bounding box surrounding the selected region
    trcf         - Same as trc, but uses WORLD coordinates instead of pixels
    flux         - the flux or flux density. See below for details.
    npts         - the number of unmasked points used
    max          - the maximum pixel value
    min          - minimum pixel value
    maxpos       - absolute PIXEL coordinate of maximum pixel value
    maxposf      - Same as maxpos, but uses WORLD coordinates instead of pixels
    minpos       - absolute pixel coordinate of minimum pixel value
    minposf      - Same as minpos, but uses WORLD coordinates instead of pixels
    sum          - the sum of the pixel values: $sum I_i$
    sumsq        - the sum of the squares of the pixel values: $sum I_i^2$
    mean         - the mean of pixel values:
    $bar{I} = sum I_i / n$
    sigma        - the standard deviation about the mean:
    $sigma^2 = (sum I_i - bar{I})^2 / (n-1)$
    rms          - the root mean square:
    $sqrt {sum I_i^2 / n}$
    median       - the median pixel value
    medabsdevmed - the median of the absolute deviations from the
    median
    quartile     - the inner-quartile range. Find the points
    which are 25% largest and 75% largest (the median is
    50% largest).
    q1           - the first quartile.
    q3           - the third quartile
    
    CURSOR AXES
    The axes parameter allows one to set the cursor axes over which statistics
    are computed. For example, consider a 3-dimensional image for which axes=[0,2].
    The statistics would be computed for each XZ (axes 0 and 2) plane in the
    image.  One could then examine those statistics as a function of the Y
    (axis 1) axis.
    
    Each statistic is stored in an array in its own field in the returned dictionary.
    The dimensionality of these arrays is equal to the number of axes over which the
    statistics were not evaluated (called the display axes). For example, if the input
    image has four axes, and axes=[0], the output statistic arrays will have three dimensions.
    If axes=[0, 1], the output statistic arrays will have two dimensions.
    
    The shape of the output arrays when axes has a positive number of elements is based on
    the region selection. If there is no region selection, the shape of the statistic arrays
    is just the shape of the image along the display (non-cursor) axes. For example, if the
    input image has dimensions of 300x400x4x80 (RA x Dec x Stokes x Freq) and axes=[0, 1],
    in the absence of a region selection, the shape of the output statistic arrays will be
    4x80. If there is a region selection, the shape of the output statistic arrays will be
    determined by the number of planes along the display axes chosen in the region selection.
    For example, continuing with our example, if axes=[0,1], chans="5~15;30~70", and
    stokes="IV", the output statistic arrays will have shapes of 2x52. Only the selected
    planes will be displayed in the logger output if verbose=True.
    
    In the case where the image has a pixel mask, and/or the mask parameter is specified,
    and because of this specification a plane is entirely masked, this element is included in
    the statistic arrays (usually with a value of 0). It is not included in the logger output
    if verbose=True. One can exclude such elements from computations on the output arrays by
    using the numpy.extract() method. For example, to compute the minimum rms value, not
    including any fully masked planes, one could use
    
    stats = imstat(...)
    rmsmin = numpy.min(numpy.extract(stats['npts']>0, stats['rms']))
    
    Thus in the computation of rmsmin, only the rms elements are considered which have
    associated values of npts that are not zero.
    
    ALGORITHMS
    
    Several types of statistical algorithms are supported:
    
    * classic: This is the familiar algorithm, in which all unmasked pixels are used. One may choose
    one of two methods, which vary only by performance, for computing classic statistics, via the
    clmethod parameter. The "tiled" method is the old method and is fastest in cases where there are
    a large number of individual sets of statistics to be computed and a small number of data points
    per set. This can occur when one sets the axes parameter, which causes several individual sets of
    statistics to be computed. The "framework" method uses the new statistics framework to compute
    statistics. This method is fastest in the regime where one has a small number of individual sets
    of statistics to calculate, and each set has a large number of points. For example, this method
    is fastest when computing statistics over an entire image in one go (no axes specified). A third
    option, "auto", chooses which method to use by predicting which be faster based on the number of
    pixels in the image and the choice of the axes parameter.
    
    * fit-half: This algorithm calculates statistics on a dataset created from real and virtual pixel values.
    The real values are determined by the input parameters center and lside. The parameter center
    tells the algorithm where the center value of the combined real+virtual dataset should be. Options
    are the mean or the median of the input image's pixel values, or at zero. The lside parameter tells
    the algorithm on which side of this center the real pixel values are located. True indicates that
    the real pixel values to be used are <= center. False indicates the real pixel values to be used
    are >= center. The virtual part of the dataset is then created by reflecting all the real values
    through the center value, to create a perfectly symmetric dataset composed of a real and a virtual
    component. Statistics are then calculated on this resultant dataset. These two parameters are
    ignored if algorithm is not "fit-half". Because the maximum value is virtual if lside is True and the
    minimum value is virtual if lside is False, the value of the maximum position (if lside=True) or
    minimum position (if lside=False) is not reported in the returned record.
    
    * hinges-fences: This algorithm calculates statistics by including data in a range
    between Q1 - f*D and Q3 + f*D, inclusive, where Q1 is the first quartile of the distribution
    of unmasked data, subject to any specified pixel ranges, Q3 is the third quartile, D = Q3 - Q1
    (the inner quartile range), and f is the user-specified fence factor. Negative values of f
    indicate that the full distribution is to be used (ie, the classic algorithm is used). Sufficiently
    large values of f will also be equivalent to using the classic algorithm. For f = 0, only data
    in the inner quartile range is used for computing statistics. The value of fence is silently
    ignored if algorithm is not "hinges-fences".
    
    * chauvenet: The idea behind this algorithm is to eliminate outliers based on a maximum z-score value.
    A z-score is the number of standard deviations a point is from the mean of a distribution. This
    method thus is meant to be used for (nearly) normal distributions. In general, this is an iterative
    process, with successive iterations discarding additional outliers as the remaining points become
    closer to forming a normal distribution. Iterating stops when no additional points lie beyond the
    specified zscore value, or, if zscore is negative, when Chauvenet's criterion is met (see below).
    The parameter maxiter can be set to a non-negative value to prematurely abort this iterative
    process. When verbose=T, the "N iter" column in the table that is logged represents the number
    of iterations that were executed.
    
    Chauvenet's criterion allows the target z-score to decrease as the number of points in the
    distribution decreases on subsequent iterations. Essentially, the criterion is that the probability
    of having one point in a normal distribution at a maximum z-score of z_max must be at least 0.5.
    z_max is therefore a function of (only) the number of points in the distrbution and is given by
    
    npts = 0.5/erfc(z_max/sqrt(2))
    
    where erfc() is the complementary error function. As iterating proceeds, the number of remaining
    points decreases as outliers are discarded, and so z_max likewise decreases. Convergence occurs when
    all remaining points fall within a z-score of z_max. Below is an illustrative table of z_max values
    and their corresponding npts values. For example, it is likely that there will be a 5-sigma "noise
    bump" in a perfectly noisy image with one million independent elements.
    
    z_max    npts
    1.0                1
    1.5                3
    2.0               10
    2.5               40
    3.0              185
    3.5            1,074
    4.0            7,893
    4.5           73,579
    5.0          872,138
    5.5       13,165,126
    6.0      253,398,672
    6.5    6,225,098,696
    7.0  195,341,107,722
    
    NOTES ON FLUX DENSITIES AND FLUXES
    
    Fluxes and flux densities are not computed if any of the following conditions is met:
    
    1. The image does not have a direction coordinate
    2. The image does not have a intensity-like brightness unit. Examples of such units
    are Jy/beam (in which case the image must also have a beam) and K.
    3. There are no direction axes in the cursor axes that are used.
    4. If the (specified region of the) image has a non-degenerate spectral axis,
    and the image has a tablular spectral axis (axis with varying increments)
    5. Any axis that is not a direction nor a spectral axis that is included in the cursor
    axes is not degenerate within in specified region
    
    Note that condition 4 may be removed in the future.
    
    In cases where none of the above conditions is met, the flux density(ies) (intensities
    integrated over direction planes) will be computed if any of the following conditions
    are met:
    
    1. The image has no spectral coordinate
    2. The cursor axes do not include the spectral axis
    3. The spectral axis in the chosen region is degenerate
    
    In the case where there is a nondegenerate spectral axis that is included in the cursor
    axes, the flux (flux density integrated over spectral planes) will be computed. In this
    case, the spectral portion of the flux unit will be the velocity unit of the spectral
    coordinate if it has one (eg, if the brightness unit is Jy/beam and the velocity unit is
    km/s, the flux will have units of Jy.km/s). If not, the spectral portion of the flux unit
    will be the frequency unit of the spectral axis (eg, if the brightness unit is K and the
    frequency unit is Hz, the resulting flux unit will be K.arcsec2.Hz).
    
    In both cases of flux density or flux being computed, the resulting numerical value is
    assigned to the "flux" key in the output dictionary.
    
    ADDITIONAL EXAMPLES
    
    # Selected two box region
    # box 1, bottom-left coord is 2,3 and top-right coord is 14,15
    # box 2, bottom-left coord is 30,31 and top-right coord is 42,43
    imstat( 'myImage', box='2,3,14,15;30,31,42,43' )
    
    # Select the same two box regions but only channels 4 and 5
    imstat( 'myImage', box='2,3,14,15;30,31,42,43', chan='4~5' )
    
    # Select all channels greater the 20 as well as channel 0.
    # Then the mean and standard deviation are printed
    results = imstat( 'myImage', chans='>20;0' )
    print "Mean is: ", results['mean'], "  s.d. ", results['sigma']
    
    # Find statistical information for the Q stokes value only
    # then the I stokes values only, and printing out the statistical
    # values that we are interested in.
    s1 = imstat( 'myimage', stokes='Q' )
    s2 = imstat( 'myimage', stokes='I' )
    print "       |  MIN  |   MAX  | MEAN"
    print "  Q    | ",s1['min'][0],"  |  ",s1['max'][0],"  |  ",,"  |  ",s1['mean'][0]
    print "  I    | ",s2['min'][0],"  |  ",s2['max'][0],"  |  ",,"  |  ",s2['mean'][0]
    
    # evaluate statistics for each spectral plane in an ra x dec x frequency image
    myim = "noisy.im"
    ia.fromshape(myim, [20,30,40])
    # give pixels non-zero values
    ia.addnoise()
    ia.done()
    # These are the display axes, the calculation of statistics occurs
    # for each (hyper)plane along axes not listed in the axes parameter,
    # in this case axis 2 (the frequency axis)
    # display the rms for each frequency plane (your mileage will vary with
    # the values).
    stats = imstat(imagename=myim, axes=[0,1])
    stats["rms"]
    Out[10]:
    array([ 0.99576014,  1.03813124,  0.97749186,  0.97587883,  1.04189885,
    1.03784776,  1.03371549,  1.03153074,  1.00841606,  0.947155  ,
    0.97335404,  0.94389403,  1.0010221 ,  0.97151822,  1.03942156,
    1.01158476,  0.96957082,  1.04212773,  1.00589049,  0.98696715,
    1.00451481,  1.02307892,  1.03102005,  0.97334671,  0.95209879,
    1.02088714,  0.96999902,  0.98661619,  1.01039267,  0.96842754,
    0.99464947,  1.01536798,  1.02466023,  0.96956468,  0.98090756,
    0.9835844 ,  0.95698935,  1.05487967,  0.99846411,  0.99634868])


    """

    _info_group_ = """analysis, information"""
    _info_desc_ = """Displays statistical information from an image or image region"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'axes': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'region': {'anyof': [{'type': 'cPath', 'coerce': _coerce.expand_path}, {'type': 'cStr'}, {'type': 'cDict'}]}, 'box': {'type': 'cStr'}, 'chans': {'type': 'cStr'}, 'stokes': {'type': 'cStr'}, 'listit': {'type': 'cBool'}, 'verbose': {'type': 'cBool'}, 'mask': {'type': 'cStr'}, 'stretch': {'type': 'cBool'}, 'logfile': {'type': 'cStr'}, 'append': {'type': 'cBool'}, 'algorithm': {'type': 'cStr'}, 'fence': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'center': {'type': 'cStr'}, 'lside': {'type': 'cBool'}, 'zscore': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'maxiter': {'type': 'cInt'}, 'clmethod': {'type': 'cStr'}, 'niter': {'type': 'cInt'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __algorithm_dflt( self, glb ):
        return 'classic'

    def __algorithm( self, glb ):
        if 'algorithm' in glb: return glb['algorithm']
        return 'classic'

    def __verbose_dflt( self, glb ):
        return True

    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return True

    def __listit_dflt( self, glb ):
        return True

    def __listit( self, glb ):
        if 'listit' in glb: return glb['listit']
        return True

    def __logfile_dflt( self, glb ):
        return ''

    def __logfile( self, glb ):
        if 'logfile' in glb: return glb['logfile']
        return ''

    def __mask_dflt( self, glb ):
        return ''

    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        return ''

    def __axes_dflt( self, glb ):
        return [ ]

    def __axes( self, glb ):
        if 'axes' in glb: return glb['axes']
        return [ ]

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __lside_dflt( self, glb ):
        if self.__algorithm( glb ) == "fit-half": return bool(True)
        return None
    def __center_dflt( self, glb ):
        if self.__algorithm( glb ) == "fit-half": return "mean"
        return None
    def __stretch_dflt( self, glb ):
        if self.__mask( glb ) != "": return bool(False)
        return None
    def __fence_dflt( self, glb ):
        if self.__algorithm( glb ) == "hinges-fences": return float(-1)
        return None
    def __clmethod_dflt( self, glb ):
        if self.__algorithm( glb ) == "classic": return "auto"
        return None
    def __zscore_dflt( self, glb ):
        if self.__algorithm( glb ) == "chauvenet": return float(-1)
        return None
    def __maxiter_dflt( self, glb ):
        if self.__algorithm( glb ) == "chauvenet": return int(-1)
        return None
    def __niter_dflt( self, glb ):
        if self.__algorithm( glb ) == "biweight": return int(3)
        return None
    def __append_dflt( self, glb ):
        if self.__logfile( glb ) != "": return bool(True)
        return None

    #--------- return subparam values -------------------------------------------------
    def __stretch( self, glb ):
        if 'stretch' in glb: return glb['stretch']
        dflt = self.__stretch_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __append( self, glb ):
        if 'append' in glb: return glb['append']
        dflt = self.__append_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __fence( self, glb ):
        if 'fence' in glb: return glb['fence']
        dflt = self.__fence_dflt( glb )
        if dflt is not None: return dflt
        return float(-1)
    def __center( self, glb ):
        if 'center' in glb: return glb['center']
        dflt = self.__center_dflt( glb )
        if dflt is not None: return dflt
        return 'mean'
    def __lside( self, glb ):
        if 'lside' in glb: return glb['lside']
        dflt = self.__lside_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __zscore( self, glb ):
        if 'zscore' in glb: return glb['zscore']
        dflt = self.__zscore_dflt( glb )
        if dflt is not None: return dflt
        return float(-1)
    def __maxiter( self, glb ):
        if 'maxiter' in glb: return glb['maxiter']
        dflt = self.__maxiter_dflt( glb )
        if dflt is not None: return dflt
        return int(-1)
    def __clmethod( self, glb ):
        if 'clmethod' in glb: return glb['clmethod']
        dflt = self.__clmethod_dflt( glb )
        if dflt is not None: return dflt
        return 'auto'
    def __niter( self, glb ):
        if 'niter' in glb: return glb['niter']
        dflt = self.__niter_dflt( glb )
        if dflt is not None: return dflt
        return int(3)

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('imagename',pre,self.__to_string_(value),post,description))
    def __axes_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__axes( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'axes': value},{'axes': self.__schema['axes']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('axes',pre,self.__to_string_(value),post,description))
    def __region_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__region( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('region',pre,self.__to_string_(value),post,description))
    def __box_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__box( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('box',pre,self.__to_string_(value),post,description))
    def __chans_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__chans( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('chans',pre,self.__to_string_(value),post,description))
    def __stokes_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('stokes',pre,self.__to_string_(value),post,description))
    def __listit_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__listit( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'listit': value},{'listit': self.__schema['listit']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('listit',pre,self.__to_string_(value),post,description))
    def __verbose_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('verbose',pre,self.__to_string_(value),post,description))
    def __mask_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__mask( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('mask',pre,self.__to_string_(value),post,description))
    def __stretch_inp(self):
        out = self.__stdout or sys.stdout
        if self.__stretch_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__stretch( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'stretch': value},{'stretch': self.__schema['stretch']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('stretch',pre,self.__to_string_(value),post,description))
    def __logfile_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__logfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'logfile': value},{'logfile': self.__schema['logfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('logfile',pre,self.__to_string_(value),post,description))
    def __append_inp(self):
        out = self.__stdout or sys.stdout
        if self.__append_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__append( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'append': value},{'append': self.__schema['append']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('append',pre,self.__to_string_(value),post,description))
    def __algorithm_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__algorithm( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'algorithm': value},{'algorithm': self.__schema['algorithm']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('algorithm',pre,self.__to_string_(value),post,description))
    def __fence_inp(self):
        out = self.__stdout or sys.stdout
        if self.__fence_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__fence( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'fence': value},{'fence': self.__schema['fence']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('fence',pre,self.__to_string_(value),post,description))
    def __center_inp(self):
        out = self.__stdout or sys.stdout
        if self.__center_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__center( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'center': value},{'center': self.__schema['center']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('center',pre,self.__to_string_(value),post,description))
    def __lside_inp(self):
        out = self.__stdout or sys.stdout
        if self.__lside_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__lside( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'lside': value},{'lside': self.__schema['lside']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('lside',pre,self.__to_string_(value),post,description))
    def __zscore_inp(self):
        out = self.__stdout or sys.stdout
        if self.__zscore_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__zscore( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'zscore': value},{'zscore': self.__schema['zscore']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('zscore',pre,self.__to_string_(value),post,description))
    def __maxiter_inp(self):
        out = self.__stdout or sys.stdout
        if self.__maxiter_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__maxiter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'maxiter': value},{'maxiter': self.__schema['maxiter']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('maxiter',pre,self.__to_string_(value),post,description))
    def __clmethod_inp(self):
        out = self.__stdout or sys.stdout
        if self.__clmethod_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__clmethod( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'clmethod': value},{'clmethod': self.__schema['clmethod']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('clmethod',pre,self.__to_string_(value),post,description))
    def __niter_inp(self):
        out = self.__stdout or sys.stdout
        if self.__niter_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__niter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'niter': value},{'niter': self.__schema['niter']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('niter',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'mask' in glb: del glb['mask']
        if 'verbose' in glb: del glb['verbose']
        if 'lside' in glb: del glb['lside']
        if 'center' in glb: del glb['center']
        if 'stretch' in glb: del glb['stretch']
        if 'imagename' in glb: del glb['imagename']
        if 'fence' in glb: del glb['fence']
        if 'axes' in glb: del glb['axes']
        if 'listit' in glb: del glb['listit']
        if 'logfile' in glb: del glb['logfile']
        if 'clmethod' in glb: del glb['clmethod']
        if 'algorithm' in glb: del glb['algorithm']
        if 'zscore' in glb: del glb['zscore']
        if 'maxiter' in glb: del glb['maxiter']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'niter' in glb: del glb['niter']
        if 'box' in glb: del glb['box']
        if 'append' in glb: del glb['append']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__imagename_inp( )
        self.__axes_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )
        self.__listit_inp( )
        self.__verbose_inp( )
        self.__mask_inp( )
        self.__stretch_inp( )
        self.__logfile_inp( )
        self.__append_inp( )
        self.__algorithm_inp( )
        self.__fence_inp( )
        self.__center_inp( )
        self.__lside_inp( )
        self.__zscore_inp( )
        self.__maxiter_inp( )
        self.__clmethod_inp( )
        self.__niter_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("imstat.last"):
                filename = "imstat.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, imagename=None, axes=None, region=None, box=None, chans=None, stokes=None, listit=None, verbose=None, mask=None, stretch=None, logfile=None, append=None, algorithm=None, fence=None, center=None, lside=None, zscore=None, maxiter=None, clmethod=None, niter=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imstat.pre')
        _postfile = os.path.realpath('imstat.last')
        _return_result_ = None
        _arguments = [imagename,axes,region,box,chans,stokes,listit,verbose,mask,stretch,logfile,append,algorithm,fence,center,lside,zscore,maxiter,clmethod,niter]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if axes is not None: local_global['axes'] = axes
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes
            if listit is not None: local_global['listit'] = listit
            if verbose is not None: local_global['verbose'] = verbose
            if mask is not None: local_global['mask'] = mask
            if logfile is not None: local_global['logfile'] = logfile
            if algorithm is not None: local_global['algorithm'] = algorithm

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['axes'] = self.__axes( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )
            _invocation_parameters['listit'] = self.__listit( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )
            _invocation_parameters['mask'] = self.__mask( local_global )
            _invocation_parameters['logfile'] = self.__logfile( local_global )
            _invocation_parameters['algorithm'] = self.__algorithm( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['stretch'] = self.__stretch( _invocation_parameters ) if stretch is None else stretch
            _invocation_parameters['append'] = self.__append( _invocation_parameters ) if append is None else append
            _invocation_parameters['fence'] = self.__fence( _invocation_parameters ) if fence is None else fence
            _invocation_parameters['center'] = self.__center( _invocation_parameters ) if center is None else center
            _invocation_parameters['lside'] = self.__lside( _invocation_parameters ) if lside is None else lside
            _invocation_parameters['zscore'] = self.__zscore( _invocation_parameters ) if zscore is None else zscore
            _invocation_parameters['maxiter'] = self.__maxiter( _invocation_parameters ) if maxiter is None else maxiter
            _invocation_parameters['clmethod'] = self.__clmethod( _invocation_parameters ) if clmethod is None else clmethod
            _invocation_parameters['niter'] = self.__niter( _invocation_parameters ) if niter is None else niter

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['axes'] = self.__axes( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['listit'] = self.__listit( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['stretch'] = self.__stretch( self.__globals_( ) )
            _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
            _invocation_parameters['append'] = self.__append( self.__globals_( ) )
            _invocation_parameters['algorithm'] = self.__algorithm( self.__globals_( ) )
            _invocation_parameters['fence'] = self.__fence( self.__globals_( ) )
            _invocation_parameters['center'] = self.__center( self.__globals_( ) )
            _invocation_parameters['lside'] = self.__lside( self.__globals_( ) )
            _invocation_parameters['zscore'] = self.__zscore( self.__globals_( ) )
            _invocation_parameters['maxiter'] = self.__maxiter( self.__globals_( ) )
            _invocation_parameters['clmethod'] = self.__clmethod( self.__globals_( ) )
            _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imstat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _imstat_t( _invocation_parameters['imagename'],_invocation_parameters['axes'],_invocation_parameters['region'],_invocation_parameters['box'],_invocation_parameters['chans'],_invocation_parameters['stokes'],_invocation_parameters['listit'],_invocation_parameters['verbose'],_invocation_parameters['mask'],_invocation_parameters['stretch'],_invocation_parameters['logfile'],_invocation_parameters['append'],_invocation_parameters['algorithm'],_invocation_parameters['fence'],_invocation_parameters['center'],_invocation_parameters['lside'],_invocation_parameters['zscore'],_invocation_parameters['maxiter'],_invocation_parameters['clmethod'],_invocation_parameters['niter'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

imstat = _imstat( )

