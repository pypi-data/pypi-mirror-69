##################### generated by xml-casa (v2) from importfitsidi.xml #############
##################### fedf829bc2603c34a92fe21c2ceaee4a ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import importfitsidi as _importfitsidi_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _importfitsidi:
    """
    importfitsidi ---- Convert a FITS-IDI file to a CASA visibility data set

    
    Convert a FITS-IDI file to a CASA visiblity data set.
    If several files are given, they will be concatenated into one MS.

    --------- parameter descriptions ---------------------------------------------

    fitsidifile      Name(s) of input FITS-IDI file(s)
                     Default: none (must be supplied)
                     
                        Examples: 
                        fitsidifile='3C273XC1.IDI'
                        fitsidifile=['3C273XC1.IDI1','3C273XC1.IDI2']
    vis              Name of output visibility file
                     Default: none
                     
                        Example: outputvis='3C273XC1.ms'
    constobsid       If True, give constant obs ID==0 to the data from all
                     input fitsidi files (False = separate obs id for each file)
                     Default: False (new obs id for each input file)
                     Options: False|True
    scanreindexgap_s Min time gap (seconds) between integrations to start a
                     new scan
                     Default: 0. (no reindexing)
                     
                     If > 0., a new scan is started whenever the gap
                     between two integrations is > the given value
                     (seconds) or when a new field starts or when the
                     ARRAY_ID changes.
    specframe        This frame will be used to set the spectral reference
                     frame for all spectral windows in the output MS
                     Default: GEO (geocentric)
                     Options: GEO|TOPO|LSRK|BARY
                     
                     NOTE: if specframe is set to TOPO, the reference
                     location will be taken from the Observatories
                     table in the CASA data repository for the given
                     name of the observatory. You can edit that table
                     and add new rows.

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTFITSIDI IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a FITS-IDI file to a CASA visibility data set"""

    __schema = {'fitsidifile': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'vis': {'type': 'cStr'}, 'constobsid': {'type': 'cBool'}, 'scanreindexgap_s': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'specframe': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __constobsid_dflt( self, glb ):
        return False

    def __constobsid( self, glb ):
        if 'constobsid' in glb: return glb['constobsid']
        return False

    def __fitsidifile_dflt( self, glb ):
        return [  ]

    def __fitsidifile( self, glb ):
        if 'fitsidifile' in glb: return glb['fitsidifile']
        return [  ]

    def __scanreindexgap_s_dflt( self, glb ):
        return float(0.)

    def __scanreindexgap_s( self, glb ):
        if 'scanreindexgap_s' in glb: return glb['scanreindexgap_s']
        return float(0.)

    def __specframe_dflt( self, glb ):
        return 'GEO'

    def __specframe( self, glb ):
        if 'specframe' in glb: return glb['specframe']
        return 'GEO'



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __fitsidifile_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name(s) of input FITS-IDI file(s)'
        value = self.__fitsidifile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'fitsidifile': value},{'fitsidifile': self.__schema['fitsidifile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-16.16s = %s%-23.22s%s # %-.60s\n' % ('fitsidifile',pre,self.__to_string_(value),post,description))
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of output visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-16.16s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __constobsid_inp(self):
        out = self.__stdout or sys.stdout
        description = 'If True, give constant obs ID==0 to the data from all input fitsidi files (False = separate obs id for each file)'
        value = self.__constobsid( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'constobsid': value},{'constobsid': self.__schema['constobsid']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-16.16s = %s%-23.22s%s # %-.60s\n' % ('constobsid',pre,self.__to_string_(value),post,description))
    def __scanreindexgap_s_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Min time gap (seconds) between integrations to start a new scan'
        value = self.__scanreindexgap_s( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'scanreindexgap_s': value},{'scanreindexgap_s': self.__schema['scanreindexgap_s']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-16.16s = %s%-23.22s%s # %-.60s\n' % ('scanreindexgap_s',pre,self.__to_string_(value),post,description))
    def __specframe_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Spectral reference frame for all spectral windows in the output MS'
        value = self.__specframe( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'specframe': value},{'specframe': self.__schema['specframe']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-16.16s = %s%-23.22s%s # %-.60s\n' % ('specframe',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'scanreindexgap_s' in glb: del glb['scanreindexgap_s']
        if 'constobsid' in glb: del glb['constobsid']
        if 'vis' in glb: del glb['vis']
        if 'fitsidifile' in glb: del glb['fitsidifile']
        if 'specframe' in glb: del glb['specframe']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__fitsidifile_inp( )
        self.__vis_inp( )
        self.__constobsid_inp( )
        self.__scanreindexgap_s_inp( )
        self.__specframe_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("importfitsidi.last"):
                filename = "importfitsidi.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, fitsidifile=None, vis=None, constobsid=None, scanreindexgap_s=None, specframe=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('importfitsidi.pre')
        _postfile = os.path.realpath('importfitsidi.last')
        _return_result_ = None
        _arguments = [fitsidifile,vis,constobsid,scanreindexgap_s,specframe]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if fitsidifile is not None: local_global['fitsidifile'] = fitsidifile
            if vis is not None: local_global['vis'] = vis
            if constobsid is not None: local_global['constobsid'] = constobsid
            if scanreindexgap_s is not None: local_global['scanreindexgap_s'] = scanreindexgap_s
            if specframe is not None: local_global['specframe'] = specframe

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['fitsidifile'] = self.__fitsidifile( local_global )
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['constobsid'] = self.__constobsid( local_global )
            _invocation_parameters['scanreindexgap_s'] = self.__scanreindexgap_s( local_global )
            _invocation_parameters['specframe'] = self.__specframe( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['fitsidifile'] = self.__fitsidifile( self.__globals_( ) )
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['constobsid'] = self.__constobsid( self.__globals_( ) )
            _invocation_parameters['scanreindexgap_s'] = self.__scanreindexgap_s( self.__globals_( ) )
            _invocation_parameters['specframe'] = self.__specframe( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-16s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importfitsidi( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _importfitsidi_t( _invocation_parameters['fitsidifile'],_invocation_parameters['vis'],_invocation_parameters['constobsid'],_invocation_parameters['scanreindexgap_s'],_invocation_parameters['specframe'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

importfitsidi = _importfitsidi( )

