##################### generated by xml-casa (v2) from imcontsub.xml #################
##################### 49e0cb68486224f2c3f83b64e80ca5b4 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import imcontsub as _imcontsub_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imcontsub:
    """
    imcontsub ---- Estimates and subtracts continuum emission from an image cube

    
    Estimates and subtracts continuum emission from an image cube
    
    For each direction pixel (x, y) column in imagename (or a subset
    selected by region and/or box), this estimates the continuum by
    fitting a polynomial to one or more subsets of the channels.  The
    continuum estimate is saved in contfile, and subtracted from imagename
    (or its subset) to make a spectral line estimate, which is saved in
    linefile.

    --------- parameter descriptions ---------------------------------------------

    imagename Input image cube.
              Default: none
              
                 Example: imagename='ngc5921_task.im'
    linefile  Name of continuum-subtracted output spectral line cube
              Default: none
              
                 Example: outline='ngc5921_line.im'
    contfile  Name of output continuum cube
              Default: none
              
                 Example: contfile='ngc5921_cont.im'
    fitorder  Polynomial order for the continuum estimation
              Default: 0
              
                 Example: fitorder=2
    region    Region selection. 
              Default: '' (use the full image)
    box       Rectangular region to select in direction plane.
              Default: '' (use the entire direction plane)
    chans     Channels to use. 
              Default: '' (use all channels)
    stokes    Stokes planes to use.
              Default: '' (use all Stokes planes)
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMCONTSUB IN CASA DOCS:
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """analysis, imaging"""
    _info_desc_ = """Estimates and subtracts continuum emission from an image cube"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'linefile': {'type': 'cStr'}, 'contfile': {'type': 'cStr'}, 'fitorder': {'type': 'cInt'}, 'region': {'type': 'cStr'}, 'box': {'anyof': [{'type': 'cStr'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'chans': {'type': 'cStr'}, 'stokes': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __contfile_dflt( self, glb ):
        return ''

    def __contfile( self, glb ):
        if 'contfile' in glb: return glb['contfile']
        return ''

    def __fitorder_dflt( self, glb ):
        return int(0)

    def __fitorder( self, glb ):
        if 'fitorder' in glb: return glb['fitorder']
        return int(0)

    def __stokes_dflt( self, glb ):
        return ''

    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        return ''

    def __linefile_dflt( self, glb ):
        return ''

    def __linefile( self, glb ):
        if 'linefile' in glb: return glb['linefile']
        return ''

    def __region_dflt( self, glb ):
        return ''

    def __region( self, glb ):
        if 'region' in glb: return glb['region']
        return ''

    def __chans_dflt( self, glb ):
        return ''

    def __chans( self, glb ):
        if 'chans' in glb: return glb['chans']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    def __box_dflt( self, glb ):
        return ''

    def __box( self, glb ):
        if 'box' in glb: return glb['box']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of the input spectral line image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('imagename',pre,self.__to_string_(value),post,description))
    def __linefile_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Output continuum-subtracted image file name'
        value = self.__linefile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'linefile': value},{'linefile': self.__schema['linefile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('linefile',pre,self.__to_string_(value),post,description))
    def __contfile_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Output continuum image file name'
        value = self.__contfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'contfile': value},{'contfile': self.__schema['contfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('contfile',pre,self.__to_string_(value),post,description))
    def __fitorder_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Polynomial order for the continuum estimation'
        value = self.__fitorder( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'fitorder': value},{'fitorder': self.__schema['fitorder']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('fitorder',pre,self.__to_string_(value),post,description))
    def __region_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Region selection.'
        value = self.__region( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'region': value},{'region': self.__schema['region']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('region',pre,self.__to_string_(value),post,description))
    def __box_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Rectangular region to select in direction plane. Default is to use the entire direction plane.'
        value = self.__box( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'box': value},{'box': self.__schema['box']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('box',pre,self.__to_string_(value),post,description))
    def __chans_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Channels to use.'
        value = self.__chans( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'chans': value},{'chans': self.__schema['chans']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('chans',pre,self.__to_string_(value),post,description))
    def __stokes_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Stokes planes to use.'
        value = self.__stokes( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('stokes',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'imagename' in glb: del glb['imagename']
        if 'linefile' in glb: del glb['linefile']
        if 'fitorder' in glb: del glb['fitorder']
        if 'contfile' in glb: del glb['contfile']
        if 'chans' in glb: del glb['chans']
        if 'region' in glb: del glb['region']
        if 'box' in glb: del glb['box']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__imagename_inp( )
        self.__linefile_inp( )
        self.__contfile_inp( )
        self.__fitorder_inp( )
        self.__region_inp( )
        self.__box_inp( )
        self.__chans_inp( )
        self.__stokes_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("imcontsub.last"):
                filename = "imcontsub.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, imagename=None, linefile=None, contfile=None, fitorder=None, region=None, box=None, chans=None, stokes=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imcontsub.pre')
        _postfile = os.path.realpath('imcontsub.last')
        _return_result_ = None
        _arguments = [imagename,linefile,contfile,fitorder,region,box,chans,stokes]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if linefile is not None: local_global['linefile'] = linefile
            if contfile is not None: local_global['contfile'] = contfile
            if fitorder is not None: local_global['fitorder'] = fitorder
            if region is not None: local_global['region'] = region
            if box is not None: local_global['box'] = box
            if chans is not None: local_global['chans'] = chans
            if stokes is not None: local_global['stokes'] = stokes

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['linefile'] = self.__linefile( local_global )
            _invocation_parameters['contfile'] = self.__contfile( local_global )
            _invocation_parameters['fitorder'] = self.__fitorder( local_global )
            _invocation_parameters['region'] = self.__region( local_global )
            _invocation_parameters['box'] = self.__box( local_global )
            _invocation_parameters['chans'] = self.__chans( local_global )
            _invocation_parameters['stokes'] = self.__stokes( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['linefile'] = self.__linefile( self.__globals_( ) )
            _invocation_parameters['contfile'] = self.__contfile( self.__globals_( ) )
            _invocation_parameters['fitorder'] = self.__fitorder( self.__globals_( ) )
            _invocation_parameters['region'] = self.__region( self.__globals_( ) )
            _invocation_parameters['box'] = self.__box( self.__globals_( ) )
            _invocation_parameters['chans'] = self.__chans( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imcontsub( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _imcontsub_t( _invocation_parameters['imagename'],_invocation_parameters['linefile'],_invocation_parameters['contfile'],_invocation_parameters['fitorder'],_invocation_parameters['region'],_invocation_parameters['box'],_invocation_parameters['chans'],_invocation_parameters['stokes'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

imcontsub = _imcontsub( )

