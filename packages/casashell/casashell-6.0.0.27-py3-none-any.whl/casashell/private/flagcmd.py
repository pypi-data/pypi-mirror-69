##################### generated by xml-casa (v2) from flagcmd.xml ###################
##################### c4d60899c121cb54cde8a5f5faa2f5dc ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import flagcmd as _flagcmd_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _flagcmd:
    """
    flagcmd ---- Flagging task based on batches of flag-commands

    
    The flagcmd task will flag the visibility data or calibration
    table based on several batch-operations using flag commands.
    
    Flag commands follow the mode and parameter names from the
    flagdata task.
    
    The flagcmd task will flag data based on the commands input on
    inpmode:
    table = input from FLAG_CMD table in MS
    list  = input from text file or list of strings from inpfile
    xml   = input from Flag.xml in the MS given by vis
    
    Batch operations include : apply/unapply/list/plot/clear/extract
    
    IMPORTANT: If you use other ways to flag such as interactive
    flagging in plotms, the FLAG_CMD will NOT be updated!
    
    NOTE on flagging calibration tables.
    -----------------------------------
    We recommend using the flagdata task for flagging cal tabels. When
    using flagcmd to flag cal tables, only the 'apply' and 'list'
    actions are supported. Because cal tables do not have a FLAG_CMD
    sub-table, the default inpmode='table' can only be used if an MS
    is given in the 'inpfile' parameter so that flags from the MS are
    applied to the cal table. Otherwise, the flag commands must be
    given using inpmode='list', either from a file(s) or from a list
    of strings. Data selection for calibration tables is limited to
    field, scan, antenna, time, spw and observation.
    
    

    --------- parameter descriptions ---------------------------------------------

    vis        Name of input visibility file or calibration table.
               default: '' (none) 
               
                  example: vis='uid___A002_X2a5c2f_X54.ms'
    inpmode    Input mode for flag commands(table/list/xml)
               options: 'table','list','xml'
               default: 'table' (the input commands from
               FLAG_CMD table of the MS)
               
               inpmode='xml' inputs online flags from Flag.xml
               file in the MS. This mode has become largely
               obsolete with the deprecation of the importevla
               task (see the flagcmd task pages in CASA Docs for
               more information). This mode will not work for
               ALMA MS or cal tables.
               
               NOTE: You can only apply the flags from a list or
               xml; you will not be able to unapply
               them. Transfer the flag commands to the FLAG_CMD
               table if you want to unapply the flags (see
               'inpfile' description below).
    inpfile    Source of flag commands. Subparameter of
               inpmode='table/list'.
               Path to MS containing FLAG_CMD (table), or name
               of an ASCII file, list of files or a list of
               Python strings to apply to MS or cal table
               (list). 
               options: [] with flag commands or [] with
               filenames or '' with a filename. (String values
               must contain quotes around them or the parser
               will not work.)
               default: '' (read from FLAG_CMD table in the MS
               specified via 'vis')
               
               Main use is to read flags from internal FLAG_CMD,
               but one use case is to read the flag commands
               from an MS given in inpfile and apply them to
               another MS or cal table given in vis.
    tablerows  List of rows of the FLAG_CMD table to read. Subparameter
               of inpmode='table/list'.
               default: [] (read all rows)
               
                  example: [0,1,2,10]
               
               NOTE: currently only takes integer lists, not
               parseable strings with ranges.  Use the Python
               range function to generate ranges, e.g. tablerows
               = range(0,30) + range(50,55) instead of
               '0~29,50~54' for now.
    reason     Select flag commands based on REASON(s). Subparameter of
               inpmode.
               default: 'any' (all flags regardless of reason)
               
                  Examples: 
                  reason='FOCUS_ERROR'
                  reason=['FOCUS_ERROR','SUBREFLECTOR_ERROR']
               
               If inpfile is a list of files, the reasons given
               in this parameter will apply to all the files.
               
               NOTE: what is within the string is literally
               matched, e.g. reason='' matches only blank
               reasons, and reason
               ='FOCUS_ERROR,SUBREFLECTOR_ERROR' matches this
               compound reason string only
    useapplied Select commands whose rows have APPLIED column set to
               True. Subparameter of inpmode='table'.
               options: True,False
               default: False   
               
               If useapplied=True it will read in both applied
               and unapplied flags.
               
               IMPORTANT: The APPLIED column is set to True
               after a flag command is applied to the MS. In
               order to re-apply the same flag command, this
               parameter should be set to True.
    tbuff      Time buffer (sec) to pad flags. Subparameter of
               inpmode='xml'.
               default: 0.0
    ants       Allowed flag antenna names to select by. Subparameter of
               inpmode='xml'.
    action     Action to perform in MS and/or in inpfile
                 options: apply/unapply/list/plot/clear/extract
                 default: 'apply'
               
                    Examples:
                    -- action='apply': This operation will apply
                    the commands chosen by inpmode. If
                    inpmode='table' and inpfile='' then the
                    APPLIED column in FLAG_CMD will be set to
                    True.
                    -- action='unapply': unapply flags in MS. (Not
                    available for cal tables). This operation will
                    unapply the commands chosen by inpmode='table'
                    ONLY. After unapplying the commands, the task
                    will update the APPLIED column to False.
                    -- action='list': list and/or save flag
                    commands. This operation will list the
                    commands chosen by inpmode on the screen and
                    save them to the MS or to a file without
                    applying. It will save the commands to outfile
                    if the parameter savepars is set to True. If
                    outfile is None, it will save the commands to
                    the MS given in 'vis'.
                    -- action='plot': plot flags (ant
                    vs. time). (Not available for cal
                    tables). This operation will plot the flags
                    chosen by inpmode to a matplotlib gui or to a
                    file.  These will be sorted by antenna
                    vs. time.  Most useful for showing the online
                    flags.
                    -- action='clear': clear flags from FLAG_CMD
                    in the MS. (Not available for cal tables) This
                    operation will delete the selected flag rows
                    from the internal FLAG_CMD table of the MS.
                    -- action='extract': extract internal flag
                    dictionary. (Not available for cal tables)
                    This option will return the internal flagging
                    dictionary to python. There is no extant
                    description of the format of this dictionary,
                    as it is an internal device used by the
                    flagcmd task. This action is provided for the
                    convenience of advanced users.
               
                WARNING: choosing this action='clear' will
                disregard anything you set in inpmode and will
                always work on the FLAG_CMD table in vis. This can
                be used to totally delete rows from the FLAG_CMD
                table, when setting clearall=True.
    flagbackup Automatically backup the FLAG column before
               execution. Subparameter of action='apply/unapply'.
               options: True,False
               default: True
    clearall   Delete all rows from FLAG_CMD. Subparameter of
               action='clear'.
               default: False (will not clear)
    rowlist    FLAG_CMD rows to clear. Subparameter of action='clear'.
                     default: [] (all flags in table)
               
                        example: [0,1,2,10]
               
                     WARNING: this can be dangerous, and you must set
                     clearall=True  to use this!!! This will delete
                     the specified rows from the internal FLAG_CMD
                     table for vis regardless of what mode is set to
                     (useful for when you import from xml or file),
                     and decide to redo it). This action will NOT
                     unapply the commands.
               
                     NOTE: currently only takes integer lists, not
                     parseable strings with ranges.  Use the Python
                     range function to generate ranges, e.g. rowlist =
                     range(0,30) + range(50,55) instead of
                     '0~29,50~54' for now.
    plotfile   Name of output file to save plot
               default: '' (plot to matplotlib window)
               
               WARNING: will only reliably plot individual flags
               per antenna and timerange (e.g. direct from xml)
    savepars   Save the flag commands to the FLAG_CMD table of the MS or
               to an output text file.
               options: True/False     
               default: False
    outfile    Name of output file to save commands. Subparameter of
               savepars=True.
               default: ' '; it will save the commands in the
               FLAG_CMD table of the MS.
               
                  example: outfile='flags.txt' will save the
                  parameters in a text file.
    overwrite  Overwrite an existing file given in 'outfile' to save the
               flag commands. Subparameter of savepars=True.
               options: True/False
               default: True; it will remove the existing file
               given in 'outfile' and save the current flag
               commands to a new file with the same name. When
               set to False, the task will exit with an error
               message if the file exist.
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of flagcmd in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """data editing"""
    _info_desc_ = """Flagging task based on batches of flag-commands"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'inpmode': {'type': 'cStr'}, 'inpfile': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'tablerows': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'reason': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'useapplied': {'type': 'cBool'}, 'tbuff': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'ants': {'type': 'cStr'}, 'action': {'type': 'cStr'}, 'flagbackup': {'type': 'cBool'}, 'clearall': {'type': 'cBool'}, 'rowlist': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'plotfile': {'type': 'cStr'}, 'savepars': {'type': 'cBool'}, 'outfile': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __inpmode_dflt( self, glb ):
        return 'table'

    def __inpmode( self, glb ):
        if 'inpmode' in glb: return glb['inpmode']
        return 'table'

    def __savepars_dflt( self, glb ):
        return False

    def __savepars( self, glb ):
        if 'savepars' in glb: return glb['savepars']
        return False

    def __action_dflt( self, glb ):
        return 'apply'

    def __action( self, glb ):
        if 'action' in glb: return glb['action']
        return 'apply'



    #--------- return inp/go default --------------------------------------------------
    def __inpfile_dflt( self, glb ):
        if self.__inpmode( glb ) == "table": return ""
        if self.__inpmode( glb ) == "list": return ""
        return None
    def __outfile_dflt( self, glb ):
        if self.__savepars( glb ) == bool(True): return ""
        return None
    def __rowlist_dflt( self, glb ):
        if self.__action( glb ) == "clear": return []
        return None
    def __useapplied_dflt( self, glb ):
        if self.__inpmode( glb ) == "table": return bool(False)
        return None
    def __clearall_dflt( self, glb ):
        if self.__action( glb ) == "clear": return bool(False)
        return None
    def __reason_dflt( self, glb ):
        if self.__inpmode( glb ) == "table": return "any"
        if self.__inpmode( glb ) == "list": return "any"
        if self.__inpmode( glb ) == "xml": return "any"
        return None
    def __tablerows_dflt( self, glb ):
        if self.__inpmode( glb ) == "table": return []
        return None
    def __plotfile_dflt( self, glb ):
        if self.__action( glb ) == "plot": return ""
        return None
    def __ants_dflt( self, glb ):
        if self.__inpmode( glb ) == "xml": return ""
        return None
    def __overwrite_dflt( self, glb ):
        if self.__savepars( glb ) == bool(True): return bool(True)
        return None
    def __tbuff_dflt( self, glb ):
        if self.__inpmode( glb ) == "xml": return float(0.0)
        return None
    def __flagbackup_dflt( self, glb ):
        if self.__action( glb ) == "apply": return bool(True)
        if self.__action( glb ) == "unapply": return bool(True)
        return None

    #--------- return subparam values -------------------------------------------------
    def __inpfile( self, glb ):
        if 'inpfile' in glb: return glb['inpfile']
        dflt = self.__inpfile_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __tablerows( self, glb ):
        if 'tablerows' in glb: return glb['tablerows']
        dflt = self.__tablerows_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __reason( self, glb ):
        if 'reason' in glb: return glb['reason']
        dflt = self.__reason_dflt( glb )
        if dflt is not None: return dflt
        return 'any'
    def __useapplied( self, glb ):
        if 'useapplied' in glb: return glb['useapplied']
        dflt = self.__useapplied_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __tbuff( self, glb ):
        if 'tbuff' in glb: return glb['tbuff']
        dflt = self.__tbuff_dflt( glb )
        if dflt is not None: return dflt
        return float(0.0)
    def __ants( self, glb ):
        if 'ants' in glb: return glb['ants']
        dflt = self.__ants_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __flagbackup( self, glb ):
        if 'flagbackup' in glb: return glb['flagbackup']
        dflt = self.__flagbackup_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __clearall( self, glb ):
        if 'clearall' in glb: return glb['clearall']
        dflt = self.__clearall_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __rowlist( self, glb ):
        if 'rowlist' in glb: return glb['rowlist']
        dflt = self.__rowlist_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __plotfile( self, glb ):
        if 'plotfile' in glb: return glb['plotfile']
        dflt = self.__plotfile_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        dflt = self.__outfile_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        dflt = self.__overwrite_dflt( glb )
        if dflt is not None: return dflt
        return True

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of MS file or calibration table to flag'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __inpmode_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Input mode for flag commands(table/list/xml)'
        value = self.__inpmode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'inpmode': value},{'inpmode': self.__schema['inpmode']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('inpmode',pre,self.__to_string_(value),post,description))
    def __inpfile_inp(self):
        out = self.__stdout or sys.stdout
        if self.__inpfile_dflt( self.__globals_( ) ) is not None:
             description = 'Source of flag commands'
             value = self.__inpfile( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'inpfile': value},{'inpfile': self.__schema['inpfile']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('inpfile',pre,self.__to_string_(value),post,description))
    def __tablerows_inp(self):
        out = self.__stdout or sys.stdout
        if self.__tablerows_dflt( self.__globals_( ) ) is not None:
             description = 'Rows of inpfile to read'
             value = self.__tablerows( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'tablerows': value},{'tablerows': self.__schema['tablerows']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('tablerows',pre,self.__to_string_(value),post,description))
    def __reason_inp(self):
        out = self.__stdout or sys.stdout
        if self.__reason_dflt( self.__globals_( ) ) is not None:
             description = 'Select by REASON types'
             value = self.__reason( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'reason': value},{'reason': self.__schema['reason']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('reason',pre,self.__to_string_(value),post,description))
    def __useapplied_inp(self):
        out = self.__stdout or sys.stdout
        if self.__useapplied_dflt( self.__globals_( ) ) is not None:
             description = 'Select commands whose rows have APPLIED column set to True'
             value = self.__useapplied( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'useapplied': value},{'useapplied': self.__schema['useapplied']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('useapplied',pre,self.__to_string_(value),post,description))
    def __tbuff_inp(self):
        out = self.__stdout or sys.stdout
        if self.__tbuff_dflt( self.__globals_( ) ) is not None:
             description = 'Time buffer (sec) to pad flags'
             value = self.__tbuff( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'tbuff': value},{'tbuff': self.__schema['tbuff']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('tbuff',pre,self.__to_string_(value),post,description))
    def __ants_inp(self):
        out = self.__stdout or sys.stdout
        if self.__ants_dflt( self.__globals_( ) ) is not None:
             description = 'Allowed flag antenna names to select by'
             value = self.__ants( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'ants': value},{'ants': self.__schema['ants']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('ants',pre,self.__to_string_(value),post,description))
    def __action_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Action to perform in MS and/or in inpfile (apply/unapply/list/plot/clear/extract)'
        value = self.__action( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'action': value},{'action': self.__schema['action']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('action',pre,self.__to_string_(value),post,description))
    def __flagbackup_inp(self):
        out = self.__stdout or sys.stdout
        if self.__flagbackup_dflt( self.__globals_( ) ) is not None:
             description = 'Automatically backup the FLAG column before execution'
             value = self.__flagbackup( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'flagbackup': value},{'flagbackup': self.__schema['flagbackup']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('flagbackup',pre,self.__to_string_(value),post,description))
    def __clearall_inp(self):
        out = self.__stdout or sys.stdout
        if self.__clearall_dflt( self.__globals_( ) ) is not None:
             description = 'Delete all rows from FLAG_CMD'
             value = self.__clearall( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'clearall': value},{'clearall': self.__schema['clearall']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('clearall',pre,self.__to_string_(value),post,description))
    def __rowlist_inp(self):
        out = self.__stdout or sys.stdout
        if self.__rowlist_dflt( self.__globals_( ) ) is not None:
             description = 'FLAG_CMD rows to clear'
             value = self.__rowlist( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'rowlist': value},{'rowlist': self.__schema['rowlist']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('rowlist',pre,self.__to_string_(value),post,description))
    def __plotfile_inp(self):
        out = self.__stdout or sys.stdout
        if self.__plotfile_dflt( self.__globals_( ) ) is not None:
             description = 'Name of output file to save plot'
             value = self.__plotfile( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'plotfile': value},{'plotfile': self.__schema['plotfile']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('plotfile',pre,self.__to_string_(value),post,description))
    def __savepars_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Save flag commands to the MS or file'
        value = self.__savepars( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'savepars': value},{'savepars': self.__schema['savepars']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('savepars',pre,self.__to_string_(value),post,description))
    def __outfile_inp(self):
        out = self.__stdout or sys.stdout
        if self.__outfile_dflt( self.__globals_( ) ) is not None:
             description = 'Name of output file to save commands'
             value = self.__outfile( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('outfile',pre,self.__to_string_(value),post,description))
    def __overwrite_inp(self):
        out = self.__stdout or sys.stdout
        if self.__overwrite_dflt( self.__globals_( ) ) is not None:
             description = 'Overwrite an existing file to save the flag commands'
             value = self.__overwrite( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('overwrite',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'inpfile' in glb: del glb['inpfile']
        if 'outfile' in glb: del glb['outfile']
        if 'rowlist' in glb: del glb['rowlist']
        if 'inpmode' in glb: del glb['inpmode']
        if 'useapplied' in glb: del glb['useapplied']
        if 'clearall' in glb: del glb['clearall']
        if 'vis' in glb: del glb['vis']
        if 'reason' in glb: del glb['reason']
        if 'tablerows' in glb: del glb['tablerows']
        if 'plotfile' in glb: del glb['plotfile']
        if 'ants' in glb: del glb['ants']
        if 'overwrite' in glb: del glb['overwrite']
        if 'tbuff' in glb: del glb['tbuff']
        if 'flagbackup' in glb: del glb['flagbackup']
        if 'savepars' in glb: del glb['savepars']
        if 'action' in glb: del glb['action']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__inpmode_inp( )
        self.__inpfile_inp( )
        self.__tablerows_inp( )
        self.__reason_inp( )
        self.__useapplied_inp( )
        self.__tbuff_inp( )
        self.__ants_inp( )
        self.__action_inp( )
        self.__flagbackup_inp( )
        self.__clearall_inp( )
        self.__rowlist_inp( )
        self.__plotfile_inp( )
        self.__savepars_inp( )
        self.__outfile_inp( )
        self.__overwrite_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("flagcmd.last"):
                filename = "flagcmd.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, inpmode=None, inpfile=None, tablerows=None, reason=None, useapplied=None, tbuff=None, ants=None, action=None, flagbackup=None, clearall=None, rowlist=None, plotfile=None, savepars=None, outfile=None, overwrite=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('flagcmd.pre')
        _postfile = os.path.realpath('flagcmd.last')
        _return_result_ = None
        _arguments = [vis,inpmode,inpfile,tablerows,reason,useapplied,tbuff,ants,action,flagbackup,clearall,rowlist,plotfile,savepars,outfile,overwrite]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if inpmode is not None: local_global['inpmode'] = inpmode
            if action is not None: local_global['action'] = action
            if savepars is not None: local_global['savepars'] = savepars

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['inpmode'] = self.__inpmode( local_global )
            _invocation_parameters['action'] = self.__action( local_global )
            _invocation_parameters['savepars'] = self.__savepars( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['inpfile'] = self.__inpfile( _invocation_parameters ) if inpfile is None else inpfile
            _invocation_parameters['tablerows'] = self.__tablerows( _invocation_parameters ) if tablerows is None else tablerows
            _invocation_parameters['reason'] = self.__reason( _invocation_parameters ) if reason is None else reason
            _invocation_parameters['useapplied'] = self.__useapplied( _invocation_parameters ) if useapplied is None else useapplied
            _invocation_parameters['tbuff'] = self.__tbuff( _invocation_parameters ) if tbuff is None else tbuff
            _invocation_parameters['ants'] = self.__ants( _invocation_parameters ) if ants is None else ants
            _invocation_parameters['flagbackup'] = self.__flagbackup( _invocation_parameters ) if flagbackup is None else flagbackup
            _invocation_parameters['clearall'] = self.__clearall( _invocation_parameters ) if clearall is None else clearall
            _invocation_parameters['rowlist'] = self.__rowlist( _invocation_parameters ) if rowlist is None else rowlist
            _invocation_parameters['plotfile'] = self.__plotfile( _invocation_parameters ) if plotfile is None else plotfile
            _invocation_parameters['outfile'] = self.__outfile( _invocation_parameters ) if outfile is None else outfile
            _invocation_parameters['overwrite'] = self.__overwrite( _invocation_parameters ) if overwrite is None else overwrite

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['inpmode'] = self.__inpmode( self.__globals_( ) )
            _invocation_parameters['inpfile'] = self.__inpfile( self.__globals_( ) )
            _invocation_parameters['tablerows'] = self.__tablerows( self.__globals_( ) )
            _invocation_parameters['reason'] = self.__reason( self.__globals_( ) )
            _invocation_parameters['useapplied'] = self.__useapplied( self.__globals_( ) )
            _invocation_parameters['tbuff'] = self.__tbuff( self.__globals_( ) )
            _invocation_parameters['ants'] = self.__ants( self.__globals_( ) )
            _invocation_parameters['action'] = self.__action( self.__globals_( ) )
            _invocation_parameters['flagbackup'] = self.__flagbackup( self.__globals_( ) )
            _invocation_parameters['clearall'] = self.__clearall( self.__globals_( ) )
            _invocation_parameters['rowlist'] = self.__rowlist( self.__globals_( ) )
            _invocation_parameters['plotfile'] = self.__plotfile( self.__globals_( ) )
            _invocation_parameters['savepars'] = self.__savepars( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#flagcmd( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _flagcmd_t( _invocation_parameters['vis'],_invocation_parameters['inpmode'],_invocation_parameters['inpfile'],_invocation_parameters['tablerows'],_invocation_parameters['reason'],_invocation_parameters['useapplied'],_invocation_parameters['tbuff'],_invocation_parameters['ants'],_invocation_parameters['action'],_invocation_parameters['flagbackup'],_invocation_parameters['clearall'],_invocation_parameters['rowlist'],_invocation_parameters['plotfile'],_invocation_parameters['savepars'],_invocation_parameters['outfile'],_invocation_parameters['overwrite'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

flagcmd = _flagcmd( )

