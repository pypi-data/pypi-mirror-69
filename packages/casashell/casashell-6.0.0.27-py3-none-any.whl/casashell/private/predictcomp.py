##################### generated by xml-casa (v2) from predictcomp.xml ###############
##################### 36efd39ef7ab5edd83a1db1b3f7f6ab9 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import predictcomp as _predictcomp_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _predictcomp:
    """
    predictcomp ---- Make a component list for a known calibrator

    
    Writes a component list named clist to disk and returns a dict of
    {'clist': clist,
    'objname': objname,
    'standard': standard,
    'epoch': epoch,
    'freqs': pl.array of frequencies, in GHz,
    'antennalist': a simdata type configuration file,
    'amps':  pl.array of predicted visibility amplitudes, in Jy,
    'savedfig': False or, if made, the filename of a plot.}
    or False on error.
    

    --------- parameter descriptions ---------------------------------------------

    objname     Object name
    standard    Flux density standard
    epoch       Epoch
    minfreq     Minimum frequency
    maxfreq     Maximum frequency
    nfreqs      Number of frequencies
    prefix      Prefix for the component list directory name.
    antennalist Plot for this configuration
    showplot    Plot S vs |u| to the screen?
    savefig     Save a plot of S vs |u| to this filename
    symb        A matplotlib plot symbol code
    include0amp Force the amplitude axis to start at 0?
    include0bl  Force the baseline axis to start at 0?
    blunit      unit of the baseline axis
    showbl0flux Print the zero baseline flux ?
    [1;42mRETURNS[1;m        record

    --------- examples -----------------------------------------------------------

    
    
    Writes a component list to disk and returns a dict of
    {'clist': filename of the component list,
    'objname': objname,
    'angdiam': angular diameter in radians (if used in clist),
    'standard': standard,
    'epoch': epoch,
    'freqs': pl.array of frequencies, in GHz,
    'antennalist': pl.array of baseline lengths, in m,
    'amps':  pl.array of predicted visibility amplitudes, in Jy,
    'savedfig': False or, if made, the filename of a plot.}
    or False on error.
    
    objname: An object supported by standard.
    standard: A standard for calculating flux densities, as in setjy.
    Default: 'Butler-JPL-Horizons 2010'
    epoch: The epoch to use for the calculations.   Irrelevant for
    extrasolar standards. (Uses UTC)
    Examples: '2011-12-31/5:34:12', '2011-12-31-5:34:12'
    minfreq: The minimum frequency to use.
    Example: '342.0GHz'
    maxfreq: The maximum frequency to use.
    Default: minfreq
    Example: '346.0GHz'
    Example: '', anything <= 0, or None: use minfreq.
    nfreqs:  The number of frequencies to use.
    Default: 1 if minfreq == maxfreq,
    2 otherwise.
    prefix: The component list will be saved to
    prefix + 'spw0_<objname>_<minfreq><epoch>.cl'
    Default: ''
    Example: "Bands3to7_"
    (which could produce 'Bands3to7_Uranus_spw0_100GHz55877d.cl',
    depending on the other parameters)
    antennalist: 'Observe' and plot the visibility amplitudes for this
    antenna configuration.  The file should be in a format usable
    by simdata.  The search path is:
    .:casa['dirs']['data'] + '/alma/simmos/'
    Default: '' (None, just make clist.)
    Example: 'alma.cycle0.extended.cfg'
    
    Subparameters of antennalist:
    showplot: Whether or not to show a plot of S vs. |u| on screen.
    Subparameter of antennalist.
    Default: Necessarily False if antennalist is not specified.
    True otherwise.
    savefig: Filename for saving a plot of S vs. |u|.
    Subparameter of antennalist.
    Default: ''
    Examples: ''           (do not save the plot)
    'myplot.png' (save to myplot.png)
    symb: One of matplotlib's codes for plot symbols: .:,o^v<>s+xDd234hH|_
    Default: '.'
    include0amp: Force the amplitude axis to start at 0?
    Default: False
    include0bl: Force the baseline axis to start at 0?
    Default: False
    blunit: unit of the baseline axis ('' or 'klambda')
    Default:''=use a unit in the data
    showbl0flux: Print the zero baseline flux?
    Default: False
    
    


    """

    _info_group_ = """modeling, calibration"""
    _info_desc_ = """Make a component list for a known calibrator"""

    __schema = {'objname': {'type': 'cStr'}, 'standard': {'type': 'cStr'}, 'epoch': {'type': 'cStr'}, 'minfreq': {'type': 'cStr'}, 'maxfreq': {'type': 'cStr'}, 'nfreqs': {'type': 'cInt'}, 'prefix': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'antennalist': {'type': 'cStr'}, 'showplot': {'type': 'cBool'}, 'savefig': {'type': 'cStr'}, 'symb': {'type': 'cStr'}, 'include0amp': {'type': 'cBool'}, 'include0bl': {'type': 'cBool'}, 'blunit': {'type': 'cStr'}, 'showbl0flux': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __nfreqs_dflt( self, glb ):
        return int(2)

    def __nfreqs( self, glb ):
        if 'nfreqs' in glb: return glb['nfreqs']
        return int(2)

    def __objname_dflt( self, glb ):
        return ''

    def __objname( self, glb ):
        if 'objname' in glb: return glb['objname']
        return ''

    def __minfreq_dflt( self, glb ):
        return ''

    def __minfreq( self, glb ):
        if 'minfreq' in glb: return glb['minfreq']
        return ''

    def __prefix_dflt( self, glb ):
        return ''

    def __prefix( self, glb ):
        if 'prefix' in glb: return glb['prefix']
        return ''

    def __epoch_dflt( self, glb ):
        return ''

    def __epoch( self, glb ):
        if 'epoch' in glb: return glb['epoch']
        return ''

    def __standard_dflt( self, glb ):
        return 'Butler-JPL-Horizons 2010'

    def __standard( self, glb ):
        if 'standard' in glb: return glb['standard']
        return 'Butler-JPL-Horizons 2010'

    def __maxfreq_dflt( self, glb ):
        return ''

    def __maxfreq( self, glb ):
        if 'maxfreq' in glb: return glb['maxfreq']
        return ''

    def __antennalist_dflt( self, glb ):
        return ''

    def __antennalist( self, glb ):
        if 'antennalist' in glb: return glb['antennalist']
        return ''

    #--------- return non subparam/when values ---------------------------------------------
    def __showbl0flux( self, glb ):
        if 'showbl0flux' in glb: return glb['showbl0flux']
        return False
    def __showplot( self, glb ):
        if 'showplot' in glb: return glb['showplot']
        return False
    def __symb( self, glb ):
        if 'symb' in glb: return glb['symb']
        return '.'
    def __include0amp( self, glb ):
        if 'include0amp' in glb: return glb['include0amp']
        return False
    def __include0bl( self, glb ):
        if 'include0bl' in glb: return glb['include0bl']
        return False
    def __blunit( self, glb ):
        if 'blunit' in glb: return glb['blunit']
        return ''

    #--------- return inp/go default --------------------------------------------------
    def __blunit_dflt( self, glb ):
        if self.__antennalist( glb ) != "": return ""
        return None
    def __showplot_dflt( self, glb ):
        if self.__antennalist( glb ) != "": return bool(True)
        return None
    def __include0amp_dflt( self, glb ):
        if self.__antennalist( glb ) != "": return bool(False)
        return None
    def __showbl0flux_dflt( self, glb ):
        if self.__antennalist( glb ) != "": return bool(False)
        return None
    def __savefig_dflt( self, glb ):
        if self.__antennalist( glb ) != "": return ""
        return None
    def __symb_dflt( self, glb ):
        if self.__antennalist( glb ) != "": return "."
        return None
    def __include0bl_dflt( self, glb ):
        if self.__antennalist( glb ) != "": return bool(False)
        return None

    #--------- return subparam values -------------------------------------------------
    def __savefig( self, glb ):
        if 'savefig' in glb: return glb['savefig']
        dflt = self.__savefig_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __objname_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__objname( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'objname': value},{'objname': self.__schema['objname']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('objname',pre,self.__to_string_(value),post,description))
    def __standard_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__standard( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'standard': value},{'standard': self.__schema['standard']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('standard',pre,self.__to_string_(value),post,description))
    def __epoch_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__epoch( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'epoch': value},{'epoch': self.__schema['epoch']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('epoch',pre,self.__to_string_(value),post,description))
    def __minfreq_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__minfreq( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'minfreq': value},{'minfreq': self.__schema['minfreq']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('minfreq',pre,self.__to_string_(value),post,description))
    def __maxfreq_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__maxfreq( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'maxfreq': value},{'maxfreq': self.__schema['maxfreq']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('maxfreq',pre,self.__to_string_(value),post,description))
    def __nfreqs_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__nfreqs( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'nfreqs': value},{'nfreqs': self.__schema['nfreqs']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('nfreqs',pre,self.__to_string_(value),post,description))
    def __prefix_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__prefix( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'prefix': value},{'prefix': self.__schema['prefix']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('prefix',pre,self.__to_string_(value),post,description))
    def __antennalist_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__antennalist( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'antennalist': value},{'antennalist': self.__schema['antennalist']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('antennalist',pre,self.__to_string_(value),post,description))
    def __showplot_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showplot( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showplot': value},{'showplot': self.__schema['showplot']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('showplot',pre,self.__to_string_(value),post,description))
    def __savefig_inp(self):
        out = self.__stdout or sys.stdout
        if self.__savefig_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__savefig( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'savefig': value},{'savefig': self.__schema['savefig']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-8.8s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('savefig',pre,self.__to_string_(value),post,description))
    def __symb_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__symb( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'symb': value},{'symb': self.__schema['symb']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('symb',pre,self.__to_string_(value),post,description))
    def __include0amp_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__include0amp( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'include0amp': value},{'include0amp': self.__schema['include0amp']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('include0amp',pre,self.__to_string_(value),post,description))
    def __include0bl_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__include0bl( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'include0bl': value},{'include0bl': self.__schema['include0bl']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('include0bl',pre,self.__to_string_(value),post,description))
    def __blunit_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__blunit( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'blunit': value},{'blunit': self.__schema['blunit']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('blunit',pre,self.__to_string_(value),post,description))
    def __showbl0flux_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showbl0flux( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showbl0flux': value},{'showbl0flux': self.__schema['showbl0flux']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('showbl0flux',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'blunit' in glb: del glb['blunit']
        if 'epoch' in glb: del glb['epoch']
        if 'standard' in glb: del glb['standard']
        if 'prefix' in glb: del glb['prefix']
        if 'showplot' in glb: del glb['showplot']
        if 'include0amp' in glb: del glb['include0amp']
        if 'nfreqs' in glb: del glb['nfreqs']
        if 'showbl0flux' in glb: del glb['showbl0flux']
        if 'objname' in glb: del glb['objname']
        if 'savefig' in glb: del glb['savefig']
        if 'minfreq' in glb: del glb['minfreq']
        if 'symb' in glb: del glb['symb']
        if 'maxfreq' in glb: del glb['maxfreq']
        if 'include0bl' in glb: del glb['include0bl']
        if 'antennalist' in glb: del glb['antennalist']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__objname_inp( )
        self.__standard_inp( )
        self.__epoch_inp( )
        self.__minfreq_inp( )
        self.__maxfreq_inp( )
        self.__nfreqs_inp( )
        self.__prefix_inp( )
        self.__antennalist_inp( )
        self.__showplot_inp( )
        self.__savefig_inp( )
        self.__symb_inp( )
        self.__include0amp_inp( )
        self.__include0bl_inp( )
        self.__blunit_inp( )
        self.__showbl0flux_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("predictcomp.last"):
                filename = "predictcomp.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, objname=None, standard=None, epoch=None, minfreq=None, maxfreq=None, nfreqs=None, prefix=None, antennalist=None, showplot=None, savefig=None, symb=None, include0amp=None, include0bl=None, blunit=None, showbl0flux=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('predictcomp.pre')
        _postfile = os.path.realpath('predictcomp.last')
        _return_result_ = None
        _arguments = [objname,standard,epoch,minfreq,maxfreq,nfreqs,prefix,antennalist,showplot,savefig,symb,include0amp,include0bl,blunit,showbl0flux]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if objname is not None: local_global['objname'] = objname
            if standard is not None: local_global['standard'] = standard
            if epoch is not None: local_global['epoch'] = epoch
            if minfreq is not None: local_global['minfreq'] = minfreq
            if maxfreq is not None: local_global['maxfreq'] = maxfreq
            if nfreqs is not None: local_global['nfreqs'] = nfreqs
            if prefix is not None: local_global['prefix'] = prefix
            if antennalist is not None: local_global['antennalist'] = antennalist
            if showplot is not None: local_global['showplot'] = showplot
            if symb is not None: local_global['symb'] = symb
            if include0amp is not None: local_global['include0amp'] = include0amp
            if include0bl is not None: local_global['include0bl'] = include0bl
            if blunit is not None: local_global['blunit'] = blunit
            if showbl0flux is not None: local_global['showbl0flux'] = showbl0flux

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['objname'] = self.__objname( local_global )
            _invocation_parameters['standard'] = self.__standard( local_global )
            _invocation_parameters['epoch'] = self.__epoch( local_global )
            _invocation_parameters['minfreq'] = self.__minfreq( local_global )
            _invocation_parameters['maxfreq'] = self.__maxfreq( local_global )
            _invocation_parameters['nfreqs'] = self.__nfreqs( local_global )
            _invocation_parameters['prefix'] = self.__prefix( local_global )
            _invocation_parameters['antennalist'] = self.__antennalist( local_global )
            _invocation_parameters['showplot'] = self.__showplot( local_global )
            _invocation_parameters['symb'] = self.__symb( local_global )
            _invocation_parameters['include0amp'] = self.__include0amp( local_global )
            _invocation_parameters['include0bl'] = self.__include0bl( local_global )
            _invocation_parameters['blunit'] = self.__blunit( local_global )
            _invocation_parameters['showbl0flux'] = self.__showbl0flux( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['savefig'] = self.__savefig( _invocation_parameters ) if savefig is None else savefig

        else:
            # invoke with inp/go semantics
            _invocation_parameters['objname'] = self.__objname( self.__globals_( ) )
            _invocation_parameters['standard'] = self.__standard( self.__globals_( ) )
            _invocation_parameters['epoch'] = self.__epoch( self.__globals_( ) )
            _invocation_parameters['minfreq'] = self.__minfreq( self.__globals_( ) )
            _invocation_parameters['maxfreq'] = self.__maxfreq( self.__globals_( ) )
            _invocation_parameters['nfreqs'] = self.__nfreqs( self.__globals_( ) )
            _invocation_parameters['prefix'] = self.__prefix( self.__globals_( ) )
            _invocation_parameters['antennalist'] = self.__antennalist( self.__globals_( ) )
            _invocation_parameters['showplot'] = self.__showplot( self.__globals_( ) )
            _invocation_parameters['savefig'] = self.__savefig( self.__globals_( ) )
            _invocation_parameters['symb'] = self.__symb( self.__globals_( ) )
            _invocation_parameters['include0amp'] = self.__include0amp( self.__globals_( ) )
            _invocation_parameters['include0bl'] = self.__include0bl( self.__globals_( ) )
            _invocation_parameters['blunit'] = self.__blunit( self.__globals_( ) )
            _invocation_parameters['showbl0flux'] = self.__showbl0flux( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#predictcomp( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _predictcomp_t( _invocation_parameters['objname'],_invocation_parameters['standard'],_invocation_parameters['epoch'],_invocation_parameters['minfreq'],_invocation_parameters['maxfreq'],_invocation_parameters['nfreqs'],_invocation_parameters['prefix'],_invocation_parameters['antennalist'],_invocation_parameters['showplot'],_invocation_parameters['savefig'],_invocation_parameters['symb'],_invocation_parameters['include0amp'],_invocation_parameters['include0bl'],_invocation_parameters['blunit'],_invocation_parameters['showbl0flux'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

predictcomp = _predictcomp( )

