##################### generated by xml-casa (v2) from importnro.xml #################
##################### 9fcdaf90a9119a91d27be1bef9c08703 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import importnro as _importnro_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _importnro:
    """
    importnro ---- Convert NOSTAR data into a CASA visibility file (MS)

    
    Task importnro enables one to convert the data obtained with the
    NRO45m telescope into the CASA MS2 format. At this moment, only the
    OTF data (NOSTAR data) obtained with the SAM45 spectrometer is
    supported, and the OTF data obtained with the other spectrometers
    (e.g., AOS) and the PSW data (NEWSTAR data) are outside of scope
    (Jan./25/2017)

    --------- parameter descriptions ---------------------------------------------

    infile    Name of input NOSTAR data
              Default: none
    outputvis Root name of the ms to be created. Note the .ms is NOT
              added 
              Default: none
              
                 Example: outputvis='myms.ms'
    overwrite Over write an existing MS(s)
              Default: False (do not overwrite)
              Options: False|True
    parallel  Turn on parallel execution
              Default: False (serial execution)
              Options: False|True
    [1;42mRETURNS[1;m      bool

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTNRO IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """single dish, import/export"""
    _info_desc_ = """Convert NOSTAR data into a CASA visibility file (MS)"""

    __schema = {'infile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outputvis': {'type': 'cStr'}, 'overwrite': {'type': 'cBool'}, 'parallel': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __infile_dflt( self, glb ):
        return ''

    def __infile( self, glb ):
        if 'infile' in glb: return glb['infile']
        return ''

    def __outputvis_dflt( self, glb ):
        return ''

    def __outputvis( self, glb ):
        if 'outputvis' in glb: return glb['outputvis']
        return ''

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False

    def __parallel_dflt( self, glb ):
        return False

    def __parallel( self, glb ):
        if 'parallel' in glb: return glb['parallel']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __infile_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input NOSTAR data'
        value = self.__infile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'infile': value},{'infile': self.__schema['infile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('infile',pre,self.__to_string_(value),post,description))
    def __outputvis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Root name of the ms to be created. Note the .ms is NOT added '
        value = self.__outputvis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'outputvis': value},{'outputvis': self.__schema['outputvis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('outputvis',pre,self.__to_string_(value),post,description))
    def __overwrite_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Over write an existing MS(s)'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('overwrite',pre,self.__to_string_(value),post,description))
    def __parallel_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Turn on parallel execution'
        value = self.__parallel( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'parallel': value},{'parallel': self.__schema['parallel']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('parallel',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'infile' in glb: del glb['infile']
        if 'outputvis' in glb: del glb['outputvis']
        if 'overwrite' in glb: del glb['overwrite']
        if 'parallel' in glb: del glb['parallel']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__infile_inp( )
        self.__outputvis_inp( )
        self.__overwrite_inp( )
        self.__parallel_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("importnro.last"):
                filename = "importnro.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, infile=None, outputvis=None, overwrite=None, parallel=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('importnro.pre')
        _postfile = os.path.realpath('importnro.last')
        _return_result_ = None
        _arguments = [infile,outputvis,overwrite,parallel]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if infile is not None: local_global['infile'] = infile
            if outputvis is not None: local_global['outputvis'] = outputvis
            if overwrite is not None: local_global['overwrite'] = overwrite
            if parallel is not None: local_global['parallel'] = parallel

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['infile'] = self.__infile( local_global )
            _invocation_parameters['outputvis'] = self.__outputvis( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['parallel'] = self.__parallel( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['infile'] = self.__infile( self.__globals_( ) )
            _invocation_parameters['outputvis'] = self.__outputvis( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['parallel'] = self.__parallel( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importnro( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _importnro_t( _invocation_parameters['infile'],_invocation_parameters['outputvis'],_invocation_parameters['overwrite'],_invocation_parameters['parallel'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

importnro = _importnro( )

