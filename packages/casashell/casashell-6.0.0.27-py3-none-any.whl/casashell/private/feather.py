##################### generated by xml-casa (v2) from feather.xml ###################
##################### 4522695859f175b9c2dc5bdc50749847 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import feather as _feather_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _feather:
    """
    feather ---- Combine two images using their Fourier transforms

    
    This task can be used as one method of combining single-dish and
    interferometric images after they have been separately made.
    
    The algorithm converts each image to the gridded visibility plane,
    combines them, and reconverts them into an combined image.  Each image
    must include a well-defined beam shape (clean beam) in order for
    feathering to work well.  The two images must have the same flux
    density normalization scale.

    --------- parameter descriptions ---------------------------------------------

    imagename       Name of output feathered image
                    Default: none
                    
                       Example: imagename='orion_combined.im'
    highres         Name of high resolution (interferometer) image
                    Default: none
                    
                       Example: imagename='orion_vla.im'
    lowres          Name of low resolution (single dish) image
                    Default: none
                    
                       Example: imagename='orion_gbt.im'
    sdfactor        Value by which to scale the Single Dish image.
                    Default: 1.0
                    
                    Basically modifying the flux scale of the SD image
    effdishdiam     New effective SingleDish diameter to use in m 
                    Default: -1.0 (leave as is)
                    
                    Obviously one can only reduce the dish
                    effective dish diameter in feathering.
    lowpassfiltersd Filter out the high spatial frequencies of the SD image
                    Default: False
                    
                    If True the high spatial frequency in the SD
                    image is rejected.
                    
                    Any data outside the maximum uv distance
                    that the SD has illuminated  is filtered
                    out.

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of feather in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """imaging"""
    _info_desc_ = """Combine two images using their Fourier transforms"""

    __schema = {'imagename': {'type': 'cStr'}, 'highres': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'lowres': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'sdfactor': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'effdishdiam': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'lowpassfiltersd': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __lowres_dflt( self, glb ):
        return ''

    def __lowres( self, glb ):
        if 'lowres' in glb: return glb['lowres']
        return ''

    def __highres_dflt( self, glb ):
        return ''

    def __highres( self, glb ):
        if 'highres' in glb: return glb['highres']
        return ''

    def __sdfactor_dflt( self, glb ):
        return float(1.0)

    def __sdfactor( self, glb ):
        if 'sdfactor' in glb: return glb['sdfactor']
        return float(1.0)

    def __effdishdiam_dflt( self, glb ):
        return float(-1.0)

    def __effdishdiam( self, glb ):
        if 'effdishdiam' in glb: return glb['effdishdiam']
        return float(-1.0)

    def __lowpassfiltersd_dflt( self, glb ):
        return False

    def __lowpassfiltersd( self, glb ):
        if 'lowpassfiltersd' in glb: return glb['lowpassfiltersd']
        return False

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of output feathered image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('imagename',pre,self.__to_string_(value),post,description))
    def __highres_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of high resolution (interferometer) image'
        value = self.__highres( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'highres': value},{'highres': self.__schema['highres']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('highres',pre,self.__to_string_(value),post,description))
    def __lowres_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of low resolution (single dish) image'
        value = self.__lowres( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'lowres': value},{'lowres': self.__schema['lowres']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('lowres',pre,self.__to_string_(value),post,description))
    def __sdfactor_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Scale factor to apply to Single Dish image'
        value = self.__sdfactor( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'sdfactor': value},{'sdfactor': self.__schema['sdfactor']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('sdfactor',pre,self.__to_string_(value),post,description))
    def __effdishdiam_inp(self):
        out = self.__stdout or sys.stdout
        description = 'New effective SingleDish diameter to use in m'
        value = self.__effdishdiam( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'effdishdiam': value},{'effdishdiam': self.__schema['effdishdiam']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('effdishdiam',pre,self.__to_string_(value),post,description))
    def __lowpassfiltersd_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Filter out the high spatial frequencies of the SD image'
        value = self.__lowpassfiltersd( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'lowpassfiltersd': value},{'lowpassfiltersd': self.__schema['lowpassfiltersd']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('lowpassfiltersd',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'sdfactor' in glb: del glb['sdfactor']
        if 'highres' in glb: del glb['highres']
        if 'lowres' in glb: del glb['lowres']
        if 'imagename' in glb: del glb['imagename']
        if 'effdishdiam' in glb: del glb['effdishdiam']
        if 'lowpassfiltersd' in glb: del glb['lowpassfiltersd']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__imagename_inp( )
        self.__highres_inp( )
        self.__lowres_inp( )
        self.__sdfactor_inp( )
        self.__effdishdiam_inp( )
        self.__lowpassfiltersd_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("feather.last"):
                filename = "feather.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, imagename=None, highres=None, lowres=None, sdfactor=None, effdishdiam=None, lowpassfiltersd=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('feather.pre')
        _postfile = os.path.realpath('feather.last')
        _return_result_ = None
        _arguments = [imagename,highres,lowres,sdfactor,effdishdiam,lowpassfiltersd]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if highres is not None: local_global['highres'] = highres
            if lowres is not None: local_global['lowres'] = lowres
            if sdfactor is not None: local_global['sdfactor'] = sdfactor
            if effdishdiam is not None: local_global['effdishdiam'] = effdishdiam
            if lowpassfiltersd is not None: local_global['lowpassfiltersd'] = lowpassfiltersd

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['highres'] = self.__highres( local_global )
            _invocation_parameters['lowres'] = self.__lowres( local_global )
            _invocation_parameters['sdfactor'] = self.__sdfactor( local_global )
            _invocation_parameters['effdishdiam'] = self.__effdishdiam( local_global )
            _invocation_parameters['lowpassfiltersd'] = self.__lowpassfiltersd( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['highres'] = self.__highres( self.__globals_( ) )
            _invocation_parameters['lowres'] = self.__lowres( self.__globals_( ) )
            _invocation_parameters['sdfactor'] = self.__sdfactor( self.__globals_( ) )
            _invocation_parameters['effdishdiam'] = self.__effdishdiam( self.__globals_( ) )
            _invocation_parameters['lowpassfiltersd'] = self.__lowpassfiltersd( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-15s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#feather( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _feather_t( _invocation_parameters['imagename'],_invocation_parameters['highres'],_invocation_parameters['lowres'],_invocation_parameters['sdfactor'],_invocation_parameters['effdishdiam'],_invocation_parameters['lowpassfiltersd'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

feather = _feather( )

