##################### generated by xml-casa (v2) from polfromgain.xml ###############
##################### 1b7532ae9b5d62bb612219ee613c3122 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import polfromgain as _polfromgain_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _polfromgain:
    """
    polfromgain ---- Derive linear polarization from gain ratio

    
    TBD
    

    --------- parameter descriptions ---------------------------------------------

    vis      Name of input visibility file (MS)
    tablein  Input calibration table
    caltable Output calibration table (forces polarization correction if specified)
    paoffset Manual position angle offset
    [1;42mRETURNS[1;m     void

    --------- examples -----------------------------------------------------------

    
    
    
    TBD...
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none;
    tablein -- Input calibration table (G or T)
    default: none;
    caltable -- Output calibration table
    default: ''  (no new table)
    if specified, new caltable with polarization removed is generated
    paoffset -- Manual position angle offset
    default: 0.0  (no extra offset)
    example: paoffset=10.0  (10 degree offset)
    
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Derive linear polarization from gain ratio"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr'}, 'paoffset': {'type': 'cFloat', 'coerce': _coerce.to_float}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __tablein_dflt( self, glb ):
        return ''

    def __tablein( self, glb ):
        if 'tablein' in glb: return glb['tablein']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __paoffset_dflt( self, glb ):
        return float(0.0)

    def __paoffset( self, glb ):
        if 'paoffset' in glb: return glb['paoffset']
        return float(0.0)



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __tablein_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__tablein( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'tablein': value},{'tablein': self.__schema['tablein']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('tablein',pre,self.__to_string_(value),post,description))
    def __caltable_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('caltable',pre,self.__to_string_(value),post,description))
    def __paoffset_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__paoffset( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'paoffset': value},{'paoffset': self.__schema['paoffset']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('paoffset',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'tablein' in glb: del glb['tablein']
        if 'caltable' in glb: del glb['caltable']
        if 'paoffset' in glb: del glb['paoffset']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__tablein_inp( )
        self.__caltable_inp( )
        self.__paoffset_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("polfromgain.last"):
                filename = "polfromgain.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, tablein=None, caltable=None, paoffset=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('polfromgain.pre')
        _postfile = os.path.realpath('polfromgain.last')
        _return_result_ = None
        _arguments = [vis,tablein,caltable,paoffset]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if tablein is not None: local_global['tablein'] = tablein
            if caltable is not None: local_global['caltable'] = caltable
            if paoffset is not None: local_global['paoffset'] = paoffset

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['tablein'] = self.__tablein( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['paoffset'] = self.__paoffset( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['tablein'] = self.__tablein( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['paoffset'] = self.__paoffset( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-8s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#polfromgain( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _polfromgain_t( _invocation_parameters['vis'],_invocation_parameters['tablein'],_invocation_parameters['caltable'],_invocation_parameters['paoffset'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

polfromgain = _polfromgain( )

