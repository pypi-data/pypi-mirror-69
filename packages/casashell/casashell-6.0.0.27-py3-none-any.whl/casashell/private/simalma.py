##################### generated by xml-casa (v2) from simalma.xml ###################
##################### c39b3599881c413f4d93c729a07bd3e8 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import simalma as _simalma_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _simalma:
    """
    simalma ---- Simulation task for ALMA

    
    This task simulates ALMA observation including 12-m, ACA 7-m and total
    power arrays, and images and analyzes simulated data.
    
    This task makes multiple calls to simobserve (to calculate
    visibilities and total power spectra), followed by gridding of total
    power spectra (if total power is requested), concatenation of the
    simulated visibilities, calls to the simanalyze task for visibility
    inversion and deconvolution and calculation of difference and fidelity
    images, and feathering of single dish and interferometric data.
    
    These steps may not all be familiar to new users, so the simalma task
    runs by default in a "dryrun" mode, in which it assesses the user's
    input parameters and sky model, and prints an informational report
    including the required calls to other CASA tasks, both to the screen
    and to a text file in the project directory (defined below).
    
    The user can modify their parameters based on the information, then
    either run with dryrun=False to actually call the other tasks to
    create the simulated data, or run the other tasks individually one at
    a time to better understand and control the process.
    
    NOTE The ALMA project is refining the optimal method of combining the
    three types of data.  If that best practice is changed after this
    release of CASA, the user can control the process by modifying the
    calls to the other CASA tasks.

    --------- parameter descriptions ---------------------------------------------

    project      root prefix for output file names
    dryrun       dryrun=True will only produce the informative report, not run simobserve/analyze
    skymodel     model image to observe
    inbright     scale surface brightness of brightest pixel e.g. "1.2Jy/pixel"
    indirection  set new direction e.g. "J2000 19h00m00 -40d00m00"
    incell       set new cell/pixel size e.g. "0.1arcsec"
    incenter     set new frequency of center channel e.g. "89GHz" (required even for 2D model)
    inwidth      set new channel width e.g. "10MHz" (required even for 2D model)
    complist     componentlist to observe
    compwidth    bandwidth of components
    setpointings 
    ptgfile      list of pointing positions
    integration  integration (sampling) time
    direction    "J2000 19h00m00 -40d00m00" or "" to center on model
    mapsize      angular size of map or "" to cover model
    antennalist  antenna position files of ALMA 12m and 7m arrays
    hourangle    hour angle of observation center e.g. -3:00:00, or "transit"
    totaltime    total time of observation; vector corresponding to antennalist
    tpnant       Number of total power antennas to use (0-4)
    tptime       total observation time for total power
    pwv          Precipitable Water Vapor in mm. 0 for noise-free simulation
    image        image simulated data
    imsize       output image size in pixels (x,y) or 0 to match model
    imdirection  set output image direction, (otherwise center on the model)
    cell         cell size with units or "" to equal model
    niter        maximum number of iterations (0 for dirty image)
    threshold    flux level (+units) to stop cleaning
    graphics     display graphics at each stage to [screen|file|both|none]
    verbose      
    overwrite    overwrite files starting with $project
    [1;42mRETURNS[1;m         bool

    --------- examples -----------------------------------------------------------

    
    -------------------------------
    Parameters:
    
    project -- root filename for all output files.  A subdirectory will be
    created, and all created files will be placed in that subdirectory
    including the informational report.
    
    -------------------------------
    skymodel -- input image (used as a model of the sky)
    * simalma requires a CASA or fits image. If you merely have a grid of
    numbers, you will need to write them out as fits or write a
    CASA script to read them in and use the ia tool to create an image
    and insert the data.
    
    * simalma does NOT require a coordinate system in the header. If the
    coordinate information is incomplete, missing, or you would like to
    override it, set the appropriate "in" parameters. NOTE that setting
    those parameters simply changes the header values, ignoring
    any values already in the image. No regridding is performed.
    
    * If you have a proper Coordinate System, simalma will do its best to
    generate visibilities from that, and then create a synthesis image
    according to the specified user parameters.
    
    * You can manipulate an image header manually with the "imhead" task.
    
    inbright -- peak brightness to scale the image to in Jy/pixel,
    or "" for unchanged
    * NOTE: "unchanged" will take the numerical values in your image
    and assume they are in Jy/pixel, even if it says some other unit
    in the header.
    
    indirection -- central direction to place the sky model image,
    or "" to use whatever is in the image already
    
    incell -- spatial pixel size to scale the skymodel image,
    or "" to use whatever is in the image already.
    
    incenter -- frequency to use for the center channel (or only channel,
    if the skymodel is 2D)  e.g. "89GHz",
    or "" to use what is in the header.
    
    inwidth -- width of channels to use, or "" to use what is in the image
    should be a string representing a quantity with units e.g. "10MHz"
    * NOTE: only works reliably with frequencies, not velocities
    * NOTE: it is not possible to change the number of spectral planes
    of the sky model, only to relabel them with different frequencies
    That kind of regridding can be accomplished with the CASA toolkit.
    
    -------------------------------
    complist -- component list model of the sky, added to or instead of skymodel
    see http://casaguides.nrao.edu/index.php?title=Simulation_Guide_Component_Lists_%28CASA_4.1%29
    
    compwidth -- bandwidth of components; if simulating from components only,
    this defines the bandwidth of the MS and output images
    
    -------------------------------
    setpointings -- if true, calculate a map of pointings and write ptgfile.
    * if graphics are on, display the pointings shown on the model image
    * observations with the ALMA 12m and ACA 7m arrays will observe a
    region of size "mapsize" using the same hexagonal algorithm as
    the ALMA OT, with Nyquist sampling.
    * The total power array maps a slightly (+1 primary beam) larger area
    than the 12m array does, to improve later image combination.
    It samples the region with lattice grids of spacing 0.33 lambda/D.
    * if setpointings=false, read pointings from ptgfile.
    
    ptgfile -- a text file specifying directions in the same
    format as the example, and optional integration times, e.g.
    #Epoch     RA          DEC      TIME(optional)
    J2000 23h59m28.10 -019d52m12.35 10.0
    * if the time column is not present in the file, it will use
    "integration" for all pointings.
    * NOTE: at this time the file should contain only science pointings:
    simalma will observe these until totaltime is used up.
    
    integration --- Time interval for each integration e.g '10s'
    * NOTE: to simulate a "scan" longer than one integration, use
    setpointings to generate a pointing file, and then edit the
    file to increase the time at each point to be larger than
    the parameter integration time.
    
    direction -- mosaic center direction e.g 'J2000 19h00m00 -40d00m00'
    if unset, will use the center of the skymodel image.
    * can optionally be a list of pointings, otherwise
    * simobserve will cover a region of size mapsize according to maptype
    
    mapsize -- angular size of mosaic map to simulate.
    * set to "" to cover the model image
    
    -------------------------------
    antennalist -- vector of ascii files containing antenna positions,
    one for each configuration of 7m or 12m dishes.
    * NOTE: In this task, it should be an ALMA configuration.
    * standard arrays are found in your CASA data repository,
    os.getenv("CASAPATH").split()[0]+"/data/alma/simmos/"
    * a string of the form "alma;0.5arcsec" will be parsed into a
    12m ALMA configuration - see casaguides.nrao.edu
    * examples: ['alma.cycle2.5.cfg','aca.cycle2.i.cfg']
    ['alma.cycle1;0.3arcsec','alma.cycle1.1.cfg','aca.i.cfg']
    
    hourangle -- hour angle of observation e.g. '-3h'
    
    totaltime --- total time of observations. This should either be a scalar
    time quantity expressed as a string e.g. '1h', '3600sec', '10min',
    or a vector of such quantities, corresponding to the elements of
    the antennalist vector, e.g. ['5min','20min','3h'].  If you
    specify a scalar, that will be used for the highest resolution
    12m configuration in antennalist, and any lower resolution 12m
    configurations, any 7m configurations, and any TP configurations
    will have observing times relative to totaltime of 0.5, 2,and 4,
    respectively.
    -------------------------------
    
    tpnant -- the number of total power antennas to use in simulation.
    
    tptime -- if tpnant>0, the user must specify the observing time for
    total power as a CASA quantity e.g. '4h'.
    * NOTE: this is not broken up among multiple days -
    a 20h track will include observations below the horizon,
    which is probably not what is desired.
    
    -------------------------------
    pwv -- precipitable water vapor if constructing an atmospheric model.
    Set 0 for noise-free simulation. When pwv>0, thermal noise is
    applied to the simulated data.
    * J. Pardo's ATM library will be used to construct anatmospheric
    profile for the ALMA site:
    altitude 5000m, ground pressure 650mbar, relhum=20%,
    a water layer of pwv at altitude of 2km,
    the sky brightness temperature returned by ATM, and internally
    tabulated receiver temperatures.
    See the documentation of simobserve for more details.
    
    -------------------------------
    image -- option to invert and deconvolve the simulated measurement set(s)
    * NOTE: interactive clean or more parameters than the subset visible
    here are available by simply running the clean task directly.
    * if graphics turned on, display the clean image and residual image
    * uses Cotton-Schwab clean for single fields and Mosaic gridding
    for multiple fields (with Clark PSF calculation in minor cycles).
    
    imsize -- image size in spatial pixels (x,y)
    0 or -1 will use the model image size; example: imsize=[500,500]
    
    imdirection -- phase center for synthesized image.  default is to
    center on the sky model.
    
    cell -- cell size e.g '10arcsec'.  "" defaults to the skymodel cell
    
    niter -- number of clean/deconvolution iterations, 0 for no cleaning
    
    threshold -- flux level to stop cleaning
    -------------------------------
    graphics -- view plots on the screen, saved to file, both, or neither
    verbose -- print extra information to the logger and terminal
    overwrite -- overwrite existing files in the project subdirectory
    -------------------------------
    
    Please see the documents of simobserve and simanalyze for
    the list of outputs produced.
    


    """

    _info_group_ = """simulation"""
    _info_desc_ = """Simulation task for ALMA """

    __schema = {'project': {'type': 'cStr'}, 'dryrun': {'type': 'cBool'}, 'skymodel': {'type': 'cStr'}, 'inbright': {'type': 'cStr'}, 'indirection': {'type': 'cStr'}, 'incell': {'type': 'cStr'}, 'incenter': {'type': 'cStr'}, 'inwidth': {'type': 'cStr'}, 'complist': {'type': 'cStr'}, 'compwidth': {'type': 'cStr'}, 'setpointings': {'type': 'cBool'}, 'ptgfile': {'type': 'cStr'}, 'integration': {'type': 'cStr'}, 'direction': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'mapsize': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'antennalist': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'hourangle': {'type': 'cStr'}, 'totaltime': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'tpnant': {'type': 'cInt'}, 'tptime': {'type': 'cStr'}, 'pwv': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'image': {'type': 'cBool'}, 'imsize': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'imdirection': {'type': 'cStr'}, 'cell': {'type': 'cStr'}, 'niter': {'type': 'cInt'}, 'threshold': {'type': 'cStr'}, 'graphics': {'type': 'cStr'}, 'verbose': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __skymodel_dflt( self, glb ):
        return ''

    def __skymodel( self, glb ):
        if 'skymodel' in glb: return glb['skymodel']
        return ''

    def __setpointings_dflt( self, glb ):
        return True

    def __setpointings( self, glb ):
        if 'setpointings' in glb: return glb['setpointings']
        return True

    def __tpnant_dflt( self, glb ):
        return int(0)

    def __tpnant( self, glb ):
        if 'tpnant' in glb: return glb['tpnant']
        return int(0)

    def __totaltime_dflt( self, glb ):
        return [ '20min','1h' ]

    def __totaltime( self, glb ):
        if 'totaltime' in glb: return glb['totaltime']
        return [ '20min','1h' ]

    def __hourangle_dflt( self, glb ):
        return 'transit'

    def __hourangle( self, glb ):
        if 'hourangle' in glb: return glb['hourangle']
        return 'transit'

    def __pwv_dflt( self, glb ):
        return float(0.5)

    def __pwv( self, glb ):
        if 'pwv' in glb: return glb['pwv']
        return float(0.5)

    def __dryrun_dflt( self, glb ):
        return True

    def __dryrun( self, glb ):
        if 'dryrun' in glb: return glb['dryrun']
        return True

    def __project_dflt( self, glb ):
        return 'sim'

    def __project( self, glb ):
        if 'project' in glb: return glb['project']
        return 'sim'

    def __image_dflt( self, glb ):
        return True

    def __image( self, glb ):
        if 'image' in glb: return glb['image']
        return True

    def __antennalist_dflt( self, glb ):
        return [ 'alma.cycle1.1.cfg','aca.cycle1.cfg' ]

    def __antennalist( self, glb ):
        if 'antennalist' in glb: return glb['antennalist']
        return [ 'alma.cycle1.1.cfg','aca.cycle1.cfg' ]

    def __graphics_dflt( self, glb ):
        return 'both'

    def __graphics( self, glb ):
        if 'graphics' in glb: return glb['graphics']
        return 'both'

    def __complist_dflt( self, glb ):
        return ''

    def __complist( self, glb ):
        if 'complist' in glb: return glb['complist']
        return ''

    def __verbose_dflt( self, glb ):
        return False

    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return False

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __ptgfile_dflt( self, glb ):
        if self.__setpointings( glb ) == bool(False): return "$project.ptg.txt"
        return None
    def __incenter_dflt( self, glb ):
        if self.__skymodel( glb ) != "": return ""
        return None
    def __integration_dflt( self, glb ):
        if self.__setpointings( glb ) == bool(True): return "10s"
        if self.__setpointings( glb ) == bool(False): return "10s"
        return None
    def __imdirection_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __direction_dflt( self, glb ):
        if self.__setpointings( glb ) == bool(True): return []
        return None
    def __tptime_dflt( self, glb ):
        if self.__tpnant( glb ) != int(0): return "0s"
        return None
    def __imsize_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return []
        return None
    def __compwidth_dflt( self, glb ):
        if self.__complist( glb ) != "": return "8GHz"
        return None
    def __incell_dflt( self, glb ):
        if self.__skymodel( glb ) != "": return ""
        return None
    def __indirection_dflt( self, glb ):
        if self.__skymodel( glb ) != "": return ""
        return None
    def __mapsize_dflt( self, glb ):
        if self.__setpointings( glb ) == bool(True): return ["''","''"]
        return None
    def __inbright_dflt( self, glb ):
        if self.__skymodel( glb ) != "": return ""
        return None
    def __inwidth_dflt( self, glb ):
        if self.__skymodel( glb ) != "": return ""
        return None
    def __threshold_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "0.1mJy"
        return None
    def __niter_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return int(0)
        return None
    def __cell_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __inbright( self, glb ):
        if 'inbright' in glb: return glb['inbright']
        dflt = self.__inbright_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __indirection( self, glb ):
        if 'indirection' in glb: return glb['indirection']
        dflt = self.__indirection_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __incell( self, glb ):
        if 'incell' in glb: return glb['incell']
        dflt = self.__incell_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __incenter( self, glb ):
        if 'incenter' in glb: return glb['incenter']
        dflt = self.__incenter_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __inwidth( self, glb ):
        if 'inwidth' in glb: return glb['inwidth']
        dflt = self.__inwidth_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __compwidth( self, glb ):
        if 'compwidth' in glb: return glb['compwidth']
        dflt = self.__compwidth_dflt( glb )
        if dflt is not None: return dflt
        return '"8GHz"'
    def __ptgfile( self, glb ):
        if 'ptgfile' in glb: return glb['ptgfile']
        dflt = self.__ptgfile_dflt( glb )
        if dflt is not None: return dflt
        return '$project.ptg.txt'
    def __integration( self, glb ):
        if 'integration' in glb: return glb['integration']
        dflt = self.__integration_dflt( glb )
        if dflt is not None: return dflt
        return '10s'
    def __direction( self, glb ):
        if 'direction' in glb: return glb['direction']
        dflt = self.__direction_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __mapsize( self, glb ):
        if 'mapsize' in glb: return glb['mapsize']
        dflt = self.__mapsize_dflt( glb )
        if dflt is not None: return dflt
        return [ '','' ]
    def __tptime( self, glb ):
        if 'tptime' in glb: return glb['tptime']
        dflt = self.__tptime_dflt( glb )
        if dflt is not None: return dflt
        return '0s'
    def __imsize( self, glb ):
        if 'imsize' in glb: return glb['imsize']
        dflt = self.__imsize_dflt( glb )
        if dflt is not None: return dflt
        return [ int(128),int(128) ]
    def __imdirection( self, glb ):
        if 'imdirection' in glb: return glb['imdirection']
        dflt = self.__imdirection_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __cell( self, glb ):
        if 'cell' in glb: return glb['cell']
        dflt = self.__cell_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __niter( self, glb ):
        if 'niter' in glb: return glb['niter']
        dflt = self.__niter_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __threshold( self, glb ):
        if 'threshold' in glb: return glb['threshold']
        dflt = self.__threshold_dflt( glb )
        if dflt is not None: return dflt
        return '0.1mJy'

    #--------- subparam inp output ----------------------------------------------------
    def __project_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__project( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'project': value},{'project': self.__schema['project']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('project',pre,self.__to_string_(value),post,description))
    def __dryrun_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__dryrun( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'dryrun': value},{'dryrun': self.__schema['dryrun']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('dryrun',pre,self.__to_string_(value),post,description))
    def __skymodel_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__skymodel( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'skymodel': value},{'skymodel': self.__schema['skymodel']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('skymodel',pre,self.__to_string_(value),post,description))
    def __inbright_inp(self):
        out = self.__stdout or sys.stdout
        if self.__inbright_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__inbright( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'inbright': value},{'inbright': self.__schema['inbright']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('inbright',pre,self.__to_string_(value),post,description))
    def __indirection_inp(self):
        out = self.__stdout or sys.stdout
        if self.__indirection_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__indirection( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'indirection': value},{'indirection': self.__schema['indirection']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('indirection',pre,self.__to_string_(value),post,description))
    def __incell_inp(self):
        out = self.__stdout or sys.stdout
        if self.__incell_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__incell( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'incell': value},{'incell': self.__schema['incell']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('incell',pre,self.__to_string_(value),post,description))
    def __incenter_inp(self):
        out = self.__stdout or sys.stdout
        if self.__incenter_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__incenter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'incenter': value},{'incenter': self.__schema['incenter']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('incenter',pre,self.__to_string_(value),post,description))
    def __inwidth_inp(self):
        out = self.__stdout or sys.stdout
        if self.__inwidth_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__inwidth( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'inwidth': value},{'inwidth': self.__schema['inwidth']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('inwidth',pre,self.__to_string_(value),post,description))
    def __complist_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__complist( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'complist': value},{'complist': self.__schema['complist']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('complist',pre,self.__to_string_(value),post,description))
    def __compwidth_inp(self):
        out = self.__stdout or sys.stdout
        if self.__compwidth_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__compwidth( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'compwidth': value},{'compwidth': self.__schema['compwidth']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('compwidth',pre,self.__to_string_(value),post,description))
    def __setpointings_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__setpointings( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'setpointings': value},{'setpointings': self.__schema['setpointings']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('setpointings',pre,self.__to_string_(value),post,description))
    def __ptgfile_inp(self):
        out = self.__stdout or sys.stdout
        if self.__ptgfile_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__ptgfile( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'ptgfile': value},{'ptgfile': self.__schema['ptgfile']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('ptgfile',pre,self.__to_string_(value),post,description))
    def __integration_inp(self):
        out = self.__stdout or sys.stdout
        if self.__integration_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__integration( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'integration': value},{'integration': self.__schema['integration']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('integration',pre,self.__to_string_(value),post,description))
    def __direction_inp(self):
        out = self.__stdout or sys.stdout
        if self.__direction_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__direction( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'direction': value},{'direction': self.__schema['direction']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('direction',pre,self.__to_string_(value),post,description))
    def __mapsize_inp(self):
        out = self.__stdout or sys.stdout
        if self.__mapsize_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__mapsize( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'mapsize': value},{'mapsize': self.__schema['mapsize']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('mapsize',pre,self.__to_string_(value),post,description))
    def __antennalist_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__antennalist( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'antennalist': value},{'antennalist': self.__schema['antennalist']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('antennalist',pre,self.__to_string_(value),post,description))
    def __hourangle_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__hourangle( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'hourangle': value},{'hourangle': self.__schema['hourangle']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('hourangle',pre,self.__to_string_(value),post,description))
    def __totaltime_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__totaltime( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'totaltime': value},{'totaltime': self.__schema['totaltime']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('totaltime',pre,self.__to_string_(value),post,description))
    def __tpnant_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__tpnant( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'tpnant': value},{'tpnant': self.__schema['tpnant']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('tpnant',pre,self.__to_string_(value),post,description))
    def __tptime_inp(self):
        out = self.__stdout or sys.stdout
        if self.__tptime_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__tptime( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'tptime': value},{'tptime': self.__schema['tptime']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('tptime',pre,self.__to_string_(value),post,description))
    def __pwv_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__pwv( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'pwv': value},{'pwv': self.__schema['pwv']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('pwv',pre,self.__to_string_(value),post,description))
    def __image_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__image( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'image': value},{'image': self.__schema['image']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('image',pre,self.__to_string_(value),post,description))
    def __imsize_inp(self):
        out = self.__stdout or sys.stdout
        if self.__imsize_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__imsize( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'imsize': value},{'imsize': self.__schema['imsize']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('imsize',pre,self.__to_string_(value),post,description))
    def __imdirection_inp(self):
        out = self.__stdout or sys.stdout
        if self.__imdirection_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__imdirection( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'imdirection': value},{'imdirection': self.__schema['imdirection']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('imdirection',pre,self.__to_string_(value),post,description))
    def __cell_inp(self):
        out = self.__stdout or sys.stdout
        if self.__cell_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__cell( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'cell': value},{'cell': self.__schema['cell']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('cell',pre,self.__to_string_(value),post,description))
    def __niter_inp(self):
        out = self.__stdout or sys.stdout
        if self.__niter_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__niter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'niter': value},{'niter': self.__schema['niter']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('niter',pre,self.__to_string_(value),post,description))
    def __threshold_inp(self):
        out = self.__stdout or sys.stdout
        if self.__threshold_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__threshold( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'threshold': value},{'threshold': self.__schema['threshold']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('threshold',pre,self.__to_string_(value),post,description))
    def __graphics_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__graphics( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'graphics': value},{'graphics': self.__schema['graphics']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('graphics',pre,self.__to_string_(value),post,description))
    def __verbose_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('verbose',pre,self.__to_string_(value),post,description))
    def __overwrite_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('overwrite',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'hourangle' in glb: del glb['hourangle']
        if 'totaltime' in glb: del glb['totaltime']
        if 'dryrun' in glb: del glb['dryrun']
        if 'complist' in glb: del glb['complist']
        if 'ptgfile' in glb: del glb['ptgfile']
        if 'incenter' in glb: del glb['incenter']
        if 'verbose' in glb: del glb['verbose']
        if 'integration' in glb: del glb['integration']
        if 'image' in glb: del glb['image']
        if 'project' in glb: del glb['project']
        if 'imdirection' in glb: del glb['imdirection']
        if 'direction' in glb: del glb['direction']
        if 'tptime' in glb: del glb['tptime']
        if 'imsize' in glb: del glb['imsize']
        if 'compwidth' in glb: del glb['compwidth']
        if 'incell' in glb: del glb['incell']
        if 'indirection' in glb: del glb['indirection']
        if 'mapsize' in glb: del glb['mapsize']
        if 'inbright' in glb: del glb['inbright']
        if 'pwv' in glb: del glb['pwv']
        if 'inwidth' in glb: del glb['inwidth']
        if 'threshold' in glb: del glb['threshold']
        if 'niter' in glb: del glb['niter']
        if 'cell' in glb: del glb['cell']
        if 'antennalist' in glb: del glb['antennalist']
        if 'overwrite' in glb: del glb['overwrite']
        if 'setpointings' in glb: del glb['setpointings']
        if 'tpnant' in glb: del glb['tpnant']
        if 'graphics' in glb: del glb['graphics']
        if 'skymodel' in glb: del glb['skymodel']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__project_inp( )
        self.__dryrun_inp( )
        self.__skymodel_inp( )
        self.__inbright_inp( )
        self.__indirection_inp( )
        self.__incell_inp( )
        self.__incenter_inp( )
        self.__inwidth_inp( )
        self.__complist_inp( )
        self.__compwidth_inp( )
        self.__setpointings_inp( )
        self.__ptgfile_inp( )
        self.__integration_inp( )
        self.__direction_inp( )
        self.__mapsize_inp( )
        self.__antennalist_inp( )
        self.__hourangle_inp( )
        self.__totaltime_inp( )
        self.__tpnant_inp( )
        self.__tptime_inp( )
        self.__pwv_inp( )
        self.__image_inp( )
        self.__imsize_inp( )
        self.__imdirection_inp( )
        self.__cell_inp( )
        self.__niter_inp( )
        self.__threshold_inp( )
        self.__graphics_inp( )
        self.__verbose_inp( )
        self.__overwrite_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("simalma.last"):
                filename = "simalma.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, project=None, dryrun=None, skymodel=None, inbright=None, indirection=None, incell=None, incenter=None, inwidth=None, complist=None, compwidth=None, setpointings=None, ptgfile=None, integration=None, direction=None, mapsize=None, antennalist=None, hourangle=None, totaltime=None, tpnant=None, tptime=None, pwv=None, image=None, imsize=None, imdirection=None, cell=None, niter=None, threshold=None, graphics=None, verbose=None, overwrite=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('simalma.pre')
        _postfile = os.path.realpath('simalma.last')
        _return_result_ = None
        _arguments = [project,dryrun,skymodel,inbright,indirection,incell,incenter,inwidth,complist,compwidth,setpointings,ptgfile,integration,direction,mapsize,antennalist,hourangle,totaltime,tpnant,tptime,pwv,image,imsize,imdirection,cell,niter,threshold,graphics,verbose,overwrite]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if project is not None: local_global['project'] = project
            if dryrun is not None: local_global['dryrun'] = dryrun
            if skymodel is not None: local_global['skymodel'] = skymodel
            if complist is not None: local_global['complist'] = complist
            if setpointings is not None: local_global['setpointings'] = setpointings
            if antennalist is not None: local_global['antennalist'] = antennalist
            if hourangle is not None: local_global['hourangle'] = hourangle
            if totaltime is not None: local_global['totaltime'] = totaltime
            if tpnant is not None: local_global['tpnant'] = tpnant
            if pwv is not None: local_global['pwv'] = pwv
            if image is not None: local_global['image'] = image
            if graphics is not None: local_global['graphics'] = graphics
            if verbose is not None: local_global['verbose'] = verbose
            if overwrite is not None: local_global['overwrite'] = overwrite

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['project'] = self.__project( local_global )
            _invocation_parameters['dryrun'] = self.__dryrun( local_global )
            _invocation_parameters['skymodel'] = self.__skymodel( local_global )
            _invocation_parameters['complist'] = self.__complist( local_global )
            _invocation_parameters['setpointings'] = self.__setpointings( local_global )
            _invocation_parameters['antennalist'] = self.__antennalist( local_global )
            _invocation_parameters['hourangle'] = self.__hourangle( local_global )
            _invocation_parameters['totaltime'] = self.__totaltime( local_global )
            _invocation_parameters['tpnant'] = self.__tpnant( local_global )
            _invocation_parameters['pwv'] = self.__pwv( local_global )
            _invocation_parameters['image'] = self.__image( local_global )
            _invocation_parameters['graphics'] = self.__graphics( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['inbright'] = self.__inbright( _invocation_parameters ) if inbright is None else inbright
            _invocation_parameters['indirection'] = self.__indirection( _invocation_parameters ) if indirection is None else indirection
            _invocation_parameters['incell'] = self.__incell( _invocation_parameters ) if incell is None else incell
            _invocation_parameters['incenter'] = self.__incenter( _invocation_parameters ) if incenter is None else incenter
            _invocation_parameters['inwidth'] = self.__inwidth( _invocation_parameters ) if inwidth is None else inwidth
            _invocation_parameters['compwidth'] = self.__compwidth( _invocation_parameters ) if compwidth is None else compwidth
            _invocation_parameters['ptgfile'] = self.__ptgfile( _invocation_parameters ) if ptgfile is None else ptgfile
            _invocation_parameters['integration'] = self.__integration( _invocation_parameters ) if integration is None else integration
            _invocation_parameters['direction'] = self.__direction( _invocation_parameters ) if direction is None else direction
            _invocation_parameters['mapsize'] = self.__mapsize( _invocation_parameters ) if mapsize is None else mapsize
            _invocation_parameters['tptime'] = self.__tptime( _invocation_parameters ) if tptime is None else tptime
            _invocation_parameters['imsize'] = self.__imsize( _invocation_parameters ) if imsize is None else imsize
            _invocation_parameters['imdirection'] = self.__imdirection( _invocation_parameters ) if imdirection is None else imdirection
            _invocation_parameters['cell'] = self.__cell( _invocation_parameters ) if cell is None else cell
            _invocation_parameters['niter'] = self.__niter( _invocation_parameters ) if niter is None else niter
            _invocation_parameters['threshold'] = self.__threshold( _invocation_parameters ) if threshold is None else threshold

        else:
            # invoke with inp/go semantics
            _invocation_parameters['project'] = self.__project( self.__globals_( ) )
            _invocation_parameters['dryrun'] = self.__dryrun( self.__globals_( ) )
            _invocation_parameters['skymodel'] = self.__skymodel( self.__globals_( ) )
            _invocation_parameters['inbright'] = self.__inbright( self.__globals_( ) )
            _invocation_parameters['indirection'] = self.__indirection( self.__globals_( ) )
            _invocation_parameters['incell'] = self.__incell( self.__globals_( ) )
            _invocation_parameters['incenter'] = self.__incenter( self.__globals_( ) )
            _invocation_parameters['inwidth'] = self.__inwidth( self.__globals_( ) )
            _invocation_parameters['complist'] = self.__complist( self.__globals_( ) )
            _invocation_parameters['compwidth'] = self.__compwidth( self.__globals_( ) )
            _invocation_parameters['setpointings'] = self.__setpointings( self.__globals_( ) )
            _invocation_parameters['ptgfile'] = self.__ptgfile( self.__globals_( ) )
            _invocation_parameters['integration'] = self.__integration( self.__globals_( ) )
            _invocation_parameters['direction'] = self.__direction( self.__globals_( ) )
            _invocation_parameters['mapsize'] = self.__mapsize( self.__globals_( ) )
            _invocation_parameters['antennalist'] = self.__antennalist( self.__globals_( ) )
            _invocation_parameters['hourangle'] = self.__hourangle( self.__globals_( ) )
            _invocation_parameters['totaltime'] = self.__totaltime( self.__globals_( ) )
            _invocation_parameters['tpnant'] = self.__tpnant( self.__globals_( ) )
            _invocation_parameters['tptime'] = self.__tptime( self.__globals_( ) )
            _invocation_parameters['pwv'] = self.__pwv( self.__globals_( ) )
            _invocation_parameters['image'] = self.__image( self.__globals_( ) )
            _invocation_parameters['imsize'] = self.__imsize( self.__globals_( ) )
            _invocation_parameters['imdirection'] = self.__imdirection( self.__globals_( ) )
            _invocation_parameters['cell'] = self.__cell( self.__globals_( ) )
            _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
            _invocation_parameters['threshold'] = self.__threshold( self.__globals_( ) )
            _invocation_parameters['graphics'] = self.__graphics( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-12s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#simalma( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _simalma_t( _invocation_parameters['project'],_invocation_parameters['dryrun'],_invocation_parameters['skymodel'],_invocation_parameters['inbright'],_invocation_parameters['indirection'],_invocation_parameters['incell'],_invocation_parameters['incenter'],_invocation_parameters['inwidth'],_invocation_parameters['complist'],_invocation_parameters['compwidth'],_invocation_parameters['setpointings'],_invocation_parameters['ptgfile'],_invocation_parameters['integration'],_invocation_parameters['direction'],_invocation_parameters['mapsize'],_invocation_parameters['antennalist'],_invocation_parameters['hourangle'],_invocation_parameters['totaltime'],_invocation_parameters['tpnant'],_invocation_parameters['tptime'],_invocation_parameters['pwv'],_invocation_parameters['image'],_invocation_parameters['imsize'],_invocation_parameters['imdirection'],_invocation_parameters['cell'],_invocation_parameters['niter'],_invocation_parameters['threshold'],_invocation_parameters['graphics'],_invocation_parameters['verbose'],_invocation_parameters['overwrite'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

simalma = _simalma( )

