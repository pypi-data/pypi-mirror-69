##################### generated by xml-casa (v2) from vishead.xml ###################
##################### c2c847dc9fbae1aabbc57e693d144aa4 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import vishead as _vishead_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _vishead:
    """
    vishead ---- List, summary, get, and put metadata in a measurement set

    
    
    This task allows the user to manipulate some meta-data keywords in a
    measurement set.  The mode='list' shows those keywords that are
    presently implemented, with their values.  The contents associated
    with the keywords can be obtained with mode='get' and changed with mode='put'.
    
    The modes that are available are:
    
    list    --- List all keywords that are recognized, and list the
    value(s) for each.  Only these keywords can be obtained
    (get) or changed (put)
    summary --- Provides a summary that is equivalent to running listobs(verbose=False)
    get     --- Get the specified keyword value(s) from the ms
    put     --- Put the specified keyword value(s) into the ms
    
    Keywords currently implemented are:
    
    cal_grp
    field                 Field names
    fld_code              Field Observing codes
    freq_group_name
    log
    observer              Observer name
    project               Project name
    ptcs                  Phase tracking centers for each field
    release_date
    schedule
    schedule_type
    spw_name              Spectral parameters?
    source_name           Source Names (=Field Names?)
    telescope             Telescope Name
    
    Note that the default list of keywords is a subset of the former list. To get
    all the keywords set listitemts=[]. See task parameter listitems for more details.

    --------- parameter descriptions ---------------------------------------------

    vis       Name of input visibility file
    mode      Mode of operation for vishead
    listitems Keyword items to list. This parameter is only relevant in list mode. Note that the default list is a subset of the possible keywords. To get all the keywords set listitems=[]
    hdkey     Keyword to get/put
    hdindex   Index (counting from 0) if keyword is an array (used in get/put mode only). The empty string means all elements
    hdvalue   Value of the keywords to be put in the MS (used in put mode only)

    --------- examples -----------------------------------------------------------

    


    """

    _info_group_ = """information, manipulation"""
    _info_desc_ = """List, summary, get, and put metadata in a measurement set"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'mode': {'type': 'cStr'}, 'listitems': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'hdkey': {'type': 'cStr'}, 'hdindex': {'type': 'cStr'}, 'hdvalue': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __mode_dflt( self, glb ):
        return 'summary'

    def __mode( self, glb ):
        if 'mode' in glb: return glb['mode']
        return 'summary'



    #--------- return inp/go default --------------------------------------------------
    def __hdindex_dflt( self, glb ):
        if self.__mode( glb ) == "get": return ""
        if self.__mode( glb ) == "put": return ""
        return None
    def __listitems_dflt( self, glb ):
        if self.__mode( glb ) == "list": return ["'telescope'","'observer'","'project'","'field'","'freq_group_name'","'spw_name'","'schedule'","'schedule_type'","'release_date'"]
        return None
    def __hdkey_dflt( self, glb ):
        if self.__mode( glb ) == "get": return ""
        if self.__mode( glb ) == "put": return ""
        return None
    def __hdvalue_dflt( self, glb ):
        if self.__mode( glb ) == "put": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __listitems( self, glb ):
        if 'listitems' in glb: return glb['listitems']
        dflt = self.__listitems_dflt( glb )
        if dflt is not None: return dflt
        return [ 'telescope','observer','project','field','freq_group_name','spw_name','schedule','schedule_type','release_date' ]
    def __hdkey( self, glb ):
        if 'hdkey' in glb: return glb['hdkey']
        dflt = self.__hdkey_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __hdindex( self, glb ):
        if 'hdindex' in glb: return glb['hdindex']
        dflt = self.__hdindex_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __hdvalue( self, glb ):
        if 'hdvalue' in glb: return glb['hdvalue']
        dflt = self.__hdvalue_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __mode_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__mode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'mode': value},{'mode': self.__schema['mode']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('mode',pre,self.__to_string_(value),post,description))
    def __listitems_inp(self):
        out = self.__stdout or sys.stdout
        if self.__listitems_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__listitems( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'listitems': value},{'listitems': self.__schema['listitems']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('listitems',pre,self.__to_string_(value),post,description))
    def __hdkey_inp(self):
        out = self.__stdout or sys.stdout
        if self.__hdkey_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__hdkey( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'hdkey': value},{'hdkey': self.__schema['hdkey']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('hdkey',pre,self.__to_string_(value),post,description))
    def __hdindex_inp(self):
        out = self.__stdout or sys.stdout
        if self.__hdindex_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__hdindex( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'hdindex': value},{'hdindex': self.__schema['hdindex']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('hdindex',pre,self.__to_string_(value),post,description))
    def __hdvalue_inp(self):
        out = self.__stdout or sys.stdout
        if self.__hdvalue_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__hdvalue( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'hdvalue': value},{'hdvalue': self.__schema['hdvalue']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('hdvalue',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'listitems' in glb: del glb['listitems']
        if 'hdvalue' in glb: del glb['hdvalue']
        if 'hdindex' in glb: del glb['hdindex']
        if 'mode' in glb: del glb['mode']
        if 'hdkey' in glb: del glb['hdkey']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__mode_inp( )
        self.__listitems_inp( )
        self.__hdkey_inp( )
        self.__hdindex_inp( )
        self.__hdvalue_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("vishead.last"):
                filename = "vishead.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, mode=None, listitems=None, hdkey=None, hdindex=None, hdvalue=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('vishead.pre')
        _postfile = os.path.realpath('vishead.last')
        _return_result_ = None
        _arguments = [vis,mode,listitems,hdkey,hdindex,hdvalue]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if mode is not None: local_global['mode'] = mode

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['mode'] = self.__mode( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['listitems'] = self.__listitems( _invocation_parameters ) if listitems is None else listitems
            _invocation_parameters['hdkey'] = self.__hdkey( _invocation_parameters ) if hdkey is None else hdkey
            _invocation_parameters['hdindex'] = self.__hdindex( _invocation_parameters ) if hdindex is None else hdindex
            _invocation_parameters['hdvalue'] = self.__hdvalue( _invocation_parameters ) if hdvalue is None else hdvalue

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['mode'] = self.__mode( self.__globals_( ) )
            _invocation_parameters['listitems'] = self.__listitems( self.__globals_( ) )
            _invocation_parameters['hdkey'] = self.__hdkey( self.__globals_( ) )
            _invocation_parameters['hdindex'] = self.__hdindex( self.__globals_( ) )
            _invocation_parameters['hdvalue'] = self.__hdvalue( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#vishead( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _vishead_t( _invocation_parameters['vis'],_invocation_parameters['mode'],_invocation_parameters['listitems'],_invocation_parameters['hdkey'],_invocation_parameters['hdindex'],_invocation_parameters['hdvalue'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

vishead = _vishead( )

