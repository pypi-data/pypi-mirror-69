##################### generated by xml-casa (v2) from exportasdm.xml ################
##################### c865af059e45d860085c5dddd003ab19 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import exportasdm as _exportasdm_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _exportasdm:
    """
    exportasdm ---- Convert a CASA visibility file (MS) into an ALMA or EVLA Science Data Model

    
    Convert a CASA visibility file (MS) into an ALMA or EVLA Science Data Model

    --------- parameter descriptions ---------------------------------------------

    vis             Name of input visibility file
                    Default: none
                    
                       Example: vis='ngc5921.ms'
    asdm            Name of output ASDM directory (on disk)
                    Default: none
    datacolumn      Which data column(s) to use for processing
                                     (case-insensitive).
                                     Default: 'corrected'
                                     Options: 'data', 'model', 'corrected',
                                     'all','float_data', 'lag_data',
                                     'float_data,data', 'lag_data,data'
                    
                                        Example: datacolumn='data'
                    
                                     NOTE: 'all' = whichever of the above that are
                                     present. If the requested column does not exist,
                                     the task will exit with an error.
    archiveid       The X0 in uid://X0/X1/X2
                    Default: 'S0'
    rangeid         The X1 in uid://X0/X1/X2
                    Default: 'X1'
    subscanduration Maximum duration of a subscan in the output ASDM
                    Default: 24h
    sbduration      Maximum duration of a scheduling block (and therefore
                    exec block) in the output ASDM
                    Default: '2700s'
                    
                    The sbduration parameter controls the number of
                    execution blocks (EBs) into which exportasdm
                    subdivides the visibilities from your input
                    MS. If the total observation time in the MS is
                    shorter than what is given in sbduration, a
                    single EB will be created.
    apcorrected     Data to be marked as having atmospheric phase correction
                    Default: False
                    Options: False|True
    verbose         Produce log output?
                    Default: True
                    Options: True|False
    showversion     Report the version of ASDM class set being used
                    Default: True
                    Options: True|False
    useversion      Selects the version of MS2asdm to be used
                    Default: 'v3'
    [1;42mRETURNS[1;m            bool

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of exportasdm in CASA Docs:
    
    https://casa.nrao.edu/casadocs/
    
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a CASA visibility file (MS) into an ALMA or EVLA Science Data Model"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'asdm': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'datacolumn': {'type': 'cStr'}, 'archiveid': {'type': 'cStr'}, 'rangeid': {'type': 'cStr'}, 'subscanduration': {'type': 'cStr'}, 'sbduration': {'type': 'cStr'}, 'apcorrected': {'type': 'cBool'}, 'verbose': {'type': 'cBool'}, 'showversion': {'type': 'cBool'}, 'useversion': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __subscanduration_dflt( self, glb ):
        return '24h'

    def __subscanduration( self, glb ):
        if 'subscanduration' in glb: return glb['subscanduration']
        return '24h'

    def __verbose_dflt( self, glb ):
        return True

    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return True

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __datacolumn_dflt( self, glb ):
        return 'data'

    def __datacolumn( self, glb ):
        if 'datacolumn' in glb: return glb['datacolumn']
        return 'data'

    def __apcorrected_dflt( self, glb ):
        return False

    def __apcorrected( self, glb ):
        if 'apcorrected' in glb: return glb['apcorrected']
        return False

    def __sbduration_dflt( self, glb ):
        return '2700s'

    def __sbduration( self, glb ):
        if 'sbduration' in glb: return glb['sbduration']
        return '2700s'

    def __useversion_dflt( self, glb ):
        return 'v3'

    def __useversion( self, glb ):
        if 'useversion' in glb: return glb['useversion']
        return 'v3'

    def __asdm_dflt( self, glb ):
        return ''

    def __asdm( self, glb ):
        if 'asdm' in glb: return glb['asdm']
        return ''

    def __rangeid_dflt( self, glb ):
        return 'X1'

    def __rangeid( self, glb ):
        if 'rangeid' in glb: return glb['rangeid']
        return 'X1'

    def __showversion_dflt( self, glb ):
        return True

    def __showversion( self, glb ):
        if 'showversion' in glb: return glb['showversion']
        return True

    def __archiveid_dflt( self, glb ):
        return 'S0'

    def __archiveid( self, glb ):
        if 'archiveid' in glb: return glb['archiveid']
        return 'S0'



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __asdm_inp(self):
        out = self.__stdout or sys.stdout
        description = '>Name of output ASDM directory (on disk)'
        value = self.__asdm( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'asdm': value},{'asdm': self.__schema['asdm']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('asdm',pre,self.__to_string_(value),post,description))
    def __datacolumn_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Which data column(s) to process.'
        value = self.__datacolumn( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'datacolumn': value},{'datacolumn': self.__schema['datacolumn']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('datacolumn',pre,self.__to_string_(value),post,description))
    def __archiveid_inp(self):
        out = self.__stdout or sys.stdout
        description = 'The X0 in uid://X0/X1/X2'
        value = self.__archiveid( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'archiveid': value},{'archiveid': self.__schema['archiveid']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('archiveid',pre,self.__to_string_(value),post,description))
    def __rangeid_inp(self):
        out = self.__stdout or sys.stdout
        description = 'The X1 in uid://X0/X1/X2'
        value = self.__rangeid( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'rangeid': value},{'rangeid': self.__schema['rangeid']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('rangeid',pre,self.__to_string_(value),post,description))
    def __subscanduration_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Maximum duration of a subscan in the output ASDM'
        value = self.__subscanduration( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'subscanduration': value},{'subscanduration': self.__schema['subscanduration']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('subscanduration',pre,self.__to_string_(value),post,description))
    def __sbduration_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Maximum duration of a scheduling block (and therefore exec block) in the output ASDM'
        value = self.__sbduration( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'sbduration': value},{'sbduration': self.__schema['sbduration']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('sbduration',pre,self.__to_string_(value),post,description))
    def __apcorrected_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Data to be marked as having atmospheric phase correction'
        value = self.__apcorrected( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'apcorrected': value},{'apcorrected': self.__schema['apcorrected']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('apcorrected',pre,self.__to_string_(value),post,description))
    def __verbose_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Produce log output'
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('verbose',pre,self.__to_string_(value),post,description))
    def __showversion_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Report the version of ASDM class set being used'
        value = self.__showversion( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showversion': value},{'showversion': self.__schema['showversion']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('showversion',pre,self.__to_string_(value),post,description))
    def __useversion_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Selects the version of MS2asdm to be used'
        value = self.__useversion( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'useversion': value},{'useversion': self.__schema['useversion']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('useversion',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'rangeid' in glb: del glb['rangeid']
        if 'showversion' in glb: del glb['showversion']
        if 'useversion' in glb: del glb['useversion']
        if 'subscanduration' in glb: del glb['subscanduration']
        if 'apcorrected' in glb: del glb['apcorrected']
        if 'datacolumn' in glb: del glb['datacolumn']
        if 'verbose' in glb: del glb['verbose']
        if 'sbduration' in glb: del glb['sbduration']
        if 'vis' in glb: del glb['vis']
        if 'archiveid' in glb: del glb['archiveid']
        if 'asdm' in glb: del glb['asdm']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__asdm_inp( )
        self.__datacolumn_inp( )
        self.__archiveid_inp( )
        self.__rangeid_inp( )
        self.__subscanduration_inp( )
        self.__sbduration_inp( )
        self.__apcorrected_inp( )
        self.__verbose_inp( )
        self.__showversion_inp( )
        self.__useversion_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("exportasdm.last"):
                filename = "exportasdm.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, asdm=None, datacolumn=None, archiveid=None, rangeid=None, subscanduration=None, sbduration=None, apcorrected=None, verbose=None, showversion=None, useversion=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('exportasdm.pre')
        _postfile = os.path.realpath('exportasdm.last')
        _return_result_ = None
        _arguments = [vis,asdm,datacolumn,archiveid,rangeid,subscanduration,sbduration,apcorrected,verbose,showversion,useversion]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if asdm is not None: local_global['asdm'] = asdm
            if datacolumn is not None: local_global['datacolumn'] = datacolumn
            if archiveid is not None: local_global['archiveid'] = archiveid
            if rangeid is not None: local_global['rangeid'] = rangeid
            if subscanduration is not None: local_global['subscanduration'] = subscanduration
            if sbduration is not None: local_global['sbduration'] = sbduration
            if apcorrected is not None: local_global['apcorrected'] = apcorrected
            if verbose is not None: local_global['verbose'] = verbose
            if showversion is not None: local_global['showversion'] = showversion
            if useversion is not None: local_global['useversion'] = useversion

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['asdm'] = self.__asdm( local_global )
            _invocation_parameters['datacolumn'] = self.__datacolumn( local_global )
            _invocation_parameters['archiveid'] = self.__archiveid( local_global )
            _invocation_parameters['rangeid'] = self.__rangeid( local_global )
            _invocation_parameters['subscanduration'] = self.__subscanduration( local_global )
            _invocation_parameters['sbduration'] = self.__sbduration( local_global )
            _invocation_parameters['apcorrected'] = self.__apcorrected( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )
            _invocation_parameters['showversion'] = self.__showversion( local_global )
            _invocation_parameters['useversion'] = self.__useversion( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['asdm'] = self.__asdm( self.__globals_( ) )
            _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
            _invocation_parameters['archiveid'] = self.__archiveid( self.__globals_( ) )
            _invocation_parameters['rangeid'] = self.__rangeid( self.__globals_( ) )
            _invocation_parameters['subscanduration'] = self.__subscanduration( self.__globals_( ) )
            _invocation_parameters['sbduration'] = self.__sbduration( self.__globals_( ) )
            _invocation_parameters['apcorrected'] = self.__apcorrected( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['showversion'] = self.__showversion( self.__globals_( ) )
            _invocation_parameters['useversion'] = self.__useversion( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-15s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#exportasdm( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _exportasdm_t( _invocation_parameters['vis'],_invocation_parameters['asdm'],_invocation_parameters['datacolumn'],_invocation_parameters['archiveid'],_invocation_parameters['rangeid'],_invocation_parameters['subscanduration'],_invocation_parameters['sbduration'],_invocation_parameters['apcorrected'],_invocation_parameters['verbose'],_invocation_parameters['showversion'],_invocation_parameters['useversion'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

exportasdm = _exportasdm( )

