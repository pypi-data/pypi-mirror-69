##################### generated by xml-casa (v2) from smoothcal.xml #################
##################### 27bb5e296418dc1aacd925f324d07abd ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import smoothcal as _smoothcal_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _smoothcal:
    """
    smoothcal ---- Smooth calibration solution(s) derived from one or more sources:

    
    A G- or T-type gain calibration can be smoothed.  Amplitude and
    phase are currently smoothed with the same time.  Calibration values
    will be smoothed over all fields.
    

    --------- parameter descriptions ---------------------------------------------

    vis        Name of input visibility file (MS)
    tablein    Input calibration table
    caltable   Output calibration table (overwrite tablein if unspecified)
    field      Field name list
    smoothtype Smoothing filter to use
    smoothtime Smoothing time (sec)
    [1;42mRETURNS[1;m       void

    --------- examples -----------------------------------------------------------

    
    
    
    A G- or T-type gain calibration can be smoothed.  The amplitude and
    phase smoothing times are currently the same.  Calibration values
    will be smoothed for only the specified fields.  Smoothing is
    performed independently per field, per spw, and per antenna.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    tablein -- Input calibration table (G or T)
    default: none; example: tablein='ngc5921.gcal'
    caltable -- Output calibration table (smoothed)
    default: ''  (will overwrite tablein);
    example: caltable='ngc5921_smooth.gcal'
    field -- subset of fields to select and smooth
    default: '' means all; example: field='0319_415_1,3C286'
    smoothtype -- The smoothing filter to be used for both amp and phase
    default: 'median'; example: smoothtype='mean'
    Options: 'median','mean'
    smoothtime -- Smoothing filter time (sec)
    default: 300.0; example: smoothtime=60.
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Smooth calibration solution(s) derived from one or more sources:"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr'}, 'field': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'smoothtype': {'type': 'cStr'}, 'smoothtime': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cInt'}]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __tablein_dflt( self, glb ):
        return ''

    def __tablein( self, glb ):
        if 'tablein' in glb: return glb['tablein']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __smoothtime_dflt( self, glb ):
        return float(60.0)

    def __smoothtime( self, glb ):
        if 'smoothtime' in glb: return glb['smoothtime']
        return float(60.0)

    def __smoothtype_dflt( self, glb ):
        return 'median'

    def __smoothtype( self, glb ):
        if 'smoothtype' in glb: return glb['smoothtype']
        return 'median'

    def __field_dflt( self, glb ):
        return [  ]

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return [  ]



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __tablein_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__tablein( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'tablein': value},{'tablein': self.__schema['tablein']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('tablein',pre,self.__to_string_(value),post,description))
    def __caltable_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('caltable',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __smoothtype_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__smoothtype( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'smoothtype': value},{'smoothtype': self.__schema['smoothtype']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('smoothtype',pre,self.__to_string_(value),post,description))
    def __smoothtime_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__smoothtime( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'smoothtime': value},{'smoothtime': self.__schema['smoothtime']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('smoothtime',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'tablein' in glb: del glb['tablein']
        if 'field' in glb: del glb['field']
        if 'smoothtime' in glb: del glb['smoothtime']
        if 'vis' in glb: del glb['vis']
        if 'caltable' in glb: del glb['caltable']
        if 'smoothtype' in glb: del glb['smoothtype']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__tablein_inp( )
        self.__caltable_inp( )
        self.__field_inp( )
        self.__smoothtype_inp( )
        self.__smoothtime_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("smoothcal.last"):
                filename = "smoothcal.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, tablein=None, caltable=None, field=None, smoothtype=None, smoothtime=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('smoothcal.pre')
        _postfile = os.path.realpath('smoothcal.last')
        _return_result_ = None
        _arguments = [vis,tablein,caltable,field,smoothtype,smoothtime]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if tablein is not None: local_global['tablein'] = tablein
            if caltable is not None: local_global['caltable'] = caltable
            if field is not None: local_global['field'] = field
            if smoothtype is not None: local_global['smoothtype'] = smoothtype
            if smoothtime is not None: local_global['smoothtime'] = smoothtime

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['tablein'] = self.__tablein( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['smoothtype'] = self.__smoothtype( local_global )
            _invocation_parameters['smoothtime'] = self.__smoothtime( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['tablein'] = self.__tablein( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['smoothtype'] = self.__smoothtype( self.__globals_( ) )
            _invocation_parameters['smoothtime'] = self.__smoothtime( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#smoothcal( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _smoothcal_t( _invocation_parameters['vis'],_invocation_parameters['tablein'],_invocation_parameters['caltable'],_invocation_parameters['field'],_invocation_parameters['smoothtype'],_invocation_parameters['smoothtime'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

smoothcal = _smoothcal( )

