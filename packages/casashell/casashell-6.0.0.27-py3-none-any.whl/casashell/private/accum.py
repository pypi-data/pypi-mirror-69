##################### generated by xml-casa (v2) from accum.xml #####################
##################### 3c88c5c49b34bb3bcc2990b9115078bb ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import accum as _accum_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _accum:
    """
    accum ---- Accumulate incremental calibration solutions into a calibration table

    
    Accum will interpolate and extrapolate a calibration table onto a new
    table that has a regularly-space time grid.
    
    The first run of accum defines the time grid and fills this table with
    the results from the input table.
    
    Subsequent use of accum will combine additional calibration tables
    onto the same grid of the initial accum table to obtain an output
    accum table.  See below for concrete examples.
    
    Accum tables are similar to CL tables in AIPS. Incremental tables are
    similar to SN tables in AIPS.

    --------- parameter descriptions ---------------------------------------------

    vis       Name of input visibility file
              Default: none
              
                 Example: vis='ngc5921.ms'
    tablein   Input cumulative calibration table
              Default: '' (none)
              
              On first execution of accum, tablein='' and
              accumtime is used to generate tablein with the
              specified time gridding.
    incrtable The calibration data to be interpolated onto the tablein
              file.
              Default: '' (must be specified)
    caltable  The output cumulative calibration table
              Default: '' (use tablein as the output file)
    field     Select field using field id(s) or field name(s)
              Default: '' --> all fields
              
              Use 'go listobs' to obtain the list id's or
              names. If field string is a non-negative
              integer, it is assumed a field index,
              otherwise, it is assumed a field name.
              
                 Examples:
                 field='0~2'; field ids 0,1,2
                 field='0,4,5~7'; field ids 0,4,5,6,7
                 field='3C286,3C295'; field named 3C286 and
                 3C295
                 field = '3,4C*'; field id 3, all names
                 starting with 4C
    calfield  Select field(s) from incrtable to process.
              Default: '' (all fields)
    interp    Interpolation type (in time[,freq]) to use for each
              gaintable.
                Default: '' ('linear,linear' for all gaintable(s))
                Options: Time: 'nearest', 'linear'
                         Freq: 'nearest', 'linear', 'cubic',
                         'spline'
              
              * When frequency interpolation is relevant (B, Df,
                Xf), separate time-dependent and freq-dependent
                interp types with a comma (freq _after_ the
                comma). 
              * Specifications for frequency are ignored when the
                calibration table has no channel-dependence.
              * Time-dependent interp options ending in 'PD'
                enable a "phase delay" correction per spw for
                non-channel-dependent calibration types.
              * For multi-obsId datasets, 'perobs' can be
                appended to the time-dependent interpolation
                specification to enforce obsId boundaries when
                interpolating in time.
              
                   Examples: 
                   interp='nearest' (in time, freq-dep will be
                   linear, if relevant)
                   interp='linear,cubic' (linear in time, cubic
                   in freq)
                   interp='linearperobs,spline' (linear in time
                   per obsId, spline in freq)
                   interp=',spline' (spline in freq; linear in
                   time by default)
                   interp=['nearest,spline','linear'] (for
                   multiple gaintables)
    accumtime The time separation when making tablein.
              Subparameter of tablein
              Default: 1.0  (1 second)
              
              Note: This time should not be less than the
              visibility sampling time, but should be less than
              about 30% of a typical scan length.
    spwmap    Spectral windows combinations to form for gaintable(s)
              Default: [] (apply solutions from each spw to
                           that spw only)
              
                 Examples: 
                 spwmap=[0,0,1,1] means apply the caltable
                 solutions from spw = 0 to the spw 0,1 
                 and spw 1 to spw 2,3.
                 spwmap=[[0,0,1,1],[0,1,0,1]] (for multiple
                 gaintables)
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of accum in CASA Docs:
    
    https://casa.nrao.edu/casadocs/
    
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Accumulate incremental calibration solutions into a calibration table"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cStr'}, 'incrtable': {'type': 'cStr'}, 'caltable': {'type': 'cStr'}, 'field': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'calfield': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'interp': {'type': 'cStr'}, 'accumtime': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cInt'}]}, 'spwmap': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __tablein_dflt( self, glb ):
        return ''

    def __tablein( self, glb ):
        if 'tablein' in glb: return glb['tablein']
        return ''

    def __calfield_dflt( self, glb ):
        return [  ]

    def __calfield( self, glb ):
        if 'calfield' in glb: return glb['calfield']
        return [  ]

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __spwmap_dflt( self, glb ):
        return [ ]

    def __spwmap( self, glb ):
        if 'spwmap' in glb: return glb['spwmap']
        return [ ]

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __interp_dflt( self, glb ):
        return 'linear'

    def __interp( self, glb ):
        if 'interp' in glb: return glb['interp']
        return 'linear'

    def __field_dflt( self, glb ):
        return [  ]

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return [  ]

    def __incrtable_dflt( self, glb ):
        return ''

    def __incrtable( self, glb ):
        if 'incrtable' in glb: return glb['incrtable']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __accumtime_dflt( self, glb ):
        if self.__tablein( glb ) == "": return 1.0
        return None

    #--------- return subparam values -------------------------------------------------
    def __accumtime( self, glb ):
        if 'accumtime' in glb: return glb['accumtime']
        dflt = self.__accumtime_dflt( glb )
        if dflt is not None: return dflt
        return float(1.0)

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __tablein_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Input cumulative calibration table; use \'\' on first run'
        value = self.__tablein( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'tablein': value},{'tablein': self.__schema['tablein']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('tablein',pre,self.__to_string_(value),post,description))
    def __incrtable_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Input incremental calibration table to add'
        value = self.__incrtable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'incrtable': value},{'incrtable': self.__schema['incrtable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('incrtable',pre,self.__to_string_(value),post,description))
    def __caltable_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Output (cumulative) calibration table'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('caltable',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __calfield_inp(self):
        out = self.__stdout or sys.stdout
        description = 'List of field names to use from incrtable.'
        value = self.__calfield( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'calfield': value},{'calfield': self.__schema['calfield']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('calfield',pre,self.__to_string_(value),post,description))
    def __interp_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Interpolation mode to use for resampling incrtable solutions'
        value = self.__interp( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'interp': value},{'interp': self.__schema['interp']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('interp',pre,self.__to_string_(value),post,description))
    def __accumtime_inp(self):
        out = self.__stdout or sys.stdout
        if self.__accumtime_dflt( self.__globals_( ) ) is not None:
             description = 'Time-interval when create cumulative table'
             value = self.__accumtime( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'accumtime': value},{'accumtime': self.__schema['accumtime']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('accumtime',pre,self.__to_string_(value),post,description))
    def __spwmap_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Spectral window combinations to apply'
        value = self.__spwmap( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'spwmap': value},{'spwmap': self.__schema['spwmap']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('spwmap',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'tablein' in glb: del glb['tablein']
        if 'field' in glb: del glb['field']
        if 'spwmap' in glb: del glb['spwmap']
        if 'vis' in glb: del glb['vis']
        if 'calfield' in glb: del glb['calfield']
        if 'interp' in glb: del glb['interp']
        if 'accumtime' in glb: del glb['accumtime']
        if 'caltable' in glb: del glb['caltable']
        if 'incrtable' in glb: del glb['incrtable']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__tablein_inp( )
        self.__incrtable_inp( )
        self.__caltable_inp( )
        self.__field_inp( )
        self.__calfield_inp( )
        self.__interp_inp( )
        self.__accumtime_inp( )
        self.__spwmap_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("accum.last"):
                filename = "accum.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, tablein=None, incrtable=None, caltable=None, field=None, calfield=None, interp=None, accumtime=None, spwmap=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('accum.pre')
        _postfile = os.path.realpath('accum.last')
        _return_result_ = None
        _arguments = [vis,tablein,incrtable,caltable,field,calfield,interp,accumtime,spwmap]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if tablein is not None: local_global['tablein'] = tablein
            if incrtable is not None: local_global['incrtable'] = incrtable
            if caltable is not None: local_global['caltable'] = caltable
            if field is not None: local_global['field'] = field
            if calfield is not None: local_global['calfield'] = calfield
            if interp is not None: local_global['interp'] = interp
            if spwmap is not None: local_global['spwmap'] = spwmap

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['tablein'] = self.__tablein( local_global )
            _invocation_parameters['incrtable'] = self.__incrtable( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['calfield'] = self.__calfield( local_global )
            _invocation_parameters['interp'] = self.__interp( local_global )
            _invocation_parameters['spwmap'] = self.__spwmap( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['accumtime'] = self.__accumtime( _invocation_parameters ) if accumtime is None else accumtime

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['tablein'] = self.__tablein( self.__globals_( ) )
            _invocation_parameters['incrtable'] = self.__incrtable( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['calfield'] = self.__calfield( self.__globals_( ) )
            _invocation_parameters['interp'] = self.__interp( self.__globals_( ) )
            _invocation_parameters['accumtime'] = self.__accumtime( self.__globals_( ) )
            _invocation_parameters['spwmap'] = self.__spwmap( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#accum( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _accum_t( _invocation_parameters['vis'],_invocation_parameters['tablein'],_invocation_parameters['incrtable'],_invocation_parameters['caltable'],_invocation_parameters['field'],_invocation_parameters['calfield'],_invocation_parameters['interp'],_invocation_parameters['accumtime'],_invocation_parameters['spwmap'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

accum = _accum( )

