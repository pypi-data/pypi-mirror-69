##################### generated by xml-casa (v2) from gencal.xml ####################
##################### b0332ce8d25c400fa0bd49e5e80077b1 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import gencal as _gencal_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _gencal:
    """
    gencal ---- Specify Calibration Values of Various Types

    
    The gencal task provides a means of specifying antenna-based
    calibration values manually.  The values are put in designated tables
    and applied to the data using applycal. Several specialized
    calibrations are also generated with gencal.
    
    Current antenna-based gencal options (caltype) are:
    * 'amp'= amplitude correction
    * 'ph' = phase correction
    * 'sbd'= single-band delay (phase-frequency slope for each spw)
    * 'mbd'= multi-band delay (phase-frequency slope over all spw)
    * 'antpos' = ITRF antenna position corrections
    * 'antposvla' = VLA-centric antenna position corrections
    * 'tsys' = Tsys from the SYSCAL table (ALMA)
    * 'swpow' = EVLA switched-power gains (experimental)
    * 'evlagain' (='swpow') (this syntax will deprecate)
    * 'rq' = EVLA requantizer gains _only_
    * 'swp/rq' = EVLA switched-power gains divided by requantizer gain
    * 'opac' = Tropospheric opacity
    * 'gc' = Gain curve (zenith-angle-dependent gain) (VLA only)
    * 'eff' = Antenna efficiency (sqrt(K/Jy)) (VLA only)
    * 'gceff' = Gain curve and efficiency (VLA only)
    * 'tecim' = Time-dep TEC image specified in infile
    

    --------- parameter descriptions ---------------------------------------------

    vis       Name of input visibility file
              Default: none
              
                 Example: vis='ngc5921.ms'
    caltable  Name of input calibration table
              Default: none
              
              If a calibration table does not exist, it will be
              created. Specifying an existing table will result
              in the parameters being applied
              cumulatively. Only a single time-stamp for all
              calibrations are supported, currently.  Do not
              use a caltable created by gaincal, bandpass,
              etc. 
              
                 Example: caltable='test.G'
    caltype   The calibration parameter type being specified
              Default: none
              Options: 'amp', 'ph', 'sbd', 'mbd', 'antpos',
              'antposvla', 'tsys', 'evlagain', 'opac', 'gc',
              'gceff', 'eff', 'tecim'
              
              * 'amp' = gain (G) amplitude (1 real parameter
                per pol, antenna, spw)
              * 'ph'  = gain (G) phase (deg) (1 real parameter
                per pol, antenna, spw)
              * 'sbd' = single-band delays (nsec) (1 real
                parameter per pol, antenna, spw)
              * 'mbd' = multi-band delay (nsec) (1 real
                parameter per pol, antenna, spw)
              * 'antpos' = antenna position corrections (m) (3
                real ITRF offset parameters per antenna; spw,
                pol selection will be ignored)
                With antenna='', this triggers an automated
                lookup of antenna positions for EVLA and ALMA.
              * 'antposvla' = antenna position corrections (m)
                specified in the old VLA-centric coordinate
                system
              * 'tsys' = Tsys from the SYSCAL table (ALMA)
              * 'evlagain' = EVLA switched-power gains
                (experimental)
              * 'opac' = Tropospheric opacity (1 real parameter
                per antenna, spw)
              * 'gc' = Antenna zenith-angle dependent gain
                curve (auto-lookup)
              * 'gceff' = Gain curve and efficiency
                (auto-lookup)
              * 'eff' = Antenna efficiency (auto-lookup)
              
                 Example: caltype='ph'
    infile    Input ancilliary file
              Subparameter of caltype='gc|gceff|tecim'
              Default: none
    spw       Select spectral window/channels
                        Default: '' (all spectral windows and channels)
              
                           Examples:
                           spw='0~2,4'; spectral windows 0,1,2,4 (all channels)
                           spw='<2';  spectral windows less than 2 (i.e. 0,1)
                           spw='0:5~61'; spw 0, channels 5 to 61
                           spw='0,10,3:3~45'; spw 0,10 all channels, spw
                           3 - chans 3 to 45.
                           spw='0~2:2~6'; spw 0,1,2 with channels 2
                           through 6 in each.
                           spw = '*:3~64'  channels 3 through 64 for all sp id's
                           spw = ' :3~64' will NOT work.
    antenna   Select data based on antenna/baseline
                                 Subparameter of selectdata=True
                                 Default: '' (all)
              
                                 If antenna string is a non-negative integer, it
                                 is assumed an antenna index, otherwise, it is
                                 assumed as an antenna name
              
                                     Examples: 
                                     antenna='5&6'; baseline between antenna
                                     index 5 and index 6.
                                     antenna='VA05&VA06'; baseline between VLA
                                     antenna 5 and 6.
                                     antenna='5&6;7&8'; baselines with
                                     indices 5-6 and 7-8
                                     antenna='5'; all baselines with antenna index
                                     5
                                     antenna='05'; all baselines with antenna
                                     number 05 (VLA old name)
                                     antenna='5,6,10'; all baselines with antennas
                                     5,6,10 index numbers
    pol       Polarization selection for specified parameters
              Default: pol='' (specified parameters apply to
              all polarizations)
              
                 Example: pol='R' (specified parameters to
                 apply to R only)
    parameter The calibration values
              
              The calibration parameters, specified as a list,
              to store in the caltable for the spw, antenna,
              and pol selection.  The required length of the
              list is determined by the caltype and the spw,
              antenna, pol selection.  One "set" of parameters
              (e.g., one value for 'amp', 'ph', etc., three
              values for 'antpos') specified the same value for
              all indicated spw, antenna, and pol.
              OR, 
              When specifying a long list of calibration
              parameter values, these should be ordered first
              (fastest) by pol (if pol!=''), then by antenna
              (if antenna!=''), and finally (sloweset) by spw
              (if spw!='').  Unspecified selection axes must
              not be enumerated in the parameter list
    uniform   Assume uniform calibration values across the array
              Subparameter of caltype='tsys'
               Default: True
               Options: True|False
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF GENCAL IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Specify Calibration Values of Various Types"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr'}, 'caltype': {'type': 'cStr'}, 'infile': {'type': 'cStr'}, 'spw': {'type': 'cStr'}, 'antenna': {'type': 'cStr'}, 'pol': {'type': 'cStr'}, 'parameter': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'uniform': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __parameter_dflt( self, glb ):
        return [  ]

    def __parameter( self, glb ):
        if 'parameter' in glb: return glb['parameter']
        return [  ]

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __pol_dflt( self, glb ):
        return ''

    def __pol( self, glb ):
        if 'pol' in glb: return glb['pol']
        return ''

    def __antenna_dflt( self, glb ):
        return ''

    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        return ''

    def __caltype_dflt( self, glb ):
        return ''

    def __caltype( self, glb ):
        if 'caltype' in glb: return glb['caltype']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __uniform_dflt( self, glb ):
        if self.__caltype( glb ) == "tsys": return bool(True)
        return None
    def __infile_dflt( self, glb ):
        if self.__caltype( glb ) == "tecim": return ""
        if self.__caltype( glb ) == "gc": return ""
        if self.__caltype( glb ) == "gceff": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __infile( self, glb ):
        if 'infile' in glb: return glb['infile']
        dflt = self.__infile_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __uniform( self, glb ):
        if 'uniform' in glb: return glb['uniform']
        dflt = self.__uniform_dflt( glb )
        if dflt is not None: return dflt
        return True

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __caltable_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input calibration table'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('caltable',pre,self.__to_string_(value),post,description))
    def __caltype_inp(self):
        out = self.__stdout or sys.stdout
        description = 'The calibration type: (amp, ph, sbd, mbd, antpos, antposvla, tsys, evlagain, opac, gc, gceff, eff, tecim)'
        value = self.__caltype( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltype': value},{'caltype': self.__schema['caltype']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('caltype',pre,self.__to_string_(value),post,description))
    def __infile_inp(self):
        out = self.__stdout or sys.stdout
        if self.__infile_dflt( self.__globals_( ) ) is not None:
             description = 'Input ancilliary file'
             value = self.__infile( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'infile': value},{'infile': self.__schema['infile']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-7.7s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('infile',pre,self.__to_string_(value),post,description))
    def __spw_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select spectral window/channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('spw',pre,self.__to_string_(value),post,description))
    def __antenna_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select data based on antenna/baseline'
        value = self.__antenna( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('antenna',pre,self.__to_string_(value),post,description))
    def __pol_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Calibration polarizations(s) selection'
        value = self.__pol( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'pol': value},{'pol': self.__schema['pol']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('pol',pre,self.__to_string_(value),post,description))
    def __parameter_inp(self):
        out = self.__stdout or sys.stdout
        description = 'The calibration values'
        value = self.__parameter( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'parameter': value},{'parameter': self.__schema['parameter']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('parameter',pre,self.__to_string_(value),post,description))
    def __uniform_inp(self):
        out = self.__stdout or sys.stdout
        if self.__uniform_dflt( self.__globals_( ) ) is not None:
             description = 'Assume uniform calibration values across the array'
             value = self.__uniform( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'uniform': value},{'uniform': self.__schema['uniform']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-7.7s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('uniform',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'infile' in glb: del glb['infile']
        if 'parameter' in glb: del glb['parameter']
        if 'vis' in glb: del glb['vis']
        if 'uniform' in glb: del glb['uniform']
        if 'caltype' in glb: del glb['caltype']
        if 'caltable' in glb: del glb['caltable']
        if 'pol' in glb: del glb['pol']
        if 'spw' in glb: del glb['spw']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__caltable_inp( )
        self.__caltype_inp( )
        self.__infile_inp( )
        self.__spw_inp( )
        self.__antenna_inp( )
        self.__pol_inp( )
        self.__parameter_inp( )
        self.__uniform_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("gencal.last"):
                filename = "gencal.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, caltable=None, caltype=None, infile=None, spw=None, antenna=None, pol=None, parameter=None, uniform=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('gencal.pre')
        _postfile = os.path.realpath('gencal.last')
        _return_result_ = None
        _arguments = [vis,caltable,caltype,infile,spw,antenna,pol,parameter,uniform]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if caltable is not None: local_global['caltable'] = caltable
            if caltype is not None: local_global['caltype'] = caltype
            if spw is not None: local_global['spw'] = spw
            if antenna is not None: local_global['antenna'] = antenna
            if pol is not None: local_global['pol'] = pol
            if parameter is not None: local_global['parameter'] = parameter

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['caltype'] = self.__caltype( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['antenna'] = self.__antenna( local_global )
            _invocation_parameters['pol'] = self.__pol( local_global )
            _invocation_parameters['parameter'] = self.__parameter( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['infile'] = self.__infile( _invocation_parameters ) if infile is None else infile
            _invocation_parameters['uniform'] = self.__uniform( _invocation_parameters ) if uniform is None else uniform

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['caltype'] = self.__caltype( self.__globals_( ) )
            _invocation_parameters['infile'] = self.__infile( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['pol'] = self.__pol( self.__globals_( ) )
            _invocation_parameters['parameter'] = self.__parameter( self.__globals_( ) )
            _invocation_parameters['uniform'] = self.__uniform( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#gencal( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _gencal_t( _invocation_parameters['vis'],_invocation_parameters['caltable'],_invocation_parameters['caltype'],_invocation_parameters['infile'],_invocation_parameters['spw'],_invocation_parameters['antenna'],_invocation_parameters['pol'],_invocation_parameters['parameter'],_invocation_parameters['uniform'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

gencal = _gencal( )

