##################### generated by xml-casa (v2) from bandpass.xml ##################
##################### 1eacafdbfadaa8036acad4811cad0e30 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import bandpass as _bandpass_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _bandpass:
    """
    bandpass ---- Calculates a bandpass calibration solution

    
    Determines the amplitude and phase as a function of frequency for each
    spectral window containing more than one channel.  Strong sources (or
    many observations of moderately strong sources) are needed to obtain
    accurate bandpass functions.  The two solution choices are: Individual
    antenna/based channel solutions 'B'; and a polynomial fit over the
    channels 'BPOLY'.  The 'B' solutions can determined at any specified
    time interval, and is recommended if each channel has good
    signal-to-noise.

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file
                default: non
                
                   Example: vis='ngc5921.ms'
    caltable    Name of output bandpass calibration table
                default: none
                
                   Example: caltable='ngc5921.bcal'
    field       Select field using field id(s) or field name(s)
                default: '' --> all fields
                
                Use 'go listobs' to obtain the list id's or
                names. If field string is a non-negative integer,
                it is assumed a field index,  otherwise, it is
                assumed a field name.
                
                   Examples:
                   field='0~2'; field ids 0,1,2
                   field='0,4,5~7'; field ids 0,4,5,6,7
                   field='3C286,3C295'; field named 3C286 and
                   3C295
                   field = '3,4C*'; field id 3, all names
                   starting with 4C
    spw         Select spectral window/channels
                
                Examples:
                spw='0~2,4'; spectral windows 0,1,2,4 (all
                channels)
                spw='<2';  spectral windows less than 2
                (i.e. 0,1)
                spw='0:5~61'; spw 0, channels 5 to 61,
                INCLUSIVE
                spw='*:5~61'; all spw with channels 5 to 61
                spw='0,10,3:3~45'; spw 0,10 all channels, spw
                3, channels 3 to 45.
                spw='0~2:2~6'; spw 0,1,2 with channels 2
                through 6 in each.
                spw='0:0~10;15~60'; spectral window 0 with
                channels 0-10,15-60. (NOTE ';' to separate
                channel selections)
                spw='0:0~10^2,1:20~30^5'; spw 0, channels
                0,2,4,6,8,10, spw 1, channels 20,25,30 
                type 'help par.selection' for more examples.
    intent      Select observing intent
                default: '' (no selection by intent)
                
                   Example: intent='*BANDPASS*'  (selects data
                   labelled with BANDPASS intent)
    selectdata  Other data selection parameters
                default: True
    timerange   Select data based on time range
                Subparameter of selectdata=True
                default = '' (all)
                
                   Examples:
                   timerange =
                   'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                   (Note: if YYYY/MM/DD is missing date defaults
                   to first day in data set.)
                   timerange='09:14:0~09:54:0' picks 40 min on
                   first day 
                   timerange= '25:00:00~27:30:00' picks 1 hr to 3
                   hr 30min on NEXT day
                   timerange='09:44:00' pick data within one
                   integration of time
                   timerange='>10:24:00' data after this time
    uvrange     Select data within uvrange (default units meters)
                Subparameter of selectdata=True
                default: '' (all)
                
                   Examples:
                   uvrange='0~1000klambda'; uvrange from 0-1000
                   kilo-lambda
                   uvrange='>4klambda';uvranges greater than 4
                   kilolambda
    antenna     Select data based on antenna/baseline
                Subparameter of selectdata=True
                default: '' (all)
                
                    Examples: 
                    antenna='5&6'; baseline between antenna
                    index 5 and index 6.
                    antenna='VA05&VA06'; baseline between VLA
                    antenna 5 and 6.
                    antenna='5&6;7&8'; baselines with
                    indices 5-6 and 7-8
                    antenna='5'; all baselines with antenna index
                    5
                    antenna='05'; all baselines with antenna
                    number 05 (VLA old name)
                    antenna='5,6,10'; all baselines with antennas
                    5,6,10 index numbers
                
                Note: just for antenna selection, an integer (or
                integer list) is converted to a string and
                matched against the antenna 'name' first. Only if
                that fails, the integer is matched with the
                antenna ID. The latter is the case for most
                observatories, where the antenna name is not
                strictly an integer.
    scan        Scan number range
                Subparameter of selectdata=True
                default: '' = all
                
                Check 'go listobs' to insure the scan numbers are
                in order.
    observation Select by observation ID(s)
                Subparameter of selectdata=True
                default: '' = all
                
                    Example: observation='0~2,4'
    msselect    Optional complex data selection (ignore for now)
    solint      Solution interval in time[,freq]
                default: 'inf' (~infinite, up to boundaries
                controlled by combine, with no pre-averaging in
                frequency)
                Options for time: 'inf' (~infinite), 'int' (per
                integration), any float or integer value with or
                without units
                Options for freq: an integer with 'ch' suffix
                will enforce pre-averaging by the specified
                number of channels. A numeric value suffixed with
                frequency units (e.g., 'Hz','kHz','MHz') will
                enforce pre-averaging by an integral number of
                channels amounting to no more than the specified
                bandwidth.
                
                   Examples: solint='1min'; solint='60s',
                   solint=60 --> 1 minute
                   solint='0s'; solint=0; solint='int' --> per
                   integration
                   solint='-1s'; solint='inf' --> ~infinite, up
                   to boundaries enforced by combine 
                   solint='inf,8Mhz' --> ~infinite in time, with
                   8MHz pre-average in freq 
                   solint='int,32ch' --> per-integration in time,
                   with 32-channel pre-average in freq
    combine     Data axes to combine for solving
                default: 'scan' --> solutions will break at obs,
                field, and spw boundaries but may extend over
                multiple scans (per obs, field and spw) up to
                solint.
                Options: '','obs','scan','spw',field', or any
                comma-separated combination in a single string.
                
                   Example: combine='scan,spw' --> extend
                   solutions over scan boundaries (up to the
                   solint), and combine spws for solving.
    refant      Reference antenna name(s); a prioritized list may be
                specified
                default: '' (no reference antenna)
                
                   Examples:
                   refant='13' (antenna with index 13) 
                   refant='VA04' (VLA antenna #4)
                   refant='EA02,EA23,EA13' (EVLA antenna EA02,
                   use EA23 and EA13 as alternates if/when EA02
                   drops out)
                
                Use 'go listobs' for antenna listing
    minblperant Minimum baselines _per antenna_ required for solve
                default: 4
                
                Antennas with fewer baselines are excluded from
                solutions. Amplitude solutions with fewer than 4
                baselines, and phase solutions with fewer than 3
                baselines are only trivially constrained, and are
                no better than baseline-based solutions.
                
                   example: minblperant=10 --> Antennas
                   participating on 10 or more baselines are
                   included in the solve.
    minsnr      Reject solutions below this SNR (only applies for
                bandtype = B)
                default: 3.0
    solnorm     Normalize bandpass amplitudes and phase for each spw,
                pol, ant, and timestamp
                default: False (no normalization)
    bandtype    Type of bandpass solution (B or BPOLY)
                default: 'B'
                
                'B' does a channel by channel solution for each
                specified spw. 
                'BPOLY' is somewhat experimental. It will fit an
                nth order polynomial for the amplitude and phase
                as a function of frequency. Only one fit is made
                for all specified spw, and edge channels should
                be omitted.
                Use taskname=plotcal in order to compare the
                results from B and BPOLY.
                
                   Example: bandtype='BPOLY'
    smodel      Point source Stokes parameters for source model.
    append      Append solutions to the (existing) table
                default: False (overwrite existing table or make
                new table)
                
                Append solutions to the (existing) table.
                Appended solutions must be derived from the same
                MS as the existing caltable, and solution spws
                must have the same meta-info (according to spw
                selection and solint) or be non-overlapping.
    fillgaps    Fill flagged solution channels by interpolation
                Subparameter of bandtype='B'  
                default: 0 (don't interpolate)
                
                   Example: fillgaps=3 (interpolate gaps 3
                   channels wide and narrower)
    degamp      Polynomial degree for BPOLY amplitude solution
                Subparameter of bandtype='BPOLY'
                default: 3
                
                   Example: degamp=2
    degphase    Polynomial degree for BPOLY phase solution
                Subparameter of bandtype='BPOLY'
                default: 3
                
                   Example: degphase=2
    visnorm     Normalize data prior to BPOLY solution
                Subparameter of bandtype='BPOLY'
                default: False
                
                   Example: visnorm=True
    maskcenter  Number of channels to avoid in center of each band
                Subparameter of bandtype='BPOLY'
                default: 0
                
                   Example: maskcenter=5 (BPOLY only)
    maskedge    Fraction of channels to avoid at each band edge (in %)
                Subparameter of bandtype='BPOLY'
                default: 5
                
                   Example: maskedge=3 (BPOLY only)
    docallib    Control means of specifying the caltables
                default: False --> Use gaintable, gainfield,
                interp, spwmap, calwt. 
                
                If True, specify a file containing cal library in
                callib
    callib      Cal Library filename
                Subparameter of callib=True
                
                If docallib=True, specify a file containing cal
                library directives
    gaintable   Gain calibration table(s) to apply on the fly
                Subparameter of callib=False
                default: '' (none)
                
                   Examples: gaintable='ngc5921.gcal'
                   gaintable=['ngc5921.ampcal','ngc5921.phcal']
    gainfield   Select a subset of calibrators from gaintable(s)
                Subparameter of callib=False
                default:'' --> all sources in table
                
                gaintable='nearest' --> nearest (on sky)
                available field in table. Otherwise, same syntax
                as field
                
                   Examples: 
                   gainfield='0~2,5' means use fields 0,1,2,5
                   from gaintable
                   gainfield=['0~3','4~6'] (for multiple
                   gaintables)
    interp      Interpolation parmameters (in time[,freq]) for each gaintable, as a list of strings.
                  Default: '' --> 'linear,linear' for all gaintable(s)
                  Options: Time: 'nearest', 'linear'
                           Freq: 'nearest', 'linear', 'cubic',
                           'spline'
                Specify a list of strings, aligned with the list of caltable specified
                in gaintable, that contain the required interpolation parameters
                for each caltable.
                * When frequency interpolation is relevant (B, Df,
                  Xf), separate time-dependent and freq-dependent
                  interp types with a comma (freq_after_ the
                  comma). 
                * Specifications for frequency are ignored when the
                  calibration table has no channel-dependence. 
                * Time-dependent interp options ending in 'PD'
                  enable a "phase delay" correction per spw for
                  non-channel-dependent calibration types.
                * For multi-obsId datasets, 'perobs' can be
                  appended to the time-dependent interpolation
                  specification to enforce obsId boundaries when
                  interpolating in time. 
                * Freq-dependent interp options can have 'flag' appended
                  to enforce channel-dependent flagging, and/or 'rel' 
                  appended to invoke relative frequency interpolation
                
                     Examples: 
                     interp='nearest' (in time, freq-dep will be
                     linear, if relevant)
                     interp='linear,cubic'  (linear in time, cubic
                     in freq)
                     interp='linearperobs,splineflag' (linear in
                     time per obsId, spline in freq with
                     channelized flagging)
                     interp='nearest,linearflagrel' (nearest in
                     time, linear in freq with with channelized 
                     flagging and relative-frequency interpolation)
                     interp=',spline'  (spline in freq; linear in
                     time by default)
                     interp=['nearest,spline','linear']  (for
                     multiple gaintables)
    spwmap      Spectral windows combinations to form for gaintables(s)
                Subparameter of callib=False
                default: [] (apply solutions from each spw to
                that spw only)
                
                   Examples:
                   spwmap=[0,0,1,1] means apply the caltable
                   solutions from spw = 0 to the spw 0,1 and spw
                   1 to spw 2,3.
                   spwmap=[[0,0,1,1],[0,1,0,1]] (for multiple
                   gaintables)
    parang      Apply parallactic angle correction
                default: False
                
                If True, apply the parallactic angle correction
                (required for polarization calibration)

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of bandpass in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Calculates a bandpass calibration solution"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr'}, 'field': {'type': 'cStr'}, 'spw': {'type': 'cStr'}, 'intent': {'type': 'cStr'}, 'selectdata': {'type': 'cBool'}, 'timerange': {'type': 'cStr'}, 'uvrange': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'antenna': {'type': 'cStr'}, 'scan': {'type': 'cStr'}, 'observation': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}]}, 'msselect': {'type': 'cStr'}, 'solint': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'combine': {'type': 'cStr'}, 'refant': {'type': 'cStr'}, 'minblperant': {'type': 'cInt'}, 'minsnr': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'solnorm': {'type': 'cBool'}, 'bandtype': {'type': 'cStr'}, 'smodel': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'append': {'type': 'cBool'}, 'fillgaps': {'type': 'cInt'}, 'degamp': {'type': 'cInt'}, 'degphase': {'type': 'cInt'}, 'visnorm': {'type': 'cBool'}, 'maskcenter': {'type': 'cInt'}, 'maskedge': {'type': 'cInt'}, 'docallib': {'type': 'cBool'}, 'callib': {'type': 'cStr'}, 'gaintable': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'gainfield': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'interp': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'spwmap': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'parang': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __solint_dflt( self, glb ):
        return 'inf'

    def __solint( self, glb ):
        if 'solint' in glb: return glb['solint']
        return 'inf'

    def __parang_dflt( self, glb ):
        return False

    def __parang( self, glb ):
        if 'parang' in glb: return glb['parang']
        return False

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __refant_dflt( self, glb ):
        return ''

    def __refant( self, glb ):
        if 'refant' in glb: return glb['refant']
        return ''

    def __solnorm_dflt( self, glb ):
        return False

    def __solnorm( self, glb ):
        if 'solnorm' in glb: return glb['solnorm']
        return False

    def __smodel_dflt( self, glb ):
        return [  ]

    def __smodel( self, glb ):
        if 'smodel' in glb: return glb['smodel']
        return [  ]

    def __combine_dflt( self, glb ):
        return 'scan'

    def __combine( self, glb ):
        if 'combine' in glb: return glb['combine']
        return 'scan'

    def __selectdata_dflt( self, glb ):
        return True

    def __selectdata( self, glb ):
        if 'selectdata' in glb: return glb['selectdata']
        return True

    def __minblperant_dflt( self, glb ):
        return int(4)

    def __minblperant( self, glb ):
        if 'minblperant' in glb: return glb['minblperant']
        return int(4)

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __minsnr_dflt( self, glb ):
        return float(3.0)

    def __minsnr( self, glb ):
        if 'minsnr' in glb: return glb['minsnr']
        return float(3.0)

    def __append_dflt( self, glb ):
        return False

    def __append( self, glb ):
        if 'append' in glb: return glb['append']
        return False

    def __intent_dflt( self, glb ):
        return ''

    def __intent( self, glb ):
        if 'intent' in glb: return glb['intent']
        return ''

    def __bandtype_dflt( self, glb ):
        return 'B'

    def __bandtype( self, glb ):
        if 'bandtype' in glb: return glb['bandtype']
        return 'B'

    def __docallib_dflt( self, glb ):
        return False

    def __docallib( self, glb ):
        if 'docallib' in glb: return glb['docallib']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __antenna_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __callib_dflt( self, glb ):
        if self.__docallib( glb ) == bool(True): return ""
        return None
    def __gainfield_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None
    def __fillgaps_dflt( self, glb ):
        if self.__bandtype( glb ) == "B": return int(0)
        return None
    def __msselect_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __spwmap_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None
    def __degamp_dflt( self, glb ):
        if self.__bandtype( glb ) == "BPOLY": return int(3)
        return None
    def __scan_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __maskcenter_dflt( self, glb ):
        if self.__bandtype( glb ) == "BPOLY": return int(0)
        return None
    def __interp_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None
    def __visnorm_dflt( self, glb ):
        if self.__bandtype( glb ) == "BPOLY": return bool(False)
        return None
    def __maskedge_dflt( self, glb ):
        if self.__bandtype( glb ) == "BPOLY": return int(0)
        return None
    def __uvrange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __degphase_dflt( self, glb ):
        if self.__bandtype( glb ) == "BPOLY": return int(3)
        return None
    def __observation_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __timerange_dflt( self, glb ):
        if self.__selectdata( glb ) == bool(True): return ""
        return None
    def __gaintable_dflt( self, glb ):
        if self.__docallib( glb ) == bool(False): return []
        return None

    #--------- return subparam values -------------------------------------------------
    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        dflt = self.__timerange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __uvrange( self, glb ):
        if 'uvrange' in glb: return glb['uvrange']
        dflt = self.__uvrange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        dflt = self.__antenna_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        dflt = self.__scan_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __observation( self, glb ):
        if 'observation' in glb: return glb['observation']
        dflt = self.__observation_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __msselect( self, glb ):
        if 'msselect' in glb: return glb['msselect']
        dflt = self.__msselect_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __fillgaps( self, glb ):
        if 'fillgaps' in glb: return glb['fillgaps']
        dflt = self.__fillgaps_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __degamp( self, glb ):
        if 'degamp' in glb: return glb['degamp']
        dflt = self.__degamp_dflt( glb )
        if dflt is not None: return dflt
        return int(3)
    def __degphase( self, glb ):
        if 'degphase' in glb: return glb['degphase']
        dflt = self.__degphase_dflt( glb )
        if dflt is not None: return dflt
        return int(3)
    def __visnorm( self, glb ):
        if 'visnorm' in glb: return glb['visnorm']
        dflt = self.__visnorm_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __maskcenter( self, glb ):
        if 'maskcenter' in glb: return glb['maskcenter']
        dflt = self.__maskcenter_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __maskedge( self, glb ):
        if 'maskedge' in glb: return glb['maskedge']
        dflt = self.__maskedge_dflt( glb )
        if dflt is not None: return dflt
        return int(5)
    def __callib( self, glb ):
        if 'callib' in glb: return glb['callib']
        dflt = self.__callib_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __gaintable( self, glb ):
        if 'gaintable' in glb: return glb['gaintable']
        dflt = self.__gaintable_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __gainfield( self, glb ):
        if 'gainfield' in glb: return glb['gainfield']
        dflt = self.__gainfield_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __interp( self, glb ):
        if 'interp' in glb: return glb['interp']
        dflt = self.__interp_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __spwmap( self, glb ):
        if 'spwmap' in glb: return glb['spwmap']
        dflt = self.__spwmap_dflt( glb )
        if dflt is not None: return dflt
        return [ ]

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __caltable_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of output bandpass calibration table'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('caltable',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select field using field id(s) or field name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __spw_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select spectral window/channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('spw',pre,self.__to_string_(value),post,description))
    def __intent_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select observing intent'
        value = self.__intent( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'intent': value},{'intent': self.__schema['intent']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('intent',pre,self.__to_string_(value),post,description))
    def __selectdata_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Other data selection parameters'
        value = self.__selectdata( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'selectdata': value},{'selectdata': self.__schema['selectdata']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('selectdata',pre,self.__to_string_(value),post,description))
    def __timerange_inp(self):
        out = self.__stdout or sys.stdout
        if self.__timerange_dflt( self.__globals_( ) ) is not None:
             description = 'Select data based on time range'
             value = self.__timerange( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('timerange',pre,self.__to_string_(value),post,description))
    def __uvrange_inp(self):
        out = self.__stdout or sys.stdout
        if self.__uvrange_dflt( self.__globals_( ) ) is not None:
             description = 'Select data within uvrange (default units meters)'
             value = self.__uvrange( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'uvrange': value},{'uvrange': self.__schema['uvrange']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('uvrange',pre,self.__to_string_(value),post,description))
    def __antenna_inp(self):
        out = self.__stdout or sys.stdout
        if self.__antenna_dflt( self.__globals_( ) ) is not None:
             description = 'Select data based on antenna/baseline'
             value = self.__antenna( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('antenna',pre,self.__to_string_(value),post,description))
    def __scan_inp(self):
        out = self.__stdout or sys.stdout
        if self.__scan_dflt( self.__globals_( ) ) is not None:
             description = 'Scan number range'
             value = self.__scan( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('scan',pre,self.__to_string_(value),post,description))
    def __observation_inp(self):
        out = self.__stdout or sys.stdout
        if self.__observation_dflt( self.__globals_( ) ) is not None:
             description = 'Select by observation ID(s)'
             value = self.__observation( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'observation': value},{'observation': self.__schema['observation']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('observation',pre,self.__to_string_(value),post,description))
    def __msselect_inp(self):
        out = self.__stdout or sys.stdout
        if self.__msselect_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__msselect( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'msselect': value},{'msselect': self.__schema['msselect']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('msselect',pre,self.__to_string_(value),post,description))
    def __solint_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Solution interval in time[,freq]'
        value = self.__solint( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'solint': value},{'solint': self.__schema['solint']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('solint',pre,self.__to_string_(value),post,description))
    def __combine_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Data axes which to combine for solve (obs, scan, spw, and/or field)'
        value = self.__combine( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'combine': value},{'combine': self.__schema['combine']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('combine',pre,self.__to_string_(value),post,description))
    def __refant_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Reference antenna name(s)'
        value = self.__refant( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'refant': value},{'refant': self.__schema['refant']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('refant',pre,self.__to_string_(value),post,description))
    def __minblperant_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Minimum baselines _per antenna_ required for solve'
        value = self.__minblperant( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'minblperant': value},{'minblperant': self.__schema['minblperant']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('minblperant',pre,self.__to_string_(value),post,description))
    def __minsnr_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Reject solutions below this SNR (only applies for bandtype = B)'
        value = self.__minsnr( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'minsnr': value},{'minsnr': self.__schema['minsnr']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('minsnr',pre,self.__to_string_(value),post,description))
    def __solnorm_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Normalize average solution amplitudes to 1.0 '
        value = self.__solnorm( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'solnorm': value},{'solnorm': self.__schema['solnorm']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('solnorm',pre,self.__to_string_(value),post,description))
    def __bandtype_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Type of bandpass solution (B or BPOLY)'
        value = self.__bandtype( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'bandtype': value},{'bandtype': self.__schema['bandtype']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('bandtype',pre,self.__to_string_(value),post,description))
    def __smodel_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Point source Stokes parameters for source model.'
        value = self.__smodel( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'smodel': value},{'smodel': self.__schema['smodel']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('smodel',pre,self.__to_string_(value),post,description))
    def __append_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Append solutions to the (existing) table'
        value = self.__append( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'append': value},{'append': self.__schema['append']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('append',pre,self.__to_string_(value),post,description))
    def __fillgaps_inp(self):
        out = self.__stdout or sys.stdout
        if self.__fillgaps_dflt( self.__globals_( ) ) is not None:
             description = 'Fill flagged solution channels by interpolation'
             value = self.__fillgaps( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'fillgaps': value},{'fillgaps': self.__schema['fillgaps']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('fillgaps',pre,self.__to_string_(value),post,description))
    def __degamp_inp(self):
        out = self.__stdout or sys.stdout
        if self.__degamp_dflt( self.__globals_( ) ) is not None:
             description = 'Polynomial degree for BPOLY amplitude solution'
             value = self.__degamp( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'degamp': value},{'degamp': self.__schema['degamp']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('degamp',pre,self.__to_string_(value),post,description))
    def __degphase_inp(self):
        out = self.__stdout or sys.stdout
        if self.__degphase_dflt( self.__globals_( ) ) is not None:
             description = 'Polynomial degree for BPOLY phase solution'
             value = self.__degphase( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'degphase': value},{'degphase': self.__schema['degphase']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('degphase',pre,self.__to_string_(value),post,description))
    def __visnorm_inp(self):
        out = self.__stdout or sys.stdout
        if self.__visnorm_dflt( self.__globals_( ) ) is not None:
             description = 'Normalize data prior to BPOLY solution'
             value = self.__visnorm( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'visnorm': value},{'visnorm': self.__schema['visnorm']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('visnorm',pre,self.__to_string_(value),post,description))
    def __maskcenter_inp(self):
        out = self.__stdout or sys.stdout
        if self.__maskcenter_dflt( self.__globals_( ) ) is not None:
             description = 'Number of channels to avoid in center of each band'
             value = self.__maskcenter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'maskcenter': value},{'maskcenter': self.__schema['maskcenter']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('maskcenter',pre,self.__to_string_(value),post,description))
    def __maskedge_inp(self):
        out = self.__stdout or sys.stdout
        if self.__maskedge_dflt( self.__globals_( ) ) is not None:
             description = 'Fraction of channels to avoid at each band edge (in %)'
             value = self.__maskedge( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'maskedge': value},{'maskedge': self.__schema['maskedge']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('maskedge',pre,self.__to_string_(value),post,description))
    def __docallib_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Use callib or traditional cal apply parameters'
        value = self.__docallib( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'docallib': value},{'docallib': self.__schema['docallib']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('docallib',pre,self.__to_string_(value),post,description))
    def __callib_inp(self):
        out = self.__stdout or sys.stdout
        if self.__callib_dflt( self.__globals_( ) ) is not None:
             description = 'Cal Library filename'
             value = self.__callib( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'callib': value},{'callib': self.__schema['callib']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('callib',pre,self.__to_string_(value),post,description))
    def __gaintable_inp(self):
        out = self.__stdout or sys.stdout
        if self.__gaintable_dflt( self.__globals_( ) ) is not None:
             description = 'Gain calibration table(s) to apply on the fly'
             value = self.__gaintable( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'gaintable': value},{'gaintable': self.__schema['gaintable']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('gaintable',pre,self.__to_string_(value),post,description))
    def __gainfield_inp(self):
        out = self.__stdout or sys.stdout
        if self.__gainfield_dflt( self.__globals_( ) ) is not None:
             description = 'Select a subset of calibrators from gaintable(s)'
             value = self.__gainfield( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'gainfield': value},{'gainfield': self.__schema['gainfield']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('gainfield',pre,self.__to_string_(value),post,description))
    def __interp_inp(self):
        out = self.__stdout or sys.stdout
        if self.__interp_dflt( self.__globals_( ) ) is not None:
             description = 'Interpolation parameters for each gaintable, as a list'
             value = self.__interp( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'interp': value},{'interp': self.__schema['interp']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('interp',pre,self.__to_string_(value),post,description))
    def __spwmap_inp(self):
        out = self.__stdout or sys.stdout
        if self.__spwmap_dflt( self.__globals_( ) ) is not None:
             description = 'Spectral windows combinations to form for gaintables(s)'
             value = self.__spwmap( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'spwmap': value},{'spwmap': self.__schema['spwmap']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-11.11s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('spwmap',pre,self.__to_string_(value),post,description))
    def __parang_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Apply parallactic angle correction'
        value = self.__parang( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'parang': value},{'parang': self.__schema['parang']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('parang',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'callib' in glb: del glb['callib']
        if 'gainfield' in glb: del glb['gainfield']
        if 'parang' in glb: del glb['parang']
        if 'fillgaps' in glb: del glb['fillgaps']
        if 'field' in glb: del glb['field']
        if 'msselect' in glb: del glb['msselect']
        if 'intent' in glb: del glb['intent']
        if 'spwmap' in glb: del glb['spwmap']
        if 'degamp' in glb: del glb['degamp']
        if 'refant' in glb: del glb['refant']
        if 'minsnr' in glb: del glb['minsnr']
        if 'bandtype' in glb: del glb['bandtype']
        if 'scan' in glb: del glb['scan']
        if 'vis' in glb: del glb['vis']
        if 'maskcenter' in glb: del glb['maskcenter']
        if 'minblperant' in glb: del glb['minblperant']
        if 'interp' in glb: del glb['interp']
        if 'visnorm' in glb: del glb['visnorm']
        if 'solnorm' in glb: del glb['solnorm']
        if 'maskedge' in glb: del glb['maskedge']
        if 'docallib' in glb: del glb['docallib']
        if 'combine' in glb: del glb['combine']
        if 'uvrange' in glb: del glb['uvrange']
        if 'solint' in glb: del glb['solint']
        if 'caltable' in glb: del glb['caltable']
        if 'degphase' in glb: del glb['degphase']
        if 'observation' in glb: del glb['observation']
        if 'smodel' in glb: del glb['smodel']
        if 'spw' in glb: del glb['spw']
        if 'selectdata' in glb: del glb['selectdata']
        if 'timerange' in glb: del glb['timerange']
        if 'gaintable' in glb: del glb['gaintable']
        if 'append' in glb: del glb['append']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__caltable_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__intent_inp( )
        self.__selectdata_inp( )
        self.__timerange_inp( )
        self.__uvrange_inp( )
        self.__antenna_inp( )
        self.__scan_inp( )
        self.__observation_inp( )
        self.__msselect_inp( )
        self.__solint_inp( )
        self.__combine_inp( )
        self.__refant_inp( )
        self.__minblperant_inp( )
        self.__minsnr_inp( )
        self.__solnorm_inp( )
        self.__bandtype_inp( )
        self.__smodel_inp( )
        self.__append_inp( )
        self.__fillgaps_inp( )
        self.__degamp_inp( )
        self.__degphase_inp( )
        self.__visnorm_inp( )
        self.__maskcenter_inp( )
        self.__maskedge_inp( )
        self.__docallib_inp( )
        self.__callib_inp( )
        self.__gaintable_inp( )
        self.__gainfield_inp( )
        self.__interp_inp( )
        self.__spwmap_inp( )
        self.__parang_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("bandpass.last"):
                filename = "bandpass.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, caltable=None, field=None, spw=None, intent=None, selectdata=None, timerange=None, uvrange=None, antenna=None, scan=None, observation=None, msselect=None, solint=None, combine=None, refant=None, minblperant=None, minsnr=None, solnorm=None, bandtype=None, smodel=None, append=None, fillgaps=None, degamp=None, degphase=None, visnorm=None, maskcenter=None, maskedge=None, docallib=None, callib=None, gaintable=None, gainfield=None, interp=None, spwmap=None, parang=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('bandpass.pre')
        _postfile = os.path.realpath('bandpass.last')
        _return_result_ = None
        _arguments = [vis,caltable,field,spw,intent,selectdata,timerange,uvrange,antenna,scan,observation,msselect,solint,combine,refant,minblperant,minsnr,solnorm,bandtype,smodel,append,fillgaps,degamp,degphase,visnorm,maskcenter,maskedge,docallib,callib,gaintable,gainfield,interp,spwmap,parang]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if caltable is not None: local_global['caltable'] = caltable
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if intent is not None: local_global['intent'] = intent
            if selectdata is not None: local_global['selectdata'] = selectdata
            if solint is not None: local_global['solint'] = solint
            if combine is not None: local_global['combine'] = combine
            if refant is not None: local_global['refant'] = refant
            if minblperant is not None: local_global['minblperant'] = minblperant
            if minsnr is not None: local_global['minsnr'] = minsnr
            if solnorm is not None: local_global['solnorm'] = solnorm
            if bandtype is not None: local_global['bandtype'] = bandtype
            if smodel is not None: local_global['smodel'] = smodel
            if append is not None: local_global['append'] = append
            if docallib is not None: local_global['docallib'] = docallib
            if parang is not None: local_global['parang'] = parang

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['intent'] = self.__intent( local_global )
            _invocation_parameters['selectdata'] = self.__selectdata( local_global )
            _invocation_parameters['solint'] = self.__solint( local_global )
            _invocation_parameters['combine'] = self.__combine( local_global )
            _invocation_parameters['refant'] = self.__refant( local_global )
            _invocation_parameters['minblperant'] = self.__minblperant( local_global )
            _invocation_parameters['minsnr'] = self.__minsnr( local_global )
            _invocation_parameters['solnorm'] = self.__solnorm( local_global )
            _invocation_parameters['bandtype'] = self.__bandtype( local_global )
            _invocation_parameters['smodel'] = self.__smodel( local_global )
            _invocation_parameters['append'] = self.__append( local_global )
            _invocation_parameters['docallib'] = self.__docallib( local_global )
            _invocation_parameters['parang'] = self.__parang( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['timerange'] = self.__timerange( _invocation_parameters ) if timerange is None else timerange
            _invocation_parameters['uvrange'] = self.__uvrange( _invocation_parameters ) if uvrange is None else uvrange
            _invocation_parameters['antenna'] = self.__antenna( _invocation_parameters ) if antenna is None else antenna
            _invocation_parameters['scan'] = self.__scan( _invocation_parameters ) if scan is None else scan
            _invocation_parameters['observation'] = self.__observation( _invocation_parameters ) if observation is None else observation
            _invocation_parameters['msselect'] = self.__msselect( _invocation_parameters ) if msselect is None else msselect
            _invocation_parameters['fillgaps'] = self.__fillgaps( _invocation_parameters ) if fillgaps is None else fillgaps
            _invocation_parameters['degamp'] = self.__degamp( _invocation_parameters ) if degamp is None else degamp
            _invocation_parameters['degphase'] = self.__degphase( _invocation_parameters ) if degphase is None else degphase
            _invocation_parameters['visnorm'] = self.__visnorm( _invocation_parameters ) if visnorm is None else visnorm
            _invocation_parameters['maskcenter'] = self.__maskcenter( _invocation_parameters ) if maskcenter is None else maskcenter
            _invocation_parameters['maskedge'] = self.__maskedge( _invocation_parameters ) if maskedge is None else maskedge
            _invocation_parameters['callib'] = self.__callib( _invocation_parameters ) if callib is None else callib
            _invocation_parameters['gaintable'] = self.__gaintable( _invocation_parameters ) if gaintable is None else gaintable
            _invocation_parameters['gainfield'] = self.__gainfield( _invocation_parameters ) if gainfield is None else gainfield
            _invocation_parameters['interp'] = self.__interp( _invocation_parameters ) if interp is None else interp
            _invocation_parameters['spwmap'] = self.__spwmap( _invocation_parameters ) if spwmap is None else spwmap

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
            _invocation_parameters['selectdata'] = self.__selectdata( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['uvrange'] = self.__uvrange( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
            _invocation_parameters['msselect'] = self.__msselect( self.__globals_( ) )
            _invocation_parameters['solint'] = self.__solint( self.__globals_( ) )
            _invocation_parameters['combine'] = self.__combine( self.__globals_( ) )
            _invocation_parameters['refant'] = self.__refant( self.__globals_( ) )
            _invocation_parameters['minblperant'] = self.__minblperant( self.__globals_( ) )
            _invocation_parameters['minsnr'] = self.__minsnr( self.__globals_( ) )
            _invocation_parameters['solnorm'] = self.__solnorm( self.__globals_( ) )
            _invocation_parameters['bandtype'] = self.__bandtype( self.__globals_( ) )
            _invocation_parameters['smodel'] = self.__smodel( self.__globals_( ) )
            _invocation_parameters['append'] = self.__append( self.__globals_( ) )
            _invocation_parameters['fillgaps'] = self.__fillgaps( self.__globals_( ) )
            _invocation_parameters['degamp'] = self.__degamp( self.__globals_( ) )
            _invocation_parameters['degphase'] = self.__degphase( self.__globals_( ) )
            _invocation_parameters['visnorm'] = self.__visnorm( self.__globals_( ) )
            _invocation_parameters['maskcenter'] = self.__maskcenter( self.__globals_( ) )
            _invocation_parameters['maskedge'] = self.__maskedge( self.__globals_( ) )
            _invocation_parameters['docallib'] = self.__docallib( self.__globals_( ) )
            _invocation_parameters['callib'] = self.__callib( self.__globals_( ) )
            _invocation_parameters['gaintable'] = self.__gaintable( self.__globals_( ) )
            _invocation_parameters['gainfield'] = self.__gainfield( self.__globals_( ) )
            _invocation_parameters['interp'] = self.__interp( self.__globals_( ) )
            _invocation_parameters['spwmap'] = self.__spwmap( self.__globals_( ) )
            _invocation_parameters['parang'] = self.__parang( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#bandpass( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _bandpass_t( _invocation_parameters['vis'],_invocation_parameters['caltable'],_invocation_parameters['field'],_invocation_parameters['spw'],_invocation_parameters['intent'],_invocation_parameters['selectdata'],_invocation_parameters['timerange'],_invocation_parameters['uvrange'],_invocation_parameters['antenna'],_invocation_parameters['scan'],_invocation_parameters['observation'],_invocation_parameters['msselect'],_invocation_parameters['solint'],_invocation_parameters['combine'],_invocation_parameters['refant'],_invocation_parameters['minblperant'],_invocation_parameters['minsnr'],_invocation_parameters['solnorm'],_invocation_parameters['bandtype'],_invocation_parameters['smodel'],_invocation_parameters['append'],_invocation_parameters['fillgaps'],_invocation_parameters['degamp'],_invocation_parameters['degphase'],_invocation_parameters['visnorm'],_invocation_parameters['maskcenter'],_invocation_parameters['maskedge'],_invocation_parameters['docallib'],_invocation_parameters['callib'],_invocation_parameters['gaintable'],_invocation_parameters['gainfield'],_invocation_parameters['interp'],_invocation_parameters['spwmap'],_invocation_parameters['parang'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

bandpass = _bandpass( )

