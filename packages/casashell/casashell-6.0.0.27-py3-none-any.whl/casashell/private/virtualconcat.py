##################### generated by xml-casa (v2) from virtualconcat.xml #############
##################### ecad3c267150569eb7c6cc420a73fca8 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import virtualconcat as _virtualconcat_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _virtualconcat:
    """
    virtualconcat ---- Concatenate several visibility data sets into a multi-MS

    --------- parameter descriptions ---------------------------------------------

    vis            List of names of input visibility files to be concatenated
    concatvis      Name of the output visibility file (a multi-MS)
    freqtol        Frequency shift tolerance for considering data as the same spwid
    dirtol         Direction shift tolerance for considering data as the same field
    respectname    If true, fields with a different name are not merged even if their direction agrees
    visweightscale List of the weight scaling factors to be applied to the individual MSs
    keepcopy       If true, a copy of the input MSs is kept in their original place.
    copypointing   If true, keep the POINTING table information in the output MMS. If false, don\'t.

    --------- examples -----------------------------------------------------------

    
    
    The list of data sets given in the vis argument are moved into an output
    multi-MS data set concatvis and virtually concatenated.
    
    NOTE: This task will modify the input datasets by moving them and reindexing them.
    If you want to keep a copy of your original data, please set the parameter
    keepcopy to True.
    
    There is no limit to the number of input data sets.
    
    If none of the input data sets have any scratch columns (model and corrected
    columns), none are created in the concatvis.  Otherwise these columns are
    created on output and initialized to their default value (1 in model column,
    data in corrected column) for those data with no input columns.
    
    Spectral windows for each data set with the same chanelization, and within a
    specified frequency tolerance of another data set will be combined into one
    spectral window.
    
    A field position in one data set that is within a specified direction tolerance
    of another field position in any other data set will be combined into one
    field.  The field names need not be the same---only their position is used.
    
    Each appended dataset is assigned a new observation id if the corresponding
    rows in the observation table are not the same.
    
    Keyword arguments:
    vis -- Name of input visibility files to be combined
    default: none; example: vis = ['src2.ms','ngc5921.ms','ngc315.ms']
    concatvis -- Name of visibility file that will contain the concatenated data
    note: if this file exits on disk then the input files are
    added to this file.  Otherwise the new file contains
    the concatenated data.  Be careful here when concatenating to
    an existing file.
    default: none; example: concatvis='src2.ms'
    example: concatvis='outvis.ms'
    
    other examples:
    virtualconcat(vis=['src2.ms','ngc5921.ms'], concatvis='out.mms')
    will concatenate 'ngc5921.ms' and 'src2.ms' into a file named
    'out.mms'; the original 'ngc5921.ms' and 'src2.ms' are gone.
    'out.mms' is a multims. As most of the data is only moved, not
    copied, this is faster and subsequent tasks can run in parallel
    on the subMSs of out.mms.
    virtualconcat(vis=['src2.ms','ngc5921.ms'], concatvis='out.mms', keepcopy=True)
    will concatenate 'ngc5921.ms' and 'src2.ms' into a file named
    'out.mms'; the original 'ngc5921.ms' and 'src2.ms' are as before
    but you consume more disk space and time for the copy.
    .
    
    Note: run flagmanager to save flags in the concatvis
    
    freqtol -- Frequency shift tolerance for considering data to be in the same
    spwid.  The number of channels must also be the same.
    default: ''  do not combine unless frequencies are equal
    example: freqtol='10MHz' will not combine spwid unless they are
    within 10 MHz.
    Note: This option is useful to conbine spectral windows with very slight
    frequency differences caused by Doppler tracking, for example.
    
    dirtol -- Direction shift tolerance for considering data as the same field
    default: '' means always combine.
    example: dirtol='1.arcsec' will not combine data for a field unless
    their phase center differ by less than 1 arcsec.  If the field names
    are different in the input data sets, the name in the output data
    set will be the first relevant data set in the list.
    
    respectname -- If true, fields with a different name are not merged even if their
    direction agrees (within dirtol).
    default: True
    
    visweightscale -- The weights of the individual MSs will be scaled in the concatenated
    output MS by the factors in this list. Useful for handling heterogeneous arrays.
    Use plotms to inspect the "Wt" column as a reference for determining the scaling
    factors. See the cookbook for more details.
    example: [1.,3.,3.] - scale the weights of the second and third MS by a factor 3.
    default: [] (empty list) - no scaling
    
    keepcopy -- If true, a copy of the input MSs is kept in their original place.
    default: false
    
    copypointing -- If true, the POINTING table information will be present in the output.
    If false, the result is an empty POINTING table.
    default: true


    """

    _info_group_ = """utility, manipulation"""
    _info_desc_ = """Concatenate several visibility data sets into a multi-MS"""

    __schema = {'vis': {'type': 'cReqPathVec', 'coerce': [_coerce.to_list,_coerce.expand_pathvec]}, 'concatvis': {'type': 'cStr'}, 'freqtol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'dirtol': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'respectname': {'type': 'cBool'}, 'visweightscale': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'keepcopy': {'type': 'cBool'}, 'copypointing': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __dirtol_dflt( self, glb ):
        return ''

    def __dirtol( self, glb ):
        if 'dirtol' in glb: return glb['dirtol']
        return ''

    def __vis_dflt( self, glb ):
        return [  ]

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return [  ]

    def __respectname_dflt( self, glb ):
        return True

    def __respectname( self, glb ):
        if 'respectname' in glb: return glb['respectname']
        return True

    def __visweightscale_dflt( self, glb ):
        return [  ]

    def __visweightscale( self, glb ):
        if 'visweightscale' in glb: return glb['visweightscale']
        return [  ]

    def __concatvis_dflt( self, glb ):
        return ''

    def __concatvis( self, glb ):
        if 'concatvis' in glb: return glb['concatvis']
        return ''

    def __copypointing_dflt( self, glb ):
        return True

    def __copypointing( self, glb ):
        if 'copypointing' in glb: return glb['copypointing']
        return True

    def __keepcopy_dflt( self, glb ):
        return False

    def __keepcopy( self, glb ):
        if 'keepcopy' in glb: return glb['keepcopy']
        return False

    def __freqtol_dflt( self, glb ):
        return ''

    def __freqtol( self, glb ):
        if 'freqtol' in glb: return glb['freqtol']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __concatvis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__concatvis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'concatvis': value},{'concatvis': self.__schema['concatvis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('concatvis',pre,self.__to_string_(value),post,description))
    def __freqtol_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__freqtol( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'freqtol': value},{'freqtol': self.__schema['freqtol']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('freqtol',pre,self.__to_string_(value),post,description))
    def __dirtol_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__dirtol( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'dirtol': value},{'dirtol': self.__schema['dirtol']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('dirtol',pre,self.__to_string_(value),post,description))
    def __respectname_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__respectname( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'respectname': value},{'respectname': self.__schema['respectname']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('respectname',pre,self.__to_string_(value),post,description))
    def __visweightscale_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__visweightscale( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'visweightscale': value},{'visweightscale': self.__schema['visweightscale']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('visweightscale',pre,self.__to_string_(value),post,description))
    def __keepcopy_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__keepcopy( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'keepcopy': value},{'keepcopy': self.__schema['keepcopy']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('keepcopy',pre,self.__to_string_(value),post,description))
    def __copypointing_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__copypointing( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'copypointing': value},{'copypointing': self.__schema['copypointing']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-14.14s = %s%-23.22s%s # %-.60s\n' % ('copypointing',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'dirtol' in glb: del glb['dirtol']
        if 'concatvis' in glb: del glb['concatvis']
        if 'freqtol' in glb: del glb['freqtol']
        if 'vis' in glb: del glb['vis']
        if 'visweightscale' in glb: del glb['visweightscale']
        if 'respectname' in glb: del glb['respectname']
        if 'copypointing' in glb: del glb['copypointing']
        if 'keepcopy' in glb: del glb['keepcopy']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__concatvis_inp( )
        self.__freqtol_inp( )
        self.__dirtol_inp( )
        self.__respectname_inp( )
        self.__visweightscale_inp( )
        self.__keepcopy_inp( )
        self.__copypointing_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("virtualconcat.last"):
                filename = "virtualconcat.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, concatvis=None, freqtol=None, dirtol=None, respectname=None, visweightscale=None, keepcopy=None, copypointing=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('virtualconcat.pre')
        _postfile = os.path.realpath('virtualconcat.last')
        _return_result_ = None
        _arguments = [vis,concatvis,freqtol,dirtol,respectname,visweightscale,keepcopy,copypointing]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if concatvis is not None: local_global['concatvis'] = concatvis
            if freqtol is not None: local_global['freqtol'] = freqtol
            if dirtol is not None: local_global['dirtol'] = dirtol
            if respectname is not None: local_global['respectname'] = respectname
            if visweightscale is not None: local_global['visweightscale'] = visweightscale
            if keepcopy is not None: local_global['keepcopy'] = keepcopy
            if copypointing is not None: local_global['copypointing'] = copypointing

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['concatvis'] = self.__concatvis( local_global )
            _invocation_parameters['freqtol'] = self.__freqtol( local_global )
            _invocation_parameters['dirtol'] = self.__dirtol( local_global )
            _invocation_parameters['respectname'] = self.__respectname( local_global )
            _invocation_parameters['visweightscale'] = self.__visweightscale( local_global )
            _invocation_parameters['keepcopy'] = self.__keepcopy( local_global )
            _invocation_parameters['copypointing'] = self.__copypointing( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['concatvis'] = self.__concatvis( self.__globals_( ) )
            _invocation_parameters['freqtol'] = self.__freqtol( self.__globals_( ) )
            _invocation_parameters['dirtol'] = self.__dirtol( self.__globals_( ) )
            _invocation_parameters['respectname'] = self.__respectname( self.__globals_( ) )
            _invocation_parameters['visweightscale'] = self.__visweightscale( self.__globals_( ) )
            _invocation_parameters['keepcopy'] = self.__keepcopy( self.__globals_( ) )
            _invocation_parameters['copypointing'] = self.__copypointing( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-14s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#virtualconcat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _virtualconcat_t( _invocation_parameters['vis'],_invocation_parameters['concatvis'],_invocation_parameters['freqtol'],_invocation_parameters['dirtol'],_invocation_parameters['respectname'],_invocation_parameters['visweightscale'],_invocation_parameters['keepcopy'],_invocation_parameters['copypointing'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

virtualconcat = _virtualconcat( )

