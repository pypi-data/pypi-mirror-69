##################### generated by xml-casa (v2) from slsearch.xml ##################
##################### 4ab9f10f3c9e46b015bf636da44a705c ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import slsearch as _slsearch_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _slsearch:
    """
    slsearch ---- Search a spectral line table.

    --------- parameter descriptions ---------------------------------------------

    tablename  Input spectral line table name to search. If not specified, use the default table in the system.
    outfile    Results table name. Blank means do not write the table to disk.
    freqrange  Frequency range in GHz.
    species    Species to search for.
    reconly    List only NRAO recommended frequencies.
    chemnames  Chemical names to search for.
    qns        Resolved quantum numbers to search for.
    intensity  CDMS/JPL intensity range. -1 -> do not use an intensity range.
    smu2       Quantum mechanical line strength. -1 -> do not use a smu2 range.
    loga       log(A) (Einstein coefficient) range. -1 -> do not use a loga range.
    el         Lower energy state range in Kelvin. -1 -> do not use an el range.
    eu         Upper energy state range in Kelvin. -1 -> do not use an eu range.
    rrlinclude Include RRLs in the result set?
    rrlonly    Include only RRLs in the result set?
    verbose    List result set to logger (and optionally logfile)?
    logfile    List result set to this logfile (only used if verbose=True).
    append     If true, append to logfile if it already exists, if false overwrite logfile it it exists. Only used if verbose=True and logfile not blank.
    [1;42mRETURNS[1;m       bool

    --------- examples -----------------------------------------------------------

    
    
    PARAMETER SUMMARY
    
    tablename      Input spectral line table name to search. If not specified, use the default table in the system.
    outfile        Results table name. Blank means do not write the table to disk.
    freqrange      Frequency range in GHz.
    species        Species to search for.
    reconly        List only NRAO recommended frequencies.
    chemnames      Chemical names to search for.
    qns            Resolved quantum numbers to search for.
    intensity      CDMS/JPL intensity range. -1 -> do not use an intensity range.
    smu2           S*mu*mu range in Debye**2. -1 -> do not use an S*mu*mu range.
    loga           log(A) (Einstein coefficient) range. -1 -> do not use a loga range.
    el             Lower energy state range in Kelvin. -1 -> do not use an el range.
    eu             Upper energy state range in Kelvin. -1 -> do not use an eu range.
    rrlinclude     Include RRLs in the result set?
    rrlonly        Include only RRLs in the result set?
    verbose        List result set to logger (and optionally logfile)?
    logfile        List result set to this logfile (only used if verbose=True).
    append         If true, append to logfile if it already exists, if false overwrite logfile it it exists. Only used if verbose=True and logfile not blank.
    
    Search the specfied spectral line table. The results table can be written to disk by specifying its name in the outfile parameter.
    If outfile is not specified (ie outfile=""), no table is created. Because Splatalogue does not have values for intensity, smu2,
    loga, eu, and el for radio recombination lines (rrls), one must specify to include RRLs in the specified frequency range in the
    output. In this case, RRLs will be included ignoring any filters on intensity, smu2, loga, eu, and el. One can also specify to
    list only RRLs. One can specify to list the search results to the logger via the verbose parameter. If verbose is False, no
    logger output is listed. If verbose=True, one can also specify that the results be listed to a logfile and if this file already
    exists, one can specify that the results be appended to it or to overwrite it with the results.
    
    # put search results in a table but do not list to the logger
    slsearch("myspectrallines.tbl", verbose=False)


    """

    _info_group_ = """analysis"""
    _info_desc_ = """Search a spectral line table."""

    __schema = {'tablename': {'type': 'cPath', 'coerce': _coerce.expand_path}, 'outfile': {'type': 'cStr'}, 'freqrange': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'species': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'reconly': {'type': 'cBool'}, 'chemnames': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'qns': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'intensity': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'smu2': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'loga': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'el': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'eu': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'rrlinclude': {'type': 'cBool'}, 'rrlonly': {'type': 'cBool'}, 'verbose': {'type': 'cBool'}, 'logfile': {'type': 'cStr'}, 'append': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __species_dflt( self, glb ):
        return [  ]

    def __species( self, glb ):
        if 'species' in glb: return glb['species']
        return [  ]

    def __rrlinclude_dflt( self, glb ):
        return True

    def __rrlinclude( self, glb ):
        if 'rrlinclude' in glb: return glb['rrlinclude']
        return True

    def __reconly_dflt( self, glb ):
        return False

    def __reconly( self, glb ):
        if 'reconly' in glb: return glb['reconly']
        return False

    def __outfile_dflt( self, glb ):
        return ''

    def __outfile( self, glb ):
        if 'outfile' in glb: return glb['outfile']
        return ''

    def __tablename_dflt( self, glb ):
        return ''

    def __tablename( self, glb ):
        if 'tablename' in glb: return glb['tablename']
        return ''

    def __rrlonly_dflt( self, glb ):
        return False

    def __rrlonly( self, glb ):
        if 'rrlonly' in glb: return glb['rrlonly']
        return False

    def __qns_dflt( self, glb ):
        return [  ]

    def __qns( self, glb ):
        if 'qns' in glb: return glb['qns']
        return [  ]

    def __freqrange_dflt( self, glb ):
        return [ float(84),float(90) ]

    def __freqrange( self, glb ):
        if 'freqrange' in glb: return glb['freqrange']
        return [ float(84),float(90) ]

    def __chemnames_dflt( self, glb ):
        return [  ]

    def __chemnames( self, glb ):
        if 'chemnames' in glb: return glb['chemnames']
        return [  ]

    def __verbose_dflt( self, glb ):
        return False

    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __eu_dflt( self, glb ):
        if self.__rrlonly( glb ) == bool(False): return []
        return None
    def __smu2_dflt( self, glb ):
        if self.__rrlonly( glb ) == bool(False): return []
        return None
    def __el_dflt( self, glb ):
        if self.__rrlonly( glb ) == bool(False): return []
        return None
    def __logfile_dflt( self, glb ):
        if self.__verbose( glb ) == bool(True): return ""
        return None
    def __intensity_dflt( self, glb ):
        if self.__rrlonly( glb ) == bool(False): return []
        return None
    def __loga_dflt( self, glb ):
        if self.__rrlonly( glb ) == bool(False): return []
        return None
    def __append_dflt( self, glb ):
        if self.__verbose( glb ) == bool(True): return bool(True)
        return None

    #--------- return subparam values -------------------------------------------------
    def __intensity( self, glb ):
        if 'intensity' in glb: return glb['intensity']
        dflt = self.__intensity_dflt( glb )
        if dflt is not None: return dflt
        return [ float(-1) ]
    def __smu2( self, glb ):
        if 'smu2' in glb: return glb['smu2']
        dflt = self.__smu2_dflt( glb )
        if dflt is not None: return dflt
        return [ float(-1) ]
    def __loga( self, glb ):
        if 'loga' in glb: return glb['loga']
        dflt = self.__loga_dflt( glb )
        if dflt is not None: return dflt
        return [ float(-1) ]
    def __el( self, glb ):
        if 'el' in glb: return glb['el']
        dflt = self.__el_dflt( glb )
        if dflt is not None: return dflt
        return [ float(-1) ]
    def __eu( self, glb ):
        if 'eu' in glb: return glb['eu']
        dflt = self.__eu_dflt( glb )
        if dflt is not None: return dflt
        return [ float(-1) ]
    def __logfile( self, glb ):
        if 'logfile' in glb: return glb['logfile']
        dflt = self.__logfile_dflt( glb )
        if dflt is not None: return dflt
        return '""'
    def __append( self, glb ):
        if 'append' in glb: return glb['append']
        dflt = self.__append_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __tablename_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__tablename( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'tablename': value},{'tablename': self.__schema['tablename']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('tablename',pre,self.__to_string_(value),post,description))
    def __outfile_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__outfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'outfile': value},{'outfile': self.__schema['outfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('outfile',pre,self.__to_string_(value),post,description))
    def __freqrange_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__freqrange( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'freqrange': value},{'freqrange': self.__schema['freqrange']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('freqrange',pre,self.__to_string_(value),post,description))
    def __species_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__species( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'species': value},{'species': self.__schema['species']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('species',pre,self.__to_string_(value),post,description))
    def __reconly_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__reconly( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'reconly': value},{'reconly': self.__schema['reconly']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('reconly',pre,self.__to_string_(value),post,description))
    def __chemnames_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__chemnames( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'chemnames': value},{'chemnames': self.__schema['chemnames']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('chemnames',pre,self.__to_string_(value),post,description))
    def __qns_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__qns( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'qns': value},{'qns': self.__schema['qns']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('qns',pre,self.__to_string_(value),post,description))
    def __intensity_inp(self):
        out = self.__stdout or sys.stdout
        if self.__intensity_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__intensity( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'intensity': value},{'intensity': self.__schema['intensity']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('intensity',pre,self.__to_string_(value),post,description))
    def __smu2_inp(self):
        out = self.__stdout or sys.stdout
        if self.__smu2_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__smu2( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'smu2': value},{'smu2': self.__schema['smu2']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('smu2',pre,self.__to_string_(value),post,description))
    def __loga_inp(self):
        out = self.__stdout or sys.stdout
        if self.__loga_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__loga( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'loga': value},{'loga': self.__schema['loga']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('loga',pre,self.__to_string_(value),post,description))
    def __el_inp(self):
        out = self.__stdout or sys.stdout
        if self.__el_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__el( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'el': value},{'el': self.__schema['el']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('el',pre,self.__to_string_(value),post,description))
    def __eu_inp(self):
        out = self.__stdout or sys.stdout
        if self.__eu_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__eu( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'eu': value},{'eu': self.__schema['eu']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('eu',pre,self.__to_string_(value),post,description))
    def __rrlinclude_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__rrlinclude( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'rrlinclude': value},{'rrlinclude': self.__schema['rrlinclude']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-12.12s = %s%-23.22s%s # %-.60s\n' % ('rrlinclude',pre,self.__to_string_(value),post,description))
    def __rrlonly_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__rrlonly( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'rrlonly': value},{'rrlonly': self.__schema['rrlonly']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('rrlonly',pre,self.__to_string_(value),post,description))
    def __verbose_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-12.12s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('verbose',pre,self.__to_string_(value),post,description))
    def __logfile_inp(self):
        out = self.__stdout or sys.stdout
        if self.__logfile_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__logfile( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'logfile': value},{'logfile': self.__schema['logfile']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('logfile',pre,self.__to_string_(value),post,description))
    def __append_inp(self):
        out = self.__stdout or sys.stdout
        if self.__append_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__append( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'append': value},{'append': self.__schema['append']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('append',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'species' in glb: del glb['species']
        if 'chemnames' in glb: del glb['chemnames']
        if 'outfile' in glb: del glb['outfile']
        if 'eu' in glb: del glb['eu']
        if 'verbose' in glb: del glb['verbose']
        if 'rrlonly' in glb: del glb['rrlonly']
        if 'smu2' in glb: del glb['smu2']
        if 'el' in glb: del glb['el']
        if 'reconly' in glb: del glb['reconly']
        if 'freqrange' in glb: del glb['freqrange']
        if 'logfile' in glb: del glb['logfile']
        if 'intensity' in glb: del glb['intensity']
        if 'tablename' in glb: del glb['tablename']
        if 'rrlinclude' in glb: del glb['rrlinclude']
        if 'loga' in glb: del glb['loga']
        if 'qns' in glb: del glb['qns']
        if 'append' in glb: del glb['append']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__tablename_inp( )
        self.__outfile_inp( )
        self.__freqrange_inp( )
        self.__species_inp( )
        self.__reconly_inp( )
        self.__chemnames_inp( )
        self.__qns_inp( )
        self.__intensity_inp( )
        self.__smu2_inp( )
        self.__loga_inp( )
        self.__el_inp( )
        self.__eu_inp( )
        self.__rrlinclude_inp( )
        self.__rrlonly_inp( )
        self.__verbose_inp( )
        self.__logfile_inp( )
        self.__append_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("slsearch.last"):
                filename = "slsearch.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, tablename=None, outfile=None, freqrange=None, species=None, reconly=None, chemnames=None, qns=None, intensity=None, smu2=None, loga=None, el=None, eu=None, rrlinclude=None, rrlonly=None, verbose=None, logfile=None, append=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('slsearch.pre')
        _postfile = os.path.realpath('slsearch.last')
        _return_result_ = None
        _arguments = [tablename,outfile,freqrange,species,reconly,chemnames,qns,intensity,smu2,loga,el,eu,rrlinclude,rrlonly,verbose,logfile,append]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if tablename is not None: local_global['tablename'] = tablename
            if outfile is not None: local_global['outfile'] = outfile
            if freqrange is not None: local_global['freqrange'] = freqrange
            if species is not None: local_global['species'] = species
            if reconly is not None: local_global['reconly'] = reconly
            if chemnames is not None: local_global['chemnames'] = chemnames
            if qns is not None: local_global['qns'] = qns
            if rrlinclude is not None: local_global['rrlinclude'] = rrlinclude
            if rrlonly is not None: local_global['rrlonly'] = rrlonly
            if verbose is not None: local_global['verbose'] = verbose

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['tablename'] = self.__tablename( local_global )
            _invocation_parameters['outfile'] = self.__outfile( local_global )
            _invocation_parameters['freqrange'] = self.__freqrange( local_global )
            _invocation_parameters['species'] = self.__species( local_global )
            _invocation_parameters['reconly'] = self.__reconly( local_global )
            _invocation_parameters['chemnames'] = self.__chemnames( local_global )
            _invocation_parameters['qns'] = self.__qns( local_global )
            _invocation_parameters['rrlinclude'] = self.__rrlinclude( local_global )
            _invocation_parameters['rrlonly'] = self.__rrlonly( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['intensity'] = self.__intensity( _invocation_parameters ) if intensity is None else intensity
            _invocation_parameters['smu2'] = self.__smu2( _invocation_parameters ) if smu2 is None else smu2
            _invocation_parameters['loga'] = self.__loga( _invocation_parameters ) if loga is None else loga
            _invocation_parameters['el'] = self.__el( _invocation_parameters ) if el is None else el
            _invocation_parameters['eu'] = self.__eu( _invocation_parameters ) if eu is None else eu
            _invocation_parameters['logfile'] = self.__logfile( _invocation_parameters ) if logfile is None else logfile
            _invocation_parameters['append'] = self.__append( _invocation_parameters ) if append is None else append

        else:
            # invoke with inp/go semantics
            _invocation_parameters['tablename'] = self.__tablename( self.__globals_( ) )
            _invocation_parameters['outfile'] = self.__outfile( self.__globals_( ) )
            _invocation_parameters['freqrange'] = self.__freqrange( self.__globals_( ) )
            _invocation_parameters['species'] = self.__species( self.__globals_( ) )
            _invocation_parameters['reconly'] = self.__reconly( self.__globals_( ) )
            _invocation_parameters['chemnames'] = self.__chemnames( self.__globals_( ) )
            _invocation_parameters['qns'] = self.__qns( self.__globals_( ) )
            _invocation_parameters['intensity'] = self.__intensity( self.__globals_( ) )
            _invocation_parameters['smu2'] = self.__smu2( self.__globals_( ) )
            _invocation_parameters['loga'] = self.__loga( self.__globals_( ) )
            _invocation_parameters['el'] = self.__el( self.__globals_( ) )
            _invocation_parameters['eu'] = self.__eu( self.__globals_( ) )
            _invocation_parameters['rrlinclude'] = self.__rrlinclude( self.__globals_( ) )
            _invocation_parameters['rrlonly'] = self.__rrlonly( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
            _invocation_parameters['append'] = self.__append( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#slsearch( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _slsearch_t( _invocation_parameters['tablename'],_invocation_parameters['outfile'],_invocation_parameters['freqrange'],_invocation_parameters['species'],_invocation_parameters['reconly'],_invocation_parameters['chemnames'],_invocation_parameters['qns'],_invocation_parameters['intensity'],_invocation_parameters['smu2'],_invocation_parameters['loga'],_invocation_parameters['el'],_invocation_parameters['eu'],_invocation_parameters['rrlinclude'],_invocation_parameters['rrlonly'],_invocation_parameters['verbose'],_invocation_parameters['logfile'],_invocation_parameters['append'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

slsearch = _slsearch( )

