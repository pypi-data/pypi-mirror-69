##################### generated by xml-casa (v2) from fixplanets.xml ################
##################### 812738ebd5dcb426dc195a9311a854f2 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import fixplanets as _fixplanets_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _fixplanets:
    """
    fixplanets ---- Changes FIELD and SOURCE table entries based on user-provided direction or POINTING table, optionally fixes the UVW coordinates

    
    This task's main purpose is to correct observations which were
    performed with correct pointing and correlation but for which
    incorrect direction information was entered in the FIELD and SOURCE
    table of the MS. If you actually want to change the phase center of
    the visibilties in an MS, you should use task fixvis.

    --------- parameter descriptions ---------------------------------------------

    vis       Name of input visibility file
              Default: none
              
                 Example: vis='ngc5921.ms'
    field     Select field using field id(s) or field name(s)
              Default: '' (all fields)
              
              Use 'go listobs' to obtain the list id's or
              names. If field string is a non-negative integer,
              it is assumed a field index,  otherwise, it is
              assumed a field name.
              
                 Examples:
                 field='0~2'; field ids 0,1,2
                 field='0,4,5~7'; field ids 0,4,5,6,7
                 field='3C286,3C295'; field named 3C286 and
                 3C295
                 field = '3,4C*'; field id 3, all names
                 starting with 4C
    fixuvw    Recalculate Fourier-plane u,v,w coordinates?
              Default: False
              Options: False|True
    direction If set, do not use pointing table but set direction to
              this value
              Default: '' (use pointing table)
              
                 Example: 'J2000 19h30m00 -40d00m00'
              
              The direction can either be given explicitly or
              as the path to a JPL Horizons
              ephemeris. Alternatively, the ephemeris table can
              also be provided as mime format file. For more
              information, see the task pages of fixplanets in
              CASA Docs (https://casa.nrao.edu/casadocs/).
    refant    Reference antenna name(s); a prioritized list may be
              specified
              Default: 0 (antenna ID 0)
              
                 Examples: 
                 refant='4' (antenna with index 4)
                 refant='VA04' (VLA antenna #4)
                 refant='EA02,EA23,EA13' (EVLA antenna EA02,
                 use EA23 and EA13 as alternates if/when EA02
                 drops out)
              
              Use taskname=listobs for antenna listing
    reftime   If using pointing table information, use it from this
              timestamp
              Default: 'first'
              
                 Examples: 
                 * 'median' will use the median timestamp for
                   the given field using only the unflagged
                   maintable rows
                 * '2012/07/11/08:41:32' will use the given
                   timestamp (must be within the observaton
                   time)

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of fixplanets in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """editing, maninpulation, calibration"""
    _info_desc_ = """Changes FIELD and SOURCE table entries based on user-provided direction or POINTING table, optionally fixes the UVW coordinates"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'field': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'fixuvw': {'type': 'cBool'}, 'direction': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'refant': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'reftime': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __reftime_dflt( self, glb ):
        return 'first'

    def __reftime( self, glb ):
        if 'reftime' in glb: return glb['reftime']
        return 'first'

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __refant_dflt( self, glb ):
        return int(0)

    def __refant( self, glb ):
        if 'refant' in glb: return glb['refant']
        return int(0)

    def __direction_dflt( self, glb ):
        return ''

    def __direction( self, glb ):
        if 'direction' in glb: return glb['direction']
        return ''

    def __fixuvw_dflt( self, glb ):
        return False

    def __fixuvw( self, glb ):
        if 'fixuvw' in glb: return glb['fixuvw']
        return False

    def __field_dflt( self, glb ):
        return [ ]

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return [ ]



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select field using field id(s) or field name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __fixuvw_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Recalculate Fourier-plane u,v,w coordinates'
        value = self.__fixuvw( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'fixuvw': value},{'fixuvw': self.__schema['fixuvw']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('fixuvw',pre,self.__to_string_(value),post,description))
    def __direction_inp(self):
        out = self.__stdout or sys.stdout
        description = 'If set, do not use pointing table but set direction to this value'
        value = self.__direction( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'direction': value},{'direction': self.__schema['direction']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('direction',pre,self.__to_string_(value),post,description))
    def __refant_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Reference antenna name(s)'
        value = self.__refant( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'refant': value},{'refant': self.__schema['refant']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('refant',pre,self.__to_string_(value),post,description))
    def __reftime_inp(self):
        out = self.__stdout or sys.stdout
        description = 'If using pointing table information, use it from this timestamp'
        value = self.__reftime( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'reftime': value},{'reftime': self.__schema['reftime']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('reftime',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'field' in glb: del glb['field']
        if 'fixuvw' in glb: del glb['fixuvw']
        if 'reftime' in glb: del glb['reftime']
        if 'refant' in glb: del glb['refant']
        if 'direction' in glb: del glb['direction']
        if 'vis' in glb: del glb['vis']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__field_inp( )
        self.__fixuvw_inp( )
        self.__direction_inp( )
        self.__refant_inp( )
        self.__reftime_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("fixplanets.last"):
                filename = "fixplanets.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, field=None, fixuvw=None, direction=None, refant=None, reftime=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('fixplanets.pre')
        _postfile = os.path.realpath('fixplanets.last')
        _return_result_ = None
        _arguments = [vis,field,fixuvw,direction,refant,reftime]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if field is not None: local_global['field'] = field
            if fixuvw is not None: local_global['fixuvw'] = fixuvw
            if direction is not None: local_global['direction'] = direction
            if refant is not None: local_global['refant'] = refant
            if reftime is not None: local_global['reftime'] = reftime

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['fixuvw'] = self.__fixuvw( local_global )
            _invocation_parameters['direction'] = self.__direction( local_global )
            _invocation_parameters['refant'] = self.__refant( local_global )
            _invocation_parameters['reftime'] = self.__reftime( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['fixuvw'] = self.__fixuvw( self.__globals_( ) )
            _invocation_parameters['direction'] = self.__direction( self.__globals_( ) )
            _invocation_parameters['refant'] = self.__refant( self.__globals_( ) )
            _invocation_parameters['reftime'] = self.__reftime( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#fixplanets( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _fixplanets_t( _invocation_parameters['vis'],_invocation_parameters['field'],_invocation_parameters['fixuvw'],_invocation_parameters['direction'],_invocation_parameters['refant'],_invocation_parameters['reftime'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

fixplanets = _fixplanets( )

