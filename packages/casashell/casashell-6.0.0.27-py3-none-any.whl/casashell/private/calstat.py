##################### generated by xml-casa (v2) from calstat.xml ###################
##################### f770266de040796dd50519fca181c76b ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import calstat as _calstat_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _calstat:
    """
    calstat ---- Displays statistical information on a calibration table

    
    This task returns statistical information about a column in a
    calibration table. The following values are computed: mean value, sum
    of values, sum of squared values, median, median absolute deviation,
    quartile, minimum, maximum, variance, standard deviation, root mean
    square.

    --------- parameter descriptions ---------------------------------------------

    caltable   Name of input calibration table
               Default: ''
               
                  Example: vis='ggtau.1mm.amp.gcal'
    axis       Which data to analyze.
               Default: 'amplitude'
               Options: 'amp', 'amplitude', 'phase', 'real',
               'imag', 'imaginary'. Also, the name of any real
               valued MS column can be given, e.g. TIME,
               POLY_COEFF_AMP, REF_ANT, ANTENNA1, FLAG, ...
               
               Note: the phase of a complex number is in
               radians in the range [-pi; pi].
    datacolumn Which data column to use if axis is 'amp', 'amplitude', 'phase', 'real', 'imag' or 'imaginary'.
               Default: 'gain'
    useflags   Take flagging into account? (not implemented, this
               parameter  has no effect!)
                Default: False
               
                If useflags=False, flagged values are included in
                the statistics. 
                If useflags=True, any flagged values are not used
                in the statistics.

    --------- examples -----------------------------------------------------------

    
    
    
    For more information, see the task pages of calstat in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Displays statistical information on a calibration table"""

    __schema = {'caltable': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'axis': {'type': 'cStr'}, 'datacolumn': {'type': 'cStr'}, 'useflags': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __axis_dflt( self, glb ):
        return 'amplitude'

    def __axis( self, glb ):
        if 'axis' in glb: return glb['axis']
        return 'amplitude'

    def __useflags_dflt( self, glb ):
        return True

    def __useflags( self, glb ):
        if 'useflags' in glb: return glb['useflags']
        return True



    #--------- return inp/go default --------------------------------------------------
    def __datacolumn_dflt( self, glb ):
        if self.__axis( glb ) == "amp": return "gain"
        if self.__axis( glb ) == "amplitude": return "gain"
        if self.__axis( glb ) == "phase": return "gain"
        if self.__axis( glb ) == "real": return "gain"
        if self.__axis( glb ) == "imag": return "gain"
        if self.__axis( glb ) == "imaginary": return "gain"
        return None

    #--------- return subparam values -------------------------------------------------
    def __datacolumn( self, glb ):
        if 'datacolumn' in glb: return glb['datacolumn']
        dflt = self.__datacolumn_dflt( glb )
        if dflt is not None: return dflt
        return 'gain'

    #--------- subparam inp output ----------------------------------------------------
    def __caltable_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input calibration table'
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('caltable',pre,self.__to_string_(value),post,description))
    def __axis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Which values to use'
        value = self.__axis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'axis': value},{'axis': self.__schema['axis']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-13.13s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('axis',pre,self.__to_string_(value),post,description))
    def __datacolumn_inp(self):
        out = self.__stdout or sys.stdout
        if self.__datacolumn_dflt( self.__globals_( ) ) is not None:
             description = 'Which data column to use'
             value = self.__datacolumn( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'datacolumn': value},{'datacolumn': self.__schema['datacolumn']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-10.10s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('datacolumn',pre,self.__to_string_(value),post,description))
    def __useflags_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Take flagging into account? (not implemented)'
        value = self.__useflags( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'useflags': value},{'useflags': self.__schema['useflags']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-13.13s = %s%-23.22s%s # %-.60s\n' % ('useflags',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'caltable' in glb: del glb['caltable']
        if 'axis' in glb: del glb['axis']
        if 'datacolumn' in glb: del glb['datacolumn']
        if 'useflags' in glb: del glb['useflags']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__caltable_inp( )
        self.__axis_inp( )
        self.__datacolumn_inp( )
        self.__useflags_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("calstat.last"):
                filename = "calstat.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, caltable=None, axis=None, datacolumn=None, useflags=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('calstat.pre')
        _postfile = os.path.realpath('calstat.last')
        _return_result_ = None
        _arguments = [caltable,axis,datacolumn,useflags]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if caltable is not None: local_global['caltable'] = caltable
            if axis is not None: local_global['axis'] = axis
            if useflags is not None: local_global['useflags'] = useflags

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['axis'] = self.__axis( local_global )
            _invocation_parameters['useflags'] = self.__useflags( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['datacolumn'] = self.__datacolumn( _invocation_parameters ) if datacolumn is None else datacolumn

        else:
            # invoke with inp/go semantics
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['axis'] = self.__axis( self.__globals_( ) )
            _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
            _invocation_parameters['useflags'] = self.__useflags( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#calstat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _calstat_t( _invocation_parameters['caltable'],_invocation_parameters['axis'],_invocation_parameters['datacolumn'],_invocation_parameters['useflags'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

calstat = _calstat( )

