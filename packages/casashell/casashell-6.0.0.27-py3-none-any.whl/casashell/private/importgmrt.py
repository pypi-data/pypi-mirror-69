##################### generated by xml-casa (v2) from importgmrt.xml ################
##################### fd7e58d81ab4ab0e310f3539c4d4f84b ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import importgmrt as _importgmrt_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _importgmrt:
    """
    importgmrt ---- Convert a UVFITS file to a CASA visibility data set

    
    Convert a GRMT FITS file to a CASA visiblity data set.
    Also read GMRT flag file(s) and flag data based on the contents of the
    files.
    

    --------- parameter descriptions ---------------------------------------------

    fitsfile Name of input UV FITS file
             Default: none
             
                Example: fitsimage='3C273XC1.fits'
    flagfile List of files containing flagging information.
             Default: none
             
                Examples:
                flagfile='3c273XC1.flag'
                flagfile=['3c273Cc1_1.flag','3c273Cc2_1.flag',']
    vis      Name of input visibility file
             Default: none
             
                Example: vis='ngc5921.ms'

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMPORTGMRT IN CASA DOCS:
    https://casa.nrao.edu/casadocs/
    


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a UVFITS file to a CASA visibility data set"""

    __schema = {'fitsfile': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'flagfile': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'vis': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __fitsfile_dflt( self, glb ):
        return ''

    def __fitsfile( self, glb ):
        if 'fitsfile' in glb: return glb['fitsfile']
        return ''

    def __flagfile_dflt( self, glb ):
        return ''

    def __flagfile( self, glb ):
        if 'flagfile' in glb: return glb['flagfile']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __fitsfile_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input UV FITS file'
        value = self.__fitsfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'fitsfile': value},{'fitsfile': self.__schema['fitsfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('fitsfile',pre,self.__to_string_(value),post,description))
    def __flagfile_inp(self):
        out = self.__stdout or sys.stdout
        description = 'List of files containing flagging information.'
        value = self.__flagfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'flagfile': value},{'flagfile': self.__schema['flagfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('flagfile',pre,self.__to_string_(value),post,description))
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-8.8s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'fitsfile' in glb: del glb['fitsfile']
        if 'flagfile' in glb: del glb['flagfile']
        if 'vis' in glb: del glb['vis']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__fitsfile_inp( )
        self.__flagfile_inp( )
        self.__vis_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("importgmrt.last"):
                filename = "importgmrt.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, fitsfile=None, flagfile=None, vis=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('importgmrt.pre')
        _postfile = os.path.realpath('importgmrt.last')
        _return_result_ = None
        _arguments = [fitsfile,flagfile,vis]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if fitsfile is not None: local_global['fitsfile'] = fitsfile
            if flagfile is not None: local_global['flagfile'] = flagfile
            if vis is not None: local_global['vis'] = vis

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['fitsfile'] = self.__fitsfile( local_global )
            _invocation_parameters['flagfile'] = self.__flagfile( local_global )
            _invocation_parameters['vis'] = self.__vis( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['fitsfile'] = self.__fitsfile( self.__globals_( ) )
            _invocation_parameters['flagfile'] = self.__flagfile( self.__globals_( ) )
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-8s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#importgmrt( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _importgmrt_t( _invocation_parameters['fitsfile'],_invocation_parameters['flagfile'],_invocation_parameters['vis'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

importgmrt = _importgmrt( )

