##################### generated by xml-casa (v2) from imreframe.xml #################
##################### addb7a902072d749ebcfcceafa802606 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import imreframe as _imreframe_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imreframe:
    """
    imreframe ---- Change the frame in which the image reports its spectral values

    --------- parameter descriptions ---------------------------------------------

    imagename Name of the input image
    output    Name of the output image
    outframe  Spectral frame in which the frequency or velocity values will be reported by default
    epoch     Epoch to be associated with this image
    restfreq  restfrequency to use for velocity values (e.g "1.420GHz" for the HI line)
    [1;42mRETURNS[1;m      void

    --------- examples -----------------------------------------------------------

    
    
    imagename -- name of casa image file to process on
    output         -- name of output image  '' means modify the input image itself
    default: '';
    outframe     -- new spectral frame in which the frequency or
    velocity will be reported for.
    Options: 'lsrk','lsrd','bary','geo','topo','galacto',
    'lgroup','cmb'
    default: 'lsrk'
    >>>
    epoch    -- when outframe is 'topo' or 'geo' a time in UTC is needed
    to decide when to do the frequency conversion. '' is to use
    the epoch of the input image
    default= ''
    
    restfreq -- Specify rest frequency to use for output image
    default=''; '' means use the restfrequency already in input image
    For example for
    NH_3 (1,1) put restfreq='23.694496GHz'


    """

    _info_group_ = """analysis, information"""
    _info_desc_ = """Change the frame in which the image reports its spectral values"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'output': {'type': 'cStr'}, 'outframe': {'type': 'cStr'}, 'epoch': {'type': 'cStr'}, 'restfreq': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __restfreq_dflt( self, glb ):
        return ''

    def __restfreq( self, glb ):
        if 'restfreq' in glb: return glb['restfreq']
        return ''

    def __outframe_dflt( self, glb ):
        return 'lsrk'

    def __outframe( self, glb ):
        if 'outframe' in glb: return glb['outframe']
        return 'lsrk'

    def __output_dflt( self, glb ):
        return ''

    def __output( self, glb ):
        if 'output' in glb: return glb['output']
        return ''

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __epoch_dflt( self, glb ):
        if self.__outframe( glb ) == "topo": return ""
        if self.__outframe( glb ) == "TOPO": return ""
        if self.__outframe( glb ) == "geo": return ""
        if self.__outframe( glb ) == "GEO": return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __epoch( self, glb ):
        if 'epoch' in glb: return glb['epoch']
        dflt = self.__epoch_dflt( glb )
        if dflt is not None: return dflt
        return ''

    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('imagename',pre,self.__to_string_(value),post,description))
    def __output_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__output( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'output': value},{'output': self.__schema['output']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('output',pre,self.__to_string_(value),post,description))
    def __outframe_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__outframe( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'outframe': value},{'outframe': self.__schema['outframe']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('outframe',pre,self.__to_string_(value),post,description))
    def __epoch_inp(self):
        out = self.__stdout or sys.stdout
        if self.__epoch_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__epoch( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'epoch': value},{'epoch': self.__schema['epoch']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-6.6s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('epoch',pre,self.__to_string_(value),post,description))
    def __restfreq_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__restfreq( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'restfreq': value},{'restfreq': self.__schema['restfreq']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('restfreq',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'epoch' in glb: del glb['epoch']
        if 'imagename' in glb: del glb['imagename']
        if 'restfreq' in glb: del glb['restfreq']
        if 'outframe' in glb: del glb['outframe']
        if 'output' in glb: del glb['output']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__imagename_inp( )
        self.__output_inp( )
        self.__outframe_inp( )
        self.__epoch_inp( )
        self.__restfreq_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("imreframe.last"):
                filename = "imreframe.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, imagename=None, output=None, outframe=None, epoch=None, restfreq=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imreframe.pre')
        _postfile = os.path.realpath('imreframe.last')
        _return_result_ = None
        _arguments = [imagename,output,outframe,epoch,restfreq]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if output is not None: local_global['output'] = output
            if outframe is not None: local_global['outframe'] = outframe
            if restfreq is not None: local_global['restfreq'] = restfreq

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['output'] = self.__output( local_global )
            _invocation_parameters['outframe'] = self.__outframe( local_global )
            _invocation_parameters['restfreq'] = self.__restfreq( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['epoch'] = self.__epoch( _invocation_parameters ) if epoch is None else epoch

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['output'] = self.__output( self.__globals_( ) )
            _invocation_parameters['outframe'] = self.__outframe( self.__globals_( ) )
            _invocation_parameters['epoch'] = self.__epoch( self.__globals_( ) )
            _invocation_parameters['restfreq'] = self.__restfreq( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imreframe( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _imreframe_t( _invocation_parameters['imagename'],_invocation_parameters['output'],_invocation_parameters['outframe'],_invocation_parameters['epoch'],_invocation_parameters['restfreq'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

imreframe = _imreframe( )

