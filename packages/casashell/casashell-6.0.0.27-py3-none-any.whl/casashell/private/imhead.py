##################### generated by xml-casa (v2) from imhead.xml ####################
##################### 8636dc570f1b5893ea78195964b71e55 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import imhead as _imhead_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _imhead:
    """
    imhead ---- List, get and put image header parameters

    
    List, get and put image header parameters.
    
    This task allows the user to manipulate metadata associated with a
    CASA image. Both float and complex valued images are fully supported.
    
    For measurement sets, the task vishead should be used.

    --------- parameter descriptions ---------------------------------------------

    imagename Input image cube.
              Default: none
              
                 Example: imagename='ngc5921_task.image'
    mode      Mode of operation.
              Default: summary
              Options: "add", "del", "get", "history", "list",
              "put", or "summary".
              
              * add: Add a new metadata value to the image. The
                behavior of mode="add" depends on the
                keyword. In general, the return value will be
                True if the operation succeeds, or False if it
                fails or is not supported. If unsuccessful or
                not supported, a message is normally logged
                which describes the failure. In most cases, you
                probably want to use mode='put' rather than
                mode='add'. We continue to support mode='add'
                mainly for backward compatibility.
              * del: Delete a key or reset its value to a
                fidicual value if possible. Ignores all but
                imagename, mode, and hdkey parameters. In
                general, the return value will be True if the
                operation succeeds, or False if it fails or is
                not supported. If unsuccessful or not
                supported, a warning message is normally logged
                which describes the failure.
              * get: Return the specified keyword
                value. Ignores all but imagename, mode, and
                hdkey parameters.
              * history: Log image history. Ignores all but
                imagename and mode parameters.
              * list: Show supported keywords and their
                values. Ignores all but imagename and mode
                parameters.
                put: Modify the specified value associated with
                the keyword. True is returned if the metadatum
                was successfully modified, False
                otherwise. Normally, a diagnostic message is
                logged if there is a failure. Only the
                parameter specified is modified; eg, no
                modification of reference direction occurs to
                implicitly account for precession to a new
                reference frame.
              * summary: Log a summary of the image and return
                a dictionary of various metadata
                values. Ignores all but imagename and mode
                parameters.
              
              IMPORTANT: Lists of keywords for the various
              modes of operation are given in the imhead task
              pages of CASA Docs
              (https://casa.nrao.edu/casadocs/). 
              
              The behavior of mode='add|del|get depends on the
              keyword. Modes "add", "del", and "put" will not
              work if the image is read-only (eg a FITS
              image). 
              
              NOTE: Only limited checking is implemented to
              ensure modifying a specific value will leave the
              image metadata in a consistent state, so, if one
              is not careful, one could end up with an image
              that has an inconsistent set of metadata and is
              therefore, nonsensical and useless That is,
              PROCEED AT YOUR OWN RISK when using modes add,
              del, or put.
    hdkey     Keyword to use with get, put, add, or del.
              Subparameter of mode=get|put|add|del
              
              Only "get" will work if the image is read-only
              (eg, a FITS image).
              
                 Example: hdkey='telescope'
    hdvalue   Keyword value used for modes 'put' and 'add'. 
              Subparameter of mode='put|add' ('del')
              
              Also used for mode="del" when hdvalue="masks. 
              
                 Example: hdvalue='VLA'
    verbose   Give a full listing of beams or just a short summary? Only used when the image has multiple beams and mode="summary".
    [1;42mRETURNS[1;m      variant

    --------- examples -----------------------------------------------------------

    
    FOR MORE INFORMATION, SEE THE TASK PAGES OF IMHEAD IN CASA DOCS:
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """analysis, information, manipulation"""
    _info_desc_ = """List, get and put image header parameters"""

    __schema = {'imagename': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'mode': {'type': 'cStr'}, 'hdkey': {'type': 'cStr'}, 'hdvalue': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'verbose': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __mode_dflt( self, glb ):
        return 'summary'

    def __mode( self, glb ):
        if 'mode' in glb: return glb['mode']
        return 'summary'

    def __imagename_dflt( self, glb ):
        return ''

    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        return ''

    #--------- return non subparam/when values ---------------------------------------------
    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return False
    def __hdvalue( self, glb ):
        if 'hdvalue' in glb: return glb['hdvalue']
        return ''
    def __hdkey( self, glb ):
        if 'hdkey' in glb: return glb['hdkey']
        return ''

    #--------- return inp/go default --------------------------------------------------
    def __verbose_dflt( self, glb ):
        if self.__mode( glb ) == "summary": return bool(False)
        return None
    def __hdvalue_dflt( self, glb ):
        if self.__mode( glb ) == "put": return ""
        if self.__mode( glb ) == "add": return ""
        return None
    def __hdkey_dflt( self, glb ):
        if self.__mode( glb ) == "put": return ""
        if self.__mode( glb ) == "add": return ""
        if self.__mode( glb ) == "get": return ""
        if self.__mode( glb ) == "del": return ""
        return None

    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __imagename_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of the input spectral line image'
        value = self.__imagename( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('imagename',pre,self.__to_string_(value),post,description))
    def __mode_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__mode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'mode': value},{'mode': self.__schema['mode']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-9.9s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('mode',pre,self.__to_string_(value),post,description))
    def __hdkey_inp(self):
        out = self.__stdout or sys.stdout
        description = 'The associated keyword for modes "add", "del", "get", or "put". Only "get" will work if the image is read-only (eg, a FITS image).'
        value = self.__hdkey( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'hdkey': value},{'hdkey': self.__schema['hdkey']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('hdkey',pre,self.__to_string_(value),post,description))
    def __hdvalue_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Value of keyword for modes add or put.'
        value = self.__hdvalue( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'hdvalue': value},{'hdvalue': self.__schema['hdvalue']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('hdvalue',pre,self.__to_string_(value),post,description))
    def __verbose_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-9.9s = %s%-23.22s%s # %-.60s\n' % ('verbose',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'verbose' in glb: del glb['verbose']
        if 'imagename' in glb: del glb['imagename']
        if 'hdvalue' in glb: del glb['hdvalue']
        if 'mode' in glb: del glb['mode']
        if 'hdkey' in glb: del glb['hdkey']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__imagename_inp( )
        self.__mode_inp( )
        self.__hdkey_inp( )
        self.__hdvalue_inp( )
        self.__verbose_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("imhead.last"):
                filename = "imhead.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, imagename=None, mode=None, hdkey=None, hdvalue=None, verbose=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('imhead.pre')
        _postfile = os.path.realpath('imhead.last')
        _return_result_ = None
        _arguments = [imagename,mode,hdkey,hdvalue,verbose]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if imagename is not None: local_global['imagename'] = imagename
            if mode is not None: local_global['mode'] = mode
            if hdkey is not None: local_global['hdkey'] = hdkey
            if hdvalue is not None: local_global['hdvalue'] = hdvalue
            if verbose is not None: local_global['verbose'] = verbose

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['imagename'] = self.__imagename( local_global )
            _invocation_parameters['mode'] = self.__mode( local_global )
            _invocation_parameters['hdkey'] = self.__hdkey( local_global )
            _invocation_parameters['hdvalue'] = self.__hdvalue( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['mode'] = self.__mode( self.__globals_( ) )
            _invocation_parameters['hdkey'] = self.__hdkey( self.__globals_( ) )
            _invocation_parameters['hdvalue'] = self.__hdvalue( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-9s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#imhead( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _imhead_t( _invocation_parameters['imagename'],_invocation_parameters['mode'],_invocation_parameters['hdkey'],_invocation_parameters['hdvalue'],_invocation_parameters['verbose'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

imhead = _imhead( )

