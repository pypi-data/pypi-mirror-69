##################### generated by xml-casa (v2) from fixvis.xml ####################
##################### cfbacc059790b904d0d8c601276617e5 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import fixvis as _fixvis_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _fixvis:
    """
    fixvis ---- Recalculates (u, v, w) and/or changes Phase Center

    
    Recalculates (u, v, w) and/or changes Phase Center.
    
    If the phase center is changed, the corresponding modifications
    are applied to the visibility columns given by the parameter
    "datacolumn" which is by default set to "all" (DATA, CORRECTED,
    and MODEL).

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input visibility file
                Default: none
                
                   Example: vis='ngc5921.ms'
    outputvis   Name of output visibility file
                Default: '' (same as vis)
                
                   Example: outputvis='ngc5921_out.ms'
    field       Select field using field id(s) or field name(s)
                Default: '' (all fields)
                
                Use 'go listobs' to obtain the list id's or
                names. If field string is a non-negative integer,
                it is assumed a field index,  otherwise, it is
                assumed a field name.
                
                   Examples:
                   field='0~2'; field ids 0,1,2
                   field='0,4,5~7'; field ids 0,4,5,6,7
                   field='3C286,3C295'; field named 3C286 and
                   3C295
                   field = '3,4C*'; field id 3, all names
                   starting with 4C
    refcode     Reference frame to convert UVW coordinates to
                Default: '' (refcode of PHASE_DIR in the FIELD
                table)
                
                   Example: refcode='B1950'
    reuse       Base UVW calculation on the old values?
                Default: True
                Options: True|False
                
                Note: ignored if parameter 'phasecenter' is set
    phasecenter If set to a valid direction: change the phase center for
                the given field to this value
                If given without the equinox, e.g. '0h01m00s
                +00d12m00s', the parameter is interpreted as a
                pair of offsets in RA and DEC to the present
                phasecenter.
                
                   Example: phasecenter='J2000 9h25m00s
                   -05d12m00s'
                
                Note: The RA offset can be given in units of time
                or angle. If given as a time (i.e. as a single
                number with a time unit as in, e.g., 12s or in
                the XXhXXmXXs or XX:XX:XX.XXX formats), it is
                applied as is. If given as an angle (e.g.,
                0.01deg), it is divided by the cos(DEC) before it
                is applied.
    distances   (experimental) List of the distances (as quanta) of the
                fields selected by field.
                Default: [] (the distances of all fields are
                assumed to be infinity.)
                
                If not a list but just a single value is given,
                this is applied to all fields.
                
                   Examples: 
                   distances=['2E6km', '3E6km']   
                   distances='15au'
    datacolumn  when applying a phase center shift, modify visibilities
                only in this/these column(s)
                Default: 'all' (DATA, CORRECTED, and MODEL)
                
                   Example: datacolumn='DATA,CORRECTED' (will not
                   modify MODEL)

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of fixvis in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """editing, manipulation"""
    _info_desc_ = """Recalculates (u, v, w) and/or changes Phase Center """

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'outputvis': {'type': 'cStr'}, 'field': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'refcode': {'type': 'cStr'}, 'reuse': {'type': 'cBool'}, 'phasecenter': {'type': 'cStr'}, 'distances': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'datacolumn': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __phasecenter_dflt( self, glb ):
        return ''

    def __phasecenter( self, glb ):
        if 'phasecenter' in glb: return glb['phasecenter']
        return ''

    def __refcode_dflt( self, glb ):
        return ''

    def __refcode( self, glb ):
        if 'refcode' in glb: return glb['refcode']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __distances_dflt( self, glb ):
        return [ ]

    def __distances( self, glb ):
        if 'distances' in glb: return glb['distances']
        return [ ]

    def __reuse_dflt( self, glb ):
        return True

    def __reuse( self, glb ):
        if 'reuse' in glb: return glb['reuse']
        return True

    def __datacolumn_dflt( self, glb ):
        return 'all'

    def __datacolumn( self, glb ):
        if 'datacolumn' in glb: return glb['datacolumn']
        return 'all'

    def __outputvis_dflt( self, glb ):
        return ''

    def __outputvis( self, glb ):
        if 'outputvis' in glb: return glb['outputvis']
        return ''

    def __field_dflt( self, glb ):
        return [ ]

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return [ ]



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __outputvis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of output visibility file'
        value = self.__outputvis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'outputvis': value},{'outputvis': self.__schema['outputvis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('outputvis',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select field using field id(s) or field name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __refcode_inp(self):
        out = self.__stdout or sys.stdout
        description = 'reference frame to convert UVW coordinates to'
        value = self.__refcode( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'refcode': value},{'refcode': self.__schema['refcode']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('refcode',pre,self.__to_string_(value),post,description))
    def __reuse_inp(self):
        out = self.__stdout or sys.stdout
        description = 'base UVW calculation on the old values?'
        value = self.__reuse( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'reuse': value},{'reuse': self.__schema['reuse']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('reuse',pre,self.__to_string_(value),post,description))
    def __phasecenter_inp(self):
        out = self.__stdout or sys.stdout
        description = 'use this direction as phase center'
        value = self.__phasecenter( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'phasecenter': value},{'phasecenter': self.__schema['phasecenter']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('phasecenter',pre,self.__to_string_(value),post,description))
    def __distances_inp(self):
        out = self.__stdout or sys.stdout
        description = '(experimental) List of the distances (as quanta) of the fields selected by field.'
        value = self.__distances( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'distances': value},{'distances': self.__schema['distances']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('distances',pre,self.__to_string_(value),post,description))
    def __datacolumn_inp(self):
        out = self.__stdout or sys.stdout
        description = 'when applying a phase center shift, modify visibilities only in this/these column(s)'
        value = self.__datacolumn( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'datacolumn': value},{'datacolumn': self.__schema['datacolumn']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-11.11s = %s%-23.22s%s # %-.60s\n' % ('datacolumn',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'field' in glb: del glb['field']
        if 'outputvis' in glb: del glb['outputvis']
        if 'datacolumn' in glb: del glb['datacolumn']
        if 'vis' in glb: del glb['vis']
        if 'distances' in glb: del glb['distances']
        if 'reuse' in glb: del glb['reuse']
        if 'refcode' in glb: del glb['refcode']
        if 'phasecenter' in glb: del glb['phasecenter']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__outputvis_inp( )
        self.__field_inp( )
        self.__refcode_inp( )
        self.__reuse_inp( )
        self.__phasecenter_inp( )
        self.__distances_inp( )
        self.__datacolumn_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("fixvis.last"):
                filename = "fixvis.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, outputvis=None, field=None, refcode=None, reuse=None, phasecenter=None, distances=None, datacolumn=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('fixvis.pre')
        _postfile = os.path.realpath('fixvis.last')
        _return_result_ = None
        _arguments = [vis,outputvis,field,refcode,reuse,phasecenter,distances,datacolumn]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if outputvis is not None: local_global['outputvis'] = outputvis
            if field is not None: local_global['field'] = field
            if refcode is not None: local_global['refcode'] = refcode
            if reuse is not None: local_global['reuse'] = reuse
            if phasecenter is not None: local_global['phasecenter'] = phasecenter
            if distances is not None: local_global['distances'] = distances
            if datacolumn is not None: local_global['datacolumn'] = datacolumn

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['outputvis'] = self.__outputvis( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['refcode'] = self.__refcode( local_global )
            _invocation_parameters['reuse'] = self.__reuse( local_global )
            _invocation_parameters['phasecenter'] = self.__phasecenter( local_global )
            _invocation_parameters['distances'] = self.__distances( local_global )
            _invocation_parameters['datacolumn'] = self.__datacolumn( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['outputvis'] = self.__outputvis( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['refcode'] = self.__refcode( self.__globals_( ) )
            _invocation_parameters['reuse'] = self.__reuse( self.__globals_( ) )
            _invocation_parameters['phasecenter'] = self.__phasecenter( self.__globals_( ) )
            _invocation_parameters['distances'] = self.__distances( self.__globals_( ) )
            _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#fixvis( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _fixvis_t( _invocation_parameters['vis'],_invocation_parameters['outputvis'],_invocation_parameters['field'],_invocation_parameters['refcode'],_invocation_parameters['reuse'],_invocation_parameters['phasecenter'],_invocation_parameters['distances'],_invocation_parameters['datacolumn'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

fixvis = _fixvis( )

