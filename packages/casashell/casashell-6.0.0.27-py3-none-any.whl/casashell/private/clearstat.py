##################### generated by xml-casa (v2) from clearstat.xml #################
##################### eaa44a909e4061e941ee507329d2847e ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import clearstat as _clearstat_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _clearstat:
    """
    clearstat ---- Clear all autolock locks

    
    This task is useful if another task that is running indicates
    that it is trying to obtain a lock on a file.
    
    Typing 'go clearstat()'  will not change the current task being scrutinized
    Typing 'clearstat()'     will change the current task assignment to clearpstat
    which is generally not what is desired.

    --------- parameter descriptions ---------------------------------------------


    [1;42mRETURNS[1;m    void



    """

    _info_group_ = """utility"""
    _info_desc_ = """Clear all autolock locks"""

    __schema = { }

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------




    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------


    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        pass

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("clearstat.last"):
                filename = "clearstat.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('clearstat.pre')
        _postfile = os.path.realpath('clearstat.last')
        _return_result_ = None
        _arguments = []
        _invocation_parameters = OrderedDict( )
        
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-3s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#clearstat( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _clearstat_t(  )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

clearstat = _clearstat( )

