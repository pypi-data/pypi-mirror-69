##################### generated by xml-casa (v2) from plotbandpass.xml ##############
##################### fcb1fdaa42943100e3e4489480e7b6d2 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import plotbandpass as _plotbandpass_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _plotbandpass:
    """
    plotbandpass ---- Makes detailed plots of Tsys and bandpass solutions.

    Developed at the NAASC, this is a generic task to display CASA
    Tsys and bandpass solution tables with options to overlay them in various
    combinations, and/or with an atmospheric transmission or sky temperature
    model.  It works with both the 'new' (casa 3.4) and 'old' calibration
    table formats, and allows for mixed mode spws (e.g. TDM and FDM for ALMA).
    It uses the new msmd tool to access the information about an ms.  This
    task is still being developed as new ALMA observing modes are commissioned.
    So if you encounter problems, please report them.
    

    --------- parameter descriptions ---------------------------------------------

    caltable                     Input table name, either a bandpass solution or a Tsys solution
    antenna                      A comma-delimited string list of antennas (either names or integer indices) for which to display solutions.  Default = all antennas.
    field                        A comma-delimited string list of fields (either names or integer indices) for which to display solutions.  Default = all fields.
    spw                          A comma-delimited string list of spws for which to display solutions.  Default = all spws.
    yaxis                        The quantity to plot on the y-axis ("amp", "phase", "both", "tsys", append "db" for dB).
    xaxis                        The quantity to plot on the x-axis ("chan" or "freq").
    figfile                      The name of the plot file to produce.
    plotrange                    The axes limits to use [x0,x1,y0,y1].
    caltable2                    A second cal table, of type BPOLY or B, to overlay on a B table
    overlay                      Show multiple solutions in same frame in different colors (time, antenna, spw, baseband, or time,antenna)
    showflagged                  Show the values of the solution, even if flagged
    timeranges                   Show only these timeranges, the first timerange being 0
    buildpdf                     If True, assemble all the pngs into a pdf
    caltable3                    A third cal table, of type BPOLY, to overlay on the first two tables
    markersize                   Size of points
    density                      dpi to use in creating PNGs and PDFs (default=108)
    interactive                  if False, then run to completion automatically without pause
    showpoints                   Draw points for the data (default=F for amp, T for phase)
    showlines                    Draw lines connecting the data (default=T for amp, F for phase)
    subplot                      11..81,22,32 or 42 for RowsxColumns (default=22), any 3rd digit is ignored
    zoom                         "intersect" will zoom to overlap region of caltable with caltable2
    poln                         Polarizations to plot: "" = all, or "RR","RL","LR","LL","XX","XY","YX","YY","RR,LL","XX,YY"
    showatm                      Compute and overlay the atmospheric transmission curve
    pwv                          Define the pwv to use for the showatm option: "auto" or value in mm
    gs                           For buildpdf=T, full path for ghostscript command (in case it is not found)
    convert                      For buildpdf=T, full path for the ImageMagick convert command (in case it is not found)
    chanrange                    Set xrange ("5~100") over which to autoscale y-axis for xaxis="freq"
    solutionTimeThresholdSeconds Consider 2 solutions simultaneous if within this interval in seconds
    debug                        Print verbose messages for debugging purposes
    phase                        The y-axis limits to use for phase plots when yaxis="both"
    vis                          name of the ms for this table, in case it does not match the string in the caltable
    showtsky                     Compute and overlay the sky temperature curve instead of transmission
    showfdm                      when showing TDM spws, draw the locations of the corresponding FDM spws
    showatmfield                 for overlay="time", use first observation of this fieldID or name
    lo1                          specify the LO1 setting (in GHz) for the observation ('' = automatic)
    showimage                    also show the atmospheric curve for the image sideband (in black)
    showatmpoints                Draw atmospheric curve with points instead of a line
    parentms                     if showimage=T, name of the parent ms (only needed if the ms has been previously split)
    pdftk                        For buildpdf=T, full path for pdftk command (in case it is not found)
    channeldiff                  Set to a value > 0 (sigma) to plot derivatives of the solutions
    edge                         The number of edge channels to ignore in finding outliers (for channeldiff>0)
    resample                     The channel expansion factor to use when computing MAD of derivative (for channeldiff>0)
    platformingThreshold         if platformingSigma=0, then declare platforming if the amplitude derivative exceeds this percentage of the median
    platformingSigma             declare platforming if the amplitude derivative exceeds this many times the MAD
    basebands                    A baseband number or list of baseband numbers for which to display solutions.  Default = all.
    showBasebandNumber           Put the baseband converter number (BBC_NO) in the title of each plot
    scans                        A scan or list of scans for which to display solutions.  Default = all. Does not work with overlay="time".
    figfileSequential            naming scheme for pngs: False: name by spw/antenna (default), True: figfile.000.png, figfile.001.png, etc.
    chanrangeSetXrange           If True, then chanrange also sets the xrange to display
    [1;42mRETURNS[1;m                         variant

    --------- examples -----------------------------------------------------------

    
    
    plotbandpass('X3c1.tsys',overlay='antenna',yaxis='amp',field='0~1,4',xaxis='chan',figfile='tsys.png')
    
    plotbandpass('bandpass.bcal',caltable2='bandpass.bcal_smooth',xaxis='freq')
    
    plotbandpass('bandpass.bcal',caltable2='bandpass.bcal_smooth',xaxis='freq',poln='X',showatm=T)
    
    plotbandpass('bandpass.bcal',channeldiff='5')
    
    This task returns void unless the channeldiff option is selected, in which case it returns a
    dictionary containing the statistics of the solutions, keyed by the antenna name, followed
    by the spw, timerange, polarization, and finally 'amp' and/or 'phase' depending
    on the yaxis selection.
    
    Keyword arguments:
    
    antenna: must be either an ID (int or string or list), or a single antenna name or list
    basebands: show only spws from the specified baseband or list of basebands (default: ''=[]=all)
    buildpdf: True/False, if True and figfile is set, assemble pngs into a pdf
    caltable: a bandpass table, of type B or BPOLY
    caltable2: a second cal table, of type BPOLY or B, to overlay on a B table
    caltable3: a third cal table, of type BPOLY, to overlay on the first two
    channeldiff: set to value > 0 to plot derivatives of amplitude, the value is also used as sigma, and any outliers beyond this sigma will be printed to the logger
    chanrange: set xrange (e.g. "5~100") over which to autoscale y-axis for xaxis='freq'
    chanrangeSetXrange: if True, then chanrange also sets the xrange to display
    convert: full path for convert command (in case it's not found)
    density: dpi to use in creating PNGs and PDFs (default=108)
    edge: the number of edge channels to ignore in finding outliers (for channeldiff>0)
    field: must be an ID, source name, or list thereof; can use trailing *: 'J*'
    figfile: the base_name of the png files to save: base_name.antX.spwY.png
    figfileSequential: naming scheme, False: name by spw/antenna (default)
    True: figfile.1.png, figfile.2.png, etc.
    gs: full path for ghostscript command (in case it's not found)
    interactive: if False, then figfile will run to completion automatically
    lo1: specify the LO1 setting (in GHz) for the observation
    overlay: 'antenna','time','spw', or 'baseband', make 1 plot with different items in colors
    markersize: size of points (default=3)
    ms: name of the ms for this table, in case it does not match the string in the caltable
    parentms: name of the parent ms, in case the ms has been previously split
    pdftk: full path for pdftk command (in case it's not found)
    phase: the y-axis limits to use for phase plots when yaxis='both'
    platformingSigma: declare platforming if the amplitude derivative exceeds this many times the MAD
    platformingThreshold: if platformingSigma=0, then declare platforming if the amplitude
    derivative exceeds this percentage of the median
    plotrange: define axis limits: [x0,x1,y0,y1] where 0,0 means auto
    poln: polarizations to plot (e.g. 'XX','YY','RR','LL' or '' for both)
    pwv: define the pwv to use for the showatm option: 'auto' or value in mm
    resample: channel expansion factor to use when computing MAD of derivative (for channeldiff>0)
    scans: show only solutions for the specified scans (int, list, or string)
    showatm: compute and overlay the atmospheric transmission curve (on B or Tsys solutions)
    showatmfield: use first observation of this fieldID or name
    showatmPoints: draw atmospheric curve with points instead of a line
    showBasebandNumber: put the BBC_NO in the title of each plot
    showfdm: when showing TDM spws with xaxis='freq', draw locations of FDM spws
    showflagged:  show the values of data, even if flagged
    showimage: also show the atmospheric curve for the image sideband (in black)
    showtsky: compute and overlay the sky temperature curve instead of transmission
    showlines: draw lines connecting the data (default=T for amp, F for phase)
    showpoints: draw points for the data (default=F for amp, T for phase)
    solutionTimeThresholdSeconds: consider 2 solutions simultaneous if within this interval (default=60)
    spw: must be single ID or list or range (e.g. 0~4, not the original ID)
    subplot: 11..81,22,32 or 42 for RowsxColumns (default=22), any 3rd digit is ignored
    timeranges: show only these timeranges, the first timerange being 0
    xaxis: 'chan' or 'freq'
    yaxis: 'amp', 'tsys', 'phase', or 'both' amp+phase == 'ap'. Append 'db' for dB
    zoom: 'intersect' will zoom to overlap region of caltable with caltable2
    
    


    """

    _info_group_ = """visualization, calibration"""
    _info_desc_ = """Makes detailed plots of Tsys and bandpass solutions."""

    __schema = {'caltable': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'antenna': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'field': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'spw': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'yaxis': {'type': 'cStr'}, 'xaxis': {'type': 'cStr'}, 'figfile': {'type': 'cStr'}, 'plotrange': {'type': 'cFloatVec', 'coerce': [_coerce.to_list,_coerce.to_floatvec]}, 'caltable2': {'type': 'cStr'}, 'overlay': {'type': 'cStr'}, 'showflagged': {'type': 'cBool'}, 'timeranges': {'type': 'cStr'}, 'buildpdf': {'type': 'cBool'}, 'caltable3': {'type': 'cStr'}, 'markersize': {'type': 'cInt'}, 'density': {'type': 'cInt'}, 'interactive': {'type': 'cBool'}, 'showpoints': {'anyof': [{'type': 'cStr'}, {'type': 'cBool'}]}, 'showlines': {'anyof': [{'type': 'cStr'}, {'type': 'cBool'}]}, 'subplot': {'anyof': [{'type': 'cStr'}, {'type': 'cInt'}]}, 'zoom': {'type': 'cStr'}, 'poln': {'anyof': [{'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cStr'}]}, 'showatm': {'type': 'cBool'}, 'pwv': {'anyof': [{'type': 'cFloat', 'coerce': _coerce.to_float}, {'type': 'cStr'}]}, 'gs': {'type': 'cStr'}, 'convert': {'type': 'cStr'}, 'chanrange': {'anyof': [{'type': 'cStr'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'solutionTimeThresholdSeconds': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'debug': {'type': 'cBool'}, 'phase': {'anyof': [{'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, {'type': 'cStr'}]}, 'vis': {'type': 'cStr'}, 'showtsky': {'type': 'cBool'}, 'showfdm': {'type': 'cBool'}, 'showatmfield': {'anyof': [{'type': 'cInt'}, {'type': 'cStr'}]}, 'lo1': {'anyof': [{'type': 'cStr'}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'showimage': {'type': 'cBool'}, 'showatmpoints': {'type': 'cBool'}, 'parentms': {'type': 'cStr'}, 'pdftk': {'type': 'cStr'}, 'channeldiff': {'anyof': [{'type': 'cBool'}, {'type': 'cFloat', 'coerce': _coerce.to_float}]}, 'edge': {'type': 'cInt'}, 'resample': {'type': 'cInt'}, 'platformingThreshold': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'platformingSigma': {'type': 'cFloat', 'coerce': _coerce.to_float}, 'basebands': {'anyof': [{'type': 'cInt'}, {'type': 'cStr'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'showBasebandNumber': {'type': 'cBool'}, 'scans': {'anyof': [{'type': 'cInt'}, {'type': 'cStr'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'figfileSequential': {'type': 'cBool'}, 'chanrangeSetXrange': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __overlay_dflt( self, glb ):
        return ''

    def __overlay( self, glb ):
        if 'overlay' in glb: return glb['overlay']
        return ''

    def __showtsky_dflt( self, glb ):
        return False

    def __showtsky( self, glb ):
        if 'showtsky' in glb: return glb['showtsky']
        return False

    def __interactive_dflt( self, glb ):
        return True

    def __interactive( self, glb ):
        if 'interactive' in glb: return glb['interactive']
        return True

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __caltable_dflt( self, glb ):
        return ''

    def __caltable( self, glb ):
        if 'caltable' in glb: return glb['caltable']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __yaxis_dflt( self, glb ):
        return 'amp'

    def __yaxis( self, glb ):
        if 'yaxis' in glb: return glb['yaxis']
        return 'amp'

    def __debug_dflt( self, glb ):
        return False

    def __debug( self, glb ):
        if 'debug' in glb: return glb['debug']
        return False

    def __figfileSequential_dflt( self, glb ):
        return False

    def __figfileSequential( self, glb ):
        if 'figfileSequential' in glb: return glb['figfileSequential']
        return False

    def __showpoints_dflt( self, glb ):
        return 'auto'

    def __showpoints( self, glb ):
        if 'showpoints' in glb: return glb['showpoints']
        return 'auto'

    def __subplot_dflt( self, glb ):
        return '22'

    def __subplot( self, glb ):
        if 'subplot' in glb: return glb['subplot']
        return '22'

    def __markersize_dflt( self, glb ):
        return int(3)

    def __markersize( self, glb ):
        if 'markersize' in glb: return glb['markersize']
        return int(3)

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __figfile_dflt( self, glb ):
        return ''

    def __figfile( self, glb ):
        if 'figfile' in glb: return glb['figfile']
        return ''

    def __solutionTimeThresholdSeconds_dflt( self, glb ):
        return float(30.0)

    def __solutionTimeThresholdSeconds( self, glb ):
        if 'solutionTimeThresholdSeconds' in glb: return glb['solutionTimeThresholdSeconds']
        return float(30.0)

    def __showflagged_dflt( self, glb ):
        return False

    def __showflagged( self, glb ):
        if 'showflagged' in glb: return glb['showflagged']
        return False

    def __antenna_dflt( self, glb ):
        return ''

    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        return ''

    def __xaxis_dflt( self, glb ):
        return 'chan'

    def __xaxis( self, glb ):
        if 'xaxis' in glb: return glb['xaxis']
        return 'chan'

    def __timeranges_dflt( self, glb ):
        return ''

    def __timeranges( self, glb ):
        if 'timeranges' in glb: return glb['timeranges']
        return ''

    def __scans_dflt( self, glb ):
        return ''

    def __scans( self, glb ):
        if 'scans' in glb: return glb['scans']
        return ''

    def __showatm_dflt( self, glb ):
        return False

    def __showatm( self, glb ):
        if 'showatm' in glb: return glb['showatm']
        return False

    def __caltable2_dflt( self, glb ):
        return ''

    def __caltable2( self, glb ):
        if 'caltable2' in glb: return glb['caltable2']
        return ''

    def __showlines_dflt( self, glb ):
        return 'auto'

    def __showlines( self, glb ):
        if 'showlines' in glb: return glb['showlines']
        return 'auto'

    def __basebands_dflt( self, glb ):
        return ''

    def __basebands( self, glb ):
        if 'basebands' in glb: return glb['basebands']
        return ''

    def __showBasebandNumber_dflt( self, glb ):
        return False

    def __showBasebandNumber( self, glb ):
        if 'showBasebandNumber' in glb: return glb['showBasebandNumber']
        return False

    def __channeldiff_dflt( self, glb ):
        return False

    def __channeldiff( self, glb ):
        if 'channeldiff' in glb: return glb['channeldiff']
        return False

    def __plotrange_dflt( self, glb ):
        return [ float(0),float(0),float(0),float(0) ]

    def __plotrange( self, glb ):
        if 'plotrange' in glb: return glb['plotrange']
        return [ float(0),float(0),float(0),float(0) ]

    def __poln_dflt( self, glb ):
        return ''

    def __poln( self, glb ):
        if 'poln' in glb: return glb['poln']
        return ''



    #--------- return inp/go default --------------------------------------------------
    def __showimage_dflt( self, glb ):
        if self.__showatm( glb ) != bool(False): return bool(False)
        if self.__showtsky( glb ) != bool(False): return bool(False)
        return None
    def __gs_dflt( self, glb ):
        if self.__figfile( glb ) != "": return "gs"
        return None
    def __showatmfield_dflt( self, glb ):
        if self.__overlay( glb ) == "time": return ""
        return None
    def __lo1_dflt( self, glb ):
        if self.__showatm( glb ) != bool(False): return ""
        if self.__showtsky( glb ) != bool(False): return ""
        return None
    def __phase_dflt( self, glb ):
        if self.__yaxis( glb ) == "both": return ""
        return None
    def __showfdm_dflt( self, glb ):
        if self.__xaxis( glb ) == "freq": return bool(False)
        return None
    def __platformingThreshold_dflt( self, glb ):
        if self.__channeldiff( glb ) != bool(False): return float(10.0)
        return None
    def __caltable3_dflt( self, glb ):
        if self.__caltable2( glb ) != "": return ""
        return None
    def __resample_dflt( self, glb ):
        if self.__channeldiff( glb ) != bool(False): return int(1)
        return None
    def __parentms_dflt( self, glb ):
        if self.__showatm( glb ) != bool(False): return ""
        if self.__showtsky( glb ) != bool(False): return ""
        return None
    def __density_dflt( self, glb ):
        if self.__figfile( glb ) != "": return int(108)
        return None
    def __pwv_dflt( self, glb ):
        if self.__showatm( glb ) != bool(False): return "auto"
        if self.__showtsky( glb ) != bool(False): return "auto"
        return None
    def __chanrangeSetXrange_dflt( self, glb ):
        if self.__xaxis( glb ) == "freq": return bool(False)
        return None
    def __pdftk_dflt( self, glb ):
        if self.__figfile( glb ) != "": return "pdftk"
        return None
    def __platformingSigma_dflt( self, glb ):
        if self.__channeldiff( glb ) != bool(False): return float(5.0)
        return None
    def __edge_dflt( self, glb ):
        if self.__channeldiff( glb ) != bool(False): return int(8)
        return None
    def __chanrange_dflt( self, glb ):
        if self.__xaxis( glb ) == "freq": return ""
        return None
    def __zoom_dflt( self, glb ):
        if self.__caltable2( glb ) != "": return ""
        return None
    def __showatmpoints_dflt( self, glb ):
        if self.__showatm( glb ) != bool(False): return bool(False)
        if self.__showtsky( glb ) != bool(False): return bool(False)
        return None
    def __buildpdf_dflt( self, glb ):
        if self.__figfile( glb ) != "": return bool(False)
        return None
    def __convert_dflt( self, glb ):
        if self.__figfile( glb ) != "": return "convert"
        return None

    #--------- return subparam values -------------------------------------------------
    def __buildpdf( self, glb ):
        if 'buildpdf' in glb: return glb['buildpdf']
        dflt = self.__buildpdf_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __caltable3( self, glb ):
        if 'caltable3' in glb: return glb['caltable3']
        dflt = self.__caltable3_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __density( self, glb ):
        if 'density' in glb: return glb['density']
        dflt = self.__density_dflt( glb )
        if dflt is not None: return dflt
        return int(108)
    def __zoom( self, glb ):
        if 'zoom' in glb: return glb['zoom']
        dflt = self.__zoom_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __pwv( self, glb ):
        if 'pwv' in glb: return glb['pwv']
        dflt = self.__pwv_dflt( glb )
        if dflt is not None: return dflt
        return 'auto'
    def __gs( self, glb ):
        if 'gs' in glb: return glb['gs']
        dflt = self.__gs_dflt( glb )
        if dflt is not None: return dflt
        return 'gs'
    def __convert( self, glb ):
        if 'convert' in glb: return glb['convert']
        dflt = self.__convert_dflt( glb )
        if dflt is not None: return dflt
        return 'convert'
    def __chanrange( self, glb ):
        if 'chanrange' in glb: return glb['chanrange']
        dflt = self.__chanrange_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __phase( self, glb ):
        if 'phase' in glb: return glb['phase']
        dflt = self.__phase_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __showfdm( self, glb ):
        if 'showfdm' in glb: return glb['showfdm']
        dflt = self.__showfdm_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __showatmfield( self, glb ):
        if 'showatmfield' in glb: return glb['showatmfield']
        dflt = self.__showatmfield_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __lo1( self, glb ):
        if 'lo1' in glb: return glb['lo1']
        dflt = self.__lo1_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __showimage( self, glb ):
        if 'showimage' in glb: return glb['showimage']
        dflt = self.__showimage_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __showatmpoints( self, glb ):
        if 'showatmpoints' in glb: return glb['showatmpoints']
        dflt = self.__showatmpoints_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __parentms( self, glb ):
        if 'parentms' in glb: return glb['parentms']
        dflt = self.__parentms_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __pdftk( self, glb ):
        if 'pdftk' in glb: return glb['pdftk']
        dflt = self.__pdftk_dflt( glb )
        if dflt is not None: return dflt
        return 'pdftk'
    def __edge( self, glb ):
        if 'edge' in glb: return glb['edge']
        dflt = self.__edge_dflt( glb )
        if dflt is not None: return dflt
        return int(8)
    def __resample( self, glb ):
        if 'resample' in glb: return glb['resample']
        dflt = self.__resample_dflt( glb )
        if dflt is not None: return dflt
        return int(1)
    def __platformingThreshold( self, glb ):
        if 'platformingThreshold' in glb: return glb['platformingThreshold']
        dflt = self.__platformingThreshold_dflt( glb )
        if dflt is not None: return dflt
        return float(10.0)
    def __platformingSigma( self, glb ):
        if 'platformingSigma' in glb: return glb['platformingSigma']
        dflt = self.__platformingSigma_dflt( glb )
        if dflt is not None: return dflt
        return float(10.0)
    def __chanrangeSetXrange( self, glb ):
        if 'chanrangeSetXrange' in glb: return glb['chanrangeSetXrange']
        dflt = self.__chanrangeSetXrange_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __caltable_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__caltable( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable': value},{'caltable': self.__schema['caltable']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('caltable',pre,self.__to_string_(value),post,description))
    def __antenna_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__antenna( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('antenna',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __spw_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__spw( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('spw',pre,self.__to_string_(value),post,description))
    def __yaxis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__yaxis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'yaxis': value},{'yaxis': self.__schema['yaxis']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('yaxis',pre,self.__to_string_(value),post,description))
    def __xaxis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__xaxis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'xaxis': value},{'xaxis': self.__schema['xaxis']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('xaxis',pre,self.__to_string_(value),post,description))
    def __figfile_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__figfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'figfile': value},{'figfile': self.__schema['figfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('figfile',pre,self.__to_string_(value),post,description))
    def __plotrange_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__plotrange( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'plotrange': value},{'plotrange': self.__schema['plotrange']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('plotrange',pre,self.__to_string_(value),post,description))
    def __caltable2_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__caltable2( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'caltable2': value},{'caltable2': self.__schema['caltable2']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('caltable2',pre,self.__to_string_(value),post,description))
    def __overlay_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__overlay( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'overlay': value},{'overlay': self.__schema['overlay']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('overlay',pre,self.__to_string_(value),post,description))
    def __showflagged_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showflagged( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showflagged': value},{'showflagged': self.__schema['showflagged']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('showflagged',pre,self.__to_string_(value),post,description))
    def __timeranges_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__timeranges( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'timeranges': value},{'timeranges': self.__schema['timeranges']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('timeranges',pre,self.__to_string_(value),post,description))
    def __buildpdf_inp(self):
        out = self.__stdout or sys.stdout
        if self.__buildpdf_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__buildpdf( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'buildpdf': value},{'buildpdf': self.__schema['buildpdf']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('buildpdf',pre,self.__to_string_(value),post,description))
    def __caltable3_inp(self):
        out = self.__stdout or sys.stdout
        if self.__caltable3_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__caltable3( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'caltable3': value},{'caltable3': self.__schema['caltable3']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('caltable3',pre,self.__to_string_(value),post,description))
    def __markersize_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__markersize( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'markersize': value},{'markersize': self.__schema['markersize']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('markersize',pre,self.__to_string_(value),post,description))
    def __density_inp(self):
        out = self.__stdout or sys.stdout
        if self.__density_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__density( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'density': value},{'density': self.__schema['density']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('density',pre,self.__to_string_(value),post,description))
    def __interactive_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__interactive( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'interactive': value},{'interactive': self.__schema['interactive']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('interactive',pre,self.__to_string_(value),post,description))
    def __showpoints_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showpoints( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showpoints': value},{'showpoints': self.__schema['showpoints']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('showpoints',pre,self.__to_string_(value),post,description))
    def __showlines_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showlines( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showlines': value},{'showlines': self.__schema['showlines']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('showlines',pre,self.__to_string_(value),post,description))
    def __subplot_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__subplot( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'subplot': value},{'subplot': self.__schema['subplot']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('subplot',pre,self.__to_string_(value),post,description))
    def __zoom_inp(self):
        out = self.__stdout or sys.stdout
        if self.__zoom_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__zoom( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'zoom': value},{'zoom': self.__schema['zoom']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('zoom',pre,self.__to_string_(value),post,description))
    def __poln_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__poln( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'poln': value},{'poln': self.__schema['poln']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('poln',pre,self.__to_string_(value),post,description))
    def __showatm_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showatm( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showatm': value},{'showatm': self.__schema['showatm']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showatm',pre,self.__to_string_(value),post,description))
    def __pwv_inp(self):
        out = self.__stdout or sys.stdout
        if self.__pwv_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__pwv( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'pwv': value},{'pwv': self.__schema['pwv']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('pwv',pre,self.__to_string_(value),post,description))
    def __gs_inp(self):
        out = self.__stdout or sys.stdout
        if self.__gs_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__gs( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'gs': value},{'gs': self.__schema['gs']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('gs',pre,self.__to_string_(value),post,description))
    def __convert_inp(self):
        out = self.__stdout or sys.stdout
        if self.__convert_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__convert( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'convert': value},{'convert': self.__schema['convert']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('convert',pre,self.__to_string_(value),post,description))
    def __chanrange_inp(self):
        out = self.__stdout or sys.stdout
        if self.__chanrange_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__chanrange( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'chanrange': value},{'chanrange': self.__schema['chanrange']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('chanrange',pre,self.__to_string_(value),post,description))
    def __solutionTimeThresholdSeconds_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__solutionTimeThresholdSeconds( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'solutionTimeThresholdSeconds': value},{'solutionTimeThresholdSeconds': self.__schema['solutionTimeThresholdSeconds']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('solutionTimeThresholdSeconds',pre,self.__to_string_(value),post,description))
    def __debug_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__debug( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'debug': value},{'debug': self.__schema['debug']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('debug',pre,self.__to_string_(value),post,description))
    def __phase_inp(self):
        out = self.__stdout or sys.stdout
        if self.__phase_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__phase( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'phase': value},{'phase': self.__schema['phase']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('phase',pre,self.__to_string_(value),post,description))
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __showtsky_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showtsky( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showtsky': value},{'showtsky': self.__schema['showtsky']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showtsky',pre,self.__to_string_(value),post,description))
    def __showfdm_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showfdm_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showfdm( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showfdm': value},{'showfdm': self.__schema['showfdm']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showfdm',pre,self.__to_string_(value),post,description))
    def __showatmfield_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showatmfield_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showatmfield( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showatmfield': value},{'showatmfield': self.__schema['showatmfield']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showatmfield',pre,self.__to_string_(value),post,description))
    def __lo1_inp(self):
        out = self.__stdout or sys.stdout
        if self.__lo1_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__lo1( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'lo1': value},{'lo1': self.__schema['lo1']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('lo1',pre,self.__to_string_(value),post,description))
    def __showimage_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showimage_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showimage( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showimage': value},{'showimage': self.__schema['showimage']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showimage',pre,self.__to_string_(value),post,description))
    def __showatmpoints_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showatmpoints_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showatmpoints( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showatmpoints': value},{'showatmpoints': self.__schema['showatmpoints']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showatmpoints',pre,self.__to_string_(value),post,description))
    def __parentms_inp(self):
        out = self.__stdout or sys.stdout
        if self.__parentms_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__parentms( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'parentms': value},{'parentms': self.__schema['parentms']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('parentms',pre,self.__to_string_(value),post,description))
    def __pdftk_inp(self):
        out = self.__stdout or sys.stdout
        if self.__pdftk_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__pdftk( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'pdftk': value},{'pdftk': self.__schema['pdftk']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('pdftk',pre,self.__to_string_(value),post,description))
    def __channeldiff_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__channeldiff( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'channeldiff': value},{'channeldiff': self.__schema['channeldiff']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-28.28s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('channeldiff',pre,self.__to_string_(value),post,description))
    def __edge_inp(self):
        out = self.__stdout or sys.stdout
        if self.__edge_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__edge( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'edge': value},{'edge': self.__schema['edge']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('edge',pre,self.__to_string_(value),post,description))
    def __resample_inp(self):
        out = self.__stdout or sys.stdout
        if self.__resample_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__resample( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'resample': value},{'resample': self.__schema['resample']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('resample',pre,self.__to_string_(value),post,description))
    def __platformingThreshold_inp(self):
        out = self.__stdout or sys.stdout
        if self.__platformingThreshold_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__platformingThreshold( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'platformingThreshold': value},{'platformingThreshold': self.__schema['platformingThreshold']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('platformingThreshold',pre,self.__to_string_(value),post,description))
    def __platformingSigma_inp(self):
        out = self.__stdout or sys.stdout
        if self.__platformingSigma_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__platformingSigma( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'platformingSigma': value},{'platformingSigma': self.__schema['platformingSigma']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('platformingSigma',pre,self.__to_string_(value),post,description))
    def __basebands_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__basebands( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'basebands': value},{'basebands': self.__schema['basebands']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('basebands',pre,self.__to_string_(value),post,description))
    def __showBasebandNumber_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__showBasebandNumber( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'showBasebandNumber': value},{'showBasebandNumber': self.__schema['showBasebandNumber']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('showBasebandNumber',pre,self.__to_string_(value),post,description))
    def __scans_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__scans( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'scans': value},{'scans': self.__schema['scans']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('scans',pre,self.__to_string_(value),post,description))
    def __figfileSequential_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__figfileSequential( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'figfileSequential': value},{'figfileSequential': self.__schema['figfileSequential']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-28.28s = %s%-23.22s%s # %-.60s\n' % ('figfileSequential',pre,self.__to_string_(value),post,description))
    def __chanrangeSetXrange_inp(self):
        out = self.__stdout or sys.stdout
        if self.__chanrangeSetXrange_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__chanrangeSetXrange( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'chanrangeSetXrange': value},{'chanrangeSetXrange': self.__schema['chanrangeSetXrange']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-25.25s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('chanrangeSetXrange',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'timeranges' in glb: del glb['timeranges']
        if 'figfileSequential' in glb: del glb['figfileSequential']
        if 'markersize' in glb: del glb['markersize']
        if 'showimage' in glb: del glb['showimage']
        if 'gs' in glb: del glb['gs']
        if 'showatmfield' in glb: del glb['showatmfield']
        if 'field' in glb: del glb['field']
        if 'subplot' in glb: del glb['subplot']
        if 'showBasebandNumber' in glb: del glb['showBasebandNumber']
        if 'lo1' in glb: del glb['lo1']
        if 'phase' in glb: del glb['phase']
        if 'overlay' in glb: del glb['overlay']
        if 'showfdm' in glb: del glb['showfdm']
        if 'channeldiff' in glb: del glb['channeldiff']
        if 'platformingThreshold' in glb: del glb['platformingThreshold']
        if 'plotrange' in glb: del glb['plotrange']
        if 'caltable3' in glb: del glb['caltable3']
        if 'vis' in glb: del glb['vis']
        if 'resample' in glb: del glb['resample']
        if 'figfile' in glb: del glb['figfile']
        if 'scans' in glb: del glb['scans']
        if 'poln' in glb: del glb['poln']
        if 'showpoints' in glb: del glb['showpoints']
        if 'showlines' in glb: del glb['showlines']
        if 'interactive' in glb: del glb['interactive']
        if 'debug' in glb: del glb['debug']
        if 'caltable2' in glb: del glb['caltable2']
        if 'basebands' in glb: del glb['basebands']
        if 'parentms' in glb: del glb['parentms']
        if 'density' in glb: del glb['density']
        if 'pwv' in glb: del glb['pwv']
        if 'showatm' in glb: del glb['showatm']
        if 'chanrangeSetXrange' in glb: del glb['chanrangeSetXrange']
        if 'pdftk' in glb: del glb['pdftk']
        if 'platformingSigma' in glb: del glb['platformingSigma']
        if 'edge' in glb: del glb['edge']
        if 'chanrange' in glb: del glb['chanrange']
        if 'caltable' in glb: del glb['caltable']
        if 'solutionTimeThresholdSeconds' in glb: del glb['solutionTimeThresholdSeconds']
        if 'yaxis' in glb: del glb['yaxis']
        if 'xaxis' in glb: del glb['xaxis']
        if 'showflagged' in glb: del glb['showflagged']
        if 'spw' in glb: del glb['spw']
        if 'zoom' in glb: del glb['zoom']
        if 'showatmpoints' in glb: del glb['showatmpoints']
        if 'buildpdf' in glb: del glb['buildpdf']
        if 'convert' in glb: del glb['convert']
        if 'showtsky' in glb: del glb['showtsky']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__caltable_inp( )
        self.__antenna_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__yaxis_inp( )
        self.__xaxis_inp( )
        self.__figfile_inp( )
        self.__plotrange_inp( )
        self.__caltable2_inp( )
        self.__overlay_inp( )
        self.__showflagged_inp( )
        self.__timeranges_inp( )
        self.__buildpdf_inp( )
        self.__caltable3_inp( )
        self.__markersize_inp( )
        self.__density_inp( )
        self.__interactive_inp( )
        self.__showpoints_inp( )
        self.__showlines_inp( )
        self.__subplot_inp( )
        self.__zoom_inp( )
        self.__poln_inp( )
        self.__showatm_inp( )
        self.__pwv_inp( )
        self.__gs_inp( )
        self.__convert_inp( )
        self.__chanrange_inp( )
        self.__solutionTimeThresholdSeconds_inp( )
        self.__debug_inp( )
        self.__phase_inp( )
        self.__vis_inp( )
        self.__showtsky_inp( )
        self.__showfdm_inp( )
        self.__showatmfield_inp( )
        self.__lo1_inp( )
        self.__showimage_inp( )
        self.__showatmpoints_inp( )
        self.__parentms_inp( )
        self.__pdftk_inp( )
        self.__channeldiff_inp( )
        self.__edge_inp( )
        self.__resample_inp( )
        self.__platformingThreshold_inp( )
        self.__platformingSigma_inp( )
        self.__basebands_inp( )
        self.__showBasebandNumber_inp( )
        self.__scans_inp( )
        self.__figfileSequential_inp( )
        self.__chanrangeSetXrange_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("plotbandpass.last"):
                filename = "plotbandpass.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, caltable=None, antenna=None, field=None, spw=None, yaxis=None, xaxis=None, figfile=None, plotrange=None, caltable2=None, overlay=None, showflagged=None, timeranges=None, buildpdf=None, caltable3=None, markersize=None, density=None, interactive=None, showpoints=None, showlines=None, subplot=None, zoom=None, poln=None, showatm=None, pwv=None, gs=None, convert=None, chanrange=None, solutionTimeThresholdSeconds=None, debug=None, phase=None, vis=None, showtsky=None, showfdm=None, showatmfield=None, lo1=None, showimage=None, showatmpoints=None, parentms=None, pdftk=None, channeldiff=None, edge=None, resample=None, platformingThreshold=None, platformingSigma=None, basebands=None, showBasebandNumber=None, scans=None, figfileSequential=None, chanrangeSetXrange=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('plotbandpass.pre')
        _postfile = os.path.realpath('plotbandpass.last')
        _return_result_ = None
        _arguments = [caltable,antenna,field,spw,yaxis,xaxis,figfile,plotrange,caltable2,overlay,showflagged,timeranges,buildpdf,caltable3,markersize,density,interactive,showpoints,showlines,subplot,zoom,poln,showatm,pwv,gs,convert,chanrange,solutionTimeThresholdSeconds,debug,phase,vis,showtsky,showfdm,showatmfield,lo1,showimage,showatmpoints,parentms,pdftk,channeldiff,edge,resample,platformingThreshold,platformingSigma,basebands,showBasebandNumber,scans,figfileSequential,chanrangeSetXrange]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if caltable is not None: local_global['caltable'] = caltable
            if antenna is not None: local_global['antenna'] = antenna
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if yaxis is not None: local_global['yaxis'] = yaxis
            if xaxis is not None: local_global['xaxis'] = xaxis
            if figfile is not None: local_global['figfile'] = figfile
            if plotrange is not None: local_global['plotrange'] = plotrange
            if caltable2 is not None: local_global['caltable2'] = caltable2
            if overlay is not None: local_global['overlay'] = overlay
            if showflagged is not None: local_global['showflagged'] = showflagged
            if timeranges is not None: local_global['timeranges'] = timeranges
            if markersize is not None: local_global['markersize'] = markersize
            if interactive is not None: local_global['interactive'] = interactive
            if showpoints is not None: local_global['showpoints'] = showpoints
            if showlines is not None: local_global['showlines'] = showlines
            if subplot is not None: local_global['subplot'] = subplot
            if poln is not None: local_global['poln'] = poln
            if showatm is not None: local_global['showatm'] = showatm
            if solutionTimeThresholdSeconds is not None: local_global['solutionTimeThresholdSeconds'] = solutionTimeThresholdSeconds
            if debug is not None: local_global['debug'] = debug
            if vis is not None: local_global['vis'] = vis
            if showtsky is not None: local_global['showtsky'] = showtsky
            if channeldiff is not None: local_global['channeldiff'] = channeldiff
            if basebands is not None: local_global['basebands'] = basebands
            if showBasebandNumber is not None: local_global['showBasebandNumber'] = showBasebandNumber
            if scans is not None: local_global['scans'] = scans
            if figfileSequential is not None: local_global['figfileSequential'] = figfileSequential

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['caltable'] = self.__caltable( local_global )
            _invocation_parameters['antenna'] = self.__antenna( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['yaxis'] = self.__yaxis( local_global )
            _invocation_parameters['xaxis'] = self.__xaxis( local_global )
            _invocation_parameters['figfile'] = self.__figfile( local_global )
            _invocation_parameters['plotrange'] = self.__plotrange( local_global )
            _invocation_parameters['caltable2'] = self.__caltable2( local_global )
            _invocation_parameters['overlay'] = self.__overlay( local_global )
            _invocation_parameters['showflagged'] = self.__showflagged( local_global )
            _invocation_parameters['timeranges'] = self.__timeranges( local_global )
            _invocation_parameters['markersize'] = self.__markersize( local_global )
            _invocation_parameters['interactive'] = self.__interactive( local_global )
            _invocation_parameters['showpoints'] = self.__showpoints( local_global )
            _invocation_parameters['showlines'] = self.__showlines( local_global )
            _invocation_parameters['subplot'] = self.__subplot( local_global )
            _invocation_parameters['poln'] = self.__poln( local_global )
            _invocation_parameters['showatm'] = self.__showatm( local_global )
            _invocation_parameters['solutionTimeThresholdSeconds'] = self.__solutionTimeThresholdSeconds( local_global )
            _invocation_parameters['debug'] = self.__debug( local_global )
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['showtsky'] = self.__showtsky( local_global )
            _invocation_parameters['channeldiff'] = self.__channeldiff( local_global )
            _invocation_parameters['basebands'] = self.__basebands( local_global )
            _invocation_parameters['showBasebandNumber'] = self.__showBasebandNumber( local_global )
            _invocation_parameters['scans'] = self.__scans( local_global )
            _invocation_parameters['figfileSequential'] = self.__figfileSequential( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['buildpdf'] = self.__buildpdf( _invocation_parameters ) if buildpdf is None else buildpdf
            _invocation_parameters['caltable3'] = self.__caltable3( _invocation_parameters ) if caltable3 is None else caltable3
            _invocation_parameters['density'] = self.__density( _invocation_parameters ) if density is None else density
            _invocation_parameters['zoom'] = self.__zoom( _invocation_parameters ) if zoom is None else zoom
            _invocation_parameters['pwv'] = self.__pwv( _invocation_parameters ) if pwv is None else pwv
            _invocation_parameters['gs'] = self.__gs( _invocation_parameters ) if gs is None else gs
            _invocation_parameters['convert'] = self.__convert( _invocation_parameters ) if convert is None else convert
            _invocation_parameters['chanrange'] = self.__chanrange( _invocation_parameters ) if chanrange is None else chanrange
            _invocation_parameters['phase'] = self.__phase( _invocation_parameters ) if phase is None else phase
            _invocation_parameters['showfdm'] = self.__showfdm( _invocation_parameters ) if showfdm is None else showfdm
            _invocation_parameters['showatmfield'] = self.__showatmfield( _invocation_parameters ) if showatmfield is None else showatmfield
            _invocation_parameters['lo1'] = self.__lo1( _invocation_parameters ) if lo1 is None else lo1
            _invocation_parameters['showimage'] = self.__showimage( _invocation_parameters ) if showimage is None else showimage
            _invocation_parameters['showatmpoints'] = self.__showatmpoints( _invocation_parameters ) if showatmpoints is None else showatmpoints
            _invocation_parameters['parentms'] = self.__parentms( _invocation_parameters ) if parentms is None else parentms
            _invocation_parameters['pdftk'] = self.__pdftk( _invocation_parameters ) if pdftk is None else pdftk
            _invocation_parameters['edge'] = self.__edge( _invocation_parameters ) if edge is None else edge
            _invocation_parameters['resample'] = self.__resample( _invocation_parameters ) if resample is None else resample
            _invocation_parameters['platformingThreshold'] = self.__platformingThreshold( _invocation_parameters ) if platformingThreshold is None else platformingThreshold
            _invocation_parameters['platformingSigma'] = self.__platformingSigma( _invocation_parameters ) if platformingSigma is None else platformingSigma
            _invocation_parameters['chanrangeSetXrange'] = self.__chanrangeSetXrange( _invocation_parameters ) if chanrangeSetXrange is None else chanrangeSetXrange

        else:
            # invoke with inp/go semantics
            _invocation_parameters['caltable'] = self.__caltable( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['yaxis'] = self.__yaxis( self.__globals_( ) )
            _invocation_parameters['xaxis'] = self.__xaxis( self.__globals_( ) )
            _invocation_parameters['figfile'] = self.__figfile( self.__globals_( ) )
            _invocation_parameters['plotrange'] = self.__plotrange( self.__globals_( ) )
            _invocation_parameters['caltable2'] = self.__caltable2( self.__globals_( ) )
            _invocation_parameters['overlay'] = self.__overlay( self.__globals_( ) )
            _invocation_parameters['showflagged'] = self.__showflagged( self.__globals_( ) )
            _invocation_parameters['timeranges'] = self.__timeranges( self.__globals_( ) )
            _invocation_parameters['buildpdf'] = self.__buildpdf( self.__globals_( ) )
            _invocation_parameters['caltable3'] = self.__caltable3( self.__globals_( ) )
            _invocation_parameters['markersize'] = self.__markersize( self.__globals_( ) )
            _invocation_parameters['density'] = self.__density( self.__globals_( ) )
            _invocation_parameters['interactive'] = self.__interactive( self.__globals_( ) )
            _invocation_parameters['showpoints'] = self.__showpoints( self.__globals_( ) )
            _invocation_parameters['showlines'] = self.__showlines( self.__globals_( ) )
            _invocation_parameters['subplot'] = self.__subplot( self.__globals_( ) )
            _invocation_parameters['zoom'] = self.__zoom( self.__globals_( ) )
            _invocation_parameters['poln'] = self.__poln( self.__globals_( ) )
            _invocation_parameters['showatm'] = self.__showatm( self.__globals_( ) )
            _invocation_parameters['pwv'] = self.__pwv( self.__globals_( ) )
            _invocation_parameters['gs'] = self.__gs( self.__globals_( ) )
            _invocation_parameters['convert'] = self.__convert( self.__globals_( ) )
            _invocation_parameters['chanrange'] = self.__chanrange( self.__globals_( ) )
            _invocation_parameters['solutionTimeThresholdSeconds'] = self.__solutionTimeThresholdSeconds( self.__globals_( ) )
            _invocation_parameters['debug'] = self.__debug( self.__globals_( ) )
            _invocation_parameters['phase'] = self.__phase( self.__globals_( ) )
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['showtsky'] = self.__showtsky( self.__globals_( ) )
            _invocation_parameters['showfdm'] = self.__showfdm( self.__globals_( ) )
            _invocation_parameters['showatmfield'] = self.__showatmfield( self.__globals_( ) )
            _invocation_parameters['lo1'] = self.__lo1( self.__globals_( ) )
            _invocation_parameters['showimage'] = self.__showimage( self.__globals_( ) )
            _invocation_parameters['showatmpoints'] = self.__showatmpoints( self.__globals_( ) )
            _invocation_parameters['parentms'] = self.__parentms( self.__globals_( ) )
            _invocation_parameters['pdftk'] = self.__pdftk( self.__globals_( ) )
            _invocation_parameters['channeldiff'] = self.__channeldiff( self.__globals_( ) )
            _invocation_parameters['edge'] = self.__edge( self.__globals_( ) )
            _invocation_parameters['resample'] = self.__resample( self.__globals_( ) )
            _invocation_parameters['platformingThreshold'] = self.__platformingThreshold( self.__globals_( ) )
            _invocation_parameters['platformingSigma'] = self.__platformingSigma( self.__globals_( ) )
            _invocation_parameters['basebands'] = self.__basebands( self.__globals_( ) )
            _invocation_parameters['showBasebandNumber'] = self.__showBasebandNumber( self.__globals_( ) )
            _invocation_parameters['scans'] = self.__scans( self.__globals_( ) )
            _invocation_parameters['figfileSequential'] = self.__figfileSequential( self.__globals_( ) )
            _invocation_parameters['chanrangeSetXrange'] = self.__chanrangeSetXrange( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-28s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#plotbandpass( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _plotbandpass_t( _invocation_parameters['caltable'],_invocation_parameters['antenna'],_invocation_parameters['field'],_invocation_parameters['spw'],_invocation_parameters['yaxis'],_invocation_parameters['xaxis'],_invocation_parameters['figfile'],_invocation_parameters['plotrange'],_invocation_parameters['caltable2'],_invocation_parameters['overlay'],_invocation_parameters['showflagged'],_invocation_parameters['timeranges'],_invocation_parameters['buildpdf'],_invocation_parameters['caltable3'],_invocation_parameters['markersize'],_invocation_parameters['density'],_invocation_parameters['interactive'],_invocation_parameters['showpoints'],_invocation_parameters['showlines'],_invocation_parameters['subplot'],_invocation_parameters['zoom'],_invocation_parameters['poln'],_invocation_parameters['showatm'],_invocation_parameters['pwv'],_invocation_parameters['gs'],_invocation_parameters['convert'],_invocation_parameters['chanrange'],_invocation_parameters['solutionTimeThresholdSeconds'],_invocation_parameters['debug'],_invocation_parameters['phase'],_invocation_parameters['vis'],_invocation_parameters['showtsky'],_invocation_parameters['showfdm'],_invocation_parameters['showatmfield'],_invocation_parameters['lo1'],_invocation_parameters['showimage'],_invocation_parameters['showatmpoints'],_invocation_parameters['parentms'],_invocation_parameters['pdftk'],_invocation_parameters['channeldiff'],_invocation_parameters['edge'],_invocation_parameters['resample'],_invocation_parameters['platformingThreshold'],_invocation_parameters['platformingSigma'],_invocation_parameters['basebands'],_invocation_parameters['showBasebandNumber'],_invocation_parameters['scans'],_invocation_parameters['figfileSequential'],_invocation_parameters['chanrangeSetXrange'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

plotbandpass = _plotbandpass( )

