##################### generated by xml-casa (v2) from simanalyze.xml ################
##################### 7d3a26f1b8ab6d33edd31cc90d95f01a ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import simanalyze as _simanalyze_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _simanalyze:
    """
    simanalyze ---- image and analyze measurement sets created with simobserve

    
    This task is for imaging and analyzing measurement sets (MSs) simulated
    with simobserve or simalma.
    

    --------- parameter descriptions ---------------------------------------------

    project        root prefix for input and output file names.  
                   This must be the directory of results generated by running 
                   simobserve or simalma. In particular $project/$project.skymodel 
                   will be required in order to compare output and input images.
    image          (re)image $project.*.ms to $project.image
    imagename      simulation output image to analyze (default = first $project/*.image found)
    skymodel       skymodel image to analyze (the .skymodel image created by simobserve or simalma and used by one of those tasks to create an MS; if unspecified, will try to find one similar to your specified output image name)
    vis            Measurement Set(s) to image
    modelimage     lower resolution prior image to use in clean e.g. existing total power image
    imsize         output image size in pixels (x,y) or 0 to match model
    imdirection    set output image direction, (otherwise center on the model)
    cell           cell size with units e.g. "10arcsec" or "" to equal model
    interactive    interactive clean?  (make sure to set niter>0 also)
    niter          maximum number of iterations (0 for dirty image)
    threshold      flux level (+units) to stop cleaning
    weighting      weighting to apply to visibilities.  briggs will use robust=0.5
    mask           Cleanbox(es), mask image(s), region(s), or a level
    outertaper     uv-taper on outer baselines in uv-plane
    pbcor          correct the output of synthesis images for primary beam response?
    stokes         Stokes params to image
    featherimage   image (e.g. total power) to feather with new image
    analyze        (only first 6 selected outputs will be displayed)
    showuv         display uv coverage
    showpsf        display synthesized (dirty) beam (ignored in single dish simulation)
    showmodel      display sky model at original resolution
    showconvolved  display sky model convolved with output clean beam
    showclean      display the synthesized image
    showresidual   display the clean residual image (ignored in single dish simulation)
    showdifference display difference between output cleaned image and input model sky image convolved with output clean beam
    showfidelity   display fidelity (see help)
    graphics       display graphics at each stage to [screen|file|both|none]
    verbose        
    overwrite      overwrite files starting with $project
    dryrun         only print information [experimental; only for interfermetric data]
    logfile        
    [1;42mRETURNS[1;m           void

    --------- examples -----------------------------------------------------------

    
    * "project" needs to be the directory of results generated by running
    simobserve or simalma. In particular $project/$project.skymodel
    will be required in order to compare output and input images.
    
    -------------------------------
    mode image=True:
    * One should input one or more simulated MSs using the "vis" parameter.
    These can include a total power MS.
    Simanalyze will grid any total power MS,
    clean (invert and deconvolve) any interferometric MSs,
    and feather the results.
    
    * the "vis" parameter:
    - example: single MS: vis="mysim.alma.out03.ms"
    - example: multiple MSs: vis="mysim.alma.out03.ms,mysim.aca.tp.ms"
    - one can use "$project" and let the task automatically replace it with
    the project name, e.g., vis="$project.noisy.ms,$project.noisy.sd.ms".
    However, note that if you created measurement set(s) using simobserve,
    MS names will include the configuration, e.g.
    "$project.alma_out20.noisy.ms"
    - setting "vis" to "default" will find and attempt to image
    all measurement sets (interferometric and single dish) in the
    project directory
    
    * Sometimes it is preferable to grid the single dish MS using the
    sdimaging task for more control.  In that case one can input
    the resulting single dish imaging under "featherimage", only
    put interferometric MSs in "vis", and simanalyze  will clean the
    interferometric and feather with your "featherimage".
    
    * Sometimes it is preferable to use a low resolution (single dish or
    synthesis) image as a prior model during clean deconvolution
    of a higher resolution interferometric MS.  That is accomplished
    by putting the low-resolution image in "modelimage" and the MS
    to be deconvolved in "vis". NOTE: This is not the original skymodel
    that was used in simobserve or simalma.  It is recommended to
    leave this blank unless the user is familiar with using a prior
    in clean deconvolution. (see casaguides) NOTE 2: modelimage will
    not be used if the MS to be imaged is total power.
    
    * uses Cotton-Schwab clean for single fields and Mosaic gridding
    for multiple fields (with Clark PSF calculation in minor cycles).
    
    * interactive clean or use of more parameters than the subset
    visible here are available by simply running the clean task directly,
    then using simanalyze in the mode image=False (see below).
    
    * if graphics are turned on, this step will display the clean image
    and residual image
    
    * the "mask" parameter:
    Specification of cleanbox(es), mask image(s), primary beam
    coverage level, and/or region(s) to be used for cleaning.
    clean tends to perform better, and is less likely to diverge, if
    the clean component placement is limited by a mask to where real
    emission is expected to be.  e.g. pixel ranges mask=[110,110,150,145],
    filename of mask image mask='myimage.mask', or a file with mask
    regions --  see help for the clean task for more information.
    
    * NOTE: simanalyze was designed to be used after one or more runs of
    simobserve, and as such it assumes it will be able to find a
    sky model image called $project/$project.skymodel, .newmodel, or
    .compskymodel in the $project/ subdirectory.  If the simulated
    MS has been created by means other than simply calling simobserve,
    the user may have to copy their sky model image into the $project
    subdirectory and call it "$project.skymodel"
    
    -------------------------------
    mode image=False:
    * Sometimes the user has created a synthesized image themselves,
    most likely using the clean task, perhaps along with
    sdimaging and feather, or a previous call to simanalyze with image=True
    * The user should input that simulated image as "imagename".
    It will have suffix .image if created by clean, simanalyze, or simalma
    * simanalyze will attempt to find an appropriate skymodel image -
    this is the *.skymodel image created by simobserve or simalma,
    the (optionally rescaled) original sky model, which was used
    to create the measurement set.
    simanalyze will look in the project directory, but if there are
    multuple skymodels present it may not find the right one, so the
    "skymodel" parameter allows explicit specification.
    
    -------------------------------
    mode analyze=True is used to create an image of the difference between
    the input skymodel and the simulated output image (whether that output
    image is being generated in the same call to simanalyze, with
    image=True, or has already been generated, and simanalyze is being
    called with image=False).
    
    showuv -- display uv coverage
    showpsf -- display synthesized (dirty) beam (ignored in single dish simulation)
    showmodel -- display sky model at original resolution
    showconvolved -- display sky model convolved with output beam
    showclean -- display the synthesized image
    showresidual -- display the clean residual image (ignored in single dish simulation)
    showdifference -- display difference between output cleaned image and
    input model sky image convolved with output clean beam
    showfidelity -- display fidelity image
    fidelity = abs(input) / max[ abs(input-output), 0.7*rms(output) ]
    
    
    Note that the RMS is calculated in the lower quarter of the image.
    This is likely not the best choice, so you are encouraged to
    measure RMS yourself in an off-source region using the viewer.
    
    dryrun=True is an advanced technical mode only useful for interferometric
    (not single dish) data.
    
    -------------------------------
    Output produced: (not all will always exist, depending on input parameters)
    To support different runs with different arrays, the names have the
    configuration name from antennalist appended.
    -------------------------------
    project.[cfg].skymodel.flat.regrid.conv = input sky regridded to match
    the output image, and convolved with the output clean beam
    
    project.[cfg].image = synthesized image
    project.[cfg].flux.pbcoverage = primary beam correction for mosaic image
    project.[cfg].residual = residual image after cleaning
    project.[cfg].clean.last = parameter file of what parameters were used in
    the clean task
    project.[cfg].psf = synthesized (dirty) beam calculated from weighted uv
    distribution
    project.[cfg].image.png = diagnostic figure of clean image and residual
    
    project.[cfg].fidelity = fidelity image
    project.[cfg].analysis.png = diagnostic figure of difference and fidelity
    
    project.[cfg].simanalyze.last = saved input parameters for simanalyze task
    
    -------------------------------
    Please see http://casaguides.nrao.edu, and contact the CASA helpdesk
    with questions.
    


    """

    _info_group_ = """simulation"""
    _info_desc_ = """image and analyze measurement sets created with simobserve"""

    __schema = {'project': {'type': 'cStr'}, 'image': {'type': 'cBool'}, 'imagename': {'type': 'cStr'}, 'skymodel': {'type': 'cStr'}, 'vis': {'type': 'cStr'}, 'modelimage': {'type': 'cStr'}, 'imsize': {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}, 'imdirection': {'type': 'cStr'}, 'cell': {'type': 'cStr'}, 'interactive': {'type': 'cBool'}, 'niter': {'type': 'cInt'}, 'threshold': {'type': 'cStr'}, 'weighting': {'type': 'cStr'}, 'mask': {'type': 'cVariant', 'coerce': [_coerce.to_variant]}, 'outertaper': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, 'pbcor': {'type': 'cBool'}, 'stokes': {'type': 'cStr'}, 'featherimage': {'type': 'cStr'}, 'analyze': {'type': 'cBool'}, 'showuv': {'type': 'cBool'}, 'showpsf': {'type': 'cBool'}, 'showmodel': {'type': 'cBool'}, 'showconvolved': {'type': 'cBool'}, 'showclean': {'type': 'cBool'}, 'showresidual': {'type': 'cBool'}, 'showdifference': {'type': 'cBool'}, 'showfidelity': {'type': 'cBool'}, 'graphics': {'type': 'cStr'}, 'verbose': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}, 'dryrun': {'type': 'cBool'}, 'logfile': {'type': 'cStr'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __overwrite_dflt( self, glb ):
        return True

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return True

    def __dryrun_dflt( self, glb ):
        return False

    def __dryrun( self, glb ):
        if 'dryrun' in glb: return glb['dryrun']
        return False

    def __project_dflt( self, glb ):
        return 'sim'

    def __project( self, glb ):
        if 'project' in glb: return glb['project']
        return 'sim'

    def __logfile_dflt( self, glb ):
        return ''

    def __logfile( self, glb ):
        if 'logfile' in glb: return glb['logfile']
        return ''

    def __image_dflt( self, glb ):
        return True

    def __image( self, glb ):
        if 'image' in glb: return glb['image']
        return True

    def __graphics_dflt( self, glb ):
        return 'both'

    def __graphics( self, glb ):
        if 'graphics' in glb: return glb['graphics']
        return 'both'

    def __analyze_dflt( self, glb ):
        return False

    def __analyze( self, glb ):
        if 'analyze' in glb: return glb['analyze']
        return False

    def __verbose_dflt( self, glb ):
        return False

    def __verbose( self, glb ):
        if 'verbose' in glb: return glb['verbose']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __stokes_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "I"
        return None
    def __mask_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return []
        return None
    def __weighting_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "natural"
        return None
    def __showdifference_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __imdirection_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __showuv_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __showclean_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __imagename_dflt( self, glb ):
        if self.__image( glb ) == bool(False): return "default"
        return None
    def __imsize_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return []
        return None
    def __vis_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "default"
        return None
    def __showfidelity_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __interactive_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return bool(False)
        return None
    def __featherimage_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __pbcor_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return bool(True)
        return None
    def __outertaper_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return []
        return None
    def __threshold_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return "0.1mJy"
        return None
    def __niter_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return int(0)
        return None
    def __cell_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __showresidual_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(False)
        return None
    def __showpsf_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __modelimage_dflt( self, glb ):
        if self.__image( glb ) == bool(True): return ""
        return None
    def __showmodel_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(True)
        return None
    def __showconvolved_dflt( self, glb ):
        if self.__analyze( glb ) == bool(True): return bool(False)
        return None
    def __skymodel_dflt( self, glb ):
        if self.__image( glb ) == bool(False): return ""
        return None

    #--------- return subparam values -------------------------------------------------
    def __imagename( self, glb ):
        if 'imagename' in glb: return glb['imagename']
        dflt = self.__imagename_dflt( glb )
        if dflt is not None: return dflt
        return 'default'
    def __skymodel( self, glb ):
        if 'skymodel' in glb: return glb['skymodel']
        dflt = self.__skymodel_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        dflt = self.__vis_dflt( glb )
        if dflt is not None: return dflt
        return 'default'
    def __modelimage( self, glb ):
        if 'modelimage' in glb: return glb['modelimage']
        dflt = self.__modelimage_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __imsize( self, glb ):
        if 'imsize' in glb: return glb['imsize']
        dflt = self.__imsize_dflt( glb )
        if dflt is not None: return dflt
        return [ int(0),int(0) ]
    def __imdirection( self, glb ):
        if 'imdirection' in glb: return glb['imdirection']
        dflt = self.__imdirection_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __cell( self, glb ):
        if 'cell' in glb: return glb['cell']
        dflt = self.__cell_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __interactive( self, glb ):
        if 'interactive' in glb: return glb['interactive']
        dflt = self.__interactive_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __niter( self, glb ):
        if 'niter' in glb: return glb['niter']
        dflt = self.__niter_dflt( glb )
        if dflt is not None: return dflt
        return int(0)
    def __threshold( self, glb ):
        if 'threshold' in glb: return glb['threshold']
        dflt = self.__threshold_dflt( glb )
        if dflt is not None: return dflt
        return '0.1mJy'
    def __weighting( self, glb ):
        if 'weighting' in glb: return glb['weighting']
        dflt = self.__weighting_dflt( glb )
        if dflt is not None: return dflt
        return 'natural'
    def __mask( self, glb ):
        if 'mask' in glb: return glb['mask']
        dflt = self.__mask_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __outertaper( self, glb ):
        if 'outertaper' in glb: return glb['outertaper']
        dflt = self.__outertaper_dflt( glb )
        if dflt is not None: return dflt
        return [  ]
    def __pbcor( self, glb ):
        if 'pbcor' in glb: return glb['pbcor']
        dflt = self.__pbcor_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __stokes( self, glb ):
        if 'stokes' in glb: return glb['stokes']
        dflt = self.__stokes_dflt( glb )
        if dflt is not None: return dflt
        return 'I'
    def __featherimage( self, glb ):
        if 'featherimage' in glb: return glb['featherimage']
        dflt = self.__featherimage_dflt( glb )
        if dflt is not None: return dflt
        return ''
    def __showuv( self, glb ):
        if 'showuv' in glb: return glb['showuv']
        dflt = self.__showuv_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showpsf( self, glb ):
        if 'showpsf' in glb: return glb['showpsf']
        dflt = self.__showpsf_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showmodel( self, glb ):
        if 'showmodel' in glb: return glb['showmodel']
        dflt = self.__showmodel_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showconvolved( self, glb ):
        if 'showconvolved' in glb: return glb['showconvolved']
        dflt = self.__showconvolved_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __showclean( self, glb ):
        if 'showclean' in glb: return glb['showclean']
        dflt = self.__showclean_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showresidual( self, glb ):
        if 'showresidual' in glb: return glb['showresidual']
        dflt = self.__showresidual_dflt( glb )
        if dflt is not None: return dflt
        return False
    def __showdifference( self, glb ):
        if 'showdifference' in glb: return glb['showdifference']
        dflt = self.__showdifference_dflt( glb )
        if dflt is not None: return dflt
        return True
    def __showfidelity( self, glb ):
        if 'showfidelity' in glb: return glb['showfidelity']
        dflt = self.__showfidelity_dflt( glb )
        if dflt is not None: return dflt
        return True

    #--------- subparam inp output ----------------------------------------------------
    def __project_inp(self):
        out = self.__stdout or sys.stdout
        description = 'root prefix for output file names'
        value = self.__project( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'project': value},{'project': self.__schema['project']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-17.17s = %s%-23.22s%s # %-.60s\n' % ('project',pre,self.__to_string_(value),post,description))
    def __image_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__image( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'image': value},{'image': self.__schema['image']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('image',pre,self.__to_string_(value),post,description))
    def __imagename_inp(self):
        out = self.__stdout or sys.stdout
        if self.__imagename_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__imagename( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'imagename': value},{'imagename': self.__schema['imagename']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('imagename',pre,self.__to_string_(value),post,description))
    def __skymodel_inp(self):
        out = self.__stdout or sys.stdout
        if self.__skymodel_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__skymodel( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'skymodel': value},{'skymodel': self.__schema['skymodel']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('skymodel',pre,self.__to_string_(value),post,description))
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        if self.__vis_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__vis( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __modelimage_inp(self):
        out = self.__stdout or sys.stdout
        if self.__modelimage_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__modelimage( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'modelimage': value},{'modelimage': self.__schema['modelimage']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('modelimage',pre,self.__to_string_(value),post,description))
    def __imsize_inp(self):
        out = self.__stdout or sys.stdout
        if self.__imsize_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__imsize( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'imsize': value},{'imsize': self.__schema['imsize']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('imsize',pre,self.__to_string_(value),post,description))
    def __imdirection_inp(self):
        out = self.__stdout or sys.stdout
        if self.__imdirection_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__imdirection( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'imdirection': value},{'imdirection': self.__schema['imdirection']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('imdirection',pre,self.__to_string_(value),post,description))
    def __cell_inp(self):
        out = self.__stdout or sys.stdout
        if self.__cell_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__cell( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'cell': value},{'cell': self.__schema['cell']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('cell',pre,self.__to_string_(value),post,description))
    def __interactive_inp(self):
        out = self.__stdout or sys.stdout
        if self.__interactive_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__interactive( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'interactive': value},{'interactive': self.__schema['interactive']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('interactive',pre,self.__to_string_(value),post,description))
    def __niter_inp(self):
        out = self.__stdout or sys.stdout
        if self.__niter_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__niter( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'niter': value},{'niter': self.__schema['niter']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('niter',pre,self.__to_string_(value),post,description))
    def __threshold_inp(self):
        out = self.__stdout or sys.stdout
        if self.__threshold_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__threshold( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'threshold': value},{'threshold': self.__schema['threshold']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('threshold',pre,self.__to_string_(value),post,description))
    def __weighting_inp(self):
        out = self.__stdout or sys.stdout
        if self.__weighting_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__weighting( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'weighting': value},{'weighting': self.__schema['weighting']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('weighting',pre,self.__to_string_(value),post,description))
    def __mask_inp(self):
        out = self.__stdout or sys.stdout
        if self.__mask_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__mask( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'mask': value},{'mask': self.__schema['mask']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('mask',pre,self.__to_string_(value),post,description))
    def __outertaper_inp(self):
        out = self.__stdout or sys.stdout
        if self.__outertaper_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__outertaper( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'outertaper': value},{'outertaper': self.__schema['outertaper']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('outertaper',pre,self.__to_string_(value),post,description))
    def __pbcor_inp(self):
        out = self.__stdout or sys.stdout
        if self.__pbcor_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__pbcor( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'pbcor': value},{'pbcor': self.__schema['pbcor']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('pbcor',pre,self.__to_string_(value),post,description))
    def __stokes_inp(self):
        out = self.__stdout or sys.stdout
        if self.__stokes_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__stokes( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'stokes': value},{'stokes': self.__schema['stokes']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('stokes',pre,self.__to_string_(value),post,description))
    def __featherimage_inp(self):
        out = self.__stdout or sys.stdout
        if self.__featherimage_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__featherimage( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'featherimage': value},{'featherimage': self.__schema['featherimage']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('featherimage',pre,self.__to_string_(value),post,description))
    def __analyze_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__analyze( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'analyze': value},{'analyze': self.__schema['analyze']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-17.17s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('analyze',pre,self.__to_string_(value),post,description))
    def __showuv_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showuv_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showuv( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showuv': value},{'showuv': self.__schema['showuv']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showuv',pre,self.__to_string_(value),post,description))
    def __showpsf_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showpsf_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showpsf( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showpsf': value},{'showpsf': self.__schema['showpsf']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showpsf',pre,self.__to_string_(value),post,description))
    def __showmodel_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showmodel_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showmodel( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showmodel': value},{'showmodel': self.__schema['showmodel']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showmodel',pre,self.__to_string_(value),post,description))
    def __showconvolved_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showconvolved_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showconvolved( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showconvolved': value},{'showconvolved': self.__schema['showconvolved']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showconvolved',pre,self.__to_string_(value),post,description))
    def __showclean_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showclean_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showclean( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showclean': value},{'showclean': self.__schema['showclean']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showclean',pre,self.__to_string_(value),post,description))
    def __showresidual_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showresidual_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showresidual( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showresidual': value},{'showresidual': self.__schema['showresidual']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showresidual',pre,self.__to_string_(value),post,description))
    def __showdifference_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showdifference_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showdifference( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showdifference': value},{'showdifference': self.__schema['showdifference']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showdifference',pre,self.__to_string_(value),post,description))
    def __showfidelity_inp(self):
        out = self.__stdout or sys.stdout
        if self.__showfidelity_dflt( self.__globals_( ) ) is not None:
             description = ''
             value = self.__showfidelity( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'showfidelity': value},{'showfidelity': self.__schema['showfidelity']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-14.14s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('showfidelity',pre,self.__to_string_(value),post,description))
    def __graphics_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__graphics( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'graphics': value},{'graphics': self.__schema['graphics']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-17.17s = %s%-23.22s%s # %-.60s\n' % ('graphics',pre,self.__to_string_(value),post,description))
    def __verbose_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__verbose( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'verbose': value},{'verbose': self.__schema['verbose']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-17.17s = %s%-23.22s%s # %-.60s\n' % ('verbose',pre,self.__to_string_(value),post,description))
    def __overwrite_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-17.17s = %s%-23.22s%s # %-.60s\n' % ('overwrite',pre,self.__to_string_(value),post,description))
    def __dryrun_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__dryrun( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'dryrun': value},{'dryrun': self.__schema['dryrun']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-17.17s = %s%-23.22s%s # %-.60s\n' % ('dryrun',pre,self.__to_string_(value),post,description))
    def __logfile_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__logfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'logfile': value},{'logfile': self.__schema['logfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-17.17s = %s%-23.22s%s # %-.60s\n' % ('logfile',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'stokes' in glb: del glb['stokes']
        if 'dryrun' in glb: del glb['dryrun']
        if 'mask' in glb: del glb['mask']
        if 'analyze' in glb: del glb['analyze']
        if 'verbose' in glb: del glb['verbose']
        if 'weighting' in glb: del glb['weighting']
        if 'showdifference' in glb: del glb['showdifference']
        if 'image' in glb: del glb['image']
        if 'project' in glb: del glb['project']
        if 'imdirection' in glb: del glb['imdirection']
        if 'showuv' in glb: del glb['showuv']
        if 'showclean' in glb: del glb['showclean']
        if 'imagename' in glb: del glb['imagename']
        if 'imsize' in glb: del glb['imsize']
        if 'vis' in glb: del glb['vis']
        if 'showfidelity' in glb: del glb['showfidelity']
        if 'interactive' in glb: del glb['interactive']
        if 'featherimage' in glb: del glb['featherimage']
        if 'pbcor' in glb: del glb['pbcor']
        if 'logfile' in glb: del glb['logfile']
        if 'outertaper' in glb: del glb['outertaper']
        if 'threshold' in glb: del glb['threshold']
        if 'niter' in glb: del glb['niter']
        if 'cell' in glb: del glb['cell']
        if 'showresidual' in glb: del glb['showresidual']
        if 'overwrite' in glb: del glb['overwrite']
        if 'showpsf' in glb: del glb['showpsf']
        if 'modelimage' in glb: del glb['modelimage']
        if 'showmodel' in glb: del glb['showmodel']
        if 'graphics' in glb: del glb['graphics']
        if 'showconvolved' in glb: del glb['showconvolved']
        if 'skymodel' in glb: del glb['skymodel']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__project_inp( )
        self.__image_inp( )
        self.__imagename_inp( )
        self.__skymodel_inp( )
        self.__vis_inp( )
        self.__modelimage_inp( )
        self.__imsize_inp( )
        self.__imdirection_inp( )
        self.__cell_inp( )
        self.__interactive_inp( )
        self.__niter_inp( )
        self.__threshold_inp( )
        self.__weighting_inp( )
        self.__mask_inp( )
        self.__outertaper_inp( )
        self.__pbcor_inp( )
        self.__stokes_inp( )
        self.__featherimage_inp( )
        self.__analyze_inp( )
        self.__showuv_inp( )
        self.__showpsf_inp( )
        self.__showmodel_inp( )
        self.__showconvolved_inp( )
        self.__showclean_inp( )
        self.__showresidual_inp( )
        self.__showdifference_inp( )
        self.__showfidelity_inp( )
        self.__graphics_inp( )
        self.__verbose_inp( )
        self.__overwrite_inp( )
        self.__dryrun_inp( )
        self.__logfile_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("simanalyze.last"):
                filename = "simanalyze.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, project=None, image=None, imagename=None, skymodel=None, vis=None, modelimage=None, imsize=None, imdirection=None, cell=None, interactive=None, niter=None, threshold=None, weighting=None, mask=None, outertaper=None, pbcor=None, stokes=None, featherimage=None, analyze=None, showuv=None, showpsf=None, showmodel=None, showconvolved=None, showclean=None, showresidual=None, showdifference=None, showfidelity=None, graphics=None, verbose=None, overwrite=None, dryrun=None, logfile=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('simanalyze.pre')
        _postfile = os.path.realpath('simanalyze.last')
        _return_result_ = None
        _arguments = [project,image,imagename,skymodel,vis,modelimage,imsize,imdirection,cell,interactive,niter,threshold,weighting,mask,outertaper,pbcor,stokes,featherimage,analyze,showuv,showpsf,showmodel,showconvolved,showclean,showresidual,showdifference,showfidelity,graphics,verbose,overwrite,dryrun,logfile]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if project is not None: local_global['project'] = project
            if image is not None: local_global['image'] = image
            if analyze is not None: local_global['analyze'] = analyze
            if graphics is not None: local_global['graphics'] = graphics
            if verbose is not None: local_global['verbose'] = verbose
            if overwrite is not None: local_global['overwrite'] = overwrite
            if dryrun is not None: local_global['dryrun'] = dryrun
            if logfile is not None: local_global['logfile'] = logfile

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['project'] = self.__project( local_global )
            _invocation_parameters['image'] = self.__image( local_global )
            _invocation_parameters['analyze'] = self.__analyze( local_global )
            _invocation_parameters['graphics'] = self.__graphics( local_global )
            _invocation_parameters['verbose'] = self.__verbose( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )
            _invocation_parameters['dryrun'] = self.__dryrun( local_global )
            _invocation_parameters['logfile'] = self.__logfile( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['imagename'] = self.__imagename( _invocation_parameters ) if imagename is None else imagename
            _invocation_parameters['skymodel'] = self.__skymodel( _invocation_parameters ) if skymodel is None else skymodel
            _invocation_parameters['vis'] = self.__vis( _invocation_parameters ) if vis is None else vis
            _invocation_parameters['modelimage'] = self.__modelimage( _invocation_parameters ) if modelimage is None else modelimage
            _invocation_parameters['imsize'] = self.__imsize( _invocation_parameters ) if imsize is None else imsize
            _invocation_parameters['imdirection'] = self.__imdirection( _invocation_parameters ) if imdirection is None else imdirection
            _invocation_parameters['cell'] = self.__cell( _invocation_parameters ) if cell is None else cell
            _invocation_parameters['interactive'] = self.__interactive( _invocation_parameters ) if interactive is None else interactive
            _invocation_parameters['niter'] = self.__niter( _invocation_parameters ) if niter is None else niter
            _invocation_parameters['threshold'] = self.__threshold( _invocation_parameters ) if threshold is None else threshold
            _invocation_parameters['weighting'] = self.__weighting( _invocation_parameters ) if weighting is None else weighting
            _invocation_parameters['mask'] = self.__mask( _invocation_parameters ) if mask is None else mask
            _invocation_parameters['outertaper'] = self.__outertaper( _invocation_parameters ) if outertaper is None else outertaper
            _invocation_parameters['pbcor'] = self.__pbcor( _invocation_parameters ) if pbcor is None else pbcor
            _invocation_parameters['stokes'] = self.__stokes( _invocation_parameters ) if stokes is None else stokes
            _invocation_parameters['featherimage'] = self.__featherimage( _invocation_parameters ) if featherimage is None else featherimage
            _invocation_parameters['showuv'] = self.__showuv( _invocation_parameters ) if showuv is None else showuv
            _invocation_parameters['showpsf'] = self.__showpsf( _invocation_parameters ) if showpsf is None else showpsf
            _invocation_parameters['showmodel'] = self.__showmodel( _invocation_parameters ) if showmodel is None else showmodel
            _invocation_parameters['showconvolved'] = self.__showconvolved( _invocation_parameters ) if showconvolved is None else showconvolved
            _invocation_parameters['showclean'] = self.__showclean( _invocation_parameters ) if showclean is None else showclean
            _invocation_parameters['showresidual'] = self.__showresidual( _invocation_parameters ) if showresidual is None else showresidual
            _invocation_parameters['showdifference'] = self.__showdifference( _invocation_parameters ) if showdifference is None else showdifference
            _invocation_parameters['showfidelity'] = self.__showfidelity( _invocation_parameters ) if showfidelity is None else showfidelity

        else:
            # invoke with inp/go semantics
            _invocation_parameters['project'] = self.__project( self.__globals_( ) )
            _invocation_parameters['image'] = self.__image( self.__globals_( ) )
            _invocation_parameters['imagename'] = self.__imagename( self.__globals_( ) )
            _invocation_parameters['skymodel'] = self.__skymodel( self.__globals_( ) )
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['modelimage'] = self.__modelimage( self.__globals_( ) )
            _invocation_parameters['imsize'] = self.__imsize( self.__globals_( ) )
            _invocation_parameters['imdirection'] = self.__imdirection( self.__globals_( ) )
            _invocation_parameters['cell'] = self.__cell( self.__globals_( ) )
            _invocation_parameters['interactive'] = self.__interactive( self.__globals_( ) )
            _invocation_parameters['niter'] = self.__niter( self.__globals_( ) )
            _invocation_parameters['threshold'] = self.__threshold( self.__globals_( ) )
            _invocation_parameters['weighting'] = self.__weighting( self.__globals_( ) )
            _invocation_parameters['mask'] = self.__mask( self.__globals_( ) )
            _invocation_parameters['outertaper'] = self.__outertaper( self.__globals_( ) )
            _invocation_parameters['pbcor'] = self.__pbcor( self.__globals_( ) )
            _invocation_parameters['stokes'] = self.__stokes( self.__globals_( ) )
            _invocation_parameters['featherimage'] = self.__featherimage( self.__globals_( ) )
            _invocation_parameters['analyze'] = self.__analyze( self.__globals_( ) )
            _invocation_parameters['showuv'] = self.__showuv( self.__globals_( ) )
            _invocation_parameters['showpsf'] = self.__showpsf( self.__globals_( ) )
            _invocation_parameters['showmodel'] = self.__showmodel( self.__globals_( ) )
            _invocation_parameters['showconvolved'] = self.__showconvolved( self.__globals_( ) )
            _invocation_parameters['showclean'] = self.__showclean( self.__globals_( ) )
            _invocation_parameters['showresidual'] = self.__showresidual( self.__globals_( ) )
            _invocation_parameters['showdifference'] = self.__showdifference( self.__globals_( ) )
            _invocation_parameters['showfidelity'] = self.__showfidelity( self.__globals_( ) )
            _invocation_parameters['graphics'] = self.__graphics( self.__globals_( ) )
            _invocation_parameters['verbose'] = self.__verbose( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
            _invocation_parameters['dryrun'] = self.__dryrun( self.__globals_( ) )
            _invocation_parameters['logfile'] = self.__logfile( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-14s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#simanalyze( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _simanalyze_t( _invocation_parameters['project'],_invocation_parameters['image'],_invocation_parameters['imagename'],_invocation_parameters['skymodel'],_invocation_parameters['vis'],_invocation_parameters['modelimage'],_invocation_parameters['imsize'],_invocation_parameters['imdirection'],_invocation_parameters['cell'],_invocation_parameters['interactive'],_invocation_parameters['niter'],_invocation_parameters['threshold'],_invocation_parameters['weighting'],_invocation_parameters['mask'],_invocation_parameters['outertaper'],_invocation_parameters['pbcor'],_invocation_parameters['stokes'],_invocation_parameters['featherimage'],_invocation_parameters['analyze'],_invocation_parameters['showuv'],_invocation_parameters['showpsf'],_invocation_parameters['showmodel'],_invocation_parameters['showconvolved'],_invocation_parameters['showclean'],_invocation_parameters['showresidual'],_invocation_parameters['showdifference'],_invocation_parameters['showfidelity'],_invocation_parameters['graphics'],_invocation_parameters['verbose'],_invocation_parameters['overwrite'],_invocation_parameters['dryrun'],_invocation_parameters['logfile'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

simanalyze = _simanalyze( )

