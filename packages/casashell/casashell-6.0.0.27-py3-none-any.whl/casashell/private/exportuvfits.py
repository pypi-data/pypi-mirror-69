##################### generated by xml-casa (v2) from exportuvfits.xml ##############
##################### a26c9ba5aefc64e4be11b11f7317922d ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import exportuvfits as _exportuvfits_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _exportuvfits:
    """
    exportuvfits ---- Convert a CASA visibility data set to a UVFITS file:

    
    This task writes a UVFITS file, a general format data set used to
    transfer data between different software systems. It is written in
    floating point format.  Different programs have different
    restrictions on what forms of UVFITS files they will use, especially
    whether they will accept multiple sources and/or spectral windows in
    the same file.  See the spw, multisource, and combinespw descriptions
    below.
    
    IMPORTANT NOTE: In general, some of the data averaging features of
    this task have never worked properly. In general, users should run
    mstransform to select and average data prior to running
    exportuvfits. The associated input parameters are being slowly
    deprecated and removed.

    --------- parameter descriptions ---------------------------------------------

    vis          Name of input visibility file
                 Default: none
                 
                    Example: vis='ngc5921.ms'
    fitsfile     Name of output UV FITS file
                 Default: none
                 
                    Example: vis='ngc5921XC1.fits'
    datacolumn   Visibility file data column
                 Default: corrected
                 Options: 'data'(raw)|'corrected'|'model'|'weight'
                 
                    Example: datacolumn='model'
    field        Select field using field id(s) or field name(s)
                 Default: '' --> all fields
                 
                 Use 'go listobs' to obtain the list id's or
                 names. If field string is a non-negative integer,
                 it is assumed a field index,  otherwise, it is
                 assumed a field name.
                 
                    Examples:
                    field='0~2'; field ids 0,1,2
                    field='0,4,5~7'; field ids 0,4,5,6,7
                    field='3C286,3C295'; field named 3C286 and
                    3C295
                    field = '3,4C*'; field id 3, all names
                    starting with 4C
    spw          Select spectral window/channels
                 
                 Examples:
                 spw='0~2,4'; spectral windows 0,1,2,4 (all
                 channels)
                 spw='<2';  spectral windows less than 2
                 (i.e. 0,1)
                 spw='0:5~61'; spw 0, channels 5 to 61,
                 INCLUSIVE
                 spw='*:5~61'; all spw with channels 5 to 61
                 spw='0,10,3:3~45'; spw 0,10 all channels, spw
                 3, channels 3 to 45.
                 spw='0~2:2~6'; spw 0,1,2 with channels 2
                 through 6 in each.
                 spw='0:0~10;15~60'; spectral window 0 with
                 channels 0-10,15-60. (NOTE ';' to separate
                 channel selections)
                 spw='0:0~10^2,1:20~30^5'; spw 0, channels
                 0,2,4,6,8,10, spw 1, channels 20,25,30 
                 type 'help par.selection' for more examples.
    antenna      Select data based on antenna/baseline
                                    Subparameter of selectdata=True
                                    Default: '' (all)
                 
                                    If antenna string is a non-negative integer, it
                                    is assumed an antenna index, otherwise, it is
                                    assumed as an antenna name
                 
                                        Examples: 
                                        antenna='5&6'; baseline between antenna
                                        index 5 and index 6.
                                        antenna='VA05&VA06'; baseline between VLA
                                        antenna 5 and 6.
                                        antenna='5&6;7&8'; baselines with
                                        indices 5-6 and 7-8
                                        antenna='5'; all baselines with antenna index
                                        5
                                        antenna='05'; all baselines with antenna
                                        number 05 (VLA old name)
                                        antenna='5,6,10'; all baselines with antennas
                                        5,6,10 index numbers
    timerange    Select data based on time range
                 Subparameter of selectdata=True
                 Default = '' (all)
                 
                    Examples:
                    timerange =
                    'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss'
                    (Note: if YYYY/MM/DD is missing date defaults
                    to first day in data set.)
                    timerange='09:14:0~09:54:0' picks 40 min on
                    first day 
                    timerange= '25:00:00~27:30:00' picks 1 hr to 3
                    hr 30min on NEXT day
                    timerange='09:44:00' pick data within one
                    integration of time
                    timerange='>10:24:00' data after this time
    writesyscal  Write GC and TY tables. Not yet available.
                 Default: False
    multisource  Write in multi-source format? 
                 Default: True
                 
                 Set to False if only one source is selected. 
                 
                 Note: diffmap does not work on multisource uvfits
                 files, so if planning on using diffmap on the
                 resulting uvfits file, select a single source and
                 set multisource = False. Otherwise use True. (If
                 multiple sources are selected, a multi-source
                 file will be written no matter what the setting
                 of this parameter).
    combinespw   Export the spectral windows as IFs?
                 Default: True
                 
                 If True, export the spectral windows as
                 IFs. All spectral windows must have same
                 shape. Otherwise multiple windows will use
                 multiple FREQIDs.
    writestation Write station name instead of antenna name
                 Default: True
    padwithflags Fill in missing data with flags to fit IFs
                 Subparameter of combinespw=True
                 Default: True
                 
                 If True, and combinespw is True, fill in missing
                 data as needed to fit the IF structure. This is
                 appropriate if the MS had a few
                 frequency-dependent flags applied, and was then
                 time-averaged by split, or when exporting for use
                 by difmap. If the spectral windows were observed
                 at different times, padwithflags=True will add a
                 large number of flags, making the output file
                 significantly longer. It does not yet support
                 spectral windows with different widths.
    overwrite    Overwrite output file if it exists?
                 Default: False
                 Options: False|True

    --------- examples -----------------------------------------------------------

    
    
    For more information, see the task pages of exportuvfits in CASA Docs:
    
    https://casa.nrao.edu/casadocs/


    """

    _info_group_ = """import/export"""
    _info_desc_ = """Convert a CASA visibility data set to a UVFITS file:"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'fitsfile': {'type': 'cStr'}, 'datacolumn': {'type': 'cStr'}, 'field': {'anyof': [{'type': 'cStr'}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cInt'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'spw': {'type': 'cStr'}, 'antenna': {'type': 'cStr'}, 'timerange': {'type': 'cStr'}, 'writesyscal': {'type': 'cBool'}, 'multisource': {'type': 'cBool'}, 'combinespw': {'type': 'cBool'}, 'writestation': {'type': 'cBool'}, 'padwithflags': {'type': 'cBool'}, 'overwrite': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __multisource_dflt( self, glb ):
        return True

    def __multisource( self, glb ):
        if 'multisource' in glb: return glb['multisource']
        return True

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __datacolumn_dflt( self, glb ):
        return 'corrected'

    def __datacolumn( self, glb ):
        if 'datacolumn' in glb: return glb['datacolumn']
        return 'corrected'

    def __writestation_dflt( self, glb ):
        return True

    def __writestation( self, glb ):
        if 'writestation' in glb: return glb['writestation']
        return True

    def __timerange_dflt( self, glb ):
        return ''

    def __timerange( self, glb ):
        if 'timerange' in glb: return glb['timerange']
        return ''

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __antenna_dflt( self, glb ):
        return ''

    def __antenna( self, glb ):
        if 'antenna' in glb: return glb['antenna']
        return ''

    def __fitsfile_dflt( self, glb ):
        return ''

    def __fitsfile( self, glb ):
        if 'fitsfile' in glb: return glb['fitsfile']
        return ''

    def __writesyscal_dflt( self, glb ):
        return False

    def __writesyscal( self, glb ):
        if 'writesyscal' in glb: return glb['writesyscal']
        return False

    def __combinespw_dflt( self, glb ):
        return True

    def __combinespw( self, glb ):
        if 'combinespw' in glb: return glb['combinespw']
        return True

    def __overwrite_dflt( self, glb ):
        return False

    def __overwrite( self, glb ):
        if 'overwrite' in glb: return glb['overwrite']
        return False



    #--------- return inp/go default --------------------------------------------------
    def __padwithflags_dflt( self, glb ):
        if self.__combinespw( glb ) == bool(True): return bool(True)
        return None

    #--------- return subparam values -------------------------------------------------
    def __padwithflags( self, glb ):
        if 'padwithflags' in glb: return glb['padwithflags']
        dflt = self.__padwithflags_dflt( glb )
        if dflt is not None: return dflt
        return False

    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of input visibility file'
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __fitsfile_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Name of output UV FITS file'
        value = self.__fitsfile( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'fitsfile': value},{'fitsfile': self.__schema['fitsfile']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('fitsfile',pre,self.__to_string_(value),post,description))
    def __datacolumn_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Visibility file data column'
        value = self.__datacolumn( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'datacolumn': value},{'datacolumn': self.__schema['datacolumn']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('datacolumn',pre,self.__to_string_(value),post,description))
    def __field_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select field using field id(s) or field name(s)'
        value = self.__field( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('field',pre,self.__to_string_(value),post,description))
    def __spw_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select spectral window/channels'
        value = self.__spw( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('spw',pre,self.__to_string_(value),post,description))
    def __antenna_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select data based on antenna/baseline'
        value = self.__antenna( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'antenna': value},{'antenna': self.__schema['antenna']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('antenna',pre,self.__to_string_(value),post,description))
    def __timerange_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Select data based on time range'
        value = self.__timerange( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'timerange': value},{'timerange': self.__schema['timerange']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('timerange',pre,self.__to_string_(value),post,description))
    def __writesyscal_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Write GC and TY tables (not yet available)'
        value = self.__writesyscal( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'writesyscal': value},{'writesyscal': self.__schema['writesyscal']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('writesyscal',pre,self.__to_string_(value),post,description))
    def __multisource_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Write in multi-source format?'
        value = self.__multisource( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'multisource': value},{'multisource': self.__schema['multisource']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('multisource',pre,self.__to_string_(value),post,description))
    def __combinespw_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Export the spectral windows as IFs'
        value = self.__combinespw( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'combinespw': value},{'combinespw': self.__schema['combinespw']}) else ('\x1B[91m','\x1B[0m')
        out.write('\x1B[1m\x1B[47m%-15.15s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('combinespw',pre,self.__to_string_(value),post,description))
    def __writestation_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Write station name instead of antenna name'
        value = self.__writestation( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'writestation': value},{'writestation': self.__schema['writestation']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('writestation',pre,self.__to_string_(value),post,description))
    def __padwithflags_inp(self):
        out = self.__stdout or sys.stdout
        if self.__padwithflags_dflt( self.__globals_( ) ) is not None:
             description = 'Fill in missing data with flags to fit IFs'
             value = self.__padwithflags( self.__globals_( ) )
             (pre,post) = ('','') if self.__validate_({'padwithflags': value},{'padwithflags': self.__schema['padwithflags']}) else ('\x1B[91m','\x1B[0m')
             out.write('   \x1B[92m%-12.12s =\x1B[0m %s%-23.22s%s # %-.60s\n' % ('padwithflags',pre,self.__to_string_(value),post,description))
    def __overwrite_inp(self):
        out = self.__stdout or sys.stdout
        description = 'Overwrite output file if it exists?'
        value = self.__overwrite( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'overwrite': value},{'overwrite': self.__schema['overwrite']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-15.15s = %s%-23.22s%s # %-.60s\n' % ('overwrite',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'antenna' in glb: del glb['antenna']
        if 'multisource' in glb: del glb['multisource']
        if 'combinespw' in glb: del glb['combinespw']
        if 'field' in glb: del glb['field']
        if 'datacolumn' in glb: del glb['datacolumn']
        if 'vis' in glb: del glb['vis']
        if 'writestation' in glb: del glb['writestation']
        if 'fitsfile' in glb: del glb['fitsfile']
        if 'overwrite' in glb: del glb['overwrite']
        if 'writesyscal' in glb: del glb['writesyscal']
        if 'spw' in glb: del glb['spw']
        if 'padwithflags' in glb: del glb['padwithflags']
        if 'timerange' in glb: del glb['timerange']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__fitsfile_inp( )
        self.__datacolumn_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__antenna_inp( )
        self.__timerange_inp( )
        self.__writesyscal_inp( )
        self.__multisource_inp( )
        self.__combinespw_inp( )
        self.__writestation_inp( )
        self.__padwithflags_inp( )
        self.__overwrite_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("exportuvfits.last"):
                filename = "exportuvfits.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, fitsfile=None, datacolumn=None, field=None, spw=None, antenna=None, timerange=None, writesyscal=None, multisource=None, combinespw=None, writestation=None, padwithflags=None, overwrite=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('exportuvfits.pre')
        _postfile = os.path.realpath('exportuvfits.last')
        _return_result_ = None
        _arguments = [vis,fitsfile,datacolumn,field,spw,antenna,timerange,writesyscal,multisource,combinespw,writestation,padwithflags,overwrite]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if fitsfile is not None: local_global['fitsfile'] = fitsfile
            if datacolumn is not None: local_global['datacolumn'] = datacolumn
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if antenna is not None: local_global['antenna'] = antenna
            if timerange is not None: local_global['timerange'] = timerange
            if writesyscal is not None: local_global['writesyscal'] = writesyscal
            if multisource is not None: local_global['multisource'] = multisource
            if combinespw is not None: local_global['combinespw'] = combinespw
            if writestation is not None: local_global['writestation'] = writestation
            if overwrite is not None: local_global['overwrite'] = overwrite

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['fitsfile'] = self.__fitsfile( local_global )
            _invocation_parameters['datacolumn'] = self.__datacolumn( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['antenna'] = self.__antenna( local_global )
            _invocation_parameters['timerange'] = self.__timerange( local_global )
            _invocation_parameters['writesyscal'] = self.__writesyscal( local_global )
            _invocation_parameters['multisource'] = self.__multisource( local_global )
            _invocation_parameters['combinespw'] = self.__combinespw( local_global )
            _invocation_parameters['writestation'] = self.__writestation( local_global )
            _invocation_parameters['overwrite'] = self.__overwrite( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            _invocation_parameters['padwithflags'] = self.__padwithflags( _invocation_parameters ) if padwithflags is None else padwithflags

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['fitsfile'] = self.__fitsfile( self.__globals_( ) )
            _invocation_parameters['datacolumn'] = self.__datacolumn( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['antenna'] = self.__antenna( self.__globals_( ) )
            _invocation_parameters['timerange'] = self.__timerange( self.__globals_( ) )
            _invocation_parameters['writesyscal'] = self.__writesyscal( self.__globals_( ) )
            _invocation_parameters['multisource'] = self.__multisource( self.__globals_( ) )
            _invocation_parameters['combinespw'] = self.__combinespw( self.__globals_( ) )
            _invocation_parameters['writestation'] = self.__writestation( self.__globals_( ) )
            _invocation_parameters['padwithflags'] = self.__padwithflags( self.__globals_( ) )
            _invocation_parameters['overwrite'] = self.__overwrite( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-12s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#exportuvfits( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _exportuvfits_t( _invocation_parameters['vis'],_invocation_parameters['fitsfile'],_invocation_parameters['datacolumn'],_invocation_parameters['field'],_invocation_parameters['spw'],_invocation_parameters['antenna'],_invocation_parameters['timerange'],_invocation_parameters['writesyscal'],_invocation_parameters['multisource'],_invocation_parameters['combinespw'],_invocation_parameters['writestation'],_invocation_parameters['padwithflags'],_invocation_parameters['overwrite'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

exportuvfits = _exportuvfits( )

