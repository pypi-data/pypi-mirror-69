##################### generated by xml-casa (v2) from rmtables.xml ##################
##################### 0f9caa90a910ad84baf22d5de83f4325 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import rmtables as _rmtables_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _rmtables:
    """
    rmtables ---- Remove tables cleanly, use this instead of rm -rf

    
    This task removes tables if they are not being currently accessed via
    the casapy process. Note: if you have multiple sessions running bad things
    could happen if you remove a table being accessed by another process.
    

    --------- parameter descriptions ---------------------------------------------

    tablenames Name of the tables

    --------- examples -----------------------------------------------------------

    
    Removes tables cleanly.
    Arguments may contain * or ?. Ranges [] are support but
    not ~ expansion.
    


    """

    _info_group_ = """utility"""
    _info_desc_ = """Remove tables cleanly, use this instead of rm -rf"""

    __schema = {'tablenames': {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __tablenames_dflt( self, glb ):
        return [  ]

    def __tablenames( self, glb ):
        if 'tablenames' in glb: return glb['tablenames']
        return [  ]



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __tablenames_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__tablenames( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'tablenames': value},{'tablenames': self.__schema['tablenames']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-10.10s = %s%-23.22s%s # %-.60s\n' % ('tablenames',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'tablenames' in glb: del glb['tablenames']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__tablenames_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("rmtables.last"):
                filename = "rmtables.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, tablenames=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('rmtables.pre')
        _postfile = os.path.realpath('rmtables.last')
        _return_result_ = None
        _arguments = [tablenames]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if tablenames is not None: local_global['tablenames'] = tablenames

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['tablenames'] = self.__tablenames( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['tablenames'] = self.__tablenames( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-10s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#rmtables( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _rmtables_t( _invocation_parameters['tablenames'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

rmtables = _rmtables( )

