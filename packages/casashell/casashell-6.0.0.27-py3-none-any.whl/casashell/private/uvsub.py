##################### generated by xml-casa (v2) from uvsub.xml #####################
##################### bd56e4abc7d49ca5848ca1af91e23d65 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import uvsub as _uvsub_t
from collections import OrderedDict
import sys
import os

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _uvsub:
    """
    uvsub ---- Subtract/add model from/to the corrected visibility data.

    
    This function subtracts model visibility data (MODEL_DATA column) from corrected visibility
    data (CORRECTED_DATA column) leaving the residuals in the corrected data column.  If the
    parameter 'reverse' is set true, the process is reversed. Note the DATA column is left untouched.
    If the ms has no CORRECTED _DATA column, one is made, copying DATA column, ahead of doing the
    uvsub process
    

    --------- parameter descriptions ---------------------------------------------

    vis     Name of input visibility file (MS)
    reverse reverse the operation (add rather than subtract)
    [1;42mRETURNS[1;m    void

    --------- examples -----------------------------------------------------------

    
    Help for uvsub task
    
    This function subtracts model visibility data from corrected visibility
    data leaving the residuals in the corrected data column.  If the
    parameter 'reverse' is set true, the process is reversed.
    Please note the model visibility used is the one that has been saved in the MODEL_DATA of the MS and the
    CORRECTED_DATA column is the one that is modified. If no CORRECTED_DATA column exists in the MS, one will be created and
    a copy of the DATA column is saved in it  before the uvsub operation selected is performed. uvsub does not modify the DATA column.
    
    Keyword arguments:
    vis -- Name of input visibility file (MS)
    default: none; example: vis='ngc5921.ms'
    reverse -- Reverse the operation (add rather than subtract)
    default: False; example: reverse=true
    
    uvsub(vis='ngc5921.ms', reverse=False)
    
    


    """

    _info_group_ = """modeling, calibration"""
    _info_desc_ = """Subtract/add model from/to the corrected visibility data."""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'reverse': {'type': 'cBool'}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    #--------- return nonsubparam values ----------------------------------------------

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __reverse_dflt( self, glb ):
        return False

    def __reverse( self, glb ):
        if 'reverse' in glb: return glb['reverse']
        return False



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-7.7s = %s%-23.22s%s # %-.60s\n' % ('vis',pre,self.__to_string_(value),post,description))
    def __reverse_inp(self):
        out = self.__stdout or sys.stdout
        description = ''
        value = self.__reverse( self.__globals_( ) )
        (pre,post) = ('','') if self.__validate_({'reverse': value},{'reverse': self.__schema['reverse']}) else ('\x1B[91m','\x1B[0m')
        out.write('%-7.7s = %s%-23.22s%s # %-.60s\n' % ('reverse',pre,self.__to_string_(value),post,description))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'vis' in glb: del glb['vis']
        if 'reverse' in glb: del glb['reverse']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        self.__vis_inp( )
        self.__reverse_inp( )

    #--------- tget function ----------------------------------------------------------
    def tget(self,file=None):
        from .stack_manip import find_frame
        from runpy import run_path
        filename = None
        if file is None:
            if os.path.isfile("uvsub.last"):
                filename = "uvsub.last"
        elif isinstance(file, str):
            if os.path.isfile(file):
                filename = file
        if filename is not None:
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]

    def __call__( self, vis=None, reverse=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('uvsub.pre')
        _postfile = os.path.realpath('uvsub.last')
        _return_result_ = None
        _arguments = [vis,reverse]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if reverse is not None: local_global['reverse'] = reverse

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['reverse'] = self.__reverse( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['reverse'] = self.__reverse( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-7s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvsub( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _uvsub_t( _invocation_parameters['vis'],_invocation_parameters['reverse'] )
        except: _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

uvsub = _uvsub( )

