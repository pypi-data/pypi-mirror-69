# coding: utf-8
#
#  This file is part of Sequana software
#
#  Copyright (c) 2016 - Sequana Development Team
#
#  File author(s):
#      thomas cokelaer <thomas.cokelaer@pasteur.fr>
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  website: https://github.com/sequana/sequana
#  documentation: http://sequana.readthedocs.io
#
##############################################################################
"""
import os

Author: Thomas Cokelaer
Affiliation: Institut Pasteur @ 2019

This pipeline is part of Sequana software (sequana.readthedocs.io)

snakemake -s mapper.rules --forceall --stats stats.txt --cores 4


"""
import sequana
from sequana import snaketools as sm
from sequana import sequana_data

# This must be defined before the include
configfile: "config.yaml"

exec(open(sequana.modules["bwa_mem_dynamic"], "r").read())
exec(open(sequana.modules["bowtie2_mapping_dynamic"], "r").read())
exec(open(sequana.modules["bowtie2_index_dynamic"], "r").read())


# A convenient manager
manager = sm.PipelineManager("mapper", config)
manager.setup(globals(), mode="warning")


__data__input = manager.getrawdata()


rule pipeline:
    input: "multiqc/multiqc_report.html", ".sequana/rulegraph.svg"

reference_file = config['general']['reference_file']
annotation_file = config['general']['annotation_file']

__prefix_name__ = reference_file.rsplit(".", -1)[0]


if config['general']['mapper'] == "bwa":
    reference = config["general"]["reference_file"]
    """if not os.path.isfile(reference + ".bwt"):
        exec(open(sequana.modules["dynamic_copy"], "r").read())
        __copy_ref__input = reference
        __copy_ref__output = "reference/" + os.path.basename(reference)
        include: dynamic_copy("ref", manager)
        __bwa_mem_mapping__reference = __copy_ref__output
    else:
        __bwa_mem_mapping__reference = reference
    """
    __bwa_index_mapping__log = "common_logs/bwa_index.log"
    __bwa_mem_mapping__fastq = __data__input
    __bwa_mem_mapping__reference = reference_file
    __bwa_mem_mapping__bam = manager.getname("bwa_mem_mapping", ".sorted.bam")
    __bwa_mem_mapping__fai = __bwa_mem_mapping__reference + ".bwt"
    __bwa_mem_mapping__log = manager.getlogdir("bwa_mem_mapping")
    include: bwa_mem_dynamic("mapping", manager)

    __bamtools_stats__input = __bwa_mem_mapping__bam
elif config['general']['mapper'] == "minimap2":
    __minimap2__output = manager.getname("minimap2", ".sorted.bam")
    rule minimap2:
        input: __data__input
        output: __minimap2__output
        threads: config["minimap2"]["threads"]
        params:
            reference=config['general']['reference_file'],
            options=config['minimap2']['options']
        shell:
            """
            minimap2 -t {threads} {params.reference} {input} {params.options} -a | samtools view -b | bamtools sort -in - -out {output}
            """
    __bamtools_stats__input = __minimap2__output
elif config['general']['mapper'] == "bowtie2":
    __bowtie2_index_ref__output_done   = __prefix_name__ + ".1.bt2"
    __bowtie2_index__ = __prefix_name__
    if os.path.exists(__bowtie2_index_ref__output_done):
        pass # index exists, no need to do it, everything should be fine
    else:
        # indexing for bowtie2
        __bowtie2_index_ref__fasta =            reference_file
        __bowtie2_index_ref__output_done =      __prefix_name__ + ".1.bt2"
        __bowtie2_index_ref__output_prefix =    __prefix_name__
        __bowtie2_index_ref__log = "logs/indexing/bowtie2_genome.log"
        include: bowtie2_index_dynamic("ref")
        #expected_output.extend([__bowtie2_index_ref__output_done])


    __bowtie2_mapping_ref__input = __data__input
    __bowtie2_mapping_ref__index_done = __bowtie2_index_ref__output_done
    __bowtie2_mapping_ref__sort = manager.getname("bowtie2_mapping_ref", ".sorted.bam")
    __bowtie2_mapping_ref__bam = manager.getname("bowtie2_mapping_ref", ".bam")
    __bowtie2_mapping_ref__logs_err = manager.getname("bowtie2_mapping_ref", ".err")
    __bowtie2_mapping_ref__logs_out = manager.getname("bowtie2_mapping_ref", ".out")
    __bowtie2_mapping_ref__options = config["bowtie2_mapping_ref"]["options"]
    __bowtie2_mapping_ref__prefix_index = __bowtie2_index__
    include: bowtie2_mapping_dynamic("ref", manager)
    __bamtools_stats__input =  __bowtie2_mapping_ref__sort



# sample should be included at the end of the filename for the multiqc to work
__bamtools_stats__output = "{sample}/bamtools_stats/sequana_bamtools_stats_{sample}.txt"
rule bamtools_stats:
    input: __bamtools_stats__input
    output: __bamtools_stats__output
    shell:
        "bamtools stats -in {input} > {output}"




# Sequana_coverage analysis
__multiqc__input = []
if config["sequana_coverage"]["do"]:

    __bam2cov__input = __bamtools_stats__input
    __bam2cov__output = manager.getname("bam2cov", ".bed")
    __bam2cov__log = manager.getlogdir("bam2cov")

    rule bam2cov:
        input: __bam2cov__input
        output: __bam2cov__output
        shell:
            """bedtools genomecov -d -ibam {input} > {output} """
    __sequana_coverage__bed = __bam2cov__output
    __sequana_coverage__fasta = reference_file
    if annotation_file:
        __sequana_coverage__gbk = annotation_file
    else:
        __sequana_coverage__gbk = []
    config["sequana_coverage"]['k'] = config['sequana_coverage']['mixture_models']
    #__sequana_coverage__csv = "{sample}/rois."
    __report_dir__ = "{sample}/sequana_coverage"
    __sequana_coverage__report_dir = __report_dir__
    __sequana_coverage__html = os.sep.join([
        __report_dir__, 'sequana_coverage.html'
     ])
    include: sm.modules["sequana_coverage"]
    __multiqc__input += expand(__sequana_coverage__html, sample=manager.samples)


if config["general"]["create_bigwig"]:
    __bam2bigwig__output = "{sample}/bigwig/{sample}.bw"
    rule bam2bigwig:
        input: __bamtools_stats__input
        output: __bam2bigwig__output
        log: "{sample}/bigwig/{sample}.log"
        shell:
            """
            bamCoverage --bam {input} --outFileFormat bigwig --outFileName {output} > {log}
            """
    __multiqc__input += expand(__bam2bigwig__output, sample=manager.samples)



__multiqc__input += expand(__bamtools_stats__output, sample=manager.samples)
__multiqc__output = "multiqc/multiqc_report.html"
include: sm.modules["multiqc/2.0"]



__conda__output = ".sequana/conda.txt"
include: sm.modules['conda']   # Create requirements.txt(dependencies)
__rulegraph__input = manager.snakefile
__rulegraph__output = ".sequana/rulegraph.svg"
__rulegraph__mapper = {"multiqc": "../multiqc/multiqc_report.html"}
include: sm.modules['rulegraph']



# Those rules takes a couple of seconds so no need for a cluster
localrules: multiqc, rulegraph, conda



onsuccess:
    #shell("ln -f -s {} index.html".format(__multiqc__output))
    shell("chmod -R g+w .")

    from sequana import logger
    logger.level = "INFO"

    # This should create the stats plot and the Makefile
    manager.teardown()
    manager.clean_multiqc(__multiqc__output)

    data = {"name": "mapper",
            "rulegraph": __rulegraph__output,
            "stats": "stats.txt"}
    from sequana.modules_report.summary import SummaryModule2


    intro = """<h2>Overview</h2>
This pipeline mapper the different samples on the provided reference. 
A <a href="multiqc/multiqc_report.html">multiqc report</a> is available. Here below are the details of the pipeline (parameters) together with summary plots.
If coverage was selected, you should also have HTML reports for each sample with its coverage."""

    if config["sequana_coverage"]["do"]:
        intro += """<h2>Coverage plots overview</h2>"""
        import glob
        filenames = glob.glob("*/sequana_coverage/*/coverage.png")
        if len(filenames)<100:
            for filename in filenames:
                parts = filename.split("/")
                image = SummaryModule2.png_to_embedded_png("self_dummy", 
                        filename,
                        #style="align:center; width:30%; height:30%",
                        style="align:center; width:95%; height:95%",
                        alt=parts[0])
                parts = filename.split("/")
                link = "/".join(parts[0:-1] + [parts[-2] + ".cov.html"])

                intro += """
                <div class="box_1_3" ><a href="{}">{}</a><hr>
                <a href="{}">{}</a>
                </div>
                """.format(link, image, link, parts[0])


    s = SummaryModule2(data, intro=intro)



onerror:
    print("An error occurred. See message above.")

