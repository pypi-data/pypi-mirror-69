# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ciphey_core_py')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ciphey_core_py')
    _ciphey_core_py = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ciphey_core_py', [dirname(__file__)])
        except ImportError:
            import _ciphey_core_py
            return _ciphey_core_py
        try:
            _mod = imp.load_module('_ciphey_core_py', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ciphey_core_py = swig_import_helper()
    del swig_import_helper
else:
    import _ciphey_core_py
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ciphey_core_py.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _ciphey_core_py.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ciphey_core_py.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ciphey_core_py.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ciphey_core_py.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ciphey_core_py.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ciphey_core_py.SwigPyIterator_copy(self)

    def next(self):
        return _ciphey_core_py.SwigPyIterator_next(self)

    def __next__(self):
        return _ciphey_core_py.SwigPyIterator___next__(self)

    def previous(self):
        return _ciphey_core_py.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ciphey_core_py.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ciphey_core_py.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ciphey_core_py.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ciphey_core_py.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ciphey_core_py.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ciphey_core_py.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ciphey_core_py.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ciphey_core_py.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _ciphey_core_py.SHARED_PTR_DISOWN
class freq_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, freq_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, freq_table, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.freq_table_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.freq_table___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.freq_table___bool__(self)

    def __len__(self):
        return _ciphey_core_py.freq_table___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ciphey_core_py.freq_table___getitem__(self, key)

    def __delitem__(self, key):
        return _ciphey_core_py.freq_table___delitem__(self, key)

    def has_key(self, key):
        return _ciphey_core_py.freq_table_has_key(self, key)

    def keys(self):
        return _ciphey_core_py.freq_table_keys(self)

    def values(self):
        return _ciphey_core_py.freq_table_values(self)

    def items(self):
        return _ciphey_core_py.freq_table_items(self)

    def __contains__(self, key):
        return _ciphey_core_py.freq_table___contains__(self, key)

    def key_iterator(self):
        return _ciphey_core_py.freq_table_key_iterator(self)

    def value_iterator(self):
        return _ciphey_core_py.freq_table_value_iterator(self)

    def __setitem__(self, *args):
        return _ciphey_core_py.freq_table___setitem__(self, *args)

    def asdict(self):
        return _ciphey_core_py.freq_table_asdict(self)

    def __init__(self, *args):
        this = _ciphey_core_py.new_freq_table(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _ciphey_core_py.freq_table_empty(self)

    def size(self):
        return _ciphey_core_py.freq_table_size(self)

    def swap(self, v):
        return _ciphey_core_py.freq_table_swap(self, v)

    def begin(self):
        return _ciphey_core_py.freq_table_begin(self)

    def end(self):
        return _ciphey_core_py.freq_table_end(self)

    def rbegin(self):
        return _ciphey_core_py.freq_table_rbegin(self)

    def rend(self):
        return _ciphey_core_py.freq_table_rend(self)

    def clear(self):
        return _ciphey_core_py.freq_table_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.freq_table_get_allocator(self)

    def count(self, x):
        return _ciphey_core_py.freq_table_count(self, x)

    def erase(self, *args):
        return _ciphey_core_py.freq_table_erase(self, *args)

    def find(self, x):
        return _ciphey_core_py.freq_table_find(self, x)

    def lower_bound(self, x):
        return _ciphey_core_py.freq_table_lower_bound(self, x)

    def upper_bound(self, x):
        return _ciphey_core_py.freq_table_upper_bound(self, x)
    __swig_destroy__ = _ciphey_core_py.delete_freq_table
    __del__ = lambda self: None
freq_table_swigregister = _ciphey_core_py.freq_table_swigregister
freq_table_swigregister(freq_table)

class prob_table(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, prob_table, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, prob_table, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.prob_table_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.prob_table___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.prob_table___bool__(self)

    def __len__(self):
        return _ciphey_core_py.prob_table___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _ciphey_core_py.prob_table___getitem__(self, key)

    def __delitem__(self, key):
        return _ciphey_core_py.prob_table___delitem__(self, key)

    def has_key(self, key):
        return _ciphey_core_py.prob_table_has_key(self, key)

    def keys(self):
        return _ciphey_core_py.prob_table_keys(self)

    def values(self):
        return _ciphey_core_py.prob_table_values(self)

    def items(self):
        return _ciphey_core_py.prob_table_items(self)

    def __contains__(self, key):
        return _ciphey_core_py.prob_table___contains__(self, key)

    def key_iterator(self):
        return _ciphey_core_py.prob_table_key_iterator(self)

    def value_iterator(self):
        return _ciphey_core_py.prob_table_value_iterator(self)

    def __setitem__(self, *args):
        return _ciphey_core_py.prob_table___setitem__(self, *args)

    def asdict(self):
        return _ciphey_core_py.prob_table_asdict(self)

    def __init__(self, *args):
        this = _ciphey_core_py.new_prob_table(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _ciphey_core_py.prob_table_empty(self)

    def size(self):
        return _ciphey_core_py.prob_table_size(self)

    def swap(self, v):
        return _ciphey_core_py.prob_table_swap(self, v)

    def begin(self):
        return _ciphey_core_py.prob_table_begin(self)

    def end(self):
        return _ciphey_core_py.prob_table_end(self)

    def rbegin(self):
        return _ciphey_core_py.prob_table_rbegin(self)

    def rend(self):
        return _ciphey_core_py.prob_table_rend(self)

    def clear(self):
        return _ciphey_core_py.prob_table_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.prob_table_get_allocator(self)

    def count(self, x):
        return _ciphey_core_py.prob_table_count(self, x)

    def erase(self, *args):
        return _ciphey_core_py.prob_table_erase(self, *args)

    def find(self, x):
        return _ciphey_core_py.prob_table_find(self, x)

    def lower_bound(self, x):
        return _ciphey_core_py.prob_table_lower_bound(self, x)

    def upper_bound(self, x):
        return _ciphey_core_py.prob_table_upper_bound(self, x)
    __swig_destroy__ = _ciphey_core_py.delete_prob_table
    __del__ = lambda self: None
prob_table_swigregister = _ciphey_core_py.prob_table_swigregister
prob_table_swigregister(prob_table)

class group_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, group_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, group_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.group_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.group_t___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.group_t___bool__(self)

    def __len__(self):
        return _ciphey_core_py.group_t___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.group_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.group_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.group_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.group_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.group_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.group_t___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.group_t_pop(self)

    def append(self, x):
        return _ciphey_core_py.group_t_append(self, x)

    def empty(self):
        return _ciphey_core_py.group_t_empty(self)

    def size(self):
        return _ciphey_core_py.group_t_size(self)

    def swap(self, v):
        return _ciphey_core_py.group_t_swap(self, v)

    def begin(self):
        return _ciphey_core_py.group_t_begin(self)

    def end(self):
        return _ciphey_core_py.group_t_end(self)

    def rbegin(self):
        return _ciphey_core_py.group_t_rbegin(self)

    def rend(self):
        return _ciphey_core_py.group_t_rend(self)

    def clear(self):
        return _ciphey_core_py.group_t_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.group_t_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.group_t_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.group_t_erase(self, *args)

    def __init__(self, *args):
        this = _ciphey_core_py.new_group_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ciphey_core_py.group_t_push_back(self, x)

    def front(self):
        return _ciphey_core_py.group_t_front(self)

    def back(self):
        return _ciphey_core_py.group_t_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.group_t_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.group_t_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.group_t_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.group_t_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.group_t_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_group_t
    __del__ = lambda self: None
group_t_swigregister = _ciphey_core_py.group_t_swigregister
group_t_swigregister(group_t)

class caesar_key_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caesar_key_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caesar_key_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.caesar_key_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.caesar_key_t___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.caesar_key_t___bool__(self)

    def __len__(self):
        return _ciphey_core_py.caesar_key_t___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.caesar_key_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.caesar_key_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.caesar_key_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.caesar_key_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.caesar_key_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.caesar_key_t___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.caesar_key_t_pop(self)

    def append(self, x):
        return _ciphey_core_py.caesar_key_t_append(self, x)

    def empty(self):
        return _ciphey_core_py.caesar_key_t_empty(self)

    def size(self):
        return _ciphey_core_py.caesar_key_t_size(self)

    def swap(self, v):
        return _ciphey_core_py.caesar_key_t_swap(self, v)

    def begin(self):
        return _ciphey_core_py.caesar_key_t_begin(self)

    def end(self):
        return _ciphey_core_py.caesar_key_t_end(self)

    def rbegin(self):
        return _ciphey_core_py.caesar_key_t_rbegin(self)

    def rend(self):
        return _ciphey_core_py.caesar_key_t_rend(self)

    def clear(self):
        return _ciphey_core_py.caesar_key_t_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.caesar_key_t_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.caesar_key_t_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.caesar_key_t_erase(self, *args)

    def __init__(self, *args):
        this = _ciphey_core_py.new_caesar_key_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ciphey_core_py.caesar_key_t_push_back(self, x)

    def front(self):
        return _ciphey_core_py.caesar_key_t_front(self)

    def back(self):
        return _ciphey_core_py.caesar_key_t_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.caesar_key_t_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.caesar_key_t_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.caesar_key_t_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.caesar_key_t_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.caesar_key_t_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_caesar_key_t
    __del__ = lambda self: None
caesar_key_t_swigregister = _ciphey_core_py.caesar_key_t_swigregister
caesar_key_t_swigregister(caesar_key_t)

class analysis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, analysis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, analysis, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _ciphey_core_py.new_analysis()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ciphey_core_py.delete_analysis
    __del__ = lambda self: None
analysis_swigregister = _ciphey_core_py.analysis_swigregister
analysis_swigregister(analysis)

class simple_analysis_res(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simple_analysis_res, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simple_analysis_res, name)
    __repr__ = _swig_repr
    __swig_setmethods__["freqs"] = _ciphey_core_py.simple_analysis_res_freqs_set
    __swig_getmethods__["freqs"] = _ciphey_core_py.simple_analysis_res_freqs_get
    if _newclass:
        freqs = _swig_property(_ciphey_core_py.simple_analysis_res_freqs_get, _ciphey_core_py.simple_analysis_res_freqs_set)
    __swig_setmethods__["probs"] = _ciphey_core_py.simple_analysis_res_probs_set
    __swig_getmethods__["probs"] = _ciphey_core_py.simple_analysis_res_probs_get
    if _newclass:
        probs = _swig_property(_ciphey_core_py.simple_analysis_res_probs_get, _ciphey_core_py.simple_analysis_res_probs_set)
    __swig_setmethods__["val"] = _ciphey_core_py.simple_analysis_res_val_set
    __swig_getmethods__["val"] = _ciphey_core_py.simple_analysis_res_val_get
    if _newclass:
        val = _swig_property(_ciphey_core_py.simple_analysis_res_val_get, _ciphey_core_py.simple_analysis_res_val_set)

    def __init__(self):
        this = _ciphey_core_py.new_simple_analysis_res()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ciphey_core_py.delete_simple_analysis_res
    __del__ = lambda self: None
simple_analysis_res_swigregister = _ciphey_core_py.simple_analysis_res_swigregister
simple_analysis_res_swigregister(simple_analysis_res)


def analyse_string(str):
    return _ciphey_core_py.analyse_string(str)
analyse_string = _ciphey_core_py.analyse_string

def caesar_crack(*args):
    return _ciphey_core_py.caesar_crack(*args)
caesar_crack = _ciphey_core_py.caesar_crack

def caesar_decrypt(str, key, group):
    return _ciphey_core_py.caesar_decrypt(str, key, group)
caesar_decrypt = _ciphey_core_py.caesar_decrypt

def vigenere_crack(*args):
    return _ciphey_core_py.vigenere_crack(*args)
vigenere_crack = _ciphey_core_py.vigenere_crack

def vigenere_decrypt(str, key, group):
    return _ciphey_core_py.vigenere_decrypt(str, key, group)
vigenere_decrypt = _ciphey_core_py.vigenere_decrypt
class caesar_results_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caesar_results_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caesar_results_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _ciphey_core_py.caesar_results_elem_key_set
    __swig_getmethods__["key"] = _ciphey_core_py.caesar_results_elem_key_get
    if _newclass:
        key = _swig_property(_ciphey_core_py.caesar_results_elem_key_get, _ciphey_core_py.caesar_results_elem_key_set)
    __swig_setmethods__["p_value"] = _ciphey_core_py.caesar_results_elem_p_value_set
    __swig_getmethods__["p_value"] = _ciphey_core_py.caesar_results_elem_p_value_get
    if _newclass:
        p_value = _swig_property(_ciphey_core_py.caesar_results_elem_p_value_get, _ciphey_core_py.caesar_results_elem_p_value_set)

    def __init__(self):
        this = _ciphey_core_py.new_caesar_results_elem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ciphey_core_py.delete_caesar_results_elem
    __del__ = lambda self: None
caesar_results_elem_swigregister = _ciphey_core_py.caesar_results_elem_swigregister
caesar_results_elem_swigregister(caesar_results_elem)

class vigenere_results_elem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vigenere_results_elem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vigenere_results_elem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _ciphey_core_py.vigenere_results_elem_key_set
    __swig_getmethods__["key"] = _ciphey_core_py.vigenere_results_elem_key_get
    if _newclass:
        key = _swig_property(_ciphey_core_py.vigenere_results_elem_key_get, _ciphey_core_py.vigenere_results_elem_key_set)
    __swig_setmethods__["p_value"] = _ciphey_core_py.vigenere_results_elem_p_value_set
    __swig_getmethods__["p_value"] = _ciphey_core_py.vigenere_results_elem_p_value_get
    if _newclass:
        p_value = _swig_property(_ciphey_core_py.vigenere_results_elem_p_value_get, _ciphey_core_py.vigenere_results_elem_p_value_set)

    def __init__(self):
        this = _ciphey_core_py.new_vigenere_results_elem()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ciphey_core_py.delete_vigenere_results_elem
    __del__ = lambda self: None
vigenere_results_elem_swigregister = _ciphey_core_py.vigenere_results_elem_swigregister
vigenere_results_elem_swigregister(vigenere_results_elem)

class caesar_results(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, caesar_results, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, caesar_results, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.caesar_results_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.caesar_results___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.caesar_results___bool__(self)

    def __len__(self):
        return _ciphey_core_py.caesar_results___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.caesar_results___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.caesar_results___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.caesar_results___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.caesar_results___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.caesar_results___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.caesar_results___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.caesar_results_pop(self)

    def append(self, x):
        return _ciphey_core_py.caesar_results_append(self, x)

    def empty(self):
        return _ciphey_core_py.caesar_results_empty(self)

    def size(self):
        return _ciphey_core_py.caesar_results_size(self)

    def swap(self, v):
        return _ciphey_core_py.caesar_results_swap(self, v)

    def begin(self):
        return _ciphey_core_py.caesar_results_begin(self)

    def end(self):
        return _ciphey_core_py.caesar_results_end(self)

    def rbegin(self):
        return _ciphey_core_py.caesar_results_rbegin(self)

    def rend(self):
        return _ciphey_core_py.caesar_results_rend(self)

    def clear(self):
        return _ciphey_core_py.caesar_results_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.caesar_results_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.caesar_results_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.caesar_results_erase(self, *args)

    def __init__(self, *args):
        this = _ciphey_core_py.new_caesar_results(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ciphey_core_py.caesar_results_push_back(self, x)

    def front(self):
        return _ciphey_core_py.caesar_results_front(self)

    def back(self):
        return _ciphey_core_py.caesar_results_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.caesar_results_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.caesar_results_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.caesar_results_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.caesar_results_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.caesar_results_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_caesar_results
    __del__ = lambda self: None
caesar_results_swigregister = _ciphey_core_py.caesar_results_swigregister
caesar_results_swigregister(caesar_results)

class vigenere_results(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vigenere_results, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vigenere_results, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _ciphey_core_py.vigenere_results_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _ciphey_core_py.vigenere_results___nonzero__(self)

    def __bool__(self):
        return _ciphey_core_py.vigenere_results___bool__(self)

    def __len__(self):
        return _ciphey_core_py.vigenere_results___len__(self)

    def __getslice__(self, i, j):
        return _ciphey_core_py.vigenere_results___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _ciphey_core_py.vigenere_results___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _ciphey_core_py.vigenere_results___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _ciphey_core_py.vigenere_results___delitem__(self, *args)

    def __getitem__(self, *args):
        return _ciphey_core_py.vigenere_results___getitem__(self, *args)

    def __setitem__(self, *args):
        return _ciphey_core_py.vigenere_results___setitem__(self, *args)

    def pop(self):
        return _ciphey_core_py.vigenere_results_pop(self)

    def append(self, x):
        return _ciphey_core_py.vigenere_results_append(self, x)

    def empty(self):
        return _ciphey_core_py.vigenere_results_empty(self)

    def size(self):
        return _ciphey_core_py.vigenere_results_size(self)

    def swap(self, v):
        return _ciphey_core_py.vigenere_results_swap(self, v)

    def begin(self):
        return _ciphey_core_py.vigenere_results_begin(self)

    def end(self):
        return _ciphey_core_py.vigenere_results_end(self)

    def rbegin(self):
        return _ciphey_core_py.vigenere_results_rbegin(self)

    def rend(self):
        return _ciphey_core_py.vigenere_results_rend(self)

    def clear(self):
        return _ciphey_core_py.vigenere_results_clear(self)

    def get_allocator(self):
        return _ciphey_core_py.vigenere_results_get_allocator(self)

    def pop_back(self):
        return _ciphey_core_py.vigenere_results_pop_back(self)

    def erase(self, *args):
        return _ciphey_core_py.vigenere_results_erase(self, *args)

    def __init__(self, *args):
        this = _ciphey_core_py.new_vigenere_results(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _ciphey_core_py.vigenere_results_push_back(self, x)

    def front(self):
        return _ciphey_core_py.vigenere_results_front(self)

    def back(self):
        return _ciphey_core_py.vigenere_results_back(self)

    def assign(self, n, x):
        return _ciphey_core_py.vigenere_results_assign(self, n, x)

    def resize(self, *args):
        return _ciphey_core_py.vigenere_results_resize(self, *args)

    def insert(self, *args):
        return _ciphey_core_py.vigenere_results_insert(self, *args)

    def reserve(self, n):
        return _ciphey_core_py.vigenere_results_reserve(self, n)

    def capacity(self):
        return _ciphey_core_py.vigenere_results_capacity(self)
    __swig_destroy__ = _ciphey_core_py.delete_vigenere_results
    __del__ = lambda self: None
vigenere_results_swigregister = _ciphey_core_py.vigenere_results_swigregister
vigenere_results_swigregister(vigenere_results)

# This file is compatible with both classic and new-style classes.


