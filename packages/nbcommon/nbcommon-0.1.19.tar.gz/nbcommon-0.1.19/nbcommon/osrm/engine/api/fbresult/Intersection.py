# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbresult

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Intersection(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIntersection(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Intersection()
        x.Init(buf, n + offset)
        return x

    # Intersection
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Intersection
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from osrm.engine.api.fbresult.Position import Position
            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Intersection
    def Bearings(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Intersection
    def BearingsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # Intersection
    def BearingsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Intersection
    def BearingsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Intersection
    def Classes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Intersection
    def ClassesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Intersection
    def ClassesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Intersection
    def Entry(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Intersection
    def EntryAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # Intersection
    def EntryLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Intersection
    def EntryIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Intersection
    def InBearing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Intersection
    def OutBearing(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Intersection
    def Lanes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from osrm.engine.api.fbresult.Lane import Lane
            obj = Lane()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Intersection
    def LanesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Intersection
    def LanesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def IntersectionStart(builder): builder.StartObject(7)
def IntersectionAddLocation(builder, location): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def IntersectionAddBearings(builder, bearings): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bearings), 0)
def IntersectionStartBearingsVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def IntersectionAddClasses(builder, classes): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(classes), 0)
def IntersectionStartClassesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IntersectionAddEntry(builder, entry): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(entry), 0)
def IntersectionStartEntryVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def IntersectionAddInBearing(builder, inBearing): builder.PrependUint32Slot(4, inBearing, 0)
def IntersectionAddOutBearing(builder, outBearing): builder.PrependUint32Slot(5, outBearing, 0)
def IntersectionAddLanes(builder, lanes): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(lanes), 0)
def IntersectionStartLanesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def IntersectionEnd(builder): return builder.EndObject()
