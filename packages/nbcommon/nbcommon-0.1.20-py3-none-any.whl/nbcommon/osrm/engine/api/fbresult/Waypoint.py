# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbresult

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Waypoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWaypoint(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Waypoint()
        x.Init(buf, n + offset)
        return x

    # Waypoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Waypoint
    def Hint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Waypoint
    def Distance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Waypoint
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Waypoint
    def Location(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from osrm.engine.api.fbresult.Position import Position
            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Waypoint
    def Nodes(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from osrm.engine.api.fbresult.Uint64Pair import Uint64Pair
            obj = Uint64Pair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Waypoint
    def MatchingsIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Waypoint
    def WaypointIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Waypoint
    def AlternativesCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Waypoint
    def TripsIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def WaypointStart(builder): builder.StartObject(9)
def WaypointAddHint(builder, hint): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(hint), 0)
def WaypointAddDistance(builder, distance): builder.PrependFloat32Slot(1, distance, 0.0)
def WaypointAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def WaypointAddLocation(builder, location): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(location), 0)
def WaypointAddNodes(builder, nodes): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)
def WaypointAddMatchingsIndex(builder, matchingsIndex): builder.PrependUint32Slot(5, matchingsIndex, 0)
def WaypointAddWaypointIndex(builder, waypointIndex): builder.PrependUint32Slot(6, waypointIndex, 0)
def WaypointAddAlternativesCount(builder, alternativesCount): builder.PrependUint32Slot(7, alternativesCount, 0)
def WaypointAddTripsIndex(builder, tripsIndex): builder.PrependUint32Slot(8, tripsIndex, 0)
def WaypointEnd(builder): return builder.EndObject()
