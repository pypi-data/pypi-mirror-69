# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbresult

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Leg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLeg(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Leg()
        x.Init(buf, n + offset)
        return x

    # Leg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Leg
    def Distance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Leg
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Leg
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Leg
    def Summary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Leg
    def Annotations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from osrm.engine.api.fbresult.Annotation import Annotation
            obj = Annotation()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Leg
    def Steps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from osrm.engine.api.fbresult.Step import Step
            obj = Step()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Leg
    def StepsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Leg
    def StepsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def LegStart(builder): builder.StartObject(6)
def LegAddDistance(builder, distance): builder.PrependFloat64Slot(0, distance, 0.0)
def LegAddDuration(builder, duration): builder.PrependFloat64Slot(1, duration, 0.0)
def LegAddWeight(builder, weight): builder.PrependFloat64Slot(2, weight, 0.0)
def LegAddSummary(builder, summary): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(summary), 0)
def LegAddAnnotations(builder, annotations): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(annotations), 0)
def LegAddSteps(builder, steps): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(steps), 0)
def LegStartStepsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LegEnd(builder): return builder.EndObject()
