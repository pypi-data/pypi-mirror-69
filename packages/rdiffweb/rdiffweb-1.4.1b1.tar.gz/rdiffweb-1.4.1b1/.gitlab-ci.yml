variables:
  DOCKER_BUILD_IMAGE: "${CI_REGISTRY_IMAGE}"

stages:
- prebuild
- test
- package
- publish
- deploy

#
# Prebuild Stage
#
.prebuild:  &prebuild
  image: docker:stable
  services:
    - docker:dind
  stage: prebuild
  before_script:
  - docker info
  script:
  - "export BUILD_PATH=extras/prebuild/${CI_JOB_NAME}"
  - "export TAG=$DOCKER_BUILD_IMAGE:${CI_JOB_NAME}-$CI_PIPELINE_IID"
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  - docker build -t $TAG $BUILD_PATH
  - docker push $TAG

centos7-py2:
  <<: *prebuild

centos7-py3:
  <<: *prebuild

centos8-py3:
  <<: *prebuild

debian9-py2:
  <<: *prebuild

debian9-py3:
  <<: *prebuild

debian10-py2:
  <<: *prebuild

debian10-py3:
  <<: *prebuild

#
# Test Stage
#
.tox:  &tox
  image: $DOCKER_BUILD_IMAGE:${IMAGE}-$CI_PIPELINE_IID
  stage: test
  variables:
    IMAGE: debian10-py3
    TOXENV: $CI_JOB_NAME
  script:
  - export TOXENV=${TOXENV:-$CI_JOB_NAME} 
  - tox --sitepackages
  artifacts:
    paths:
    - coverage-*.xml
    - nosetests-*.xml
    expire_in: 1 day

py27-jinja26: 
  <<: *tox
  variables:
    IMAGE: debian10-py2

py27-jinja27: 
  <<: *tox
  variables:
    IMAGE: debian10-py2

py27-jinja28: 
  <<: *tox
  variables:
    IMAGE: debian10-py2

py27-jinja29: 
  <<: *tox
  variables:
    IMAGE: debian10-py2

py27-jinja210: 
  <<: *tox
  variables:
    IMAGE: debian10-py2

py27-cherrypy17: 
  <<: *tox
  variables:
    IMAGE: debian10-py2

# FIXME Downgrade setuptools for this target.
# This is broken because of setuptools 46.0.0
#py3-jinja26: 
#  <<: *tox

py3-jinja27: 
  <<: *tox

py3-jinja28: 
  <<: *tox

py3-jinja29: 
  <<: *tox

py3-jinja210: 
  <<: *tox

py3-cherrypy18: 
  <<: *tox

debian9-py2-cherrypy35-jinja28: 
  <<: *tox
  variables:
    IMAGE: debian9-py2
    TOXENV: py2-cherrypy35-jinja28

debian9-py3-cherrypy35-jinja28: 
  <<: *tox
  variables:
    IMAGE: debian9-py3
    TOXENV: py3-cherrypy35-jinja28

debian10-py2-cherrypy8-jinja210:
  <<: *tox
  variables:
    IMAGE: debian10-py2
    TOXENV: py2-cherrypy8-jinja28

debian10-py3-cherrypy8-jinja210: 
  <<: *tox
  variables:
    IMAGE: debian10-py3
    TOXENV: py3-cherrypy8-jinja28
  
debian10-py3-rdiff-backup2:
  <<: *tox
  variables:
    IMAGE: debian10-py3
    TOXENV: py3-cherrypy8-jinja210
  script:
  - apt -y autoremove rdiff-backup
  - apt-get update && apt -y install librsync-dev
  - pip3 install rdiff-backup
  - tox --sitepackages
  
centos7-py2-cherrypy17-jinja210:
  <<: *tox
  variables:
    IMAGE: centos7-py2
    TOXENV: py2-cherrypy17-jinja210
  allow_failure: true

centos7-py3-cherrypy18-jinja210:
  <<: *tox
  variables:
    IMAGE: centos7-py3
    TOXENV: py3-cherrypy18-jinja210
  allow_failure: true

centos8-py3-cherrypy18-jinja210:
  <<: *tox
  variables:
    IMAGE: centos8-py3
    TOXENV: py3-cherrypy18-jinja210
  
package:py2: 
  image: $DOCKER_BUILD_IMAGE:debian9-py2-$CI_PIPELINE_IID
  stage: package
  script:
  - python2 setup.py sdist bdist_wheel
  artifacts:
    paths: 
    - dist/*.tar.gz
    - dist/*.whl
    
package:py3: 
  image: $DOCKER_BUILD_IMAGE:debian9-py3-$CI_PIPELINE_IID
  stage: package
  script:
  - python3 setup.py sdist bdist_wheel
  artifacts:
    paths:
    - dist/*.whl

publish:sonar:master:
  stage: publish
  image: ikus060/sonar-runner
  only:
  - master
  script:
  - sonar-runner -X -Dsonar.python.coverage.reportPath=coverage-*.xml -Dsonar.python.xunit.reportPath=nosetests-py3-cherrypy18.xml -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.exclusions=rdiffweb/controller/tests/**,rdiffweb/core/tests/**,rdiffweb/test.py -Dsonar.sources=.

publish:sonar:dev:
  stage: publish
  image: ikus060/sonar-runner
  script:
  - sonar-runner -X -Dsonar.python.coverage.reportPath=coverage-*.xml -Dsonar.python.xunit.reportPath=nosetests-py3-cherrypy18.xml -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$CI_PROJECT_NAME-dev -Dsonar.exclusions=rdiffweb/controller/tests/**,rdiffweb/core/tests/**,rdiffweb/test.py -Dsonar.sources=.

publish_nexus:
  image: $DOCKER_BUILD_IMAGE:debian9-py3-$CI_PIPELINE_IID
  stage: publish
  script:
  - pip3 install wheel twine --upgrade
  - twine upload dist/* -u $NEXUS_USR -p $NEXUS_PWD --repository-url $NEXUS_PYPI_URL

publish_pypi:
  image: $DOCKER_BUILD_IMAGE:debian9-py3-$CI_PIPELINE_IID
  stage: publish
  only:
  - tags
  script:
  - pip3 install wheel twine --upgrade
  - twine upload dist/* -u $PYPI_USR -p $PYPI_PWD
  
deploy_rdiffweb_demo:
  image: $DOCKER_BUILD_IMAGE:debian9-py3-$CI_PIPELINE_IID
  stage: deploy
  environment:
    name: demo
    url: https://rdiffweb-demo.ikus-soft.com/
  script:
  - export RDIFFWEB_VERSION=$(python3 setup.py --version)
  - echo RDIFFWEB_VERSION=$RDIFFWEB_VERSION
  # Call ansible
  - curl -X POST -F token=36bae86778d901fc6b2d6453a41844 -F "ref=master" -F "variables[RDIFFWEB_VERSION]=$RDIFFWEB_VERSION" https://gitlab.com/api/v4/projects/18716492/trigger/pipeline
