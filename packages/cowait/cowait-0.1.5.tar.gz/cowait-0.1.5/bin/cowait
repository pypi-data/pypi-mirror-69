#!/usr/bin/env python -u
import json
import click
import cowait.cli.commands

import pkg_resources
version = pkg_resources.require("cowait")[0].version


def option_val(val):
    try:
        return json.loads(val)
    except json.JSONDecodeError:
        return val


def option_dict(opts):
    options = {}
    for [key, val] in opts:
        options[key] = option_val(val)
    return options


@click.group()
@click.version_option(version, message="cowait version: {}".format(version))
def cli():
    pass


@cli.command(help='create a new context')
@click.argument('name', type=str, required=False)
@click.option('--image', type=str, required=False, help='image name')
@click.option('--base', type=str, required=False, help='base image name')
@click.option('--cluster',
              default=None,
              type=str,
              help='cluster name')
def new(name: str, image: str, cluster_name: str):
    cowait.cli.new_context(
        name,
        image,
        cluster_name,
    )


@cli.command(help='run a task')
@click.argument('task', type=str)
@click.option('-c', '--cluster',
              default=None,
              type=str,
              help='cluster name')
@click.option('--name',
              type=str,
              help='specific task name')
@click.option('-i', '--input',
              type=(str, str),
              multiple=True,
              help='specify task input')
@click.option('-e', '--env',
              type=(str, str),
              multiple=True,
              help='define enviornment variable')
@click.option('--port', type=int, multiple=True, help='open a port')
@click.option('--route',
              type=(str, str),
              multiple=True,
              help='add an ingress route')
@click.option('--upstream',
              type=str,
              help='root task upstream uri')
@click.option('-b', '--build',
              type=bool, is_flag=True,
              help='build and push first',
              default=False)
@click.option('-d', '--detach',
              type=bool, is_flag=True,
              help='run in detached mode',
              default=False)
def run(
    task: str, cluster: str, name: str,
    input, env, port, route,
    upstream: str, build: bool, detach: bool
):
    cowait.cli.run(
        task,
        name=name,
        cluster_name=cluster,
        inputs=option_dict(input),
        env=option_dict(env),
        ports={p: p for p in port},
        routes=option_dict(route),
        upstream=upstream,
        build=build,
        detach=detach,
    )


@cli.command(help='run task tests')
@click.option('-c', '--cluster',
              default=None,
              type=str,
              help='cluster name')
@click.option('--push',
              type=bool, is_flag=True,
              help='build and push first',
              default=False)
def test(cluster: str, push: bool):
    cowait.cli.test(push, cluster)


@cli.command(help='build a task')
def build():
    cowait.cli.build()


@cli.command(help='push a task to the registry')
def push():
    cowait.cli.push()


@cli.command(help='destroy tasks')
@click.option('-c', '--cluster',
              default=None,
              type=str,
              help='cluster name')
def rm(cluster):
    cowait.cli.destroy(cluster)


@cli.command(help='list tasks')
@click.option('-c', '--cluster',
              default=None,
              type=str,
              help='cluster name')
def ps(cluster):
    cowait.cli.list_tasks(cluster)


@cli.command(help='kill task')
@click.argument('task', type=str)
@click.option('-c', '--cluster',
              default=None,
              type=str,
              help='cluster name')
def kill(task, cluster):
    cowait.cli.kill(task, cluster)


@cli.command(help='deploy cowait agent')
@click.option('-c', '--cluster',
              default=None,
              type=str,
              help='cluster name')
@click.option('-d', '--detach',
              type=bool, is_flag=True,
              help='run in detached mode',
              default=False)
@click.option('-u', '--upstream',
              type=str, default=None,
              help='custom upstream uri')
def agent(cluster: str, detach: bool, upstream: str):
    cowait.cli.agent(cluster, detach, upstream)


if __name__ == '__main__':
    cli()
