# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_ads_display.configuration import Configuration


class CampaignMigrationServiceJob(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'failed_count': 'int',
        'in_progress_count': 'int',
        'job_status': 'CampaignMigrationServiceJobStatus',
        'migration_job_end_date': 'str',
        'migration_job_id': 'int',
        'migration_job_submit_date': 'str',
        'scope': 'CampaignMigrationServiceScope',
        'succeeded_count': 'int',
        'total_count': 'int'
    }

    attribute_map = {
        'account_id': 'accountId',
        'failed_count': 'failedCount',
        'in_progress_count': 'inProgressCount',
        'job_status': 'jobStatus',
        'migration_job_end_date': 'migrationJobEndDate',
        'migration_job_id': 'migrationJobId',
        'migration_job_submit_date': 'migrationJobSubmitDate',
        'scope': 'scope',
        'succeeded_count': 'succeededCount',
        'total_count': 'totalCount'
    }

    def __init__(self, account_id=None, failed_count=None, in_progress_count=None, job_status=None, migration_job_end_date=None, migration_job_id=None, migration_job_submit_date=None, scope=None, succeeded_count=None, total_count=None, local_vars_configuration=None):  # noqa: E501
        """CampaignMigrationServiceJob - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._failed_count = None
        self._in_progress_count = None
        self._job_status = None
        self._migration_job_end_date = None
        self._migration_job_id = None
        self._migration_job_submit_date = None
        self._scope = None
        self._succeeded_count = None
        self._total_count = None
        self.discriminator = None

        self.account_id = account_id
        self.failed_count = failed_count
        self.in_progress_count = in_progress_count
        self.job_status = job_status
        self.migration_job_end_date = migration_job_end_date
        self.migration_job_id = migration_job_id
        self.migration_job_submit_date = migration_job_submit_date
        self.scope = scope
        self.succeeded_count = succeeded_count
        self.total_count = total_count

    @property
    def account_id(self):
        """Gets the account_id of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">アカウントID</div> <div lang=\"en\">Account ID</div>   # noqa: E501

        :return: The account_id of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CampaignMigrationServiceJob.

        <div lang=\"ja\">アカウントID</div> <div lang=\"en\">Account ID</div>   # noqa: E501

        :param account_id: The account_id of this CampaignMigrationServiceJob.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def failed_count(self):
        """Gets the failed_count of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">失敗キャンペーン数</div> <div lang=\"en\">Number of failed campaigns</div>   # noqa: E501

        :return: The failed_count of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this CampaignMigrationServiceJob.

        <div lang=\"ja\">失敗キャンペーン数</div> <div lang=\"en\">Number of failed campaigns</div>   # noqa: E501

        :param failed_count: The failed_count of this CampaignMigrationServiceJob.  # noqa: E501
        :type: int
        """

        self._failed_count = failed_count

    @property
    def in_progress_count(self):
        """Gets the in_progress_count of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">進行中キャンペーン数</div> <div lang=\"en\">Number of progressing campaigns</div>   # noqa: E501

        :return: The in_progress_count of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._in_progress_count

    @in_progress_count.setter
    def in_progress_count(self, in_progress_count):
        """Sets the in_progress_count of this CampaignMigrationServiceJob.

        <div lang=\"ja\">進行中キャンペーン数</div> <div lang=\"en\">Number of progressing campaigns</div>   # noqa: E501

        :param in_progress_count: The in_progress_count of this CampaignMigrationServiceJob.  # noqa: E501
        :type: int
        """

        self._in_progress_count = in_progress_count

    @property
    def job_status(self):
        """Gets the job_status of this CampaignMigrationServiceJob.  # noqa: E501


        :return: The job_status of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: CampaignMigrationServiceJobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this CampaignMigrationServiceJob.


        :param job_status: The job_status of this CampaignMigrationServiceJob.  # noqa: E501
        :type: CampaignMigrationServiceJobStatus
        """

        self._job_status = job_status

    @property
    def migration_job_end_date(self):
        """Gets the migration_job_end_date of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">マイグレーションジョブ終了日時</div> <div lang=\"en\">Migration job end date</div>   # noqa: E501

        :return: The migration_job_end_date of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: str
        """
        return self._migration_job_end_date

    @migration_job_end_date.setter
    def migration_job_end_date(self, migration_job_end_date):
        """Sets the migration_job_end_date of this CampaignMigrationServiceJob.

        <div lang=\"ja\">マイグレーションジョブ終了日時</div> <div lang=\"en\">Migration job end date</div>   # noqa: E501

        :param migration_job_end_date: The migration_job_end_date of this CampaignMigrationServiceJob.  # noqa: E501
        :type: str
        """

        self._migration_job_end_date = migration_job_end_date

    @property
    def migration_job_id(self):
        """Gets the migration_job_id of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">マイグレーションジョブID</div> <div lang=\"en\">Migration job ID</div>   # noqa: E501

        :return: The migration_job_id of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._migration_job_id

    @migration_job_id.setter
    def migration_job_id(self, migration_job_id):
        """Sets the migration_job_id of this CampaignMigrationServiceJob.

        <div lang=\"ja\">マイグレーションジョブID</div> <div lang=\"en\">Migration job ID</div>   # noqa: E501

        :param migration_job_id: The migration_job_id of this CampaignMigrationServiceJob.  # noqa: E501
        :type: int
        """

        self._migration_job_id = migration_job_id

    @property
    def migration_job_submit_date(self):
        """Gets the migration_job_submit_date of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">マイグレーションジョブ登録日時</div> <div lang=\"en\">Migration job submit date</div>   # noqa: E501

        :return: The migration_job_submit_date of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: str
        """
        return self._migration_job_submit_date

    @migration_job_submit_date.setter
    def migration_job_submit_date(self, migration_job_submit_date):
        """Sets the migration_job_submit_date of this CampaignMigrationServiceJob.

        <div lang=\"ja\">マイグレーションジョブ登録日時</div> <div lang=\"en\">Migration job submit date</div>   # noqa: E501

        :param migration_job_submit_date: The migration_job_submit_date of this CampaignMigrationServiceJob.  # noqa: E501
        :type: str
        """

        self._migration_job_submit_date = migration_job_submit_date

    @property
    def scope(self):
        """Gets the scope of this CampaignMigrationServiceJob.  # noqa: E501


        :return: The scope of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: CampaignMigrationServiceScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CampaignMigrationServiceJob.


        :param scope: The scope of this CampaignMigrationServiceJob.  # noqa: E501
        :type: CampaignMigrationServiceScope
        """

        self._scope = scope

    @property
    def succeeded_count(self):
        """Gets the succeeded_count of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">正常終了キャンペーン数</div> <div lang=\"en\">Number of completed campaigns</div>   # noqa: E501

        :return: The succeeded_count of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._succeeded_count

    @succeeded_count.setter
    def succeeded_count(self, succeeded_count):
        """Sets the succeeded_count of this CampaignMigrationServiceJob.

        <div lang=\"ja\">正常終了キャンペーン数</div> <div lang=\"en\">Number of completed campaigns</div>   # noqa: E501

        :param succeeded_count: The succeeded_count of this CampaignMigrationServiceJob.  # noqa: E501
        :type: int
        """

        self._succeeded_count = succeeded_count

    @property
    def total_count(self):
        """Gets the total_count of this CampaignMigrationServiceJob.  # noqa: E501

        <div lang=\"ja\">全キャンペーン数</div> <div lang=\"en\">Number of total campaigns</div>   # noqa: E501

        :return: The total_count of this CampaignMigrationServiceJob.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this CampaignMigrationServiceJob.

        <div lang=\"ja\">全キャンペーン数</div> <div lang=\"en\">Number of total campaigns</div>   # noqa: E501

        :param total_count: The total_count of this CampaignMigrationServiceJob.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CampaignMigrationServiceJob):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CampaignMigrationServiceJob):
            return True

        return self.to_dict() != other.to_dict()
