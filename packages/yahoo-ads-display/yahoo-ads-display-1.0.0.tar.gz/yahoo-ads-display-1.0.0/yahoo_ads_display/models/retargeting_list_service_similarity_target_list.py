# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_ads_display.configuration import Configuration


class RetargetingListServiceSimilarityTargetList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'target_list_id': 'int',
        'target_list_size': 'RetargetingListServiceTargetListSize',
        'target_list_size_reaches': 'list[RetargetingListServiceTargetListSizeReaches]'
    }

    attribute_map = {
        'target_list_id': 'targetListId',
        'target_list_size': 'targetListSize',
        'target_list_size_reaches': 'targetListSizeReaches'
    }

    def __init__(self, target_list_id=None, target_list_size=None, target_list_size_reaches=None, local_vars_configuration=None):  # noqa: E501
        """RetargetingListServiceSimilarityTargetList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._target_list_id = None
        self._target_list_size = None
        self._target_list_size_reaches = None
        self.discriminator = None

        self.target_list_id = target_list_id
        self.target_list_size = target_list_size
        self.target_list_size_reaches = target_list_size_reaches

    @property
    def target_list_id(self):
        """Gets the target_list_id of this RetargetingListServiceSimilarityTargetList.  # noqa: E501

        <div lang=\"ja\"> 類似ユーザーをリターゲティングするターゲットIDです。<br> このフィールドは、ADD時に必須となり、SETおよびREMOVE時に無視されます。 </div> <div lang=\"en\"> Target ID for retargeting similar users. <br> This field is required in ADD operation, and will be ignored in SET and REMOVE operation. </div>   # noqa: E501

        :return: The target_list_id of this RetargetingListServiceSimilarityTargetList.  # noqa: E501
        :rtype: int
        """
        return self._target_list_id

    @target_list_id.setter
    def target_list_id(self, target_list_id):
        """Sets the target_list_id of this RetargetingListServiceSimilarityTargetList.

        <div lang=\"ja\"> 類似ユーザーをリターゲティングするターゲットIDです。<br> このフィールドは、ADD時に必須となり、SETおよびREMOVE時に無視されます。 </div> <div lang=\"en\"> Target ID for retargeting similar users. <br> This field is required in ADD operation, and will be ignored in SET and REMOVE operation. </div>   # noqa: E501

        :param target_list_id: The target_list_id of this RetargetingListServiceSimilarityTargetList.  # noqa: E501
        :type: int
        """

        self._target_list_id = target_list_id

    @property
    def target_list_size(self):
        """Gets the target_list_size of this RetargetingListServiceSimilarityTargetList.  # noqa: E501


        :return: The target_list_size of this RetargetingListServiceSimilarityTargetList.  # noqa: E501
        :rtype: RetargetingListServiceTargetListSize
        """
        return self._target_list_size

    @target_list_size.setter
    def target_list_size(self, target_list_size):
        """Sets the target_list_size of this RetargetingListServiceSimilarityTargetList.


        :param target_list_size: The target_list_size of this RetargetingListServiceSimilarityTargetList.  # noqa: E501
        :type: RetargetingListServiceTargetListSize
        """

        self._target_list_size = target_list_size

    @property
    def target_list_size_reaches(self):
        """Gets the target_list_size_reaches of this RetargetingListServiceSimilarityTargetList.  # noqa: E501


        :return: The target_list_size_reaches of this RetargetingListServiceSimilarityTargetList.  # noqa: E501
        :rtype: list[RetargetingListServiceTargetListSizeReaches]
        """
        return self._target_list_size_reaches

    @target_list_size_reaches.setter
    def target_list_size_reaches(self, target_list_size_reaches):
        """Sets the target_list_size_reaches of this RetargetingListServiceSimilarityTargetList.


        :param target_list_size_reaches: The target_list_size_reaches of this RetargetingListServiceSimilarityTargetList.  # noqa: E501
        :type: list[RetargetingListServiceTargetListSizeReaches]
        """

        self._target_list_size_reaches = target_list_size_reaches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RetargetingListServiceSimilarityTargetList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RetargetingListServiceSimilarityTargetList):
            return True

        return self.to_dict() != other.to_dict()
