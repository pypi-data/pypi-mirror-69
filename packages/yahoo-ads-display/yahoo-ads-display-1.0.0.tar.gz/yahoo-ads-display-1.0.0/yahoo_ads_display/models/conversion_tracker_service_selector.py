# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_ads_display.configuration import Configuration


class ConversionTrackerServiceSelector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'app_conversion_platform': 'ConversionTrackerServiceAppConversionPlatform',
        'app_ids': 'list[str]',
        'categories': 'list[ConversionTrackerServiceCategory]',
        'conversion_tracker_ids': 'list[int]',
        'conversion_tracker_types': 'list[ConversionTrackerServiceType]',
        'counting_type': 'ConversionTrackerServiceCountingType',
        'exclude_from_bidding': 'ConversionTrackerServiceExcludeFromBidding',
        'number_results': 'int',
        'start_index': 'int',
        'stats_period': 'ConversionTrackerServiceStatsPeriod',
        'stats_period_custom_date': 'ConversionTrackerServiceStatsPeriodCustomDate',
        'statuses': 'list[ConversionTrackerServiceStatus]'
    }

    attribute_map = {
        'account_id': 'accountId',
        'app_conversion_platform': 'appConversionPlatform',
        'app_ids': 'appIds',
        'categories': 'categories',
        'conversion_tracker_ids': 'conversionTrackerIds',
        'conversion_tracker_types': 'conversionTrackerTypes',
        'counting_type': 'countingType',
        'exclude_from_bidding': 'excludeFromBidding',
        'number_results': 'numberResults',
        'start_index': 'startIndex',
        'stats_period': 'statsPeriod',
        'stats_period_custom_date': 'statsPeriodCustomDate',
        'statuses': 'statuses'
    }

    def __init__(self, account_id=None, app_conversion_platform=None, app_ids=None, categories=None, conversion_tracker_ids=None, conversion_tracker_types=None, counting_type=None, exclude_from_bidding=None, number_results=500, start_index=1, stats_period=None, stats_period_custom_date=None, statuses=None, local_vars_configuration=None):  # noqa: E501
        """ConversionTrackerServiceSelector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._app_conversion_platform = None
        self._app_ids = None
        self._categories = None
        self._conversion_tracker_ids = None
        self._conversion_tracker_types = None
        self._counting_type = None
        self._exclude_from_bidding = None
        self._number_results = None
        self._start_index = None
        self._stats_period = None
        self._stats_period_custom_date = None
        self._statuses = None
        self.discriminator = None

        self.account_id = account_id
        self.app_conversion_platform = app_conversion_platform
        self.app_ids = app_ids
        self.categories = categories
        self.conversion_tracker_ids = conversion_tracker_ids
        self.conversion_tracker_types = conversion_tracker_types
        self.counting_type = counting_type
        self.exclude_from_bidding = exclude_from_bidding
        self.number_results = number_results
        self.start_index = start_index
        self.stats_period = stats_period
        self.stats_period_custom_date = stats_period_custom_date
        self.statuses = statuses

    @property
    def account_id(self):
        """Gets the account_id of this ConversionTrackerServiceSelector.  # noqa: E501

        <div lang=\"ja\">アカウントID。</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :return: The account_id of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ConversionTrackerServiceSelector.

        <div lang=\"ja\">アカウントID。</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :param account_id: The account_id of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def app_conversion_platform(self):
        """Gets the app_conversion_platform of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The app_conversion_platform of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: ConversionTrackerServiceAppConversionPlatform
        """
        return self._app_conversion_platform

    @app_conversion_platform.setter
    def app_conversion_platform(self, app_conversion_platform):
        """Sets the app_conversion_platform of this ConversionTrackerServiceSelector.


        :param app_conversion_platform: The app_conversion_platform of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: ConversionTrackerServiceAppConversionPlatform
        """

        self._app_conversion_platform = app_conversion_platform

    @property
    def app_ids(self):
        """Gets the app_ids of this ConversionTrackerServiceSelector.  # noqa: E501

        <div lang=\"ja\">アプリID。</div> <div lang=\"en\">App ID.</div>   # noqa: E501

        :return: The app_ids of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_ids

    @app_ids.setter
    def app_ids(self, app_ids):
        """Sets the app_ids of this ConversionTrackerServiceSelector.

        <div lang=\"ja\">アプリID。</div> <div lang=\"en\">App ID.</div>   # noqa: E501

        :param app_ids: The app_ids of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: list[str]
        """

        self._app_ids = app_ids

    @property
    def categories(self):
        """Gets the categories of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The categories of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: list[ConversionTrackerServiceCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this ConversionTrackerServiceSelector.


        :param categories: The categories of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: list[ConversionTrackerServiceCategory]
        """

        self._categories = categories

    @property
    def conversion_tracker_ids(self):
        """Gets the conversion_tracker_ids of this ConversionTrackerServiceSelector.  # noqa: E501

        <div lang=\"ja\">コンバージョントラッカーのID。</div> <div lang=\"en\">Conversion Tracker ID.</div>   # noqa: E501

        :return: The conversion_tracker_ids of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: list[int]
        """
        return self._conversion_tracker_ids

    @conversion_tracker_ids.setter
    def conversion_tracker_ids(self, conversion_tracker_ids):
        """Sets the conversion_tracker_ids of this ConversionTrackerServiceSelector.

        <div lang=\"ja\">コンバージョントラッカーのID。</div> <div lang=\"en\">Conversion Tracker ID.</div>   # noqa: E501

        :param conversion_tracker_ids: The conversion_tracker_ids of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: list[int]
        """

        self._conversion_tracker_ids = conversion_tracker_ids

    @property
    def conversion_tracker_types(self):
        """Gets the conversion_tracker_types of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The conversion_tracker_types of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: list[ConversionTrackerServiceType]
        """
        return self._conversion_tracker_types

    @conversion_tracker_types.setter
    def conversion_tracker_types(self, conversion_tracker_types):
        """Sets the conversion_tracker_types of this ConversionTrackerServiceSelector.


        :param conversion_tracker_types: The conversion_tracker_types of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: list[ConversionTrackerServiceType]
        """

        self._conversion_tracker_types = conversion_tracker_types

    @property
    def counting_type(self):
        """Gets the counting_type of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The counting_type of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: ConversionTrackerServiceCountingType
        """
        return self._counting_type

    @counting_type.setter
    def counting_type(self, counting_type):
        """Sets the counting_type of this ConversionTrackerServiceSelector.


        :param counting_type: The counting_type of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: ConversionTrackerServiceCountingType
        """

        self._counting_type = counting_type

    @property
    def exclude_from_bidding(self):
        """Gets the exclude_from_bidding of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The exclude_from_bidding of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: ConversionTrackerServiceExcludeFromBidding
        """
        return self._exclude_from_bidding

    @exclude_from_bidding.setter
    def exclude_from_bidding(self, exclude_from_bidding):
        """Sets the exclude_from_bidding of this ConversionTrackerServiceSelector.


        :param exclude_from_bidding: The exclude_from_bidding of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: ConversionTrackerServiceExcludeFromBidding
        """

        self._exclude_from_bidding = exclude_from_bidding

    @property
    def number_results(self):
        """Gets the number_results of this ConversionTrackerServiceSelector.  # noqa: E501

        <div lang=\"ja\">ページの最大件数です。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Maximum number of results to return in this page. This field must be greater than or equal to 1. Also see Entity Limits per operation.</div>   # noqa: E501

        :return: The number_results of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: int
        """
        return self._number_results

    @number_results.setter
    def number_results(self, number_results):
        """Sets the number_results of this ConversionTrackerServiceSelector.

        <div lang=\"ja\">ページの最大件数です。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Maximum number of results to return in this page. This field must be greater than or equal to 1. Also see Entity Limits per operation.</div>   # noqa: E501

        :param number_results: The number_results of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                number_results is not None and number_results > 1000):  # noqa: E501
            raise ValueError("Invalid value for `number_results`, must be a value less than or equal to `1000`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                number_results is not None and number_results < 1):  # noqa: E501
            raise ValueError("Invalid value for `number_results`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number_results = number_results

    @property
    def start_index(self):
        """Gets the start_index of this ConversionTrackerServiceSelector.  # noqa: E501

        <div lang=\"ja\">ページの先頭のインデックスです。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Index of the first result to return in this page. This field must be greater than or equal to 1.</div>   # noqa: E501

        :return: The start_index of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this ConversionTrackerServiceSelector.

        <div lang=\"ja\">ページの先頭のインデックスです。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Index of the first result to return in this page. This field must be greater than or equal to 1.</div>   # noqa: E501

        :param start_index: The start_index of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                start_index is not None and start_index < 1):  # noqa: E501
            raise ValueError("Invalid value for `start_index`, must be a value greater than or equal to `1`")  # noqa: E501

        self._start_index = start_index

    @property
    def stats_period(self):
        """Gets the stats_period of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The stats_period of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: ConversionTrackerServiceStatsPeriod
        """
        return self._stats_period

    @stats_period.setter
    def stats_period(self, stats_period):
        """Sets the stats_period of this ConversionTrackerServiceSelector.


        :param stats_period: The stats_period of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: ConversionTrackerServiceStatsPeriod
        """

        self._stats_period = stats_period

    @property
    def stats_period_custom_date(self):
        """Gets the stats_period_custom_date of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The stats_period_custom_date of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: ConversionTrackerServiceStatsPeriodCustomDate
        """
        return self._stats_period_custom_date

    @stats_period_custom_date.setter
    def stats_period_custom_date(self, stats_period_custom_date):
        """Sets the stats_period_custom_date of this ConversionTrackerServiceSelector.


        :param stats_period_custom_date: The stats_period_custom_date of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: ConversionTrackerServiceStatsPeriodCustomDate
        """

        self._stats_period_custom_date = stats_period_custom_date

    @property
    def statuses(self):
        """Gets the statuses of this ConversionTrackerServiceSelector.  # noqa: E501


        :return: The statuses of this ConversionTrackerServiceSelector.  # noqa: E501
        :rtype: list[ConversionTrackerServiceStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this ConversionTrackerServiceSelector.


        :param statuses: The statuses of this ConversionTrackerServiceSelector.  # noqa: E501
        :type: list[ConversionTrackerServiceStatus]
        """

        self._statuses = statuses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversionTrackerServiceSelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConversionTrackerServiceSelector):
            return True

        return self.to_dict() != other.to_dict()
