# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-display-api-documents/oauth2-redirect.html\". </div>   # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_ads_display.configuration import Configuration


class FeedDataServiceRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'complete_date': 'str',
        'error_count': 'int',
        'error_rate': 'float',
        'feed_id': 'int',
        'file_upload_src': 'FeedDataServiceFileUploadSrc',
        'file_upload_status': 'FeedDataServiceFileUploadStatus',
        'is_debug': 'bool',
        'item_list_upload_id': 'int',
        'item_list_upload_type': 'FeedDataServiceItemListUploadType',
        'upload_date': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'complete_date': 'completeDate',
        'error_count': 'errorCount',
        'error_rate': 'errorRate',
        'feed_id': 'feedId',
        'file_upload_src': 'fileUploadSrc',
        'file_upload_status': 'fileUploadStatus',
        'is_debug': 'isDebug',
        'item_list_upload_id': 'itemListUploadId',
        'item_list_upload_type': 'itemListUploadType',
        'upload_date': 'uploadDate'
    }

    def __init__(self, account_id=None, complete_date=None, error_count=None, error_rate=None, feed_id=None, file_upload_src=None, file_upload_status=None, is_debug=None, item_list_upload_id=None, item_list_upload_type=None, upload_date=None, local_vars_configuration=None):  # noqa: E501
        """FeedDataServiceRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._complete_date = None
        self._error_count = None
        self._error_rate = None
        self._feed_id = None
        self._file_upload_src = None
        self._file_upload_status = None
        self._is_debug = None
        self._item_list_upload_id = None
        self._item_list_upload_type = None
        self._upload_date = None
        self.discriminator = None

        self.account_id = account_id
        self.complete_date = complete_date
        self.error_count = error_count
        self.error_rate = error_rate
        self.feed_id = feed_id
        self.file_upload_src = file_upload_src
        self.file_upload_status = file_upload_status
        self.is_debug = is_debug
        self.item_list_upload_id = item_list_upload_id
        self.item_list_upload_type = item_list_upload_type
        self.upload_date = upload_date

    @property
    def account_id(self):
        """Gets the account_id of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">アカウントID</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :return: The account_id of this FeedDataServiceRecord.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this FeedDataServiceRecord.

        <div lang=\"ja\">アカウントID</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :param account_id: The account_id of this FeedDataServiceRecord.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def complete_date(self):
        """Gets the complete_date of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">取り込み完了日(yyyyMMdd)</div> <div lang=\"en\"> Complete date.<br> Format: yyyyMMdd </div>   # noqa: E501

        :return: The complete_date of this FeedDataServiceRecord.  # noqa: E501
        :rtype: str
        """
        return self._complete_date

    @complete_date.setter
    def complete_date(self, complete_date):
        """Sets the complete_date of this FeedDataServiceRecord.

        <div lang=\"ja\">取り込み完了日(yyyyMMdd)</div> <div lang=\"en\"> Complete date.<br> Format: yyyyMMdd </div>   # noqa: E501

        :param complete_date: The complete_date of this FeedDataServiceRecord.  # noqa: E501
        :type: str
        """

        self._complete_date = complete_date

    @property
    def error_count(self):
        """Gets the error_count of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">不備がある商品情報の件数</div> <div lang=\"en\">Number of item list with error.</div>   # noqa: E501

        :return: The error_count of this FeedDataServiceRecord.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this FeedDataServiceRecord.

        <div lang=\"ja\">不備がある商品情報の件数</div> <div lang=\"en\">Number of item list with error.</div>   # noqa: E501

        :param error_count: The error_count of this FeedDataServiceRecord.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def error_rate(self):
        """Gets the error_rate of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">エラー率</div> <div lang=\"en\">Error rate.</div>   # noqa: E501

        :return: The error_rate of this FeedDataServiceRecord.  # noqa: E501
        :rtype: float
        """
        return self._error_rate

    @error_rate.setter
    def error_rate(self, error_rate):
        """Sets the error_rate of this FeedDataServiceRecord.

        <div lang=\"ja\">エラー率</div> <div lang=\"en\">Error rate.</div>   # noqa: E501

        :param error_rate: The error_rate of this FeedDataServiceRecord.  # noqa: E501
        :type: float
        """

        self._error_rate = error_rate

    @property
    def feed_id(self):
        """Gets the feed_id of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">Feedを識別するId</div> <div lang=\"en\">Feed ID.</div>   # noqa: E501

        :return: The feed_id of this FeedDataServiceRecord.  # noqa: E501
        :rtype: int
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this FeedDataServiceRecord.

        <div lang=\"ja\">Feedを識別するId</div> <div lang=\"en\">Feed ID.</div>   # noqa: E501

        :param feed_id: The feed_id of this FeedDataServiceRecord.  # noqa: E501
        :type: int
        """

        self._feed_id = feed_id

    @property
    def file_upload_src(self):
        """Gets the file_upload_src of this FeedDataServiceRecord.  # noqa: E501


        :return: The file_upload_src of this FeedDataServiceRecord.  # noqa: E501
        :rtype: FeedDataServiceFileUploadSrc
        """
        return self._file_upload_src

    @file_upload_src.setter
    def file_upload_src(self, file_upload_src):
        """Sets the file_upload_src of this FeedDataServiceRecord.


        :param file_upload_src: The file_upload_src of this FeedDataServiceRecord.  # noqa: E501
        :type: FeedDataServiceFileUploadSrc
        """

        self._file_upload_src = file_upload_src

    @property
    def file_upload_status(self):
        """Gets the file_upload_status of this FeedDataServiceRecord.  # noqa: E501


        :return: The file_upload_status of this FeedDataServiceRecord.  # noqa: E501
        :rtype: FeedDataServiceFileUploadStatus
        """
        return self._file_upload_status

    @file_upload_status.setter
    def file_upload_status(self, file_upload_status):
        """Sets the file_upload_status of this FeedDataServiceRecord.


        :param file_upload_status: The file_upload_status of this FeedDataServiceRecord.  # noqa: E501
        :type: FeedDataServiceFileUploadStatus
        """

        self._file_upload_status = file_upload_status

    @property
    def is_debug(self):
        """Gets the is_debug of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">trueはデバッグモードでの実行を意味します。</div> <div lang=\"en\">&#34;true&#34; means to run in debug mode.</div>   # noqa: E501

        :return: The is_debug of this FeedDataServiceRecord.  # noqa: E501
        :rtype: bool
        """
        return self._is_debug

    @is_debug.setter
    def is_debug(self, is_debug):
        """Sets the is_debug of this FeedDataServiceRecord.

        <div lang=\"ja\">trueはデバッグモードでの実行を意味します。</div> <div lang=\"en\">&#34;true&#34; means to run in debug mode.</div>   # noqa: E501

        :param is_debug: The is_debug of this FeedDataServiceRecord.  # noqa: E501
        :type: bool
        """

        self._is_debug = is_debug

    @property
    def item_list_upload_id(self):
        """Gets the item_list_upload_id of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">アップロードした商品情報を識別するID</div> <div lang=\"en\">Uploaded item list ID.</div>   # noqa: E501

        :return: The item_list_upload_id of this FeedDataServiceRecord.  # noqa: E501
        :rtype: int
        """
        return self._item_list_upload_id

    @item_list_upload_id.setter
    def item_list_upload_id(self, item_list_upload_id):
        """Sets the item_list_upload_id of this FeedDataServiceRecord.

        <div lang=\"ja\">アップロードした商品情報を識別するID</div> <div lang=\"en\">Uploaded item list ID.</div>   # noqa: E501

        :param item_list_upload_id: The item_list_upload_id of this FeedDataServiceRecord.  # noqa: E501
        :type: int
        """

        self._item_list_upload_id = item_list_upload_id

    @property
    def item_list_upload_type(self):
        """Gets the item_list_upload_type of this FeedDataServiceRecord.  # noqa: E501


        :return: The item_list_upload_type of this FeedDataServiceRecord.  # noqa: E501
        :rtype: FeedDataServiceItemListUploadType
        """
        return self._item_list_upload_type

    @item_list_upload_type.setter
    def item_list_upload_type(self, item_list_upload_type):
        """Sets the item_list_upload_type of this FeedDataServiceRecord.


        :param item_list_upload_type: The item_list_upload_type of this FeedDataServiceRecord.  # noqa: E501
        :type: FeedDataServiceItemListUploadType
        """

        self._item_list_upload_type = item_list_upload_type

    @property
    def upload_date(self):
        """Gets the upload_date of this FeedDataServiceRecord.  # noqa: E501

        <div lang=\"ja\">アップロード日(yyyyMMdd)</div> <div lang=\"en\"> Upload date.<br> Format: yyyyMMdd </div>   # noqa: E501

        :return: The upload_date of this FeedDataServiceRecord.  # noqa: E501
        :rtype: str
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this FeedDataServiceRecord.

        <div lang=\"ja\">アップロード日(yyyyMMdd)</div> <div lang=\"en\"> Upload date.<br> Format: yyyyMMdd </div>   # noqa: E501

        :param upload_date: The upload_date of this FeedDataServiceRecord.  # noqa: E501
        :type: str
        """

        self._upload_date = upload_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedDataServiceRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeedDataServiceRecord):
            return True

        return self.to_dict() != other.to_dict()
