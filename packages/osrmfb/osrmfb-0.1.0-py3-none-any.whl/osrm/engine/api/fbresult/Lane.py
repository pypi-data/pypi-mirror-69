# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbresult

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Lane(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLane(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Lane()
        x.Init(buf, n + offset)
        return x

    # Lane
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Lane
    def Indications(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Lane
    def IndicationsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # Lane
    def IndicationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Lane
    def IndicationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Lane
    def Valid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def LaneStart(builder): builder.StartObject(2)
def LaneAddIndications(builder, indications): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(indications), 0)
def LaneStartIndicationsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def LaneAddValid(builder, valid): builder.PrependBoolSlot(1, valid, 0)
def LaneEnd(builder): return builder.EndObject()
