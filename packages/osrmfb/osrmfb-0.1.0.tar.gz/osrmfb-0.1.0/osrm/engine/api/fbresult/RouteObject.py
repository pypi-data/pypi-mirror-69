# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbresult

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RouteObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsRouteObject(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RouteObject()
        x.Init(buf, n + offset)
        return x

    # RouteObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RouteObject
    def Distance(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RouteObject
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RouteObject
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RouteObject
    def WeightName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RouteObject
    def Confidence(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RouteObject
    def Polyline(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RouteObject
    def Coordinates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 8
            from osrm.engine.api.fbresult.Position import Position
            obj = Position()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RouteObject
    def CoordinatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RouteObject
    def CoordinatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # RouteObject
    def Legs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from osrm.engine.api.fbresult.Leg import Leg
            obj = Leg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RouteObject
    def LegsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RouteObject
    def LegsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

def RouteObjectStart(builder): builder.StartObject(8)
def RouteObjectAddDistance(builder, distance): builder.PrependFloat32Slot(0, distance, 0.0)
def RouteObjectAddDuration(builder, duration): builder.PrependFloat32Slot(1, duration, 0.0)
def RouteObjectAddWeight(builder, weight): builder.PrependFloat32Slot(2, weight, 0.0)
def RouteObjectAddWeightName(builder, weightName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(weightName), 0)
def RouteObjectAddConfidence(builder, confidence): builder.PrependFloat32Slot(4, confidence, 0.0)
def RouteObjectAddPolyline(builder, polyline): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(polyline), 0)
def RouteObjectAddCoordinates(builder, coordinates): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(coordinates), 0)
def RouteObjectStartCoordinatesVector(builder, numElems): return builder.StartVector(8, numElems, 4)
def RouteObjectAddLegs(builder, legs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(legs), 0)
def RouteObjectStartLegsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RouteObjectEnd(builder): return builder.EndObject()
