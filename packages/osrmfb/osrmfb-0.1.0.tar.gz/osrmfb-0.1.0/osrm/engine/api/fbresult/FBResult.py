# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbresult

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FBResult(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFBResult(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBResult()
        x.Init(buf, n + offset)
        return x

    # FBResult
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBResult
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FBResult
    def Code(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from osrm.engine.api.fbresult.Error import Error
            obj = Error()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBResult
    def DataVersion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FBResult
    def Waypoints(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from osrm.engine.api.fbresult.Waypoint import Waypoint
            obj = Waypoint()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBResult
    def WaypointsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBResult
    def WaypointsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FBResult
    def Routes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from osrm.engine.api.fbresult.RouteObject import RouteObject
            obj = RouteObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBResult
    def RoutesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBResult
    def RoutesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # FBResult
    def Table(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from osrm.engine.api.fbresult.Table import Table
            obj = Table()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FBResultStart(builder): builder.StartObject(6)
def FBResultAddError(builder, error): builder.PrependBoolSlot(0, error, 0)
def FBResultAddCode(builder, code): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(code), 0)
def FBResultAddDataVersion(builder, dataVersion): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataVersion), 0)
def FBResultAddWaypoints(builder, waypoints): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(waypoints), 0)
def FBResultStartWaypointsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FBResultAddRoutes(builder, routes): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(routes), 0)
def FBResultStartRoutesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FBResultAddTable(builder, table): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(table), 0)
def FBResultEnd(builder): return builder.EndObject()
