# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _MEDCouplingRemapper
else:
    import _MEDCouplingRemapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _MEDCouplingRemapper.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _MEDCouplingRemapper.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _MEDCouplingRemapper.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _MEDCouplingRemapper.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _MEDCouplingRemapper.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _MEDCouplingRemapper.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _MEDCouplingRemapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _MEDCouplingRemapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _MEDCouplingRemapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _MEDCouplingRemapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _MEDCouplingRemapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.SwigPyIterator_swigregister(SwigPyIterator)

class ivec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.ivec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _MEDCouplingRemapper.ivec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _MEDCouplingRemapper.ivec___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _MEDCouplingRemapper.ivec___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _MEDCouplingRemapper.ivec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _MEDCouplingRemapper.ivec___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _MEDCouplingRemapper.ivec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _MEDCouplingRemapper.ivec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _MEDCouplingRemapper.ivec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _MEDCouplingRemapper.ivec___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _MEDCouplingRemapper.ivec_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _MEDCouplingRemapper.ivec_append(self, x)

    def empty(self) -> "bool":
        return _MEDCouplingRemapper.ivec_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _MEDCouplingRemapper.ivec_size(self)

    def swap(self, v: 'ivec') -> "void":
        return _MEDCouplingRemapper.ivec_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _MEDCouplingRemapper.ivec_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _MEDCouplingRemapper.ivec_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _MEDCouplingRemapper.ivec_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _MEDCouplingRemapper.ivec_rend(self)

    def clear(self) -> "void":
        return _MEDCouplingRemapper.ivec_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _MEDCouplingRemapper.ivec_get_allocator(self)

    def pop_back(self) -> "void":
        return _MEDCouplingRemapper.ivec_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _MEDCouplingRemapper.ivec_erase(self, *args)

    def __init__(self, *args):
        _MEDCouplingRemapper.ivec_swiginit(self, _MEDCouplingRemapper.new_ivec(*args))

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _MEDCouplingRemapper.ivec_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _MEDCouplingRemapper.ivec_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _MEDCouplingRemapper.ivec_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _MEDCouplingRemapper.ivec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _MEDCouplingRemapper.ivec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _MEDCouplingRemapper.ivec_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _MEDCouplingRemapper.ivec_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _MEDCouplingRemapper.ivec_capacity(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_ivec

# Register ivec in _MEDCouplingRemapper:
_MEDCouplingRemapper.ivec_swigregister(ivec)

class dvec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.dvec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _MEDCouplingRemapper.dvec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _MEDCouplingRemapper.dvec___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _MEDCouplingRemapper.dvec___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _MEDCouplingRemapper.dvec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _MEDCouplingRemapper.dvec___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _MEDCouplingRemapper.dvec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _MEDCouplingRemapper.dvec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _MEDCouplingRemapper.dvec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _MEDCouplingRemapper.dvec___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _MEDCouplingRemapper.dvec_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _MEDCouplingRemapper.dvec_append(self, x)

    def empty(self) -> "bool":
        return _MEDCouplingRemapper.dvec_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _MEDCouplingRemapper.dvec_size(self)

    def swap(self, v: 'dvec') -> "void":
        return _MEDCouplingRemapper.dvec_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _MEDCouplingRemapper.dvec_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _MEDCouplingRemapper.dvec_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _MEDCouplingRemapper.dvec_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _MEDCouplingRemapper.dvec_rend(self)

    def clear(self) -> "void":
        return _MEDCouplingRemapper.dvec_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _MEDCouplingRemapper.dvec_get_allocator(self)

    def pop_back(self) -> "void":
        return _MEDCouplingRemapper.dvec_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _MEDCouplingRemapper.dvec_erase(self, *args)

    def __init__(self, *args):
        _MEDCouplingRemapper.dvec_swiginit(self, _MEDCouplingRemapper.new_dvec(*args))

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _MEDCouplingRemapper.dvec_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _MEDCouplingRemapper.dvec_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _MEDCouplingRemapper.dvec_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _MEDCouplingRemapper.dvec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _MEDCouplingRemapper.dvec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _MEDCouplingRemapper.dvec_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _MEDCouplingRemapper.dvec_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _MEDCouplingRemapper.dvec_capacity(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_dvec

# Register dvec in _MEDCouplingRemapper:
_MEDCouplingRemapper.dvec_swigregister(dvec)

class svec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _MEDCouplingRemapper.svec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _MEDCouplingRemapper.svec___nonzero__(self)

    def __bool__(self) -> "bool":
        return _MEDCouplingRemapper.svec___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _MEDCouplingRemapper.svec___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _MEDCouplingRemapper.svec___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _MEDCouplingRemapper.svec___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _MEDCouplingRemapper.svec___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _MEDCouplingRemapper.svec___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _MEDCouplingRemapper.svec___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _MEDCouplingRemapper.svec___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _MEDCouplingRemapper.svec_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _MEDCouplingRemapper.svec_append(self, x)

    def empty(self) -> "bool":
        return _MEDCouplingRemapper.svec_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _MEDCouplingRemapper.svec_size(self)

    def swap(self, v: 'svec') -> "void":
        return _MEDCouplingRemapper.svec_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _MEDCouplingRemapper.svec_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _MEDCouplingRemapper.svec_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _MEDCouplingRemapper.svec_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _MEDCouplingRemapper.svec_rend(self)

    def clear(self) -> "void":
        return _MEDCouplingRemapper.svec_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _MEDCouplingRemapper.svec_get_allocator(self)

    def pop_back(self) -> "void":
        return _MEDCouplingRemapper.svec_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _MEDCouplingRemapper.svec_erase(self, *args)

    def __init__(self, *args):
        _MEDCouplingRemapper.svec_swiginit(self, _MEDCouplingRemapper.new_svec(*args))

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _MEDCouplingRemapper.svec_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _MEDCouplingRemapper.svec_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _MEDCouplingRemapper.svec_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _MEDCouplingRemapper.svec_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _MEDCouplingRemapper.svec_resize(self, *args)

    def insert(self, *args) -> "void":
        return _MEDCouplingRemapper.svec_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _MEDCouplingRemapper.svec_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _MEDCouplingRemapper.svec_capacity(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_svec

# Register svec in _MEDCouplingRemapper:
_MEDCouplingRemapper.svec_swigregister(svec)

class InterpKernelException(Exception):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, what: 'char const *'):
        r"""
        __init__(InterpKernelException self, char const * what) -> InterpKernelException
        1
        """
        _MEDCouplingRemapper.InterpKernelException_swiginit(self, _MEDCouplingRemapper.new_InterpKernelException(what))
    __swig_destroy__ = _MEDCouplingRemapper.delete_InterpKernelException

    def what(self) -> "char const *":
        r"""
        what(InterpKernelException self) -> char const *
        1
        """
        return _MEDCouplingRemapper.InterpKernelException_what(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(InterpKernelException self) -> std::string
        1
        """
        return _MEDCouplingRemapper.InterpKernelException___str__(self)

# Register InterpKernelException in _MEDCouplingRemapper:
_MEDCouplingRemapper.InterpKernelException_swigregister(InterpKernelException)

class TimeLabel(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def declareAsNew(self) -> "void":
        r"""
        declareAsNew(TimeLabel self)
        1
        """
        return _MEDCouplingRemapper.TimeLabel_declareAsNew(self)

    def updateTime(self) -> "void":
        r"""
        updateTime(TimeLabel self)
        1
        """
        return _MEDCouplingRemapper.TimeLabel_updateTime(self)

    def getTimeOfThis(self) -> "unsigned int":
        r"""
        getTimeOfThis(TimeLabel self) -> unsigned int
        1
        """
        return _MEDCouplingRemapper.TimeLabel_getTimeOfThis(self)

# Register TimeLabel in _MEDCouplingRemapper:
_MEDCouplingRemapper.TimeLabel_swigregister(TimeLabel)

DeallocType_C_DEALLOC = _MEDCouplingRemapper.DeallocType_C_DEALLOC
r"""1"""
DeallocType_CPP_DEALLOC = _MEDCouplingRemapper.DeallocType_CPP_DEALLOC
r"""1"""

def MEDCouplingVersionStr() -> "char const *":
    r"""
    MEDCouplingVersionStr() -> char const *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingVersionStr()

def MEDCouplingVersion() -> "int":
    r"""
    MEDCouplingVersion() -> int
    1
    """
    return _MEDCouplingRemapper.MEDCouplingVersion()

def MEDCouplingSizeOfVoidStar() -> "int":
    r"""
    MEDCouplingSizeOfVoidStar() -> int
    1
    """
    return _MEDCouplingRemapper.MEDCouplingSizeOfVoidStar()

def MEDCouplingSizeOfIDs() -> "int":
    r"""
    MEDCouplingSizeOfIDs() -> int
    1
    """
    return _MEDCouplingRemapper.MEDCouplingSizeOfIDs()

def MEDCouplingByteOrder() -> "bool":
    r"""
    MEDCouplingByteOrder() -> bool
    1
    """
    return _MEDCouplingRemapper.MEDCouplingByteOrder()

def MEDCouplingByteOrderStr() -> "char const *":
    r"""
    MEDCouplingByteOrderStr() -> char const *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingByteOrderStr()

def IsCXX11Compiled() -> "bool":
    r"""
    IsCXX11Compiled() -> bool
    1
    """
    return _MEDCouplingRemapper.IsCXX11Compiled()
class BigMemoryObject(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getHeapMemorySize(self) -> "std::size_t":
        r"""
        getHeapMemorySize(BigMemoryObject self) -> std::size_t
        1
        """
        return _MEDCouplingRemapper.BigMemoryObject_getHeapMemorySize(self)

    def getHeapMemorySizeStr(self) -> "std::string":
        r"""
        getHeapMemorySizeStr(BigMemoryObject self) -> std::string
        1
        """
        return _MEDCouplingRemapper.BigMemoryObject_getHeapMemorySizeStr(self)

    def isObjectInTheProgeny(self, obj: 'BigMemoryObject') -> "bool":
        r"""
        isObjectInTheProgeny(BigMemoryObject self, BigMemoryObject obj) -> bool
        1
        """
        return _MEDCouplingRemapper.BigMemoryObject_isObjectInTheProgeny(self, obj)

    def getHeapMemorySizeWithoutChildren(self) -> "std::size_t":
        r"""
        getHeapMemorySizeWithoutChildren(BigMemoryObject self) -> std::size_t
        1
        """
        return _MEDCouplingRemapper.BigMemoryObject_getHeapMemorySizeWithoutChildren(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_BigMemoryObject

    def getDirectChildren(self) -> "PyObject *":
        r"""
        getDirectChildren(BigMemoryObject self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.BigMemoryObject_getDirectChildren(self)

    def getAllTheProgeny(self) -> "PyObject *":
        r"""
        getAllTheProgeny(BigMemoryObject self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.BigMemoryObject_getAllTheProgeny(self)

    @staticmethod
    def GetHeapMemorySizeOfObjs(objs: 'PyObject *') -> "std::size_t":
        r"""
        GetHeapMemorySizeOfObjs(PyObject * objs) -> std::size_t
        1
        """
        return _MEDCouplingRemapper.BigMemoryObject_GetHeapMemorySizeOfObjs(objs)

# Register BigMemoryObject in _MEDCouplingRemapper:
_MEDCouplingRemapper.BigMemoryObject_swigregister(BigMemoryObject)

def BigMemoryObject_GetHeapMemorySizeOfObjs(objs: 'PyObject *') -> "std::size_t":
    r"""
    BigMemoryObject_GetHeapMemorySizeOfObjs(PyObject * objs) -> std::size_t
    1
    """
    return _MEDCouplingRemapper.BigMemoryObject_GetHeapMemorySizeOfObjs(objs)

class RefCountObjectOnly(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def decrRef(self) -> "bool":
        r"""
        decrRef(RefCountObjectOnly self) -> bool
        1
        """
        return _MEDCouplingRemapper.RefCountObjectOnly_decrRef(self)

    def incrRef(self) -> "void":
        r"""
        incrRef(RefCountObjectOnly self)
        1
        """
        return _MEDCouplingRemapper.RefCountObjectOnly_incrRef(self)

    def getRCValue(self) -> "int":
        r"""
        getRCValue(RefCountObjectOnly self) -> int
        1
        """
        return _MEDCouplingRemapper.RefCountObjectOnly_getRCValue(self)

# Register RefCountObjectOnly in _MEDCouplingRemapper:
_MEDCouplingRemapper.RefCountObjectOnly_swigregister(RefCountObjectOnly)

class RefCountObject(RefCountObjectOnly, BigMemoryObject):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getHiddenCppPointer(self) -> "std::string":
        r"""
        getHiddenCppPointer(RefCountObject self) -> std::string
        1
        """
        return _MEDCouplingRemapper.RefCountObject_getHiddenCppPointer(self)

# Register RefCountObject in _MEDCouplingRemapper:
_MEDCouplingRemapper.RefCountObject_swigregister(RefCountObject)

class GlobalDict(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetInstance() -> "MEDCoupling::GlobalDict *":
        r"""
        GetInstance() -> GlobalDict
        1
        """
        return _MEDCouplingRemapper.GlobalDict_GetInstance()

    def hasKey(self, key: 'std::string const &') -> "bool":
        r"""
        hasKey(GlobalDict self, std::string const & key) -> bool
        1
        """
        return _MEDCouplingRemapper.GlobalDict_hasKey(self, key)

    def value(self, key: 'std::string const &') -> "std::string":
        r"""
        value(GlobalDict self, std::string const & key) -> std::string
        1
        """
        return _MEDCouplingRemapper.GlobalDict_value(self, key)

    def keys(self) -> "std::vector< std::string,std::allocator< std::string > >":
        r"""
        keys(GlobalDict self) -> svec
        1
        """
        return _MEDCouplingRemapper.GlobalDict_keys(self)

    def erase(self, key: 'std::string const &') -> "void":
        r"""
        erase(GlobalDict self, std::string const & key)
        1
        """
        return _MEDCouplingRemapper.GlobalDict_erase(self, key)

    def clear(self) -> "void":
        r"""
        clear(GlobalDict self)
        1
        """
        return _MEDCouplingRemapper.GlobalDict_clear(self)

    def setKeyValue(self, key: 'std::string const &', value: 'std::string const &') -> "void":
        r"""
        setKeyValue(GlobalDict self, std::string const & key, std::string const & value)
        1
        """
        return _MEDCouplingRemapper.GlobalDict_setKeyValue(self, key, value)

    def setKeyValueForce(self, key: 'std::string const &', value: 'std::string const &') -> "void":
        r"""
        setKeyValueForce(GlobalDict self, std::string const & key, std::string const & value)
        1
        """
        return _MEDCouplingRemapper.GlobalDict_setKeyValueForce(self, key, value)

    def __str__(self) -> "std::string":
        r"""
        __str__(GlobalDict self) -> std::string
        1
        """
        return _MEDCouplingRemapper.GlobalDict___str__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_GlobalDict

# Register GlobalDict in _MEDCouplingRemapper:
_MEDCouplingRemapper.GlobalDict_swigregister(GlobalDict)

def GlobalDict_GetInstance() -> "MEDCoupling::GlobalDict *":
    r"""
    GlobalDict_GetInstance() -> GlobalDict
    1
    """
    return _MEDCouplingRemapper.GlobalDict_GetInstance()


def MEDCouplingVersionMajMinRel() -> "PyObject *":
    r"""
    MEDCouplingVersionMajMinRel() -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingVersionMajMinRel()

def MEDCouplingHasNumPyBindings() -> "bool":
    r"""
    MEDCouplingHasNumPyBindings() -> bool
    1
    """
    return _MEDCouplingRemapper.MEDCouplingHasNumPyBindings()

def MEDCouplingHasSciPyBindings() -> "bool":
    r"""
    MEDCouplingHasSciPyBindings() -> bool
    1
    """
    return _MEDCouplingRemapper.MEDCouplingHasSciPyBindings()

def MEDCouplingCompletionScript() -> "std::string":
    r"""
    MEDCouplingCompletionScript() -> std::string
    1
    """
    return _MEDCouplingRemapper.MEDCouplingCompletionScript()

def INTERPKERNELExceptionReduceFunct(a,b):
    ret=InterpKernelException.__new__(a)
    ret.__init__(*b)
    return ret
def INTERPKERNELExceptionReduce(self):
    return INTERPKERNELExceptionReduceFunct,(InterpKernelException,(self.what(),))

AX_CART = _MEDCouplingRemapper.AX_CART
r"""1"""
AX_CYL = _MEDCouplingRemapper.AX_CYL
r"""1"""
AX_SPHER = _MEDCouplingRemapper.AX_SPHER
r"""1"""
class MapII(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New() -> "MCAuto< MEDCoupling::MapII >":
        r"""
        New() -> MCAuto< MEDCoupling::MapII >
        1
        """
        return _MEDCouplingRemapper.MapII_New()
    __swig_destroy__ = _MEDCouplingRemapper.delete_MapII

# Register MapII in _MEDCouplingRemapper:
_MEDCouplingRemapper.MapII_swigregister(MapII)

def MapII_New() -> "MCAuto< MEDCoupling::MapII >":
    r"""
    MapII_New() -> MCAuto< MEDCoupling::MapII >
    1
    """
    return _MEDCouplingRemapper.MapII_New()

class PartDefinition(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args) -> "MEDCoupling::PartDefinition *":
        r"""
        New(int start, int stop, int step) -> PartDefinition
        New(DataArrayInt listOfIds) -> PartDefinition
        1
        """
        return _MEDCouplingRemapper.PartDefinition_New(*args)

    def toDAI(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        toDAI(PartDefinition self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.PartDefinition_toDAI(self)

    def getNumberOfElems(self) -> "int":
        r"""
        getNumberOfElems(PartDefinition self) -> int
        1
        """
        return _MEDCouplingRemapper.PartDefinition_getNumberOfElems(self)

    def getRepr(self) -> "std::string":
        r"""
        getRepr(PartDefinition self) -> std::string
        1
        """
        return _MEDCouplingRemapper.PartDefinition_getRepr(self)

    def composeWith(self, other: 'PartDefinition') -> "MEDCoupling::PartDefinition *":
        r"""
        composeWith(PartDefinition self, PartDefinition other) -> PartDefinition
        1
        """
        return _MEDCouplingRemapper.PartDefinition_composeWith(self, other)

    def checkConsistencyLight(self) -> "void":
        r"""
        checkConsistencyLight(PartDefinition self)
        1
        """
        return _MEDCouplingRemapper.PartDefinition_checkConsistencyLight(self)

    def tryToSimplify(self) -> "MEDCoupling::PartDefinition *":
        r"""
        tryToSimplify(PartDefinition self) -> PartDefinition
        1
        """
        return _MEDCouplingRemapper.PartDefinition_tryToSimplify(self)

    def __add__(self, other: 'PartDefinition') -> "MEDCoupling::PartDefinition *":
        r"""
        __add__(PartDefinition self, PartDefinition other) -> PartDefinition
        1
        """
        return _MEDCouplingRemapper.PartDefinition___add__(self, other)

    def isEqual(self, other: 'PartDefinition') -> "PyObject *":
        r"""
        isEqual(PartDefinition self, PartDefinition other) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.PartDefinition_isEqual(self, other)

    def deepCopy(self) -> "PyObject *":
        r"""
        deepCopy(PartDefinition self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.PartDefinition_deepCopy(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_PartDefinition

# Register PartDefinition in _MEDCouplingRemapper:
_MEDCouplingRemapper.PartDefinition_swigregister(PartDefinition)

def PartDefinition_New(*args) -> "MEDCoupling::PartDefinition *":
    r"""
    PartDefinition_New(int start, int stop, int step) -> PartDefinition
    PartDefinition_New(DataArrayInt listOfIds) -> PartDefinition
    1
    """
    return _MEDCouplingRemapper.PartDefinition_New(*args)

class DataArrayPartDefinition(PartDefinition):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(listOfIds: 'DataArrayInt') -> "MEDCoupling::DataArrayPartDefinition *":
        r"""
        New(DataArrayInt listOfIds) -> DataArrayPartDefinition
        1
        """
        return _MEDCouplingRemapper.DataArrayPartDefinition_New(listOfIds)

    def __init__(self, listOfIds: 'DataArrayInt'):
        r"""
        __init__(DataArrayPartDefinition self, DataArrayInt listOfIds) -> DataArrayPartDefinition
        1
        """
        _MEDCouplingRemapper.DataArrayPartDefinition_swiginit(self, _MEDCouplingRemapper.new_DataArrayPartDefinition(listOfIds))

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayPartDefinition self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayPartDefinition___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(DataArrayPartDefinition self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayPartDefinition___repr__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayPartDefinition

# Register DataArrayPartDefinition in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayPartDefinition_swigregister(DataArrayPartDefinition)

def DataArrayPartDefinition_New(listOfIds: 'DataArrayInt') -> "MEDCoupling::DataArrayPartDefinition *":
    r"""
    DataArrayPartDefinition_New(DataArrayInt listOfIds) -> DataArrayPartDefinition
    1
    """
    return _MEDCouplingRemapper.DataArrayPartDefinition_New(listOfIds)

class SlicePartDefinition(PartDefinition):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(start: 'int', stop: 'int', step: 'int') -> "MEDCoupling::SlicePartDefinition *":
        r"""
        New(int start, int stop, int step) -> SlicePartDefinition
        1
        """
        return _MEDCouplingRemapper.SlicePartDefinition_New(start, stop, step)

    def getEffectiveStop(self) -> "int":
        r"""
        getEffectiveStop(SlicePartDefinition self) -> int
        1
        """
        return _MEDCouplingRemapper.SlicePartDefinition_getEffectiveStop(self)

    def __init__(self, start: 'int', stop: 'int', step: 'int'):
        r"""
        __init__(SlicePartDefinition self, int start, int stop, int step) -> SlicePartDefinition
        1
        """
        _MEDCouplingRemapper.SlicePartDefinition_swiginit(self, _MEDCouplingRemapper.new_SlicePartDefinition(start, stop, step))

    def getSlice(self) -> "PyObject *":
        r"""
        getSlice(SlicePartDefinition self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.SlicePartDefinition_getSlice(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(SlicePartDefinition self) -> std::string
        1
        """
        return _MEDCouplingRemapper.SlicePartDefinition___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(SlicePartDefinition self) -> std::string
        1
        """
        return _MEDCouplingRemapper.SlicePartDefinition___repr__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_SlicePartDefinition

# Register SlicePartDefinition in _MEDCouplingRemapper:
_MEDCouplingRemapper.SlicePartDefinition_swigregister(SlicePartDefinition)

def SlicePartDefinition_New(start: 'int', stop: 'int', step: 'int') -> "MEDCoupling::SlicePartDefinition *":
    r"""
    SlicePartDefinition_New(int start, int stop, int step) -> SlicePartDefinition
    1
    """
    return _MEDCouplingRemapper.SlicePartDefinition_New(start, stop, step)

class DataArray(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, name: 'std::string const &') -> "void":
        r"""
        setName(DataArray self, std::string const & name)
        1
        """
        return _MEDCouplingRemapper.DataArray_setName(self, name)

    def copyStringInfoFrom(self, other: 'DataArray') -> "void":
        r"""
        copyStringInfoFrom(DataArray self, DataArray other)
        1
        """
        return _MEDCouplingRemapper.DataArray_copyStringInfoFrom(self, other)

    def areInfoEqualsIfNotWhy(self, other: 'DataArray', reason: 'std::string &') -> "bool":
        r"""
        areInfoEqualsIfNotWhy(DataArray self, DataArray other, std::string & reason) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArray_areInfoEqualsIfNotWhy(self, other, reason)

    def areInfoEquals(self, other: 'DataArray') -> "bool":
        r"""
        areInfoEquals(DataArray self, DataArray other) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArray_areInfoEquals(self, other)

    def cppRepr(self, varName: 'std::string const &') -> "std::string":
        r"""
        cppRepr(DataArray self, std::string const & varName) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_cppRepr(self, varName)

    def getName(self) -> "std::string":
        r"""
        getName(DataArray self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_getName(self)

    def setInfoOnComponents(self, info: 'svec') -> "void":
        r"""
        setInfoOnComponents(DataArray self, svec info)
        1
        """
        return _MEDCouplingRemapper.DataArray_setInfoOnComponents(self, info)

    def setInfoAndChangeNbOfCompo(self, info: 'svec') -> "void":
        r"""
        setInfoAndChangeNbOfCompo(DataArray self, svec info)
        1
        """
        return _MEDCouplingRemapper.DataArray_setInfoAndChangeNbOfCompo(self, info)

    def getVarsOnComponent(self) -> "std::vector< std::string,std::allocator< std::string > >":
        r"""
        getVarsOnComponent(DataArray self) -> svec
        1
        """
        return _MEDCouplingRemapper.DataArray_getVarsOnComponent(self)

    def getUnitsOnComponent(self) -> "std::vector< std::string,std::allocator< std::string > >":
        r"""
        getUnitsOnComponent(DataArray self) -> svec
        1
        """
        return _MEDCouplingRemapper.DataArray_getUnitsOnComponent(self)

    def getInfoOnComponent(self, i: 'int') -> "std::string":
        r"""
        getInfoOnComponent(DataArray self, int i) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_getInfoOnComponent(self, i)

    def getVarOnComponent(self, i: 'int') -> "std::string":
        r"""
        getVarOnComponent(DataArray self, int i) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_getVarOnComponent(self, i)

    def getUnitOnComponent(self, i: 'int') -> "std::string":
        r"""
        getUnitOnComponent(DataArray self, int i) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_getUnitOnComponent(self, i)

    def setInfoOnComponent(self, i: 'int', info: 'std::string const &') -> "void":
        r"""
        setInfoOnComponent(DataArray self, int i, std::string const & info)
        1
        """
        return _MEDCouplingRemapper.DataArray_setInfoOnComponent(self, i, info)

    def getNumberOfComponents(self) -> "int":
        r"""
        getNumberOfComponents(DataArray self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArray_getNumberOfComponents(self)

    def alloc(self, nbOfTuple: 'int', nbOfCompo: 'int'=1) -> "void":
        r"""
        alloc(DataArray self, int nbOfTuple, int nbOfCompo=1)
        1
        """
        return _MEDCouplingRemapper.DataArray_alloc(self, nbOfTuple, nbOfCompo)

    def reAlloc(self, nbOfTuples: 'int') -> "void":
        r"""
        reAlloc(DataArray self, int nbOfTuples)
        1
        """
        return _MEDCouplingRemapper.DataArray_reAlloc(self, nbOfTuples)

    def isAllocated(self) -> "bool":
        r"""
        isAllocated(DataArray self) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArray_isAllocated(self)

    def checkAllocated(self) -> "void":
        r"""
        checkAllocated(DataArray self)
        1
        """
        return _MEDCouplingRemapper.DataArray_checkAllocated(self)

    def desallocate(self) -> "void":
        r"""
        desallocate(DataArray self)
        1
        """
        return _MEDCouplingRemapper.DataArray_desallocate(self)

    def getNumberOfTuples(self) -> "int":
        r"""
        getNumberOfTuples(DataArray self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArray_getNumberOfTuples(self)

    def getNbOfElems(self) -> "std::size_t":
        r"""
        getNbOfElems(DataArray self) -> std::size_t
        1
        """
        return _MEDCouplingRemapper.DataArray_getNbOfElems(self)

    def getNbOfElemAllocated(self) -> "std::size_t":
        r"""
        getNbOfElemAllocated(DataArray self) -> std::size_t
        1
        """
        return _MEDCouplingRemapper.DataArray_getNbOfElemAllocated(self)

    def deepCopy(self) -> "MEDCoupling::DataArray *":
        r"""
        deepCopy(DataArray self) -> DataArray
        1
        """
        return _MEDCouplingRemapper.DataArray_deepCopy(self)

    def buildNewEmptyInstance(self) -> "MEDCoupling::DataArray *":
        r"""
        buildNewEmptyInstance(DataArray self) -> DataArray
        1
        """
        return _MEDCouplingRemapper.DataArray_buildNewEmptyInstance(self)

    def selectByTupleIdSafeSlice(self, bg: 'int', end2: 'int', step: 'int') -> "MEDCoupling::DataArray *":
        r"""
        selectByTupleIdSafeSlice(DataArray self, int bg, int end2, int step) -> DataArray
        1
        """
        return _MEDCouplingRemapper.DataArray_selectByTupleIdSafeSlice(self, bg, end2, step)

    def rearrange(self, newNbOfCompo: 'int') -> "void":
        r"""
        rearrange(DataArray self, int newNbOfCompo)
        1
        """
        return _MEDCouplingRemapper.DataArray_rearrange(self, newNbOfCompo)

    def circularPermutation(self, nbOfShift: 'int'=1) -> "void":
        r"""
        circularPermutation(DataArray self, int nbOfShift=1)
        1
        """
        return _MEDCouplingRemapper.DataArray_circularPermutation(self, nbOfShift)

    def circularPermutationPerTuple(self, nbOfShift: 'int'=1) -> "void":
        r"""
        circularPermutationPerTuple(DataArray self, int nbOfShift=1)
        1
        """
        return _MEDCouplingRemapper.DataArray_circularPermutationPerTuple(self, nbOfShift)

    def reversePerTuple(self) -> "void":
        r"""
        reversePerTuple(DataArray self)
        1
        """
        return _MEDCouplingRemapper.DataArray_reversePerTuple(self)

    def checkNbOfTuples(self, nbOfTuples: 'int', msg: 'std::string const &') -> "void":
        r"""
        checkNbOfTuples(DataArray self, int nbOfTuples, std::string const & msg)
        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfTuples(self, nbOfTuples, msg)

    def checkNbOfComps(self, nbOfCompo: 'int', msg: 'std::string const &') -> "void":
        r"""
        checkNbOfComps(DataArray self, int nbOfCompo, std::string const & msg)
        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfComps(self, nbOfCompo, msg)

    def checkNbOfTuplesAndComp(self, *args) -> "void":
        r"""
        checkNbOfTuplesAndComp(DataArray self, DataArray other, std::string const & msg)
        checkNbOfTuplesAndComp(DataArray self, int nbOfTuples, int nbOfCompo, std::string const & msg)
        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfTuplesAndComp(self, *args)

    def checkNbOfElems(self, nbOfElems: 'std::size_t', msg: 'std::string const &') -> "void":
        r"""
        checkNbOfElems(DataArray self, std::size_t nbOfElems, std::string const & msg)
        1
        """
        return _MEDCouplingRemapper.DataArray_checkNbOfElems(self, nbOfElems, msg)

    @staticmethod
    def GetPosOfItemGivenBESRelativeNoThrow(value: 'int', begin: 'int', end: 'int', step: 'int') -> "int":
        r"""
        GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int
        1
        """
        return _MEDCouplingRemapper.DataArray_GetPosOfItemGivenBESRelativeNoThrow(value, begin, end, step)

    @staticmethod
    def GetVarNameFromInfo(info: 'std::string const &') -> "std::string":
        r"""
        GetVarNameFromInfo(std::string const & info) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_GetVarNameFromInfo(info)

    @staticmethod
    def GetUnitFromInfo(info: 'std::string const &') -> "std::string":
        r"""
        GetUnitFromInfo(std::string const & info) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_GetUnitFromInfo(info)

    @staticmethod
    def BuildInfoFromVarAndUnit(var: 'std::string const &', unit: 'std::string const &') -> "std::string":
        r"""
        BuildInfoFromVarAndUnit(std::string const & var, std::string const & unit) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_BuildInfoFromVarAndUnit(var, unit)

    @staticmethod
    def GetAxisTypeRepr(at: 'MEDCoupling::MEDCouplingAxisType') -> "std::string":
        r"""
        GetAxisTypeRepr(MEDCoupling::MEDCouplingAxisType at) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArray_GetAxisTypeRepr(at)

    def updateTime(self) -> "void":
        r"""
        updateTime(DataArray self)
        1
        """
        return _MEDCouplingRemapper.DataArray_updateTime(self)

    def getInfoOnComponents(self) -> "PyObject *":
        r"""
        getInfoOnComponents(DataArray self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArray_getInfoOnComponents(self)

    def copyPartOfStringInfoFrom(self, *args) -> "void":
        r"""
        copyPartOfStringInfoFrom(DataArray self, DataArray other, ivec compoIds)
        copyPartOfStringInfoFrom(DataArray self, DataArray other, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArray_copyPartOfStringInfoFrom(self, *args)

    def copyPartOfStringInfoFrom2(self, *args) -> "void":
        r"""
        copyPartOfStringInfoFrom2(DataArray self, ivec compoIds, DataArray other)
        copyPartOfStringInfoFrom2(DataArray self, PyObject * li, DataArray other)
        1
        """
        return _MEDCouplingRemapper.DataArray_copyPartOfStringInfoFrom2(self, *args)

    def renumberInPlace(self, li: 'PyObject *') -> "void":
        r"""
        renumberInPlace(DataArray self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArray_renumberInPlace(self, li)

    def renumberInPlaceR(self, li: 'PyObject *') -> "void":
        r"""
        renumberInPlaceR(DataArray self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArray_renumberInPlaceR(self, li)

    def setContigPartOfSelectedValues(self, tupleIdStart: 'int', aBase: 'PyObject *', tuplesSelec: 'PyObject *') -> "void":
        r"""
        setContigPartOfSelectedValues(DataArray self, int tupleIdStart, PyObject * aBase, PyObject * tuplesSelec)
        1
        """
        return _MEDCouplingRemapper.DataArray_setContigPartOfSelectedValues(self, tupleIdStart, aBase, tuplesSelec)

    def setContigPartOfSelectedValuesSlice(self, tupleIdStart: 'int', aBase: 'PyObject *', bg: 'int', end2: 'int', step: 'int') -> "void":
        r"""
        setContigPartOfSelectedValuesSlice(DataArray self, int tupleIdStart, PyObject * aBase, int bg, int end2, int step)
        1
        """
        return _MEDCouplingRemapper.DataArray_setContigPartOfSelectedValuesSlice(self, tupleIdStart, aBase, bg, end2, step)

    def selectByTupleRanges(self, li: 'PyObject *') -> "MEDCoupling::DataArray *":
        r"""
        selectByTupleRanges(DataArray self, PyObject * li) -> DataArray
        1
        """
        return _MEDCouplingRemapper.DataArray_selectByTupleRanges(self, li)

    def selectByTupleId(self, li: 'PyObject *') -> "MEDCoupling::DataArray *":
        r"""
        selectByTupleId(DataArray self, PyObject * li) -> DataArray
        1
        """
        return _MEDCouplingRemapper.DataArray_selectByTupleId(self, li)

    def selectByTupleIdSafe(self, li: 'PyObject *') -> "MEDCoupling::DataArray *":
        r"""
        selectByTupleIdSafe(DataArray self, PyObject * li) -> DataArray
        1
        """
        return _MEDCouplingRemapper.DataArray_selectByTupleIdSafe(self, li)

    def keepSelectedComponents(self, li: 'PyObject *') -> "PyObject *":
        r"""
        keepSelectedComponents(DataArray self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArray_keepSelectedComponents(self, li)

    @staticmethod
    def GetSlice(slic: 'PyObject *', sliceId: 'int', nbOfSlices: 'int') -> "PyObject *":
        r"""
        GetSlice(PyObject * slic, int sliceId, int nbOfSlices) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArray_GetSlice(slic, sliceId, nbOfSlices)

    def getSlice(self, slic: 'PyObject *', sliceId: 'int', nbOfSlices: 'int') -> "PyObject *":
        r"""
        getSlice(DataArray self, PyObject * slic, int sliceId, int nbOfSlices) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArray_getSlice(self, slic, sliceId, nbOfSlices)

    @staticmethod
    def GetNumberOfItemGivenBES(*args) -> "int":
        r"""
        GetNumberOfItemGivenBES(int begin, int end, int step, std::string const & msg) -> int
        GetNumberOfItemGivenBES(PyObject * slic) -> int
        1
        """
        return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBES(*args)

    @staticmethod
    def GetNumberOfItemGivenBESRelative(*args) -> "int":
        r"""
        GetNumberOfItemGivenBESRelative(int begin, int end, int step, std::string const & msg) -> int
        GetNumberOfItemGivenBESRelative(PyObject * slic) -> int
        1
        """
        return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBESRelative(*args)

    @staticmethod
    def Aggregate(arrs: 'PyObject *') -> "MEDCoupling::DataArray *":
        r"""
        Aggregate(PyObject * arrs) -> DataArray
        1
        """
        return _MEDCouplingRemapper.DataArray_Aggregate(arrs)

    def getNumberOfItemGivenBES(self, slic: 'PyObject *') -> "int":
        r"""
        getNumberOfItemGivenBES(DataArray self, PyObject * slic) -> int
        1
        """
        return _MEDCouplingRemapper.DataArray_getNumberOfItemGivenBES(self, slic)

    def getNumberOfItemGivenBESRelative(self, slic: 'PyObject *') -> "int":
        r"""
        getNumberOfItemGivenBESRelative(DataArray self, PyObject * slic) -> int
        1
        """
        return _MEDCouplingRemapper.DataArray_getNumberOfItemGivenBESRelative(self, slic)

    def __getstate__(self) -> "PyObject *":
        r"""
        __getstate__(DataArray self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArray___getstate__(self)

    def __setstate__(self, inp: 'PyObject *') -> "void":
        r"""
        __setstate__(DataArray self, PyObject * inp)
        1
        """
        return _MEDCouplingRemapper.DataArray___setstate__(self, inp)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArray

# Register DataArray in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArray_swigregister(DataArray)

def DataArray_GetPosOfItemGivenBESRelativeNoThrow(value: 'int', begin: 'int', end: 'int', step: 'int') -> "int":
    r"""
    DataArray_GetPosOfItemGivenBESRelativeNoThrow(int value, int begin, int end, int step) -> int
    1
    """
    return _MEDCouplingRemapper.DataArray_GetPosOfItemGivenBESRelativeNoThrow(value, begin, end, step)

def DataArray_GetVarNameFromInfo(info: 'std::string const &') -> "std::string":
    r"""
    DataArray_GetVarNameFromInfo(std::string const & info) -> std::string
    1
    """
    return _MEDCouplingRemapper.DataArray_GetVarNameFromInfo(info)

def DataArray_GetUnitFromInfo(info: 'std::string const &') -> "std::string":
    r"""
    DataArray_GetUnitFromInfo(std::string const & info) -> std::string
    1
    """
    return _MEDCouplingRemapper.DataArray_GetUnitFromInfo(info)

def DataArray_BuildInfoFromVarAndUnit(var: 'std::string const &', unit: 'std::string const &') -> "std::string":
    r"""
    DataArray_BuildInfoFromVarAndUnit(std::string const & var, std::string const & unit) -> std::string
    1
    """
    return _MEDCouplingRemapper.DataArray_BuildInfoFromVarAndUnit(var, unit)

def DataArray_GetAxisTypeRepr(at: 'MEDCoupling::MEDCouplingAxisType') -> "std::string":
    r"""
    DataArray_GetAxisTypeRepr(MEDCoupling::MEDCouplingAxisType at) -> std::string
    1
    """
    return _MEDCouplingRemapper.DataArray_GetAxisTypeRepr(at)

def DataArray_GetSlice(slic: 'PyObject *', sliceId: 'int', nbOfSlices: 'int') -> "PyObject *":
    r"""
    DataArray_GetSlice(PyObject * slic, int sliceId, int nbOfSlices) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArray_GetSlice(slic, sliceId, nbOfSlices)

def DataArray_GetNumberOfItemGivenBES(*args) -> "int":
    r"""
    DataArray_GetNumberOfItemGivenBES(int begin, int end, int step, std::string const & msg) -> int
    DataArray_GetNumberOfItemGivenBES(PyObject * slic) -> int
    1
    """
    return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBES(*args)

def DataArray_GetNumberOfItemGivenBESRelative(*args) -> "int":
    r"""
    DataArray_GetNumberOfItemGivenBESRelative(int begin, int end, int step, std::string const & msg) -> int
    DataArray_GetNumberOfItemGivenBESRelative(PyObject * slic) -> int
    1
    """
    return _MEDCouplingRemapper.DataArray_GetNumberOfItemGivenBESRelative(*args)

def DataArray_Aggregate(arrs: 'PyObject *') -> "MEDCoupling::DataArray *":
    r"""
    DataArray_Aggregate(PyObject * arrs) -> DataArray
    1
    """
    return _MEDCouplingRemapper.DataArray_Aggregate(arrs)

class DataArrayFloat(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def fillWithValue(self, val: 'float') -> "void":
        r"""
        fillWithValue(DataArrayFloat self, float val)
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_fillWithValue(self, val)

    def isEqual(self, other: 'DataArrayFloat', prec: 'float') -> "bool":
        r"""
        isEqual(DataArrayFloat self, DataArrayFloat other, float prec) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_isEqual(self, other, prec)

    def isEqualWithoutConsideringStr(self, other: 'DataArrayFloat', prec: 'float') -> "bool":
        r"""
        isEqualWithoutConsideringStr(DataArrayFloat self, DataArrayFloat other, float prec) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_isEqualWithoutConsideringStr(self, other, prec)

    def isUniform(self, val: 'float', eps: 'float') -> "bool":
        r"""
        isUniform(DataArrayFloat self, float val, float eps) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_isUniform(self, val, eps)

    def pushBackSilent(self, val: 'float') -> "void":
        r"""
        pushBackSilent(DataArrayFloat self, float val)
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_pushBackSilent(self, val)

    def iota(self, init: 'float'=0.) -> "void":
        r"""
        iota(DataArrayFloat self, float init=0.)
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_iota(self, init)

    def iterator(self) -> "DataArrayFloatIterator *":
        r"""
        iterator(DataArrayFloat self) -> DataArrayFloatIterator *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_iterator(self)

    def convertToDblArr(self) -> "MCAuto< MEDCoupling::DataArrayDouble >":
        r"""
        convertToDblArr(DataArrayFloat self) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_convertToDblArr(self)

    @staticmethod
    def Meld(a1: 'DataArrayFloat', a2: 'DataArrayFloat') -> "MEDCoupling::DataArrayFloat *":
        r"""
        Meld(DataArrayFloat a1, DataArrayFloat a2) -> DataArrayFloat
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_Meld(a1, a2)

    @staticmethod
    def New(*args) -> "MEDCoupling::DataArrayFloat *":
        r"""
        New() -> DataArrayFloat
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayFloat self) -> DataArrayFloat
        __init__(DataArrayFloat self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
        1
        """
        _MEDCouplingRemapper.DataArrayFloat_swiginit(self, _MEDCouplingRemapper.new_DataArrayFloat(*args))

    def __iter__(self) -> "DataArrayFloatIterator *":
        r"""
        __iter__(DataArrayFloat self) -> DataArrayFloatIterator *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat___iter__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(DataArrayFloat self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat___repr__(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayFloat self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat___str__(self)

    def __len__(self) -> "int":
        r"""
        __len__(DataArrayFloat self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat___len__(self)

    def getValues(self) -> "PyObject *":
        r"""
        getValues(DataArrayFloat self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_getValues(self)

    def getValuesAsTuple(self) -> "PyObject *":
        r"""
        getValuesAsTuple(DataArrayFloat self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_getValuesAsTuple(self)

    def isEqualIfNotWhy(self, other: 'DataArrayFloat', prec: 'float') -> "PyObject *":
        r"""
        isEqualIfNotWhy(DataArrayFloat self, DataArrayFloat other, float prec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_isEqualIfNotWhy(self, other, prec)

    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __getitem__(DataArrayFloat self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat___getitem__(self, obj)

    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayFloat *":
        r"""
        __setitem__(DataArrayFloat self, PyObject * obj, PyObject * value) -> DataArrayFloat
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat___setitem__(self, obj, value)

    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___iadd___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___isub___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imul___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat____imul___(self, trueSelf, obj)

    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayFloat *":
        r"""
        __rmul__(DataArrayFloat self, PyObject * obj) -> DataArrayFloat
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat___rmul__(self, obj)

    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___idiv___(DataArrayFloat self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat____idiv___(self, trueSelf, obj)

    def toNumPyArray(self) -> "PyObject *":
        r"""
        toNumPyArray(DataArrayFloat self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloat_toNumPyArray(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayFloat

# Register DataArrayFloat in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayFloat_swigregister(DataArrayFloat)

def DataArrayFloat_Meld(a1: 'DataArrayFloat', a2: 'DataArrayFloat') -> "MEDCoupling::DataArrayFloat *":
    r"""
    DataArrayFloat_Meld(DataArrayFloat a1, DataArrayFloat a2) -> DataArrayFloat
    1
    """
    return _MEDCouplingRemapper.DataArrayFloat_Meld(a1, a2)

def DataArrayFloat_New(*args) -> "MEDCoupling::DataArrayFloat *":
    r"""
    DataArrayFloat_New() -> DataArrayFloat
    DataArrayFloat_New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayFloat
    1
    """
    return _MEDCouplingRemapper.DataArrayFloat_New(*args)

class DataArrayFloatIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayFloat'):
        r"""
        __init__(DataArrayFloatIterator self, DataArrayFloat da) -> DataArrayFloatIterator
        1
        """
        _MEDCouplingRemapper.DataArrayFloatIterator_swiginit(self, _MEDCouplingRemapper.new_DataArrayFloatIterator(da))
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayFloatIterator

    def next(self) -> "PyObject *":
        r"""
        next(DataArrayFloatIterator self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloatIterator_next(self)

# Register DataArrayFloatIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayFloatIterator_swigregister(DataArrayFloatIterator)

class DataArrayFloatTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        r"""
        getNumberOfCompo(DataArrayFloatTuple self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayFloatTuple_getNumberOfCompo(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayFloatTuple self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayFloatTuple___str__(self)

    def __float__(self) -> "float":
        r"""
        __float__(DataArrayFloatTuple self) -> float
        1
        """
        return _MEDCouplingRemapper.DataArrayFloatTuple___float__(self)

    def buildDAFloat(self, *args) -> "MEDCoupling::DataArrayFloat *":
        r"""
        buildDAFloat(DataArrayFloatTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayFloat
        buildDAFloat(DataArrayFloatTuple self) -> DataArrayFloat
        1
        """
        return _MEDCouplingRemapper.DataArrayFloatTuple_buildDAFloat(self, *args)

    def __len__(self) -> "PyObject *":
        r"""
        __len__(DataArrayFloatTuple self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayFloatTuple___len__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayFloatTuple

# Register DataArrayFloatTuple in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayFloatTuple_swigregister(DataArrayFloatTuple)

class DataArrayDouble(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def doubleValue(self) -> "double":
        r"""
        doubleValue(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_doubleValue(self)

    def empty(self) -> "bool":
        r"""
        empty(DataArrayDouble self) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_empty(self)

    def aggregate(self, other: 'DataArrayDouble') -> "void":
        r"""
        aggregate(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_aggregate(self, other)

    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayDouble *":
        r"""
        performCopyOrIncrRef(DataArrayDouble self, bool deepCopy) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_performCopyOrIncrRef(self, deepCopy)

    def deepCopyFrom(self, other: 'DataArrayDouble') -> "void":
        r"""
        deepCopyFrom(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_deepCopyFrom(self, other)

    def reserve(self, nbOfElems: 'std::size_t') -> "void":
        r"""
        reserve(DataArrayDouble self, std::size_t nbOfElems)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reserve(self, nbOfElems)

    def pushBackSilent(self, val: 'double') -> "void":
        r"""
        pushBackSilent(DataArrayDouble self, double val)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_pushBackSilent(self, val)

    def popBackSilent(self) -> "double":
        r"""
        popBackSilent(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_popBackSilent(self)

    def pack(self) -> "void":
        r"""
        pack(DataArrayDouble self)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_pack(self)

    def allocIfNecessary(self, nbOfTuple: 'int', nbOfCompo: 'int') -> "void":
        r"""
        allocIfNecessary(DataArrayDouble self, int nbOfTuple, int nbOfCompo)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_allocIfNecessary(self, nbOfTuple, nbOfCompo)

    def fillWithZero(self) -> "void":
        r"""
        fillWithZero(DataArrayDouble self)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fillWithZero(self)

    def fillWithValue(self, val: 'double') -> "void":
        r"""
        fillWithValue(DataArrayDouble self, double val)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fillWithValue(self, val)

    def iota(self, init: 'double'=0.) -> "void":
        r"""
        iota(DataArrayDouble self, double init=0.)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_iota(self, init)

    def isUniform(self, val: 'double', eps: 'double') -> "bool":
        r"""
        isUniform(DataArrayDouble self, double val, double eps) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isUniform(self, val, eps)

    def sort(self, asc: 'bool'=True) -> "void":
        r"""
        sort(DataArrayDouble self, bool asc=True)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_sort(self, asc)

    def reverse(self) -> "void":
        r"""
        reverse(DataArrayDouble self)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reverse(self)

    def checkMonotonic(self, increasing: 'bool', eps: 'double') -> "void":
        r"""
        checkMonotonic(DataArrayDouble self, bool increasing, double eps)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_checkMonotonic(self, increasing, eps)

    def isMonotonic(self, increasing: 'bool', eps: 'double') -> "bool":
        r"""
        isMonotonic(DataArrayDouble self, bool increasing, double eps) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isMonotonic(self, increasing, eps)

    def repr(self) -> "std::string":
        r"""
        repr(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_repr(self)

    def reprZip(self) -> "std::string":
        r"""
        reprZip(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprZip(self)

    def reprNotTooLong(self) -> "std::string":
        r"""
        reprNotTooLong(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_reprNotTooLong(self)

    def isEqual(self, other: 'DataArrayDouble', prec: 'double') -> "bool":
        r"""
        isEqual(DataArrayDouble self, DataArrayDouble other, double prec) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isEqual(self, other, prec)

    def isEqualWithoutConsideringStr(self, other: 'DataArrayDouble', prec: 'double') -> "bool":
        r"""
        isEqualWithoutConsideringStr(DataArrayDouble self, DataArrayDouble other, double prec) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isEqualWithoutConsideringStr(self, other, prec)

    def fromNoInterlace(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromNoInterlace(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromNoInterlace(self)

    def toNoInterlace(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        toNoInterlace(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_toNoInterlace(self)

    def subArray(self, tupleIdBg: 'int', tupleIdEnd: 'int'=-1) -> "MEDCoupling::DataArrayDouble *":
        r"""
        subArray(DataArrayDouble self, int tupleIdBg, int tupleIdEnd=-1) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_subArray(self, tupleIdBg, tupleIdEnd)

    def transpose(self) -> "void":
        r"""
        transpose(DataArrayDouble self)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_transpose(self)

    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'double') -> "MEDCoupling::DataArrayDouble *":
        r"""
        changeNbOfComponents(DataArrayDouble self, int newNbOfComp, double dftValue) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_changeNbOfComponents(self, newNbOfComp, dftValue)

    def meldWith(self, other: 'DataArrayDouble') -> "void":
        r"""
        meldWith(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_meldWith(self, other)

    def duplicateEachTupleNTimes(self, nbTimes: 'int') -> "MEDCoupling::DataArrayDouble *":
        r"""
        duplicateEachTupleNTimes(DataArrayDouble self, int nbTimes) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_duplicateEachTupleNTimes(self, nbTimes)

    def getDifferentValues(self, prec: 'double', limitTupleId: 'int'=-1) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getDifferentValues(DataArrayDouble self, double prec, int limitTupleId=-1) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getDifferentValues(self, prec, limitTupleId)

    def findClosestTupleId(self, other: 'DataArrayDouble') -> "MEDCoupling::DataArrayInt *":
        r"""
        findClosestTupleId(DataArrayDouble self, DataArrayDouble other) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findClosestTupleId(self, other)

    def computeNbOfInteractionsWith(self, otherBBoxFrmt: 'DataArrayDouble', eps: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        computeNbOfInteractionsWith(DataArrayDouble self, DataArrayDouble otherBBoxFrmt, double eps) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_computeNbOfInteractionsWith(self, otherBBoxFrmt, eps)

    def setPartOfValues1(self, a: 'DataArrayDouble', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int', strictCompoCompare: 'bool'=True) -> "void":
        r"""
        setPartOfValues1(DataArrayDouble self, DataArrayDouble a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp, bool strictCompoCompare=True)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare)

    def setPartOfValuesSimple1(self, a: 'double', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int') -> "void":
        r"""
        setPartOfValuesSimple1(DataArrayDouble self, double a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp)

    def setPartOfValuesAdv(self, a: 'DataArrayDouble', tuplesSelec: 'DataArrayInt') -> "void":
        r"""
        setPartOfValuesAdv(DataArrayDouble self, DataArrayDouble a, DataArrayInt tuplesSelec)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setPartOfValuesAdv(self, a, tuplesSelec)

    def getIJ(self, tupleId: 'int', compoId: 'int') -> "double":
        r"""
        getIJ(DataArrayDouble self, int tupleId, int compoId) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getIJ(self, tupleId, compoId)

    def front(self) -> "double":
        r"""
        front(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_front(self)

    def back(self) -> "double":
        r"""
        back(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_back(self)

    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "double":
        r"""
        getIJSafe(DataArrayDouble self, int tupleId, int compoId) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getIJSafe(self, tupleId, compoId)

    def setIJ(self, tupleId: 'int', compoId: 'int', newVal: 'double') -> "void":
        r"""
        setIJ(DataArrayDouble self, int tupleId, int compoId, double newVal)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setIJ(self, tupleId, compoId, newVal)

    def setIJSilent(self, tupleId: 'int', compoId: 'int', newVal: 'double') -> "void":
        r"""
        setIJSilent(DataArrayDouble self, int tupleId, int compoId, double newVal)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setIJSilent(self, tupleId, compoId, newVal)

    def getPointer(self) -> "double *":
        r"""
        getPointer(DataArrayDouble self) -> double *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getPointer(self)

    def checkNoNullValues(self) -> "void":
        r"""
        checkNoNullValues(DataArrayDouble self)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_checkNoNullValues(self)

    def computeBBoxPerTuple(self, epsilon: 'double'=0.0) -> "MEDCoupling::DataArrayDouble *":
        r"""
        computeBBoxPerTuple(DataArrayDouble self, double epsilon=0.0) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_computeBBoxPerTuple(self, epsilon)

    def recenterForMaxPrecision(self, eps: 'double') -> "void":
        r"""
        recenterForMaxPrecision(DataArrayDouble self, double eps)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_recenterForMaxPrecision(self, eps)

    def getMaxValueInArray(self) -> "double":
        r"""
        getMaxValueInArray(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxValueInArray(self)

    def getMaxAbsValueInArray(self) -> "double":
        r"""
        getMaxAbsValueInArray(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxAbsValueInArray(self)

    def getMinValueInArray(self) -> "double":
        r"""
        getMinValueInArray(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinValueInArray(self)

    def count(self, value: 'double', eps: 'double') -> "int":
        r"""
        count(DataArrayDouble self, double value, double eps) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_count(self, value, eps)

    def getAverageValue(self) -> "double":
        r"""
        getAverageValue(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getAverageValue(self)

    def norm2(self) -> "double":
        r"""
        norm2(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_norm2(self)

    def normMax(self) -> "double":
        r"""
        normMax(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_normMax(self)

    def normMin(self) -> "double":
        r"""
        normMin(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_normMin(self)

    def fromPolarToCart(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromPolarToCart(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromPolarToCart(self)

    def fromCylToCart(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromCylToCart(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromCylToCart(self)

    def fromSpherToCart(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromSpherToCart(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromSpherToCart(self)

    def fromCartToPolar(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromCartToPolar(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromCartToPolar(self)

    def fromCartToCyl(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromCartToCyl(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromCartToCyl(self)

    def fromCartToSpher(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromCartToSpher(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromCartToSpher(self)

    def cartesianize(self, atOfThis: 'MEDCoupling::MEDCouplingAxisType') -> "MEDCoupling::DataArrayDouble *":
        r"""
        cartesianize(DataArrayDouble self, MEDCoupling::MEDCouplingAxisType atOfThis) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_cartesianize(self, atOfThis)

    def doublyContractedProduct(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        doublyContractedProduct(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_doublyContractedProduct(self)

    def determinant(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        determinant(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_determinant(self)

    def eigenValues(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        eigenValues(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_eigenValues(self)

    def eigenVectors(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        eigenVectors(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_eigenVectors(self)

    def inverse(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        inverse(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_inverse(self)

    def trace(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        trace(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_trace(self)

    def deviator(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        deviator(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_deviator(self)

    def magnitude(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        magnitude(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_magnitude(self)

    def maxPerTuple(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        maxPerTuple(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_maxPerTuple(self)

    def sumPerTuple(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        sumPerTuple(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_sumPerTuple(self)

    def buildEuclidianDistanceDenseMatrix(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        buildEuclidianDistanceDenseMatrix(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_buildEuclidianDistanceDenseMatrix(self)

    def buildEuclidianDistanceDenseMatrixWith(self, other: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        buildEuclidianDistanceDenseMatrixWith(DataArrayDouble self, DataArrayDouble other) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_buildEuclidianDistanceDenseMatrixWith(self, other)

    def sortPerTuple(self, asc: 'bool') -> "void":
        r"""
        sortPerTuple(DataArrayDouble self, bool asc)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_sortPerTuple(self, asc)

    def abs(self) -> "void":
        r"""
        abs(DataArrayDouble self)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_abs(self)

    def computeAbs(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        computeAbs(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_computeAbs(self)

    def applyLin(self, *args) -> "void":
        r"""
        applyLin(DataArrayDouble self, double a, double b, int compoId)
        applyLin(DataArrayDouble self, double a, double b)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyLin(self, *args)

    def applyInv(self, numerator: 'double') -> "void":
        r"""
        applyInv(DataArrayDouble self, double numerator)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyInv(self, numerator)

    def applyPow(self, val: 'double') -> "void":
        r"""
        applyPow(DataArrayDouble self, double val)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyPow(self, val)

    def applyRPow(self, val: 'double') -> "void":
        r"""
        applyRPow(DataArrayDouble self, double val)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyRPow(self, val)

    def negate(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        negate(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_negate(self)

    def applyFunc(self, *args) -> "MEDCoupling::DataArrayDouble *":
        r"""
        applyFunc(DataArrayDouble self, int nbOfComp, FunctionToEvaluate func) -> DataArrayDouble
        applyFunc(DataArrayDouble self, int nbOfComp, std::string const & func, bool isSafe=True) -> DataArrayDouble
        applyFunc(DataArrayDouble self, std::string const & func, bool isSafe=True) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFunc(self, *args)

    def applyFuncOnThis(self, func: 'std::string const &', isSafe: 'bool'=True) -> "void":
        r"""
        applyFuncOnThis(DataArrayDouble self, std::string const & func, bool isSafe=True)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFuncOnThis(self, func, isSafe)

    def applyFuncCompo(self, nbOfComp: 'int', func: 'std::string const &', isSafe: 'bool'=True) -> "MEDCoupling::DataArrayDouble *":
        r"""
        applyFuncCompo(DataArrayDouble self, int nbOfComp, std::string const & func, bool isSafe=True) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFuncCompo(self, nbOfComp, func, isSafe)

    def applyFuncNamedCompo(self, nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &', isSafe: 'bool'=True) -> "MEDCoupling::DataArrayDouble *":
        r"""
        applyFuncNamedCompo(DataArrayDouble self, int nbOfComp, svec varsOrder, std::string const & func, bool isSafe=True) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFuncNamedCompo(self, nbOfComp, varsOrder, func, isSafe)

    def applyFuncFast32(self, func: 'std::string const &') -> "void":
        r"""
        applyFuncFast32(DataArrayDouble self, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFuncFast32(self, func)

    def applyFuncFast64(self, func: 'std::string const &') -> "void":
        r"""
        applyFuncFast64(DataArrayDouble self, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_applyFuncFast64(self, func)

    def findIdsInRange(self, vmin: 'double', vmax: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsInRange(DataArrayDouble self, double vmin, double vmax) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findIdsInRange(self, vmin, vmax)

    def findIdsNotInRange(self, vmin: 'double', vmax: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsNotInRange(DataArrayDouble self, double vmin, double vmax) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findIdsNotInRange(self, vmin, vmax)

    def findIdsStrictlyNegative(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsStrictlyNegative(DataArrayDouble self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findIdsStrictlyNegative(self)

    @staticmethod
    def Dot(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Dot(a1, a2)

    @staticmethod
    def CrossProduct(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_CrossProduct(a1, a2)

    @staticmethod
    def Max(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Max(a1, a2)

    @staticmethod
    def Min(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Min(a1, a2)

    @staticmethod
    def Add(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Add(a1, a2)

    def addEqual(self, other: 'DataArrayDouble') -> "void":
        r"""
        addEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_addEqual(self, other)

    @staticmethod
    def Substract(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Substract(a1, a2)

    def substractEqual(self, other: 'DataArrayDouble') -> "void":
        r"""
        substractEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_substractEqual(self, other)

    @staticmethod
    def Multiply(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Multiply(a1, a2)

    def multiplyEqual(self, other: 'DataArrayDouble') -> "void":
        r"""
        multiplyEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_multiplyEqual(self, other)

    @staticmethod
    def Divide(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Divide(a1, a2)

    def divideEqual(self, other: 'DataArrayDouble') -> "void":
        r"""
        divideEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_divideEqual(self, other)

    @staticmethod
    def Pow(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        Pow(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Pow(a1, a2)

    def powEqual(self, other: 'DataArrayDouble') -> "void":
        r"""
        powEqual(DataArrayDouble self, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_powEqual(self, other)

    def findIdsGreaterOrEqualTo(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsGreaterOrEqualTo(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findIdsGreaterOrEqualTo(self, val)

    def findIdsGreaterThan(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsGreaterThan(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findIdsGreaterThan(self, val)

    def findIdsLowerOrEqualTo(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsLowerOrEqualTo(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findIdsLowerOrEqualTo(self, val)

    def findIdsLowerThan(self, val: 'double') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsLowerThan(DataArrayDouble self, double val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findIdsLowerThan(self, val)

    def convertToIntArr(self) -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        convertToIntArr(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_convertToIntArr(self)

    def selectPartDef(self, pd: 'PartDefinition') -> "MCAuto< MEDCoupling::DataArrayDouble >":
        r"""
        selectPartDef(DataArrayDouble self, PartDefinition pd) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_selectPartDef(self, pd)

    def cumSum(self) -> "MCAuto< MEDCoupling::DataArrayDouble >":
        r"""
        cumSum(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_cumSum(self)

    def convertToFloatArr(self) -> "MCAuto< MEDCoupling::DataArrayFloat >":
        r"""
        convertToFloatArr(DataArrayDouble self) -> MCAuto< MEDCoupling::DataArrayFloat >
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_convertToFloatArr(self)

    @staticmethod
    def New(*args) -> "MEDCoupling::DataArrayDouble *":
        r"""
        New() -> DataArrayDouble
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayDouble self) -> DataArrayDouble
        __init__(DataArrayDouble self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
        1
        """
        _MEDCouplingRemapper.DataArrayDouble_swiginit(self, _MEDCouplingRemapper.new_DataArrayDouble(*args))

    def pushBackValsSilent(self, li: 'PyObject *') -> "void":
        r"""
        pushBackValsSilent(DataArrayDouble self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_pushBackValsSilent(self, li)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___repr__(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___str__(self)

    def __float__(self) -> "double":
        r"""
        __float__(DataArrayDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___float__(self)

    def __len__(self) -> "int":
        r"""
        __len__(DataArrayDouble self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___len__(self)

    def asArcOfCircle(self) -> "PyObject *":
        r"""
        asArcOfCircle(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_asArcOfCircle(self)

    def __iter__(self) -> "MEDCoupling::DataArrayDoubleIterator *":
        r"""
        __iter__(DataArrayDouble self) -> DataArrayDoubleIterator
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___iter__(self)

    def setValues(self, li: 'PyObject *', nbOfTuples: 'PyObject *'=None, nbOfComp: 'PyObject *'=None) -> "void":
        r"""
        setValues(DataArrayDouble self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setValues(self, li, nbOfTuples, nbOfComp)

    def getValues(self) -> "PyObject *":
        r"""
        getValues(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getValues(self)

    def toNumPyArray(self) -> "PyObject *":
        r"""
        toNumPyArray(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_toNumPyArray(self)

    def isEqualIfNotWhy(self, other: 'DataArrayDouble', prec: 'double') -> "PyObject *":
        r"""
        isEqualIfNotWhy(DataArrayDouble self, DataArrayDouble other, double prec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_isEqualIfNotWhy(self, other, prec)

    def getValuesAsTuple(self) -> "PyObject *":
        r"""
        getValuesAsTuple(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getValuesAsTuple(self)

    @staticmethod
    def ComputeIntegralOfSeg2IntoTri3(seg2: 'PyObject *', tri3: 'PyObject *') -> "PyObject *":
        r"""
        ComputeIntegralOfSeg2IntoTri3(PyObject * seg2, PyObject * tri3) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(seg2, tri3)

    def symmetry3DPlane(self, point: 'PyObject *', normalVector: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        symmetry3DPlane(DataArrayDouble self, PyObject * point, PyObject * normalVector) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_symmetry3DPlane(self, point, normalVector)

    @staticmethod
    def GiveBaseForPlane(normalVector: 'PyObject *') -> "PyObject *":
        r"""
        GiveBaseForPlane(PyObject * normalVector) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_GiveBaseForPlane(normalVector)

    def fromCartToCylGiven(self, coords: 'DataArrayDouble', center: 'PyObject *', vector: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        fromCartToCylGiven(DataArrayDouble self, DataArrayDouble coords, PyObject * center, PyObject * vector) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_fromCartToCylGiven(self, coords, center, vector)

    def renumber(self, li: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        renumber(DataArrayDouble self, PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumber(self, li)

    def renumberR(self, li: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        renumberR(DataArrayDouble self, PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumberR(self, li)

    def renumberAndReduce(self, li: 'PyObject *', newNbOfTuple: 'int') -> "MEDCoupling::DataArrayDouble *":
        r"""
        renumberAndReduce(DataArrayDouble self, PyObject * li, int newNbOfTuple) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_renumberAndReduce(self, li, newNbOfTuple)

    def minimalDistanceTo(self, other: 'DataArrayDouble') -> "PyObject *":
        r"""
        minimalDistanceTo(DataArrayDouble self, DataArrayDouble other) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_minimalDistanceTo(self, other)

    def getMaxValue(self) -> "PyObject *":
        r"""
        getMaxValue(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxValue(self)

    def getMaxAbsValue(self) -> "PyObject *":
        r"""
        getMaxAbsValue(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxAbsValue(self)

    def getMaxValue2(self) -> "PyObject *":
        r"""
        getMaxValue2(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMaxValue2(self)

    def getMinValue(self) -> "PyObject *":
        r"""
        getMinValue(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinValue(self)

    def getMinValue2(self) -> "PyObject *":
        r"""
        getMinValue2(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinValue2(self)

    def getMinMaxPerComponent(self) -> "PyObject *":
        r"""
        getMinMaxPerComponent(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getMinMaxPerComponent(self)

    def normMaxPerComponent(self) -> "PyObject *":
        r"""
        normMaxPerComponent(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_normMaxPerComponent(self)

    def accumulate(self, *args) -> "PyObject *":
        r"""
        accumulate(DataArrayDouble self, int compId) -> double
        accumulate(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_accumulate(self, *args)

    def accumulatePerChunck(self, indexArr: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        accumulatePerChunck(DataArrayDouble self, PyObject * indexArr) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_accumulatePerChunck(self, indexArr)

    def findCommonTuples(self, prec: 'double', limitNodeId: 'int'=-1) -> "PyObject *":
        r"""
        findCommonTuples(DataArrayDouble self, double prec, int limitNodeId=-1) -> PyObject
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_findCommonTuples(self, prec, limitNodeId)

    def distanceToTuple(self, tuple: 'PyObject *') -> "PyObject *":
        r"""
        distanceToTuple(DataArrayDouble self, PyObject * tuple) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_distanceToTuple(self, tuple)

    def setSelectedComponents(self, a: 'DataArrayDouble', li: 'PyObject *') -> "void":
        r"""
        setSelectedComponents(DataArrayDouble self, DataArrayDouble a, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_setSelectedComponents(self, a, li)

    def explodeComponents(self) -> "PyObject *":
        r"""
        explodeComponents(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_explodeComponents(self)

    def getTuple(self, tupleId: 'int') -> "PyObject *":
        r"""
        getTuple(DataArrayDouble self, int tupleId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_getTuple(self, tupleId)

    @staticmethod
    def Aggregate(*args) -> "MEDCoupling::DataArrayDouble *":
        r"""
        Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Aggregate(PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Aggregate(*args)

    @staticmethod
    def Meld(*args) -> "MEDCoupling::DataArrayDouble *":
        r"""
        Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
        Meld(PyObject * li) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_Meld(*args)

    def areIncludedInMe(self, other: 'DataArrayDouble', prec: 'double') -> "PyObject *":
        r"""
        areIncludedInMe(DataArrayDouble self, DataArrayDouble other, double prec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_areIncludedInMe(self, other, prec)

    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __getitem__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___getitem__(self, obj)

    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        __setitem__(DataArrayDouble self, PyObject * obj, PyObject * value) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___setitem__(self, obj, value)

    def __neg__(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        __neg__(DataArrayDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___neg__(self)

    def __add__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __add__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___add__(self, obj)

    def __radd__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        __radd__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___radd__(self, obj)

    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___iadd___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____iadd___(self, trueSelf, obj)

    def __sub__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __sub__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___sub__(self, obj)

    def __rsub__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        __rsub__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___rsub__(self, obj)

    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___isub___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____isub___(self, trueSelf, obj)

    def __mul__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __mul__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___mul__(self, obj)

    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        __rmul__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___rmul__(self, obj)

    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imul___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____imul___(self, trueSelf, obj)

    def __div__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __div__(DataArrayDouble self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___div__(self, obj)

    def __rdiv__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        __rdiv__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___rdiv__(self, obj)

    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___idiv___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____idiv___(self, trueSelf, obj)

    def __pow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        __pow__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___pow__(self, obj)

    def __rpow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        __rpow__(DataArrayDouble self, PyObject * obj) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble___rpow__(self, obj)

    def ___ipow___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___ipow___(DataArrayDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble____ipow___(self, trueSelf, obj)

    def computeTupleIdsNearTuples(self, *args) -> "PyObject *":
        r"""
        computeTupleIdsNearTuples(DataArrayDouble self, PyObject * pt, double eps) -> PyObject
        computeTupleIdsNearTuples(DataArrayDouble self, DataArrayDouble other, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_computeTupleIdsNearTuples(self, *args)

    def maxPerTupleWithCompoId(self) -> "PyObject *":
        r"""
        maxPerTupleWithCompoId(DataArrayDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDouble_maxPerTupleWithCompoId(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayDouble

# Register DataArrayDouble in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayDouble_swigregister(DataArrayDouble)

def DataArrayDouble_Dot(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Dot(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Dot(a1, a2)

def DataArrayDouble_CrossProduct(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_CrossProduct(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_CrossProduct(a1, a2)

def DataArrayDouble_Max(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Max(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Max(a1, a2)

def DataArrayDouble_Min(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Min(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Min(a1, a2)

def DataArrayDouble_Add(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Add(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Add(a1, a2)

def DataArrayDouble_Substract(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Substract(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Substract(a1, a2)

def DataArrayDouble_Multiply(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Multiply(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Multiply(a1, a2)

def DataArrayDouble_Divide(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Divide(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Divide(a1, a2)

def DataArrayDouble_Pow(a1: 'DataArrayDouble', a2: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Pow(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Pow(a1, a2)

def DataArrayDouble_New(*args) -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_New() -> DataArrayDouble
    DataArrayDouble_New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * elt2=None) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_New(*args)

def DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(seg2: 'PyObject *', tri3: 'PyObject *') -> "PyObject *":
    r"""
    DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(PyObject * seg2, PyObject * tri3) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_ComputeIntegralOfSeg2IntoTri3(seg2, tri3)

def DataArrayDouble_GiveBaseForPlane(normalVector: 'PyObject *') -> "PyObject *":
    r"""
    DataArrayDouble_GiveBaseForPlane(PyObject * normalVector) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_GiveBaseForPlane(normalVector)

def DataArrayDouble_Aggregate(*args) -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Aggregate(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    DataArrayDouble_Aggregate(PyObject * li) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Aggregate(*args)

def DataArrayDouble_Meld(*args) -> "MEDCoupling::DataArrayDouble *":
    r"""
    DataArrayDouble_Meld(DataArrayDouble a1, DataArrayDouble a2) -> DataArrayDouble
    DataArrayDouble_Meld(PyObject * li) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DataArrayDouble_Meld(*args)

class DataArrayDoubleIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayDouble'):
        r"""
        __init__(DataArrayDoubleIterator self, DataArrayDouble da) -> DataArrayDoubleIterator
        1
        """
        _MEDCouplingRemapper.DataArrayDoubleIterator_swiginit(self, _MEDCouplingRemapper.new_DataArrayDoubleIterator(da))
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayDoubleIterator

    def next(self) -> "PyObject *":
        r"""
        next(DataArrayDoubleIterator self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleIterator_next(self)

# Register DataArrayDoubleIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayDoubleIterator_swigregister(DataArrayDoubleIterator)

class DataArrayDoubleTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        r"""
        getNumberOfCompo(DataArrayDoubleTuple self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple_getNumberOfCompo(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayDoubleTuple self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___str__(self)

    def __float__(self) -> "double":
        r"""
        __float__(DataArrayDoubleTuple self) -> double
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___float__(self)

    def buildDADouble(self, *args) -> "MEDCoupling::DataArrayDouble *":
        r"""
        buildDADouble(DataArrayDoubleTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayDouble
        buildDADouble(DataArrayDoubleTuple self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple_buildDADouble(self, *args)

    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___iadd___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___isub___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imul___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____imul___(self, trueSelf, obj)

    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___idiv___(DataArrayDoubleTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple____idiv___(self, trueSelf, obj)

    def __len__(self) -> "PyObject *":
        r"""
        __len__(DataArrayDoubleTuple self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___len__(self)

    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __getitem__(DataArrayDoubleTuple self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___getitem__(self, obj)

    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayDoubleTuple *":
        r"""
        __setitem__(DataArrayDoubleTuple self, PyObject * obj, PyObject * value) -> DataArrayDoubleTuple
        1
        """
        return _MEDCouplingRemapper.DataArrayDoubleTuple___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayDoubleTuple

# Register DataArrayDoubleTuple in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayDoubleTuple_swigregister(DataArrayDoubleTuple)

class DataArrayInt(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def intValue(self) -> "int":
        r"""
        intValue(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_intValue(self)

    def getHashCode(self) -> "int":
        r"""
        getHashCode(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getHashCode(self)

    def empty(self) -> "bool":
        r"""
        empty(DataArrayInt self) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_empty(self)

    def aggregate(self, other: 'DataArrayInt') -> "void":
        r"""
        aggregate(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_aggregate(self, other)

    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayInt *":
        r"""
        performCopyOrIncrRef(DataArrayInt self, bool deepCopy) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_performCopyOrIncrRef(self, deepCopy)

    def deepCopyFrom(self, other: 'DataArrayInt') -> "void":
        r"""
        deepCopyFrom(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_deepCopyFrom(self, other)

    def reserve(self, nbOfElems: 'std::size_t') -> "void":
        r"""
        reserve(DataArrayInt self, std::size_t nbOfElems)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reserve(self, nbOfElems)

    def pushBackSilent(self, val: 'int') -> "void":
        r"""
        pushBackSilent(DataArrayInt self, int val)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_pushBackSilent(self, val)

    def popBackSilent(self) -> "int":
        r"""
        popBackSilent(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_popBackSilent(self)

    def pack(self) -> "void":
        r"""
        pack(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_pack(self)

    def allocIfNecessary(self, nbOfTuple: 'int', nbOfCompo: 'int') -> "void":
        r"""
        allocIfNecessary(DataArrayInt self, int nbOfTuple, int nbOfCompo)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_allocIfNecessary(self, nbOfTuple, nbOfCompo)

    def isEqual(self, other: 'DataArrayInt') -> "bool":
        r"""
        isEqual(DataArrayInt self, DataArrayInt other) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqual(self, other)

    def isEqualWithoutConsideringStr(self, other: 'DataArrayInt') -> "bool":
        r"""
        isEqualWithoutConsideringStr(DataArrayInt self, DataArrayInt other) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqualWithoutConsideringStr(self, other)

    def isEqualWithoutConsideringStrAndOrder(self, other: 'DataArrayInt') -> "bool":
        r"""
        isEqualWithoutConsideringStrAndOrder(DataArrayInt self, DataArrayInt other) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqualWithoutConsideringStrAndOrder(self, other)

    def buildPermutationArr(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildPermutationArr(DataArrayInt self, DataArrayInt other) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildPermutationArr(self, other)

    def sumPerTuple(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        sumPerTuple(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_sumPerTuple(self)

    def sort(self, asc: 'bool'=True) -> "void":
        r"""
        sort(DataArrayInt self, bool asc=True)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_sort(self, asc)

    def reverse(self) -> "void":
        r"""
        reverse(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reverse(self)

    def checkMonotonic(self, increasing: 'bool') -> "void":
        r"""
        checkMonotonic(DataArrayInt self, bool increasing)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_checkMonotonic(self, increasing)

    def isMonotonic(self, increasing: 'bool') -> "bool":
        r"""
        isMonotonic(DataArrayInt self, bool increasing) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isMonotonic(self, increasing)

    def checkStrictlyMonotonic(self, increasing: 'bool') -> "void":
        r"""
        checkStrictlyMonotonic(DataArrayInt self, bool increasing)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_checkStrictlyMonotonic(self, increasing)

    def isStrictlyMonotonic(self, increasing: 'bool') -> "bool":
        r"""
        isStrictlyMonotonic(DataArrayInt self, bool increasing) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isStrictlyMonotonic(self, increasing)

    def fillWithZero(self) -> "void":
        r"""
        fillWithZero(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_fillWithZero(self)

    def fillWithValue(self, val: 'int') -> "void":
        r"""
        fillWithValue(DataArrayInt self, int val)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_fillWithValue(self, val)

    def iota(self, init: 'int'=0) -> "void":
        r"""
        iota(DataArrayInt self, int init=0)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_iota(self, init)

    def repr(self) -> "std::string":
        r"""
        repr(DataArrayInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_repr(self)

    def reprZip(self) -> "std::string":
        r"""
        reprZip(DataArrayInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprZip(self)

    def reprNotTooLong(self) -> "std::string":
        r"""
        reprNotTooLong(DataArrayInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_reprNotTooLong(self)

    def invertArrayO2N2N2O(self, newNbOfElem: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        invertArrayO2N2N2O(DataArrayInt self, int newNbOfElem) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_invertArrayO2N2N2O(self, newNbOfElem)

    def invertArrayN2O2O2N(self, oldNbOfElem: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        invertArrayN2O2O2N(DataArrayInt self, int oldNbOfElem) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_invertArrayN2O2O2N(self, oldNbOfElem)

    def invertArrayO2N2N2OBis(self, newNbOfElem: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        invertArrayO2N2N2OBis(DataArrayInt self, int newNbOfElem) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_invertArrayO2N2N2OBis(self, newNbOfElem)

    def invertArrayN2O2O2NOptimized(self) -> "MCAuto< MEDCoupling::MapII >":
        r"""
        invertArrayN2O2O2NOptimized(DataArrayInt self) -> MCAuto< MEDCoupling::MapII >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_invertArrayN2O2O2NOptimized(self)

    def giveN2OOptimized(self) -> "MCAuto< MEDCoupling::MapII >":
        r"""
        giveN2OOptimized(DataArrayInt self) -> MCAuto< MEDCoupling::MapII >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_giveN2OOptimized(self)

    def indicesOfSubPart(self, partOfThis: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        indicesOfSubPart(DataArrayInt self, DataArrayInt partOfThis) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_indicesOfSubPart(self, partOfThis)

    def fromNoInterlace(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        fromNoInterlace(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_fromNoInterlace(self)

    def toNoInterlace(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        toNoInterlace(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_toNoInterlace(self)

    def selectByTupleIdSafeSlice(self, bg: 'int', end: 'int', step: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        selectByTupleIdSafeSlice(DataArrayInt self, int bg, int end, int step) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_selectByTupleIdSafeSlice(self, bg, end, step)

    def checkAndPreparePermutation(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        checkAndPreparePermutation(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_checkAndPreparePermutation(self)

    def buildPermArrPerLevel(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        buildPermArrPerLevel(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildPermArrPerLevel(self)

    def isIota(self, sizeExpected: 'int') -> "bool":
        r"""
        isIota(DataArrayInt self, int sizeExpected) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isIota(self, sizeExpected)

    def isUniform(self, val: 'int') -> "bool":
        r"""
        isUniform(DataArrayInt self, int val) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isUniform(self, val)

    def checkUniformAndGuess(self) -> "int":
        r"""
        checkUniformAndGuess(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_checkUniformAndGuess(self)

    def hasUniqueValues(self) -> "bool":
        r"""
        hasUniqueValues(DataArrayInt self) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_hasUniqueValues(self)

    def subArray(self, tupleIdBg: 'int', tupleIdEnd: 'int'=-1) -> "MEDCoupling::DataArrayInt *":
        r"""
        subArray(DataArrayInt self, int tupleIdBg, int tupleIdEnd=-1) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_subArray(self, tupleIdBg, tupleIdEnd)

    def transpose(self) -> "void":
        r"""
        transpose(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_transpose(self)

    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        changeNbOfComponents(DataArrayInt self, int newNbOfComp, int dftValue) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_changeNbOfComponents(self, newNbOfComp, dftValue)

    def meldWith(self, other: 'DataArrayInt') -> "void":
        r"""
        meldWith(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_meldWith(self, other)

    def setPartOfValues1(self, a: 'DataArrayInt', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int', strictCompoCompare: 'bool'=True) -> "void":
        r"""
        setPartOfValues1(DataArrayInt self, DataArrayInt a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp, bool strictCompoCompare=True)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValues1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp, strictCompoCompare)

    def setPartOfValuesSimple1(self, a: 'int', bgTuples: 'int', endTuples: 'int', stepTuples: 'int', bgComp: 'int', endComp: 'int', stepComp: 'int') -> "void":
        r"""
        setPartOfValuesSimple1(DataArrayInt self, int a, int bgTuples, int endTuples, int stepTuples, int bgComp, int endComp, int stepComp)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValuesSimple1(self, a, bgTuples, endTuples, stepTuples, bgComp, endComp, stepComp)

    def setPartOfValuesAdv(self, a: 'DataArrayInt', tuplesSelec: 'DataArrayInt') -> "void":
        r"""
        setPartOfValuesAdv(DataArrayInt self, DataArrayInt a, DataArrayInt tuplesSelec)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setPartOfValuesAdv(self, a, tuplesSelec)

    def getIJ(self, tupleId: 'int', compoId: 'int') -> "int":
        r"""
        getIJ(DataArrayInt self, int tupleId, int compoId) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIJ(self, tupleId, compoId)

    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "int":
        r"""
        getIJSafe(DataArrayInt self, int tupleId, int compoId) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getIJSafe(self, tupleId, compoId)

    def front(self) -> "int":
        r"""
        front(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_front(self)

    def back(self) -> "int":
        r"""
        back(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_back(self)

    def setIJ(self, tupleId: 'int', compoId: 'int', newVal: 'int') -> "void":
        r"""
        setIJ(DataArrayInt self, int tupleId, int compoId, int newVal)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setIJ(self, tupleId, compoId, newVal)

    def setIJSilent(self, tupleId: 'int', compoId: 'int', newVal: 'int') -> "void":
        r"""
        setIJSilent(DataArrayInt self, int tupleId, int compoId, int newVal)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setIJSilent(self, tupleId, compoId, newVal)

    def getPointer(self) -> "int *":
        r"""
        getPointer(DataArrayInt self) -> int *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getPointer(self)

    def getConstPointer(self) -> "int const *":
        r"""
        getConstPointer(DataArrayInt self) -> int const *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getConstPointer(self)

    def iterator(self) -> "MEDCoupling::DataArrayIntIterator *":
        r"""
        iterator(DataArrayInt self) -> DataArrayIntIterator
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_iterator(self)

    def begin(self) -> "int const *":
        r"""
        begin(DataArrayInt self) -> int const *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_begin(self)

    def end(self) -> "int const *":
        r"""
        end(DataArrayInt self) -> int const *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_end(self)

    def findIdsEqual(self, val: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsEqual(DataArrayInt self, int val) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsEqual(self, val)

    def findIdsNotEqual(self, val: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsNotEqual(DataArrayInt self, int val) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsNotEqual(self, val)

    def changeValue(self, oldValue: 'int', newValue: 'int') -> "int":
        r"""
        changeValue(DataArrayInt self, int oldValue, int newValue) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_changeValue(self, oldValue, newValue)

    def findIdFirstEqualTuple(self, tupl: 'ivec') -> "int":
        r"""
        findIdFirstEqualTuple(DataArrayInt self, ivec tupl) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdFirstEqualTuple(self, tupl)

    def findIdFirstEqual(self, *args) -> "int":
        r"""
        findIdFirstEqual(DataArrayInt self, int value) -> int
        findIdFirstEqual(DataArrayInt self, ivec vals) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdFirstEqual(self, *args)

    def findIdSequence(self, vals: 'ivec') -> "int":
        r"""
        findIdSequence(DataArrayInt self, ivec vals) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdSequence(self, vals)

    def presenceOfTuple(self, tupl: 'ivec') -> "bool":
        r"""
        presenceOfTuple(DataArrayInt self, ivec tupl) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_presenceOfTuple(self, tupl)

    def presenceOfValue(self, *args) -> "bool":
        r"""
        presenceOfValue(DataArrayInt self, int value) -> bool
        presenceOfValue(DataArrayInt self, ivec vals) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_presenceOfValue(self, *args)

    def count(self, value: 'int') -> "int":
        r"""
        count(DataArrayInt self, int value) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_count(self, value)

    def getMaxValueInArray(self) -> "int":
        r"""
        getMaxValueInArray(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMaxValueInArray(self)

    def getMaxAbsValueInArray(self) -> "int":
        r"""
        getMaxAbsValueInArray(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMaxAbsValueInArray(self)

    def getMinValueInArray(self) -> "int":
        r"""
        getMinValueInArray(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMinValueInArray(self)

    def abs(self) -> "void":
        r"""
        abs(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_abs(self)

    def computeAbs(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        computeAbs(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_computeAbs(self)

    def applyLin(self, *args) -> "void":
        r"""
        applyLin(DataArrayInt self, int a, int b, int compoId)
        applyLin(DataArrayInt self, int a, int b)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyLin(self, *args)

    def applyInv(self, numerator: 'int') -> "void":
        r"""
        applyInv(DataArrayInt self, int numerator)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyInv(self, numerator)

    def negate(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        negate(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_negate(self)

    def applyDivideBy(self, val: 'int') -> "void":
        r"""
        applyDivideBy(DataArrayInt self, int val)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyDivideBy(self, val)

    def applyModulus(self, val: 'int') -> "void":
        r"""
        applyModulus(DataArrayInt self, int val)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyModulus(self, val)

    def applyRModulus(self, val: 'int') -> "void":
        r"""
        applyRModulus(DataArrayInt self, int val)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyRModulus(self, val)

    def applyPow(self, val: 'int') -> "void":
        r"""
        applyPow(DataArrayInt self, int val)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyPow(self, val)

    def applyRPow(self, val: 'int') -> "void":
        r"""
        applyRPow(DataArrayInt self, int val)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_applyRPow(self, val)

    def findIdsInRange(self, vmin: 'int', vmax: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsInRange(DataArrayInt self, int vmin, int vmax) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsInRange(self, vmin, vmax)

    def findIdsNotInRange(self, vmin: 'int', vmax: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsNotInRange(DataArrayInt self, int vmin, int vmax) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsNotInRange(self, vmin, vmax)

    def findIdsStrictlyNegative(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsStrictlyNegative(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsStrictlyNegative(self)

    def checkAllIdsInRange(self, vmin: 'int', vmax: 'int') -> "bool":
        r"""
        checkAllIdsInRange(DataArrayInt self, int vmin, int vmax) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_checkAllIdsInRange(self, vmin, vmax)

    @staticmethod
    def FindPermutationFromFirstToSecond(ids1: 'DataArrayInt', ids2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        FindPermutationFromFirstToSecond(DataArrayInt ids1, DataArrayInt ids2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_FindPermutationFromFirstToSecond(ids1, ids2)

    def buildComplement(self, nbOfElement: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildComplement(DataArrayInt self, int nbOfElement) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildComplement(self, nbOfElement)

    def buildSubstraction(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildSubstraction(DataArrayInt self, DataArrayInt other) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildSubstraction(self, other)

    def buildSubstractionOptimized(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildSubstractionOptimized(DataArrayInt self, DataArrayInt other) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildSubstractionOptimized(self, other)

    def buildUnion(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildUnion(DataArrayInt self, DataArrayInt other) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildUnion(self, other)

    def buildIntersection(self, other: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildIntersection(DataArrayInt self, DataArrayInt other) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildIntersection(self, other)

    def buildUnique(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        buildUnique(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildUnique(self)

    def buildUniqueNotSorted(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        buildUniqueNotSorted(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildUniqueNotSorted(self)

    def deltaShiftIndex(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        deltaShiftIndex(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_deltaShiftIndex(self)

    def computeOffsets(self) -> "void":
        r"""
        computeOffsets(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_computeOffsets(self)

    def computeOffsetsFull(self) -> "void":
        r"""
        computeOffsetsFull(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_computeOffsetsFull(self)

    def buildExplicitArrByRanges(self, offsets: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildExplicitArrByRanges(DataArrayInt self, DataArrayInt offsets) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildExplicitArrByRanges(self, offsets)

    def findRangeIdForEachTuple(self, ranges: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        findRangeIdForEachTuple(DataArrayInt self, DataArrayInt ranges) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findRangeIdForEachTuple(self, ranges)

    def findIdInRangeForEachTuple(self, ranges: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdInRangeForEachTuple(DataArrayInt self, DataArrayInt ranges) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdInRangeForEachTuple(self, ranges)

    def sortEachPairToMakeALinkedList(self) -> "void":
        r"""
        sortEachPairToMakeALinkedList(DataArrayInt self)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_sortEachPairToMakeALinkedList(self)

    def duplicateEachTupleNTimes(self, nbTimes: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        duplicateEachTupleNTimes(DataArrayInt self, int nbTimes) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_duplicateEachTupleNTimes(self, nbTimes)

    def getDifferentValues(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getDifferentValues(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getDifferentValues(self)

    @staticmethod
    def Add(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Add(a1, a2)

    def addEqual(self, other: 'DataArrayInt') -> "void":
        r"""
        addEqual(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_addEqual(self, other)

    @staticmethod
    def Substract(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Substract(a1, a2)

    def substractEqual(self, other: 'DataArrayInt') -> "void":
        r"""
        substractEqual(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_substractEqual(self, other)

    @staticmethod
    def Multiply(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Multiply(a1, a2)

    def multiplyEqual(self, other: 'DataArrayInt') -> "void":
        r"""
        multiplyEqual(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_multiplyEqual(self, other)

    @staticmethod
    def Divide(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Divide(a1, a2)

    def divideEqual(self, other: 'DataArrayInt') -> "void":
        r"""
        divideEqual(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_divideEqual(self, other)

    @staticmethod
    def Modulus(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Modulus(a1, a2)

    def modulusEqual(self, other: 'DataArrayInt') -> "void":
        r"""
        modulusEqual(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_modulusEqual(self, other)

    @staticmethod
    def Pow(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        Pow(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Pow(a1, a2)

    def powEqual(self, other: 'DataArrayInt') -> "void":
        r"""
        powEqual(DataArrayInt self, DataArrayInt other)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_powEqual(self, other)

    def fromLinkedListOfPairToList(self) -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        fromLinkedListOfPairToList(DataArrayInt self) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_fromLinkedListOfPairToList(self)

    def findIdsGreaterOrEqualTo(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsGreaterOrEqualTo(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsGreaterOrEqualTo(self, val)

    def findIdsGreaterThan(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsGreaterThan(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsGreaterThan(self, val)

    def findIdsLowerOrEqualTo(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsLowerOrEqualTo(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsLowerOrEqualTo(self, val)

    def findIdsLowerThan(self, val: 'int') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        findIdsLowerThan(DataArrayInt self, int val) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsLowerThan(self, val)

    def selectPartDef(self, pd: 'PartDefinition') -> "MCAuto< MEDCoupling::DataArrayInt >":
        r"""
        selectPartDef(DataArrayInt self, PartDefinition pd) -> MCAuto< MEDCoupling::DataArrayInt >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_selectPartDef(self, pd)

    def convertToDblArr(self) -> "MCAuto< MEDCoupling::DataArrayDouble >":
        r"""
        convertToDblArr(DataArrayInt self) -> MCAuto< MEDCoupling::DataArrayDouble >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_convertToDblArr(self)

    def convertToFloatArr(self) -> "MCAuto< MEDCoupling::DataArrayFloat >":
        r"""
        convertToFloatArr(DataArrayInt self) -> MCAuto< MEDCoupling::DataArrayFloat >
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_convertToFloatArr(self)

    @staticmethod
    def Range(begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        Range(int begin, int end, int step) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Range(begin, end, step)

    @staticmethod
    def New(*args) -> "MEDCoupling::DataArrayInt *":
        r"""
        New() -> DataArrayInt
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayInt self) -> DataArrayInt
        __init__(DataArrayInt self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt
        1
        """
        _MEDCouplingRemapper.DataArrayInt_swiginit(self, _MEDCouplingRemapper.new_DataArrayInt(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___str__(self)

    def __len__(self) -> "int":
        r"""
        __len__(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___len__(self)

    def __int__(self) -> "int":
        r"""
        __int__(DataArrayInt self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___int__(self)

    def __iter__(self) -> "MEDCoupling::DataArrayIntIterator *":
        r"""
        __iter__(DataArrayInt self) -> DataArrayIntIterator
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___iter__(self)

    def accumulate(self, *args) -> "PyObject *":
        r"""
        accumulate(DataArrayInt self, int compId) -> int
        accumulate(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_accumulate(self, *args)

    def accumulatePerChunck(self, indexArr: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        accumulatePerChunck(DataArrayInt self, PyObject * indexArr) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_accumulatePerChunck(self, indexArr)

    def findIdsEqualTuple(self, inputTuple: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsEqualTuple(DataArrayInt self, PyObject * inputTuple) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsEqualTuple(self, inputTuple)

    def findIdForEach(self, vals: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdForEach(DataArrayInt self, PyObject * vals) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdForEach(self, vals)

    def splitInBalancedSlices(self, nbOfSlices: 'int') -> "PyObject *":
        r"""
        splitInBalancedSlices(DataArrayInt self, int nbOfSlices) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_splitInBalancedSlices(self, nbOfSlices)

    def buildExplicitArrOfSliceOnScaledArr(self, slic: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        buildExplicitArrOfSliceOnScaledArr(DataArrayInt self, PyObject * slic) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_buildExplicitArrOfSliceOnScaledArr(self, slic)

    def getMinMaxValues(self) -> "PyObject *":
        r"""
        getMinMaxValues(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMinMaxValues(self)

    @staticmethod
    def ConvertIndexArrayToO2N(nbOfOldTuples: 'int', arr: 'PyObject *', arrI: 'PyObject *') -> "PyObject *":
        r"""
        ConvertIndexArrayToO2N(int nbOfOldTuples, PyObject * arr, PyObject * arrI) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI)

    @staticmethod
    def CheckAndPreparePermutation(arr: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        CheckAndPreparePermutation(PyObject * arr) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_CheckAndPreparePermutation(arr)

    def setValues(self, li: 'PyObject *', nbOfTuples: 'PyObject *'=None, nbOfComp: 'PyObject *'=None) -> "void":
        r"""
        setValues(DataArrayInt self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setValues(self, li, nbOfTuples, nbOfComp)

    def getValues(self) -> "PyObject *":
        r"""
        getValues(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getValues(self)

    def toNumPyArray(self) -> "PyObject *":
        r"""
        toNumPyArray(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_toNumPyArray(self)

    def isEqualIfNotWhy(self, other: 'DataArrayInt') -> "PyObject *":
        r"""
        isEqualIfNotWhy(DataArrayInt self, DataArrayInt other) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isEqualIfNotWhy(self, other)

    def getValuesAsTuple(self) -> "PyObject *":
        r"""
        getValuesAsTuple(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getValuesAsTuple(self)

    @staticmethod
    def MakePartition(*args) -> "PyObject *":
        r"""
        MakePartition(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & groups, int newNb, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > & fidsOfGroups) -> DataArrayInt
        MakePartition(PyObject * gps, int newNb) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_MakePartition(*args)

    def transformWithIndArr(self, li: 'PyObject *') -> "void":
        r"""
        transformWithIndArr(DataArrayInt self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_transformWithIndArr(self, li)

    def findIdsEqualList(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsEqualList(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsEqualList(self, obj)

    def findIdsNotEqualList(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsNotEqualList(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsNotEqualList(self, obj)

    def splitByValueRange(self, li: 'PyObject *') -> "PyObject *":
        r"""
        splitByValueRange(DataArrayInt self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_splitByValueRange(self, li)

    def transformWithIndArrR(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        transformWithIndArrR(DataArrayInt self, PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_transformWithIndArrR(self, li)

    def renumberAndReduce(self, li: 'PyObject *', newNbOfTuple: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        renumberAndReduce(DataArrayInt self, PyObject * li, int newNbOfTuple) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumberAndReduce(self, li, newNbOfTuple)

    def renumber(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        renumber(DataArrayInt self, PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumber(self, li)

    def renumberR(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        renumberR(DataArrayInt self, PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_renumberR(self, li)

    def setSelectedComponents(self, a: 'DataArrayInt', li: 'PyObject *') -> "void":
        r"""
        setSelectedComponents(DataArrayInt self, DataArrayInt a, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_setSelectedComponents(self, a, li)

    def explodeComponents(self) -> "PyObject *":
        r"""
        explodeComponents(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_explodeComponents(self)

    def getTuple(self, *args) -> "PyObject *":
        r"""
        getTuple(DataArrayInt self, int tupleId, int * res)
        getTuple(DataArrayInt self, int tupleId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getTuple(self, *args)

    def changeSurjectiveFormat(self, targetNb: 'int') -> "PyObject *":
        r"""
        changeSurjectiveFormat(DataArrayInt self, int targetNb) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_changeSurjectiveFormat(self, targetNb)

    @staticmethod
    def Meld(*args) -> "MEDCoupling::DataArrayInt *":
        r"""
        Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
        Meld(PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Meld(*args)

    @staticmethod
    def Aggregate(*args) -> "MEDCoupling::DataArrayInt *":
        r"""
        Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
        Aggregate(PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_Aggregate(*args)

    @staticmethod
    def AggregateIndexes(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        AggregateIndexes(PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_AggregateIndexes(li)

    @staticmethod
    def BuildUnion(*args) -> "MEDCoupling::DataArrayInt *":
        r"""
        BuildUnion(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
        BuildUnion(PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_BuildUnion(*args)

    @staticmethod
    def BuildIntersection(*args) -> "MEDCoupling::DataArrayInt *":
        r"""
        BuildIntersection(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
        BuildIntersection(PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_BuildIntersection(*args)

    def getMaxValue(self) -> "PyObject *":
        r"""
        getMaxValue(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMaxValue(self)

    def getMaxAbsValue(self, tupleId: 'std::size_t &') -> "PyObject *":
        r"""
        getMaxAbsValue(DataArrayInt self, std::size_t & tupleId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMaxAbsValue(self, tupleId)

    def getMinValue(self) -> "PyObject *":
        r"""
        getMinValue(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_getMinValue(self)

    def index(self, obj: 'PyObject *') -> "int":
        r"""
        index(DataArrayInt self, PyObject * obj) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_index(self, obj)

    def __contains__(self, obj: 'PyObject *') -> "bool":
        r"""
        __contains__(DataArrayInt self, PyObject * obj) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___contains__(self, obj)

    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __getitem__(DataArrayInt self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___getitem__(self, obj)

    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __setitem__(DataArrayInt self, PyObject * obj, PyObject * value) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___setitem__(self, obj, value)

    def __neg__(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        __neg__(DataArrayInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___neg__(self)

    def __add__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __add__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___add__(self, obj)

    def __radd__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __radd__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___radd__(self, obj)

    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___iadd___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt____iadd___(self, trueSelf, obj)

    def __sub__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __sub__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___sub__(self, obj)

    def __rsub__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __rsub__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rsub__(self, obj)

    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___isub___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt____isub___(self, trueSelf, obj)

    def __mul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __mul__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___mul__(self, obj)

    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __rmul__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rmul__(self, obj)

    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imul___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt____imul___(self, trueSelf, obj)

    def __div__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __div__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___div__(self, obj)

    def __rdiv__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __rdiv__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rdiv__(self, obj)

    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___idiv___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt____idiv___(self, trueSelf, obj)

    def __mod__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __mod__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___mod__(self, obj)

    def __rmod__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __rmod__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rmod__(self, obj)

    def ___imod___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imod___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt____imod___(self, trueSelf, obj)

    def __pow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __pow__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___pow__(self, obj)

    def __rpow__(self, obj: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        __rpow__(DataArrayInt self, PyObject * obj) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___rpow__(self, obj)

    def ___ipow___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___ipow___(DataArrayInt self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt____ipow___(self, trueSelf, obj)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(DataArrayInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayInt___repr__(self)

    def pushBackValsSilent(self, li: 'PyObject *') -> "void":
        r"""
        pushBackValsSilent(DataArrayInt self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_pushBackValsSilent(self, li)

    def partitionByDifferentValues(self) -> "PyObject *":
        r"""
        partitionByDifferentValues(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_partitionByDifferentValues(self)

    def findIdsRangesInListOfIds(self, listOfIds: 'DataArrayInt') -> "PyObject *":
        r"""
        findIdsRangesInListOfIds(DataArrayInt self, DataArrayInt listOfIds) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_findIdsRangesInListOfIds(self, listOfIds)

    def isRange(self) -> "PyObject *":
        r"""
        isRange(DataArrayInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_isRange(self)

    @staticmethod
    def RemoveIdsFromIndexedArrays(li: 'PyObject *', arr: 'DataArrayInt', arrIndx: 'DataArrayInt', offsetForRemoval: 'int'=0) -> "bool":
        r"""
        RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt arr, DataArrayInt arrIndx, int offsetForRemoval=0) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval)

    @staticmethod
    def ExtractFromIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
        r"""
        ExtractFromIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_ExtractFromIndexedArrays(li, arrIn, arrIndxIn)

    @staticmethod
    def ExtractFromIndexedArraysSlice(*args) -> "PyObject *":
        r"""
        ExtractFromIndexedArraysSlice(int strt, int stp, int step, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject
        ExtractFromIndexedArraysSlice(PyObject * slic, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_ExtractFromIndexedArraysSlice(*args)

    @staticmethod
    def SetPartOfIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "PyObject *":
        r"""
        SetPartOfIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

    @staticmethod
    def SetPartOfIndexedArraysSameIdx(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "void":
        r"""
        SetPartOfIndexedArraysSameIdx(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex)
        1
        """
        return _MEDCouplingRemapper.DataArrayInt_SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayInt

# Register DataArrayInt in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayInt_swigregister(DataArrayInt)

def DataArrayInt_FindPermutationFromFirstToSecond(ids1: 'DataArrayInt', ids2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_FindPermutationFromFirstToSecond(DataArrayInt ids1, DataArrayInt ids2) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_FindPermutationFromFirstToSecond(ids1, ids2)

def DataArrayInt_Add(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Add(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Add(a1, a2)

def DataArrayInt_Substract(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Substract(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Substract(a1, a2)

def DataArrayInt_Multiply(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Multiply(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Multiply(a1, a2)

def DataArrayInt_Divide(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Divide(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Divide(a1, a2)

def DataArrayInt_Modulus(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Modulus(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Modulus(a1, a2)

def DataArrayInt_Pow(a1: 'DataArrayInt', a2: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Pow(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Pow(a1, a2)

def DataArrayInt_Range(begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Range(int begin, int end, int step) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Range(begin, end, step)

def DataArrayInt_New(*args) -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_New() -> DataArrayInt
    DataArrayInt_New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_New(*args)

def DataArrayInt_ConvertIndexArrayToO2N(nbOfOldTuples: 'int', arr: 'PyObject *', arrI: 'PyObject *') -> "PyObject *":
    r"""
    DataArrayInt_ConvertIndexArrayToO2N(int nbOfOldTuples, PyObject * arr, PyObject * arrI) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_ConvertIndexArrayToO2N(nbOfOldTuples, arr, arrI)

def DataArrayInt_CheckAndPreparePermutation(arr: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_CheckAndPreparePermutation(PyObject * arr) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_CheckAndPreparePermutation(arr)

def DataArrayInt_MakePartition(*args) -> "PyObject *":
    r"""
    DataArrayInt_MakePartition(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & groups, int newNb, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > & fidsOfGroups) -> DataArrayInt
    DataArrayInt_MakePartition(PyObject * gps, int newNb) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_MakePartition(*args)

def DataArrayInt_Meld(*args) -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Meld(DataArrayInt a1, DataArrayInt a2) -> DataArrayInt
    DataArrayInt_Meld(PyObject * li) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Meld(*args)

def DataArrayInt_Aggregate(*args) -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_Aggregate(DataArrayInt a1, DataArrayInt a2, int offsetA2) -> DataArrayInt
    DataArrayInt_Aggregate(PyObject * li) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_Aggregate(*args)

def DataArrayInt_AggregateIndexes(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_AggregateIndexes(PyObject * li) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_AggregateIndexes(li)

def DataArrayInt_BuildUnion(*args) -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_BuildUnion(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
    DataArrayInt_BuildUnion(PyObject * li) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_BuildUnion(*args)

def DataArrayInt_BuildIntersection(*args) -> "MEDCoupling::DataArrayInt *":
    r"""
    DataArrayInt_BuildIntersection(std::vector< MEDCoupling::DataArrayInt const *,std::allocator< MEDCoupling::DataArrayInt const * > > const & arr) -> DataArrayInt
    DataArrayInt_BuildIntersection(PyObject * li) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_BuildIntersection(*args)

def DataArrayInt_RemoveIdsFromIndexedArrays(li: 'PyObject *', arr: 'DataArrayInt', arrIndx: 'DataArrayInt', offsetForRemoval: 'int'=0) -> "bool":
    r"""
    DataArrayInt_RemoveIdsFromIndexedArrays(PyObject * li, DataArrayInt arr, DataArrayInt arrIndx, int offsetForRemoval=0) -> bool
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_RemoveIdsFromIndexedArrays(li, arr, arrIndx, offsetForRemoval)

def DataArrayInt_ExtractFromIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
    r"""
    DataArrayInt_ExtractFromIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_ExtractFromIndexedArrays(li, arrIn, arrIndxIn)

def DataArrayInt_ExtractFromIndexedArraysSlice(*args) -> "PyObject *":
    r"""
    DataArrayInt_ExtractFromIndexedArraysSlice(int strt, int stp, int step, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject
    DataArrayInt_ExtractFromIndexedArraysSlice(PyObject * slic, DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_ExtractFromIndexedArraysSlice(*args)

def DataArrayInt_SetPartOfIndexedArrays(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "PyObject *":
    r"""
    DataArrayInt_SetPartOfIndexedArrays(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_SetPartOfIndexedArrays(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

def DataArrayInt_SetPartOfIndexedArraysSameIdx(li: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', srcArr: 'DataArrayInt', srcArrIndex: 'DataArrayInt') -> "void":
    r"""
    DataArrayInt_SetPartOfIndexedArraysSameIdx(PyObject * li, DataArrayInt arrIn, DataArrayInt arrIndxIn, DataArrayInt srcArr, DataArrayInt srcArrIndex)
    1
    """
    return _MEDCouplingRemapper.DataArrayInt_SetPartOfIndexedArraysSameIdx(li, arrIn, arrIndxIn, srcArr, srcArrIndex)

class DataArrayIntIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayInt'):
        r"""
        __init__(DataArrayIntIterator self, DataArrayInt da) -> DataArrayIntIterator
        1
        """
        _MEDCouplingRemapper.DataArrayIntIterator_swiginit(self, _MEDCouplingRemapper.new_DataArrayIntIterator(da))
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayIntIterator

    def next(self) -> "PyObject *":
        r"""
        next(DataArrayIntIterator self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntIterator_next(self)

# Register DataArrayIntIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayIntIterator_swigregister(DataArrayIntIterator)

class DataArrayIntTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        r"""
        getNumberOfCompo(DataArrayIntTuple self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple_getNumberOfCompo(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayIntTuple self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___str__(self)

    def __int__(self) -> "int":
        r"""
        __int__(DataArrayIntTuple self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___int__(self)

    def buildDAInt(self, *args) -> "MEDCoupling::DataArrayInt *":
        r"""
        buildDAInt(DataArrayIntTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayInt
        buildDAInt(DataArrayIntTuple self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple_buildDAInt(self, *args)

    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___iadd___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___isub___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imul___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____imul___(self, trueSelf, obj)

    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___idiv___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____idiv___(self, trueSelf, obj)

    def ___imod___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imod___(DataArrayIntTuple self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple____imod___(self, trueSelf, obj)

    def __len__(self) -> "PyObject *":
        r"""
        __len__(DataArrayIntTuple self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___len__(self)

    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __getitem__(DataArrayIntTuple self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___getitem__(self, obj)

    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayIntTuple *":
        r"""
        __setitem__(DataArrayIntTuple self, PyObject * obj, PyObject * value) -> DataArrayIntTuple
        1
        """
        return _MEDCouplingRemapper.DataArrayIntTuple___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayIntTuple

# Register DataArrayIntTuple in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayIntTuple_swigregister(DataArrayIntTuple)

class DataArrayChar(DataArray):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def buildEmptySpecializedDAChar(self) -> "MEDCoupling::DataArrayChar *":
        r"""
        buildEmptySpecializedDAChar(DataArrayChar self) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_buildEmptySpecializedDAChar(self)

    def getHashCode(self) -> "int":
        r"""
        getHashCode(DataArrayChar self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_getHashCode(self)

    def empty(self) -> "bool":
        r"""
        empty(DataArrayChar self) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_empty(self)

    def deepCopyFrom(self, other: 'DataArrayChar') -> "void":
        r"""
        deepCopyFrom(DataArrayChar self, DataArrayChar other)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_deepCopyFrom(self, other)

    def reserve(self, nbOfElems: 'std::size_t') -> "void":
        r"""
        reserve(DataArrayChar self, std::size_t nbOfElems)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_reserve(self, nbOfElems)

    def pushBackSilent(self, val: 'char') -> "void":
        r"""
        pushBackSilent(DataArrayChar self, char val)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_pushBackSilent(self, val)

    def popBackSilent(self) -> "char":
        r"""
        popBackSilent(DataArrayChar self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_popBackSilent(self)

    def pack(self) -> "void":
        r"""
        pack(DataArrayChar self)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_pack(self)

    def allocIfNecessary(self, nbOfTuple: 'int', nbOfCompo: 'int') -> "void":
        r"""
        allocIfNecessary(DataArrayChar self, int nbOfTuple, int nbOfCompo)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_allocIfNecessary(self, nbOfTuple, nbOfCompo)

    def isEqual(self, other: 'DataArrayChar') -> "bool":
        r"""
        isEqual(DataArrayChar self, DataArrayChar other) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_isEqual(self, other)

    def isEqualWithoutConsideringStr(self, other: 'DataArrayChar') -> "bool":
        r"""
        isEqualWithoutConsideringStr(DataArrayChar self, DataArrayChar other) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_isEqualWithoutConsideringStr(self, other)

    def reverse(self) -> "void":
        r"""
        reverse(DataArrayChar self)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_reverse(self)

    def fillWithZero(self) -> "void":
        r"""
        fillWithZero(DataArrayChar self)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_fillWithZero(self)

    def fillWithValue(self, val: 'char') -> "void":
        r"""
        fillWithValue(DataArrayChar self, char val)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_fillWithValue(self, val)

    def repr(self) -> "std::string":
        r"""
        repr(DataArrayChar self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_repr(self)

    def reprZip(self) -> "std::string":
        r"""
        reprZip(DataArrayChar self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_reprZip(self)

    def convertToIntArr(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        convertToIntArr(DataArrayChar self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_convertToIntArr(self)

    def isUniform(self, val: 'char') -> "bool":
        r"""
        isUniform(DataArrayChar self, char val) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_isUniform(self, val)

    def sort(self, asc: 'bool'=True) -> "void":
        r"""
        sort(DataArrayChar self, bool asc=True)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_sort(self, asc)

    def subArray(self, tupleIdBg: 'int', tupleIdEnd: 'int'=-1) -> "MEDCoupling::DataArrayChar *":
        r"""
        subArray(DataArrayChar self, int tupleIdBg, int tupleIdEnd=-1) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_subArray(self, tupleIdBg, tupleIdEnd)

    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'char') -> "MEDCoupling::DataArrayChar *":
        r"""
        changeNbOfComponents(DataArrayChar self, int newNbOfComp, char dftValue) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_changeNbOfComponents(self, newNbOfComp, dftValue)

    def meldWith(self, other: 'DataArrayChar') -> "void":
        r"""
        meldWith(DataArrayChar self, DataArrayChar other)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_meldWith(self, other)

    def setPartOfValuesAdv(self, a: 'DataArrayChar', tuplesSelec: 'DataArrayInt') -> "void":
        r"""
        setPartOfValuesAdv(DataArrayChar self, DataArrayChar a, DataArrayInt tuplesSelec)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_setPartOfValuesAdv(self, a, tuplesSelec)

    def front(self) -> "char":
        r"""
        front(DataArrayChar self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_front(self)

    def back(self) -> "char":
        r"""
        back(DataArrayChar self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_back(self)

    def setIJ(self, tupleId: 'int', compoId: 'int', newVal: 'char') -> "void":
        r"""
        setIJ(DataArrayChar self, int tupleId, int compoId, char newVal)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_setIJ(self, tupleId, compoId, newVal)

    def setIJSilent(self, tupleId: 'int', compoId: 'int', newVal: 'char') -> "void":
        r"""
        setIJSilent(DataArrayChar self, int tupleId, int compoId, char newVal)
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_setIJSilent(self, tupleId, compoId, newVal)

    def getPointer(self) -> "char *":
        r"""
        getPointer(DataArrayChar self) -> char *
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_getPointer(self)

    def findIdsEqual(self, val: 'char') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsEqual(DataArrayChar self, char val) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_findIdsEqual(self, val)

    def findIdsNotEqual(self, val: 'char') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsNotEqual(DataArrayChar self, char val) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_findIdsNotEqual(self, val)

    def findIdFirstEqualTuple(self, tupl: 'std::vector< char,std::allocator< char > > const &') -> "int":
        r"""
        findIdFirstEqualTuple(DataArrayChar self, std::vector< char,std::allocator< char > > const & tupl) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_findIdFirstEqualTuple(self, tupl)

    def presenceOfTuple(self, tupl: 'std::vector< char,std::allocator< char > > const &') -> "bool":
        r"""
        presenceOfTuple(DataArrayChar self, std::vector< char,std::allocator< char > > const & tupl) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_presenceOfTuple(self, tupl)

    def getMaxValue(self, tupleId: 'int &') -> "char":
        r"""
        getMaxValue(DataArrayChar self, int & tupleId) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_getMaxValue(self, tupleId)

    def getMaxValueInArray(self) -> "char":
        r"""
        getMaxValueInArray(DataArrayChar self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_getMaxValueInArray(self)

    def getMinValue(self, tupleId: 'int &') -> "char":
        r"""
        getMinValue(DataArrayChar self, int & tupleId) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_getMinValue(self, tupleId)

    def getMinValueInArray(self) -> "char":
        r"""
        getMinValueInArray(DataArrayChar self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_getMinValueInArray(self)

    def findIdsInRange(self, vmin: 'char', vmax: 'char') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsInRange(DataArrayChar self, char vmin, char vmax) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_findIdsInRange(self, vmin, vmax)

    def __len__(self) -> "int":
        r"""
        __len__(DataArrayChar self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayChar___len__(self)

    def isEqualIfNotWhy(self, other: 'DataArrayChar') -> "PyObject *":
        r"""
        isEqualIfNotWhy(DataArrayChar self, DataArrayChar other) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_isEqualIfNotWhy(self, other)

    def renumber(self, *args) -> "MEDCoupling::DataArrayChar *":
        r"""
        renumber(DataArrayChar self, int const * old2New) -> DataArrayChar
        renumber(DataArrayChar self, PyObject * li) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_renumber(self, *args)

    def renumberR(self, *args) -> "MEDCoupling::DataArrayChar *":
        r"""
        renumberR(DataArrayChar self, int const * new2Old) -> DataArrayChar
        renumberR(DataArrayChar self, PyObject * li) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_renumberR(self, *args)

    def renumberAndReduce(self, *args) -> "MEDCoupling::DataArrayChar *":
        r"""
        renumberAndReduce(DataArrayChar self, int const * old2NewBg, int newNbOfTuple) -> DataArrayChar
        renumberAndReduce(DataArrayChar self, PyObject * li, int newNbOfTuple) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_renumberAndReduce(self, *args)

    @staticmethod
    def Aggregate(*args) -> "MEDCoupling::DataArrayChar *":
        r"""
        Aggregate(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
        Aggregate(PyObject * dachs) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_Aggregate(*args)

    @staticmethod
    def Meld(*args) -> "MEDCoupling::DataArrayChar *":
        r"""
        Meld(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
        Meld(PyObject * dachs) -> DataArrayChar
        1
        """
        return _MEDCouplingRemapper.DataArrayChar_Meld(*args)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayChar

# Register DataArrayChar in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayChar_swigregister(DataArrayChar)

def DataArrayChar_Aggregate(*args) -> "MEDCoupling::DataArrayChar *":
    r"""
    DataArrayChar_Aggregate(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
    DataArrayChar_Aggregate(PyObject * dachs) -> DataArrayChar
    1
    """
    return _MEDCouplingRemapper.DataArrayChar_Aggregate(*args)

def DataArrayChar_Meld(*args) -> "MEDCoupling::DataArrayChar *":
    r"""
    DataArrayChar_Meld(DataArrayChar a1, DataArrayChar a2) -> DataArrayChar
    DataArrayChar_Meld(PyObject * dachs) -> DataArrayChar
    1
    """
    return _MEDCouplingRemapper.DataArrayChar_Meld(*args)

class DataArrayByte(DataArrayChar):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def iterator(self) -> "MEDCoupling::DataArrayByteIterator *":
        r"""
        iterator(DataArrayByte self) -> DataArrayByteIterator
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_iterator(self)

    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayByte *":
        r"""
        performCopyOrIncrRef(DataArrayByte self, bool deepCopy) -> DataArrayByte
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_performCopyOrIncrRef(self, deepCopy)

    def byteValue(self) -> "char":
        r"""
        byteValue(DataArrayByte self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_byteValue(self)

    @staticmethod
    def New(*args) -> "MEDCoupling::DataArrayByte *":
        r"""
        New() -> DataArrayByte
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayByte self) -> DataArrayByte
        __init__(DataArrayByte self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
        1
        """
        _MEDCouplingRemapper.DataArrayByte_swiginit(self, _MEDCouplingRemapper.new_DataArrayByte(*args))

    def __repr__(self) -> "std::string":
        r"""
        __repr__(DataArrayByte self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayByte___repr__(self)

    def __int__(self) -> "int":
        r"""
        __int__(DataArrayByte self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayByte___int__(self)

    def __iter__(self) -> "MEDCoupling::DataArrayByteIterator *":
        r"""
        __iter__(DataArrayByte self) -> DataArrayByteIterator
        1
        """
        return _MEDCouplingRemapper.DataArrayByte___iter__(self)

    def getIJ(self, tupleId: 'int', compoId: 'int') -> "int":
        r"""
        getIJ(DataArrayByte self, int tupleId, int compoId) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_getIJ(self, tupleId, compoId)

    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "int":
        r"""
        getIJSafe(DataArrayByte self, int tupleId, int compoId) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_getIJSafe(self, tupleId, compoId)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayByte self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayByte___str__(self)

    def toStrList(self) -> "PyObject *":
        r"""
        toStrList(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_toStrList(self)

    def presenceOfTuple(self, tupl: 'PyObject *') -> "bool":
        r"""
        presenceOfTuple(DataArrayByte self, PyObject * tupl) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_presenceOfTuple(self, tupl)

    def presenceOfValue(self, vals: 'PyObject *') -> "bool":
        r"""
        presenceOfValue(DataArrayByte self, PyObject * vals) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_presenceOfValue(self, vals)

    def findIdFirstEqual(self, vals: 'PyObject *') -> "int":
        r"""
        findIdFirstEqual(DataArrayByte self, PyObject * vals) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_findIdFirstEqual(self, vals)

    def findIdFirstEqualTuple(self, tupl: 'PyObject *') -> "int":
        r"""
        findIdFirstEqualTuple(DataArrayByte self, PyObject * tupl) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_findIdFirstEqualTuple(self, tupl)

    def findIdSequence(self, strOrListOfInt: 'PyObject *') -> "int":
        r"""
        findIdSequence(DataArrayByte self, PyObject * strOrListOfInt) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_findIdSequence(self, strOrListOfInt)

    def getTuple(self, tupleId: 'int') -> "PyObject *":
        r"""
        getTuple(DataArrayByte self, int tupleId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_getTuple(self, tupleId)

    def getMaxValue(self) -> "PyObject *":
        r"""
        getMaxValue(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_getMaxValue(self)

    def getMinValue(self) -> "PyObject *":
        r"""
        getMinValue(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_getMinValue(self)

    def index(self, obj: 'PyObject *') -> "int":
        r"""
        index(DataArrayByte self, PyObject * obj) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_index(self, obj)

    def __contains__(self, obj: 'PyObject *') -> "bool":
        r"""
        __contains__(DataArrayByte self, PyObject * obj) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayByte___contains__(self, obj)

    def toNumPyArray(self) -> "PyObject *":
        r"""
        toNumPyArray(DataArrayByte self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayByte_toNumPyArray(self)

    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayByte *":
        r"""
        __setitem__(DataArrayByte self, PyObject * obj, PyObject * value) -> DataArrayByte
        1
        """
        return _MEDCouplingRemapper.DataArrayByte___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayByte

# Register DataArrayByte in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayByte_swigregister(DataArrayByte)

def DataArrayByte_New(*args) -> "MEDCoupling::DataArrayByte *":
    r"""
    DataArrayByte_New() -> DataArrayByte
    DataArrayByte_New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayByte
    1
    """
    return _MEDCouplingRemapper.DataArrayByte_New(*args)

class DataArrayByteIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayByte'):
        r"""
        __init__(DataArrayByteIterator self, DataArrayByte da) -> DataArrayByteIterator
        1
        """
        _MEDCouplingRemapper.DataArrayByteIterator_swiginit(self, _MEDCouplingRemapper.new_DataArrayByteIterator(da))
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayByteIterator

# Register DataArrayByteIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayByteIterator_swigregister(DataArrayByteIterator)

class DataArrayByteTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def repr(self) -> "std::string":
        r"""
        repr(DataArrayByteTuple self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayByteTuple_repr(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayByteTuple self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayByteTuple___str__(self)

    def __int__(self) -> "char":
        r"""
        __int__(DataArrayByteTuple self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayByteTuple___int__(self)

    def buildDAByte(self, *args) -> "MEDCoupling::DataArrayByte *":
        r"""
        buildDAByte(DataArrayByteTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayByte
        buildDAByte(DataArrayByteTuple self) -> DataArrayByte
        1
        """
        return _MEDCouplingRemapper.DataArrayByteTuple_buildDAByte(self, *args)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayByteTuple

# Register DataArrayByteTuple in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayByteTuple_swigregister(DataArrayByteTuple)

class DataArrayAsciiChar(DataArrayChar):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def iterator(self) -> "MEDCoupling::DataArrayAsciiCharIterator *":
        r"""
        iterator(DataArrayAsciiChar self) -> DataArrayAsciiCharIterator
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_iterator(self)

    def performCopyOrIncrRef(self, deepCopy: 'bool') -> "MEDCoupling::DataArrayAsciiChar *":
        r"""
        performCopyOrIncrRef(DataArrayAsciiChar self, bool deepCopy) -> DataArrayAsciiChar
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_performCopyOrIncrRef(self, deepCopy)

    def asciiCharValue(self) -> "char":
        r"""
        asciiCharValue(DataArrayAsciiChar self) -> char
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_asciiCharValue(self)

    @staticmethod
    def New(*args) -> "MEDCoupling::DataArrayAsciiChar *":
        r"""
        New() -> DataArrayAsciiChar
        New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_New(*args)

    def __init__(self, *args):
        r"""
        __init__(DataArrayAsciiChar self) -> DataArrayAsciiChar
        __init__(DataArrayAsciiChar self, PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
        1
        """
        _MEDCouplingRemapper.DataArrayAsciiChar_swiginit(self, _MEDCouplingRemapper.new_DataArrayAsciiChar(*args))

    def __repr__(self) -> "std::string":
        r"""
        __repr__(DataArrayAsciiChar self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar___repr__(self)

    def __iter__(self) -> "MEDCoupling::DataArrayAsciiCharIterator *":
        r"""
        __iter__(DataArrayAsciiChar self) -> DataArrayAsciiCharIterator
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar___iter__(self)

    def getIJ(self, tupleId: 'int', compoId: 'int') -> "std::string":
        r"""
        getIJ(DataArrayAsciiChar self, int tupleId, int compoId) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_getIJ(self, tupleId, compoId)

    def getIJSafe(self, tupleId: 'int', compoId: 'int') -> "std::string":
        r"""
        getIJSafe(DataArrayAsciiChar self, int tupleId, int compoId) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_getIJSafe(self, tupleId, compoId)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayAsciiChar self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar___str__(self)

    def toStrList(self) -> "PyObject *":
        r"""
        toStrList(DataArrayAsciiChar self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_toStrList(self)

    def presenceOfTuple(self, tupl: 'PyObject *') -> "bool":
        r"""
        presenceOfTuple(DataArrayAsciiChar self, PyObject * tupl) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_presenceOfTuple(self, tupl)

    def presenceOfValue(self, vals: 'PyObject *') -> "bool":
        r"""
        presenceOfValue(DataArrayAsciiChar self, PyObject * vals) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_presenceOfValue(self, vals)

    def findIdFirstEqual(self, vals: 'PyObject *') -> "int":
        r"""
        findIdFirstEqual(DataArrayAsciiChar self, PyObject * vals) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_findIdFirstEqual(self, vals)

    def findIdFirstEqualTuple(self, tupl: 'PyObject *') -> "int":
        r"""
        findIdFirstEqualTuple(DataArrayAsciiChar self, PyObject * tupl) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_findIdFirstEqualTuple(self, tupl)

    def findIdSequence(self, strOrListOfInt: 'PyObject *') -> "int":
        r"""
        findIdSequence(DataArrayAsciiChar self, PyObject * strOrListOfInt) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_findIdSequence(self, strOrListOfInt)

    def getTuple(self, tupleId: 'int') -> "PyObject *":
        r"""
        getTuple(DataArrayAsciiChar self, int tupleId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_getTuple(self, tupleId)

    def getMaxValue(self) -> "PyObject *":
        r"""
        getMaxValue(DataArrayAsciiChar self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_getMaxValue(self)

    def getMinValue(self) -> "PyObject *":
        r"""
        getMinValue(DataArrayAsciiChar self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_getMinValue(self)

    def index(self, obj: 'PyObject *') -> "int":
        r"""
        index(DataArrayAsciiChar self, PyObject * obj) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar_index(self, obj)

    def __contains__(self, obj: 'PyObject *') -> "bool":
        r"""
        __contains__(DataArrayAsciiChar self, PyObject * obj) -> bool
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar___contains__(self, obj)

    def __getitem__(self, obj: 'PyObject *') -> "PyObject *":
        r"""
        __getitem__(DataArrayAsciiChar self, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar___getitem__(self, obj)

    def __setitem__(self, obj: 'PyObject *', value: 'PyObject *') -> "MEDCoupling::DataArrayAsciiChar *":
        r"""
        __setitem__(DataArrayAsciiChar self, PyObject * obj, PyObject * value) -> DataArrayAsciiChar
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiChar___setitem__(self, obj, value)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayAsciiChar

# Register DataArrayAsciiChar in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayAsciiChar_swigregister(DataArrayAsciiChar)

def DataArrayAsciiChar_New(*args) -> "MEDCoupling::DataArrayAsciiChar *":
    r"""
    DataArrayAsciiChar_New() -> DataArrayAsciiChar
    DataArrayAsciiChar_New(PyObject * elt0, PyObject * nbOfTuples=None, PyObject * nbOfComp=None) -> DataArrayAsciiChar
    1
    """
    return _MEDCouplingRemapper.DataArrayAsciiChar_New(*args)

class DataArrayAsciiCharIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, da: 'DataArrayAsciiChar'):
        r"""
        __init__(DataArrayAsciiCharIterator self, DataArrayAsciiChar da) -> DataArrayAsciiCharIterator
        1
        """
        _MEDCouplingRemapper.DataArrayAsciiCharIterator_swiginit(self, _MEDCouplingRemapper.new_DataArrayAsciiCharIterator(da))
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayAsciiCharIterator

    def next(self) -> "PyObject *":
        r"""
        next(DataArrayAsciiCharIterator self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiCharIterator_next(self)

# Register DataArrayAsciiCharIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayAsciiCharIterator_swigregister(DataArrayAsciiCharIterator)

class DataArrayAsciiCharTuple(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCompo(self) -> "int":
        r"""
        getNumberOfCompo(DataArrayAsciiCharTuple self) -> int
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiCharTuple_getNumberOfCompo(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(DataArrayAsciiCharTuple self) -> std::string
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiCharTuple___str__(self)

    def buildDAAsciiChar(self, *args) -> "MEDCoupling::DataArrayAsciiChar *":
        r"""
        buildDAAsciiChar(DataArrayAsciiCharTuple self, int nbOfTuples, int nbOfCompo) -> DataArrayAsciiChar
        buildDAAsciiChar(DataArrayAsciiCharTuple self) -> DataArrayAsciiChar
        1
        """
        return _MEDCouplingRemapper.DataArrayAsciiCharTuple_buildDAAsciiChar(self, *args)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DataArrayAsciiCharTuple

# Register DataArrayAsciiCharTuple in _MEDCouplingRemapper:
_MEDCouplingRemapper.DataArrayAsciiCharTuple_swigregister(DataArrayAsciiCharTuple)


def MEDCouplingStdReduceFunct(cls,params):
    a,b=params
    ret=object.__new__(cls)
    ret.__init__(*a)
    ret.__setstate__(b)
    return ret

def MEDCouplingDataArrayDoubleReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayDouble.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayDouble,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayIntReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayInt.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayInt,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayByteReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayByte.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayByte,((self.toNumPyArray(),),(self.__getstate__()),))

def MEDCouplingDataArrayFloatReduce(self):
    if not MEDCouplingHasNumPyBindings():
      raise InterpKernelException("PyWrap of DataArrayFloat.__reduce__ : not implemented because numpy is not active in your configuration ! No serialization/unserialization available without numpy !")
    return MEDCouplingStdReduceFunct,(DataArrayFloat,((self.toNumPyArray(),),(self.__getstate__()),))


def med2vtk_cell_types() -> "PyObject *":
    r"""
    med2vtk_cell_types() -> PyObject *
    1
    """
    return _MEDCouplingRemapper.med2vtk_cell_types()

def vtk2med_cell_types() -> "PyObject *":
    r"""
    vtk2med_cell_types() -> PyObject *
    1
    """
    return _MEDCouplingRemapper.vtk2med_cell_types()
class BoxSplittingOptions(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(BoxSplittingOptions self) -> BoxSplittingOptions
        1
        """
        _MEDCouplingRemapper.BoxSplittingOptions_swiginit(self, _MEDCouplingRemapper.new_BoxSplittingOptions())

    def init(self) -> "void":
        r"""
        init(BoxSplittingOptions self)
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_init(self)

    def getEfficiencyGoal(self) -> "double":
        r"""
        getEfficiencyGoal(BoxSplittingOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_getEfficiencyGoal(self)

    def setEfficiencyGoal(self, efficiency: 'double') -> "void":
        r"""
        setEfficiencyGoal(BoxSplittingOptions self, double efficiency)
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_setEfficiencyGoal(self, efficiency)

    def getEfficiencyThreshold(self) -> "double":
        r"""
        getEfficiencyThreshold(BoxSplittingOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_getEfficiencyThreshold(self)

    def setEfficiencyThreshold(self, efficiencyThreshold: 'double') -> "void":
        r"""
        setEfficiencyThreshold(BoxSplittingOptions self, double efficiencyThreshold)
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_setEfficiencyThreshold(self, efficiencyThreshold)

    def getMinimumPatchLength(self) -> "int":
        r"""
        getMinimumPatchLength(BoxSplittingOptions self) -> int
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_getMinimumPatchLength(self)

    def setMinimumPatchLength(self, minPatchLength: 'int') -> "void":
        r"""
        setMinimumPatchLength(BoxSplittingOptions self, int minPatchLength)
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_setMinimumPatchLength(self, minPatchLength)

    def getMaximumPatchLength(self) -> "int":
        r"""
        getMaximumPatchLength(BoxSplittingOptions self) -> int
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_getMaximumPatchLength(self)

    def setMaximumPatchLength(self, maxPatchLength: 'int') -> "void":
        r"""
        setMaximumPatchLength(BoxSplittingOptions self, int maxPatchLength)
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_setMaximumPatchLength(self, maxPatchLength)

    def getMaximumNbOfCellsInPatch(self) -> "int":
        r"""
        getMaximumNbOfCellsInPatch(BoxSplittingOptions self) -> int
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_getMaximumNbOfCellsInPatch(self)

    def setMaximumNbOfCellsInPatch(self, maxNbCellsInPatch: 'int') -> "void":
        r"""
        setMaximumNbOfCellsInPatch(BoxSplittingOptions self, int maxNbCellsInPatch)
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_setMaximumNbOfCellsInPatch(self, maxNbCellsInPatch)

    def copyOptions(self, other: 'BoxSplittingOptions') -> "void":
        r"""
        copyOptions(BoxSplittingOptions self, BoxSplittingOptions other)
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_copyOptions(self, other)

    def printOptions(self) -> "std::string":
        r"""
        printOptions(BoxSplittingOptions self) -> std::string
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions_printOptions(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(BoxSplittingOptions self) -> std::string
        1
        """
        return _MEDCouplingRemapper.BoxSplittingOptions___str__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_BoxSplittingOptions

# Register BoxSplittingOptions in _MEDCouplingRemapper:
_MEDCouplingRemapper.BoxSplittingOptions_swigregister(BoxSplittingOptions)

ON_CELLS = _MEDCouplingRemapper.ON_CELLS
r"""1"""
ON_NODES = _MEDCouplingRemapper.ON_NODES
r"""1"""
ON_GAUSS_PT = _MEDCouplingRemapper.ON_GAUSS_PT
r"""1"""
ON_GAUSS_NE = _MEDCouplingRemapper.ON_GAUSS_NE
r"""1"""
ON_NODES_KR = _MEDCouplingRemapper.ON_NODES_KR
r"""1"""
NO_TIME = _MEDCouplingRemapper.NO_TIME
r"""1"""
ONE_TIME = _MEDCouplingRemapper.ONE_TIME
r"""1"""
LINEAR_TIME = _MEDCouplingRemapper.LINEAR_TIME
r"""1"""
CONST_ON_TIME_INTERVAL = _MEDCouplingRemapper.CONST_ON_TIME_INTERVAL
r"""1"""
UNSTRUCTURED = _MEDCouplingRemapper.UNSTRUCTURED
r"""1"""
CARTESIAN = _MEDCouplingRemapper.CARTESIAN
r"""1"""
EXTRUDED = _MEDCouplingRemapper.EXTRUDED
r"""1"""
CURVE_LINEAR = _MEDCouplingRemapper.CURVE_LINEAR
r"""1"""
SINGLE_STATIC_GEO_TYPE_UNSTRUCTURED = _MEDCouplingRemapper.SINGLE_STATIC_GEO_TYPE_UNSTRUCTURED
r"""1"""
SINGLE_DYNAMIC_GEO_TYPE_UNSTRUCTURED = _MEDCouplingRemapper.SINGLE_DYNAMIC_GEO_TYPE_UNSTRUCTURED
r"""1"""
IMAGE_GRID = _MEDCouplingRemapper.IMAGE_GRID
r"""1"""
class MEDCouplingMesh(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, name: 'std::string const &') -> "void":
        r"""
        setName(MEDCouplingMesh self, std::string const & name)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setName(self, name)

    def getName(self) -> "std::string":
        r"""
        getName(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getName(self)

    def setDescription(self, descr: 'std::string const &') -> "void":
        r"""
        setDescription(MEDCouplingMesh self, std::string const & descr)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setDescription(self, descr)

    def getDescription(self) -> "std::string":
        r"""
        getDescription(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getDescription(self)

    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        r"""
        setTime(MEDCouplingMesh self, double val, int iteration, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setTime(self, val, iteration, order)

    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        r"""
        setTimeUnit(MEDCouplingMesh self, std::string const & unit)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_setTimeUnit(self, unit)

    def getTimeUnit(self) -> "std::string":
        r"""
        getTimeUnit(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getTimeUnit(self)

    def getType(self) -> "MEDCoupling::MEDCouplingMeshType":
        r"""
        getType(MEDCouplingMesh self) -> MEDCoupling::MEDCouplingMeshType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getType(self)

    def isStructured(self) -> "bool":
        r"""
        isStructured(MEDCouplingMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isStructured(self)

    def deepCopy(self) -> "MEDCoupling::MEDCouplingMesh *":
        r"""
        deepCopy(MEDCouplingMesh self) -> MEDCouplingMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_deepCopy(self)

    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingMesh *":
        r"""
        clone(MEDCouplingMesh self, bool recDeepCpy) -> MEDCouplingMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_clone(self, recDeepCpy)

    def isEqual(self, other: 'MEDCouplingMesh', prec: 'double') -> "bool":
        r"""
        isEqual(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isEqual(self, other, prec)

    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingMesh', prec: 'double') -> "bool":
        r"""
        isEqualWithoutConsideringStr(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isEqualWithoutConsideringStr(self, other, prec)

    def checkFastEquivalWith(self, other: 'MEDCouplingMesh', prec: 'double') -> "void":
        r"""
        checkFastEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, double prec)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkFastEquivalWith(self, other, prec)

    def copyTinyStringsFrom(self, other: 'MEDCouplingMesh') -> "void":
        r"""
        copyTinyStringsFrom(MEDCouplingMesh self, MEDCouplingMesh other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_copyTinyStringsFrom(self, other)

    def copyTinyInfoFrom(self, other: 'MEDCouplingMesh') -> "void":
        r"""
        copyTinyInfoFrom(MEDCouplingMesh self, MEDCouplingMesh other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_copyTinyInfoFrom(self, other)

    def checkConsistencyLight(self) -> "void":
        r"""
        checkConsistencyLight(MEDCouplingMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkConsistencyLight(self)

    def checkConsistency(self, eps: 'double'=1e-12) -> "void":
        r"""
        checkConsistency(MEDCouplingMesh self, double eps=1e-12)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkConsistency(self, eps)

    def getNumberOfCells(self) -> "int":
        r"""
        getNumberOfCells(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNumberOfCells(self)

    def getNumberOfNodes(self) -> "int":
        r"""
        getNumberOfNodes(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNumberOfNodes(self)

    def getSpaceDimension(self) -> "int":
        r"""
        getSpaceDimension(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getSpaceDimension(self)

    def getMeshDimension(self) -> "int":
        r"""
        getMeshDimension(MEDCouplingMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getMeshDimension(self)

    def getCoordinatesAndOwner(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getCoordinatesAndOwner(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCoordinatesAndOwner(self)

    def computeCellCenterOfMass(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        computeCellCenterOfMass(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_computeCellCenterOfMass(self)

    def computeIsoBarycenterOfNodesPerCell(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        computeIsoBarycenterOfNodesPerCell(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_computeIsoBarycenterOfNodesPerCell(self)

    def giveCellsWithType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "MEDCoupling::DataArrayInt *":
        r"""
        giveCellsWithType(MEDCouplingMesh self, INTERP_KERNEL::NormalizedCellType type) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_giveCellsWithType(self, type)

    def computeNbOfNodesPerCell(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        computeNbOfNodesPerCell(MEDCouplingMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_computeNbOfNodesPerCell(self)

    def computeNbOfFacesPerCell(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        computeNbOfFacesPerCell(MEDCouplingMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_computeNbOfFacesPerCell(self)

    def computeEffectiveNbOfNodesPerCell(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        computeEffectiveNbOfNodesPerCell(MEDCouplingMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_computeEffectiveNbOfNodesPerCell(self)

    def buildPartRange(self, beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int') -> "MEDCoupling::MEDCouplingMesh *":
        r"""
        buildPartRange(MEDCouplingMesh self, int beginCellIds, int endCellIds, int stepCellIds) -> MEDCouplingMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildPartRange(self, beginCellIds, endCellIds, stepCellIds)

    def getNumberOfCellsWithType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        r"""
        getNumberOfCellsWithType(MEDCouplingMesh self, INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNumberOfCellsWithType(self, type)

    def getTypeOfCell(self, cellId: 'int') -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        getTypeOfCell(MEDCouplingMesh self, int cellId) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getTypeOfCell(self, cellId)

    def simpleRepr(self) -> "std::string":
        r"""
        simpleRepr(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_simpleRepr(self)

    def advancedRepr(self) -> "std::string":
        r"""
        advancedRepr(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_advancedRepr(self)

    def writeVTK(self, fileName: 'std::string const &', isBinary: 'bool'=True) -> "std::string":
        r"""
        writeVTK(MEDCouplingMesh self, std::string const & fileName, bool isBinary=True) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_writeVTK(self, fileName, isBinary)

    def getVTKFileExtension(self) -> "std::string":
        r"""
        getVTKFileExtension(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getVTKFileExtension(self)

    def getVTKFileNameOf(self, fileName: 'std::string const &') -> "std::string":
        r"""
        getVTKFileNameOf(MEDCouplingMesh self, std::string const & fileName) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getVTKFileNameOf(self, fileName)

    def getMeasureField(self, isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        getMeasureField(MEDCouplingMesh self, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getMeasureField(self, isAbs)

    def getMeasureFieldOnNode(self, isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        getMeasureFieldOnNode(MEDCouplingMesh self, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getMeasureFieldOnNode(self, isAbs)

    def fillFromAnalytic(self, t: 'MEDCoupling::TypeOfField', nbOfComp: 'int', func: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        fillFromAnalytic(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, std::string const & func) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_fillFromAnalytic(self, t, nbOfComp, func)

    def fillFromAnalyticCompo(self, t: 'MEDCoupling::TypeOfField', nbOfComp: 'int', func: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        fillFromAnalyticCompo(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, std::string const & func) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_fillFromAnalyticCompo(self, t, nbOfComp, func)

    def fillFromAnalyticNamedCompo(self, t: 'MEDCoupling::TypeOfField', nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        fillFromAnalyticNamedCompo(MEDCouplingMesh self, MEDCoupling::TypeOfField t, int nbOfComp, svec varsOrder, std::string const & func) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_fillFromAnalyticNamedCompo(self, t, nbOfComp, varsOrder, func)

    def buildOrthogonalField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildOrthogonalField(MEDCouplingMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildOrthogonalField(self)

    def buildUnstructured(self) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        buildUnstructured(MEDCouplingMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildUnstructured(self)

    def mergeMyselfWith(self, other: 'MEDCouplingMesh') -> "MEDCoupling::MEDCouplingMesh *":
        r"""
        mergeMyselfWith(MEDCouplingMesh self, MEDCouplingMesh other) -> MEDCouplingMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_mergeMyselfWith(self, other)

    def areCompatibleForMerge(self, other: 'MEDCouplingMesh') -> "bool":
        r"""
        areCompatibleForMerge(MEDCouplingMesh self, MEDCouplingMesh other) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_areCompatibleForMerge(self, other)

    def simplexize(self, policy: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        simplexize(MEDCouplingMesh self, int policy) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_simplexize(self, policy)

    def unserialization(self, tinyInfoD: 'dvec', tinyInfo: 'ivec', a1: 'DataArrayInt', a2: 'DataArrayDouble', littleStrings: 'svec') -> "void":
        r"""
        unserialization(MEDCouplingMesh self, dvec tinyInfoD, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2, svec littleStrings)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_unserialization(self, tinyInfoD, tinyInfo, a1, a2, littleStrings)

    @staticmethod
    def IsStaticGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
        r"""
        IsStaticGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_IsStaticGeometricType(type)

    @staticmethod
    def IsLinearGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
        r"""
        IsLinearGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_IsLinearGeometricType(type)

    @staticmethod
    def GetCorrespondingPolyType(type: 'INTERP_KERNEL::NormalizedCellType') -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        GetCorrespondingPolyType(INTERP_KERNEL::NormalizedCellType type) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_GetCorrespondingPolyType(type)

    @staticmethod
    def GetNumberOfNodesOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        r"""
        GetNumberOfNodesOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_GetNumberOfNodesOfGeometricType(type)

    @staticmethod
    def GetDimensionOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        r"""
        GetDimensionOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_GetDimensionOfGeometricType(type)

    @staticmethod
    def GetReprOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "char const *":
        r"""
        GetReprOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> char const *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_GetReprOfGeometricType(type)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh___str__(self)

    def getTime(self) -> "PyObject *":
        r"""
        getTime(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getTime(self)

    def getDirectAccessOfCoordsArrIfInStructure(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getDirectAccessOfCoordsArrIfInStructure(MEDCouplingMesh self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getDirectAccessOfCoordsArrIfInStructure(self)

    def getCellContainingPoint(self, p: 'PyObject *', eps: 'double') -> "int":
        r"""
        getCellContainingPoint(MEDCouplingMesh self, PyObject * p, double eps) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellContainingPoint(self, p, eps)

    def getCellsContainingPoints(self, *args) -> "PyObject *":
        r"""
        getCellsContainingPoints(MEDCouplingMesh self, PyObject * p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPoints(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellsContainingPoints(self, *args)

    def getCellsContainingPointsLinearPartOnlyOnNonDynType(self, *args) -> "PyObject *":
        r"""
        getCellsContainingPointsLinearPartOnlyOnNonDynType(MEDCouplingMesh self, PyObject * p, int nbOfPoints, double eps) -> PyObject
        getCellsContainingPointsLinearPartOnlyOnNonDynType(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellsContainingPointsLinearPartOnlyOnNonDynType(self, *args)

    def getCellsContainingPoint(self, p: 'PyObject *', eps: 'double') -> "PyObject *":
        r"""
        getCellsContainingPoint(MEDCouplingMesh self, PyObject * p, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellsContainingPoint(self, p, eps)

    def getReverseNodalConnectivity(self) -> "PyObject *":
        r"""
        getReverseNodalConnectivity(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getReverseNodalConnectivity(self)

    def renumberCells(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        r"""
        renumberCells(MEDCouplingMesh self, PyObject * li, bool check=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_renumberCells(self, li, check)

    def checkGeoEquivalWith(self, other: 'MEDCouplingMesh', levOfCheck: 'int', prec: 'double') -> "PyObject *":
        r"""
        checkGeoEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, int levOfCheck, double prec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkGeoEquivalWith(self, other, levOfCheck, prec)

    def checkDeepEquivalWith(self, other: 'MEDCouplingMesh', cellCompPol: 'int', prec: 'double') -> "PyObject *":
        r"""
        checkDeepEquivalWith(MEDCouplingMesh self, MEDCouplingMesh other, int cellCompPol, double prec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkDeepEquivalWith(self, other, cellCompPol, prec)

    def checkDeepEquivalOnSameNodesWith(self, other: 'MEDCouplingMesh', cellCompPol: 'int', prec: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        checkDeepEquivalOnSameNodesWith(MEDCouplingMesh self, MEDCouplingMesh other, int cellCompPol, double prec) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkDeepEquivalOnSameNodesWith(self, other, cellCompPol, prec)

    def getCellIdsFullyIncludedInNodeIds(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        getCellIdsFullyIncludedInNodeIds(MEDCouplingMesh self, PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCellIdsFullyIncludedInNodeIds(self, li)

    def getNodeIdsOfCell(self, cellId: 'int') -> "PyObject *":
        r"""
        getNodeIdsOfCell(MEDCouplingMesh self, int cellId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getNodeIdsOfCell(self, cellId)

    def getCoordinatesOfNode(self, nodeId: 'int') -> "PyObject *":
        r"""
        getCoordinatesOfNode(MEDCouplingMesh self, int nodeId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getCoordinatesOfNode(self, nodeId)

    def scale(self, point: 'PyObject *', factor: 'double') -> "void":
        r"""
        scale(MEDCouplingMesh self, PyObject * point, double factor)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_scale(self, point, factor)

    def getBoundingBox(self) -> "PyObject *":
        r"""
        getBoundingBox(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getBoundingBox(self)

    def isEqualIfNotWhy(self, other: 'MEDCouplingMesh', prec: 'double') -> "PyObject *":
        r"""
        isEqualIfNotWhy(MEDCouplingMesh self, MEDCouplingMesh other, double prec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_isEqualIfNotWhy(self, other, prec)

    def buildPart(self, li: 'PyObject *') -> "PyObject *":
        r"""
        buildPart(MEDCouplingMesh self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildPart(self, li)

    def buildPartAndReduceNodes(self, li: 'PyObject *') -> "PyObject *":
        r"""
        buildPartAndReduceNodes(MEDCouplingMesh self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildPartAndReduceNodes(self, li)

    def buildPartRangeAndReduceNodes(self, beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int') -> "PyObject *":
        r"""
        buildPartRangeAndReduceNodes(MEDCouplingMesh self, int beginCellIds, int endCellIds, int stepCellIds) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_buildPartRangeAndReduceNodes(self, beginCellIds, endCellIds, stepCellIds)

    def getDistributionOfTypes(self) -> "PyObject *":
        r"""
        getDistributionOfTypes(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getDistributionOfTypes(self)

    def checkTypeConsistencyAndContig(self, li: 'PyObject *', li2: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        checkTypeConsistencyAndContig(MEDCouplingMesh self, PyObject * li, PyObject * li2) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_checkTypeConsistencyAndContig(self, li, li2)

    def splitProfilePerType(self, profile: 'DataArrayInt', smartPflKiller: 'bool'=True) -> "PyObject *":
        r"""
        splitProfilePerType(MEDCouplingMesh self, DataArrayInt profile, bool smartPflKiller=True) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_splitProfilePerType(self, profile, smartPflKiller)

    def translate(self, vector: 'PyObject *') -> "void":
        r"""
        translate(MEDCouplingMesh self, PyObject * vector)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_translate(self, vector)

    def rotate(self, *args) -> "void":
        r"""
        rotate(MEDCouplingMesh self, PyObject * center, double alpha)
        rotate(MEDCouplingMesh self, PyObject * center, PyObject * vector, double alpha)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_rotate(self, *args)

    def getAllGeoTypes(self) -> "PyObject *":
        r"""
        getAllGeoTypes(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getAllGeoTypes(self)

    def getTinySerializationInformation(self) -> "PyObject *":
        r"""
        getTinySerializationInformation(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_getTinySerializationInformation(self)

    def serialize(self) -> "PyObject *":
        r"""
        serialize(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_serialize(self)

    def resizeForUnserialization(self, tinyInfo: 'ivec', a1: 'DataArrayInt', a2: 'DataArrayDouble') -> "void":
        r"""
        resizeForUnserialization(MEDCouplingMesh self, ivec tinyInfo, DataArrayInt a1, DataArrayDouble a2)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_resizeForUnserialization(self, tinyInfo, a1, a2)

    def __getstate__(self) -> "PyObject *":
        r"""
        __getstate__(MEDCouplingMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh___getstate__(self)

    def __setstate__(self, inp: 'PyObject *') -> "void":
        r"""
        __setstate__(MEDCouplingMesh self, PyObject * inp)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh___setstate__(self, inp)

    @staticmethod
    def MergeMeshes(*args) -> "MEDCoupling::MEDCouplingMesh *":
        r"""
        MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
        MergeMeshes(PyObject * li) -> MEDCouplingMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMesh_MergeMeshes(*args)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingMesh

# Register MEDCouplingMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingMesh_swigregister(MEDCouplingMesh)

def MEDCouplingMesh_IsStaticGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
    r"""
    MEDCouplingMesh_IsStaticGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMesh_IsStaticGeometricType(type)

def MEDCouplingMesh_IsLinearGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "bool":
    r"""
    MEDCouplingMesh_IsLinearGeometricType(INTERP_KERNEL::NormalizedCellType type) -> bool
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMesh_IsLinearGeometricType(type)

def MEDCouplingMesh_GetCorrespondingPolyType(type: 'INTERP_KERNEL::NormalizedCellType') -> "INTERP_KERNEL::NormalizedCellType":
    r"""
    MEDCouplingMesh_GetCorrespondingPolyType(INTERP_KERNEL::NormalizedCellType type) -> INTERP_KERNEL::NormalizedCellType
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMesh_GetCorrespondingPolyType(type)

def MEDCouplingMesh_GetNumberOfNodesOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
    r"""
    MEDCouplingMesh_GetNumberOfNodesOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMesh_GetNumberOfNodesOfGeometricType(type)

def MEDCouplingMesh_GetDimensionOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
    r"""
    MEDCouplingMesh_GetDimensionOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> int
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMesh_GetDimensionOfGeometricType(type)

def MEDCouplingMesh_GetReprOfGeometricType(type: 'INTERP_KERNEL::NormalizedCellType') -> "char const *":
    r"""
    MEDCouplingMesh_GetReprOfGeometricType(INTERP_KERNEL::NormalizedCellType type) -> char const *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMesh_GetReprOfGeometricType(type)

def MEDCouplingMesh_MergeMeshes(*args) -> "MEDCoupling::MEDCouplingMesh *":
    r"""
    MEDCouplingMesh_MergeMeshes(MEDCouplingMesh mesh1, MEDCouplingMesh mesh2) -> MEDCouplingMesh
    MEDCouplingMesh_MergeMeshes(PyObject * li) -> MEDCouplingMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMesh_MergeMeshes(*args)

NORM_POINT1 = _MEDCouplingRemapper.NORM_POINT1
r"""1"""
NORM_SEG2 = _MEDCouplingRemapper.NORM_SEG2
r"""1"""
NORM_SEG3 = _MEDCouplingRemapper.NORM_SEG3
r"""1"""
NORM_SEG4 = _MEDCouplingRemapper.NORM_SEG4
r"""1"""
NORM_POLYL = _MEDCouplingRemapper.NORM_POLYL
r"""1"""
NORM_TRI3 = _MEDCouplingRemapper.NORM_TRI3
r"""1"""
NORM_QUAD4 = _MEDCouplingRemapper.NORM_QUAD4
r"""1"""
NORM_POLYGON = _MEDCouplingRemapper.NORM_POLYGON
r"""1"""
NORM_TRI6 = _MEDCouplingRemapper.NORM_TRI6
r"""1"""
NORM_TRI7 = _MEDCouplingRemapper.NORM_TRI7
r"""1"""
NORM_QUAD8 = _MEDCouplingRemapper.NORM_QUAD8
r"""1"""
NORM_QUAD9 = _MEDCouplingRemapper.NORM_QUAD9
r"""1"""
NORM_QPOLYG = _MEDCouplingRemapper.NORM_QPOLYG
r"""1"""
NORM_TETRA4 = _MEDCouplingRemapper.NORM_TETRA4
r"""1"""
NORM_PYRA5 = _MEDCouplingRemapper.NORM_PYRA5
r"""1"""
NORM_PENTA6 = _MEDCouplingRemapper.NORM_PENTA6
r"""1"""
NORM_HEXA8 = _MEDCouplingRemapper.NORM_HEXA8
r"""1"""
NORM_TETRA10 = _MEDCouplingRemapper.NORM_TETRA10
r"""1"""
NORM_HEXGP12 = _MEDCouplingRemapper.NORM_HEXGP12
r"""1"""
NORM_PYRA13 = _MEDCouplingRemapper.NORM_PYRA13
r"""1"""
NORM_PENTA15 = _MEDCouplingRemapper.NORM_PENTA15
r"""1"""
NORM_PENTA18 = _MEDCouplingRemapper.NORM_PENTA18
r"""1"""
NORM_HEXA20 = _MEDCouplingRemapper.NORM_HEXA20
r"""1"""
NORM_HEXA27 = _MEDCouplingRemapper.NORM_HEXA27
r"""1"""
NORM_POLYHED = _MEDCouplingRemapper.NORM_POLYHED
r"""1"""
NORM_ERROR = _MEDCouplingRemapper.NORM_ERROR
r"""1"""
NORM_MAXTYPE = _MEDCouplingRemapper.NORM_MAXTYPE
r"""1"""
PLANAR_FACE_5 = _MEDCouplingRemapper.PLANAR_FACE_5
r"""1"""
PLANAR_FACE_6 = _MEDCouplingRemapper.PLANAR_FACE_6
r"""1"""
GENERAL_24 = _MEDCouplingRemapper.GENERAL_24
r"""1"""
GENERAL_48 = _MEDCouplingRemapper.GENERAL_48
r"""1"""
NoNature = _MEDCouplingRemapper.NoNature
r"""1"""
IntensiveMaximum = _MEDCouplingRemapper.IntensiveMaximum
r"""1"""
ExtensiveMaximum = _MEDCouplingRemapper.ExtensiveMaximum
r"""1"""
ExtensiveConservation = _MEDCouplingRemapper.ExtensiveConservation
r"""1"""
IntensiveConservation = _MEDCouplingRemapper.IntensiveConservation
r"""1"""
class MEDCouplingNatureOfField(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetRepr(nat: 'MEDCoupling::NatureOfField') -> "char const *":
        r"""
        GetRepr(MEDCoupling::NatureOfField nat) -> char const *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingNatureOfField_GetRepr(nat)

    @staticmethod
    def GetReprNoThrow(nat: 'MEDCoupling::NatureOfField') -> "std::string":
        r"""
        GetReprNoThrow(MEDCoupling::NatureOfField nat) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingNatureOfField_GetReprNoThrow(nat)

    @staticmethod
    def GetAllPossibilitiesStr() -> "std::string":
        r"""
        GetAllPossibilitiesStr() -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingNatureOfField_GetAllPossibilitiesStr()
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingNatureOfField

# Register MEDCouplingNatureOfField in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingNatureOfField_swigregister(MEDCouplingNatureOfField)

def MEDCouplingNatureOfField_GetRepr(nat: 'MEDCoupling::NatureOfField') -> "char const *":
    r"""
    MEDCouplingNatureOfField_GetRepr(MEDCoupling::NatureOfField nat) -> char const *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingNatureOfField_GetRepr(nat)

def MEDCouplingNatureOfField_GetReprNoThrow(nat: 'MEDCoupling::NatureOfField') -> "std::string":
    r"""
    MEDCouplingNatureOfField_GetReprNoThrow(MEDCoupling::NatureOfField nat) -> std::string
    1
    """
    return _MEDCouplingRemapper.MEDCouplingNatureOfField_GetReprNoThrow(nat)

def MEDCouplingNatureOfField_GetAllPossibilitiesStr() -> "std::string":
    r"""
    MEDCouplingNatureOfField_GetAllPossibilitiesStr() -> std::string
    1
    """
    return _MEDCouplingRemapper.MEDCouplingNatureOfField_GetAllPossibilitiesStr()

class MEDCouplingGaussLocalization(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec w) -> MEDCouplingGaussLocalization
        __init__(MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType typ) -> MEDCouplingGaussLocalization
        1
        """
        _MEDCouplingRemapper.MEDCouplingGaussLocalization_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingGaussLocalization(*args))

    def getType(self) -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        getType(MEDCouplingGaussLocalization self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getType(self)

    def setType(self, typ: 'INTERP_KERNEL::NormalizedCellType') -> "void":
        r"""
        setType(MEDCouplingGaussLocalization self, INTERP_KERNEL::NormalizedCellType typ)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setType(self, typ)

    def getNumberOfGaussPt(self) -> "int":
        r"""
        getNumberOfGaussPt(MEDCouplingGaussLocalization self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getNumberOfGaussPt(self)

    def getDimension(self) -> "int":
        r"""
        getDimension(MEDCouplingGaussLocalization self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getDimension(self)

    def getNumberOfPtsInRefCell(self) -> "int":
        r"""
        getNumberOfPtsInRefCell(MEDCouplingGaussLocalization self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getNumberOfPtsInRefCell(self)

    def getStringRepr(self) -> "std::string":
        r"""
        getStringRepr(MEDCouplingGaussLocalization self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getStringRepr(self)

    def checkConsistencyLight(self) -> "void":
        r"""
        checkConsistencyLight(MEDCouplingGaussLocalization self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_checkConsistencyLight(self)

    def isEqual(self, other: 'MEDCouplingGaussLocalization', eps: 'double') -> "bool":
        r"""
        isEqual(MEDCouplingGaussLocalization self, MEDCouplingGaussLocalization other, double eps) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_isEqual(self, other, eps)

    def getRefCoords(self) -> "std::vector< double,std::allocator< double > > const &":
        r"""
        getRefCoords(MEDCouplingGaussLocalization self) -> dvec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getRefCoords(self)

    def getRefCoord(self, ptIdInCell: 'int', comp: 'int') -> "double":
        r"""
        getRefCoord(MEDCouplingGaussLocalization self, int ptIdInCell, int comp) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getRefCoord(self, ptIdInCell, comp)

    def getGaussCoords(self) -> "std::vector< double,std::allocator< double > > const &":
        r"""
        getGaussCoords(MEDCouplingGaussLocalization self) -> dvec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getGaussCoords(self)

    def getGaussCoord(self, gaussPtIdInCell: 'int', comp: 'int') -> "double":
        r"""
        getGaussCoord(MEDCouplingGaussLocalization self, int gaussPtIdInCell, int comp) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getGaussCoord(self, gaussPtIdInCell, comp)

    def getWeights(self) -> "std::vector< double,std::allocator< double > > const &":
        r"""
        getWeights(MEDCouplingGaussLocalization self) -> dvec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getWeights(self)

    def getWeight(self, gaussPtIdInCell: 'int', newVal: 'double') -> "double":
        r"""
        getWeight(MEDCouplingGaussLocalization self, int gaussPtIdInCell, double newVal) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_getWeight(self, gaussPtIdInCell, newVal)

    def setRefCoord(self, ptIdInCell: 'int', comp: 'int', newVal: 'double') -> "void":
        r"""
        setRefCoord(MEDCouplingGaussLocalization self, int ptIdInCell, int comp, double newVal)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setRefCoord(self, ptIdInCell, comp, newVal)

    def setGaussCoord(self, gaussPtIdInCell: 'int', comp: 'int', newVal: 'double') -> "void":
        r"""
        setGaussCoord(MEDCouplingGaussLocalization self, int gaussPtIdInCell, int comp, double newVal)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setGaussCoord(self, gaussPtIdInCell, comp, newVal)

    def setWeight(self, gaussPtIdInCell: 'int', newVal: 'double') -> "void":
        r"""
        setWeight(MEDCouplingGaussLocalization self, int gaussPtIdInCell, double newVal)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setWeight(self, gaussPtIdInCell, newVal)

    def setRefCoords(self, refCoo: 'dvec') -> "void":
        r"""
        setRefCoords(MEDCouplingGaussLocalization self, dvec refCoo)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setRefCoords(self, refCoo)

    def setGaussCoords(self, gsCoo: 'dvec') -> "void":
        r"""
        setGaussCoords(MEDCouplingGaussLocalization self, dvec gsCoo)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setGaussCoords(self, gsCoo)

    def setWeights(self, w: 'dvec') -> "void":
        r"""
        setWeights(MEDCouplingGaussLocalization self, dvec w)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_setWeights(self, w)

    @staticmethod
    def AreAlmostEqual(v1: 'dvec', v2: 'dvec', eps: 'double') -> "bool":
        r"""
        AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_AreAlmostEqual(v1, v2, eps)

    def localizePtsInRefCooForEachCell(self, ptsInRefCoo: 'DataArrayDouble', mesh: 'MEDCouplingUMesh') -> "MEDCoupling::DataArrayDouble *":
        r"""
        localizePtsInRefCooForEachCell(MEDCouplingGaussLocalization self, DataArrayDouble ptsInRefCoo, MEDCouplingUMesh mesh) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_localizePtsInRefCooForEachCell(self, ptsInRefCoo, mesh)

    def buildRefCell(self) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        buildRefCell(MEDCouplingGaussLocalization self) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization_buildRefCell(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingGaussLocalization self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingGaussLocalization self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingGaussLocalization___repr__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingGaussLocalization

# Register MEDCouplingGaussLocalization in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingGaussLocalization_swigregister(MEDCouplingGaussLocalization)

def MEDCouplingGaussLocalization_AreAlmostEqual(v1: 'dvec', v2: 'dvec', eps: 'double') -> "bool":
    r"""
    MEDCouplingGaussLocalization_AreAlmostEqual(dvec v1, dvec v2, double eps) -> bool
    1
    """
    return _MEDCouplingRemapper.MEDCouplingGaussLocalization_AreAlmostEqual(v1, v2, eps)

class MEDCouplingSkyLineArray(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def BuildFromPolyhedronConn(c: 'DataArrayInt', cI: 'DataArrayInt') -> "MEDCoupling::MEDCouplingSkyLineArray *":
        r"""
        BuildFromPolyhedronConn(DataArrayInt c, DataArrayInt cI) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_BuildFromPolyhedronConn(c, cI)

    def set(self, index: 'DataArrayInt', value: 'DataArrayInt') -> "void":
        r"""
        set(MEDCouplingSkyLineArray self, DataArrayInt index, DataArrayInt value)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_set(self, index, value)

    def set3(self, superIndex: 'DataArrayInt', index: 'DataArrayInt', value: 'DataArrayInt') -> "void":
        r"""
        set3(MEDCouplingSkyLineArray self, DataArrayInt superIndex, DataArrayInt index, DataArrayInt value)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_set3(self, superIndex, index, value)

    def getSuperNumberOf(self) -> "int":
        r"""
        getSuperNumberOf(MEDCouplingSkyLineArray self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_getSuperNumberOf(self)

    def getNumberOf(self) -> "int":
        r"""
        getNumberOf(MEDCouplingSkyLineArray self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_getNumberOf(self)

    def getLength(self) -> "int":
        r"""
        getLength(MEDCouplingSkyLineArray self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_getLength(self)

    def deletePack(self, i: 'int const', j: 'int const') -> "void":
        r"""
        deletePack(MEDCouplingSkyLineArray self, int const i, int const j)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_deletePack(self, i, j)

    def deleteSimplePack(self, i: 'int const') -> "void":
        r"""
        deleteSimplePack(MEDCouplingSkyLineArray self, int const i)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_deleteSimplePack(self, i)

    def deleteSimplePacks(self, idx: 'DataArrayInt') -> "void":
        r"""
        deleteSimplePacks(MEDCouplingSkyLineArray self, DataArrayInt idx)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_deleteSimplePacks(self, idx)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingSkyLineArray self) -> MEDCouplingSkyLineArray
        __init__(MEDCouplingSkyLineArray self, ivec index, ivec value) -> MEDCouplingSkyLineArray
        __init__(MEDCouplingSkyLineArray self, DataArrayInt index, DataArrayInt value) -> MEDCouplingSkyLineArray
        __init__(MEDCouplingSkyLineArray self, MEDCouplingSkyLineArray other) -> MEDCouplingSkyLineArray
        1
        """
        _MEDCouplingRemapper.MEDCouplingSkyLineArray_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingSkyLineArray(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingSkyLineArray self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray___str__(self)

    def getSuperIndexArray(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getSuperIndexArray(MEDCouplingSkyLineArray self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_getSuperIndexArray(self)

    def getIndexArray(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getIndexArray(MEDCouplingSkyLineArray self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_getIndexArray(self)

    def getValuesArray(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getValuesArray(MEDCouplingSkyLineArray self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_getValuesArray(self)

    def getSimplePackSafe(self, absolutePackId: 'int') -> "PyObject *":
        r"""
        getSimplePackSafe(MEDCouplingSkyLineArray self, int absolutePackId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_getSimplePackSafe(self, absolutePackId)

    def findPackIds(self, superPackIndices: 'PyObject *', pack: 'PyObject *') -> "PyObject *":
        r"""
        findPackIds(MEDCouplingSkyLineArray self, PyObject * superPackIndices, PyObject * pack) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_findPackIds(self, superPackIndices, pack)

    def pushBackPack(self, i: 'int const', pack: 'PyObject *') -> "void":
        r"""
        pushBackPack(MEDCouplingSkyLineArray self, int const i, PyObject * pack)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_pushBackPack(self, i, pack)

    def replaceSimplePack(self, idx: 'int const', pack: 'PyObject *') -> "void":
        r"""
        replaceSimplePack(MEDCouplingSkyLineArray self, int const idx, PyObject * pack)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_replaceSimplePack(self, idx, pack)

    def replaceSimplePacks(self, idx: 'DataArrayInt', listePacks: 'PyObject *') -> "void":
        r"""
        replaceSimplePacks(MEDCouplingSkyLineArray self, DataArrayInt idx, PyObject * listePacks)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_replaceSimplePacks(self, idx, listePacks)

    def replacePack(self, superIdx: 'int const', idx: 'int const', pack: 'PyObject *') -> "void":
        r"""
        replacePack(MEDCouplingSkyLineArray self, int const superIdx, int const idx, PyObject * pack)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_replacePack(self, superIdx, idx, pack)

    def convertToPolyhedronConn(self) -> "PyObject *":
        r"""
        convertToPolyhedronConn(MEDCouplingSkyLineArray self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingSkyLineArray_convertToPolyhedronConn(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingSkyLineArray

# Register MEDCouplingSkyLineArray in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingSkyLineArray_swigregister(MEDCouplingSkyLineArray)

def MEDCouplingSkyLineArray_BuildFromPolyhedronConn(c: 'DataArrayInt', cI: 'DataArrayInt') -> "MEDCoupling::MEDCouplingSkyLineArray *":
    r"""
    MEDCouplingSkyLineArray_BuildFromPolyhedronConn(DataArrayInt c, DataArrayInt cI) -> MEDCouplingSkyLineArray
    1
    """
    return _MEDCouplingRemapper.MEDCouplingSkyLineArray_BuildFromPolyhedronConn(c, cI)

class MEDCouplingFieldDiscretization(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New(type: 'MEDCoupling::TypeOfField') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        r"""
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_New(type)

    def getPrecision(self) -> "double":
        r"""
        getPrecision(MEDCouplingFieldDiscretization self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getPrecision(self)

    def setPrecision(self, val: 'double') -> "void":
        r"""
        setPrecision(MEDCouplingFieldDiscretization self, double val)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_setPrecision(self, val)

    @staticmethod
    def GetTypeOfFieldFromStringRepr(repr: 'std::string const &') -> "MEDCoupling::TypeOfField":
        r"""
        GetTypeOfFieldFromStringRepr(std::string const & repr) -> MEDCoupling::TypeOfField
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(repr)

    def getEnum(self) -> "MEDCoupling::TypeOfField":
        r"""
        getEnum(MEDCouplingFieldDiscretization self) -> MEDCoupling::TypeOfField
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getEnum(self)

    def isEqual(self, other: 'MEDCouplingFieldDiscretization', eps: 'double') -> "bool":
        r"""
        isEqual(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_isEqual(self, other, eps)

    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldDiscretization', eps: 'double', reason: 'std::string &') -> "bool":
        r"""
        isEqualIfNotWhy(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps, std::string & reason) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_isEqualIfNotWhy(self, other, eps, reason)

    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldDiscretization', eps: 'double') -> "bool":
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldDiscretization self, MEDCouplingFieldDiscretization other, double eps) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_isEqualWithoutConsideringStr(self, other, eps)

    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        r"""
        deepCopy(MEDCouplingFieldDiscretization self) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_deepCopy(self)

    def clone(self) -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        r"""
        clone(MEDCouplingFieldDiscretization self) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_clone(self)

    def clonePartRange(self, beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        r"""
        clonePartRange(MEDCouplingFieldDiscretization self, int beginCellIds, int endCellIds, int stepCellIds) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_clonePartRange(self, beginCellIds, endCellIds, stepCellIds)

    def getStringRepr(self) -> "std::string":
        r"""
        getStringRepr(MEDCouplingFieldDiscretization self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getStringRepr(self)

    def getRepr(self) -> "char const *":
        r"""
        getRepr(MEDCouplingFieldDiscretization self) -> char const *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getRepr(self)

    def getNumberOfTuples(self, mesh: 'MEDCouplingMesh') -> "int":
        r"""
        getNumberOfTuples(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getNumberOfTuples(self, mesh)

    def getNumberOfMeshPlaces(self, mesh: 'MEDCouplingMesh') -> "int":
        r"""
        getNumberOfMeshPlaces(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getNumberOfMeshPlaces(self, mesh)

    def getOffsetArr(self, mesh: 'MEDCouplingMesh') -> "MEDCoupling::DataArrayInt *":
        r"""
        getOffsetArr(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getOffsetArr(self, mesh)

    def getLocalizationOfDiscValues(self, mesh: 'MEDCouplingMesh') -> "MEDCoupling::DataArrayDouble *":
        r"""
        getLocalizationOfDiscValues(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getLocalizationOfDiscValues(self, mesh)

    def checkCompatibilityWithNature(self, nat: 'MEDCoupling::NatureOfField') -> "void":
        r"""
        checkCompatibilityWithNature(MEDCouplingFieldDiscretization self, MEDCoupling::NatureOfField nat)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_checkCompatibilityWithNature(self, nat)

    def getIJK(self, mesh: 'MEDCouplingMesh', da: 'DataArrayDouble', cellId: 'int', nodeIdInCell: 'int', compoId: 'int') -> "double":
        r"""
        getIJK(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble da, int cellId, int nodeIdInCell, int compoId) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getIJK(self, mesh, da, cellId, nodeIdInCell, compoId)

    def checkCoherencyBetween(self, mesh: 'MEDCouplingMesh', da: 'DataArray') -> "void":
        r"""
        checkCoherencyBetween(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArray da)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_checkCoherencyBetween(self, mesh, da)

    def getMeasureField(self, mesh: 'MEDCouplingMesh', isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        getMeasureField(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getMeasureField(self, mesh, isAbs)

    def setGaussLocalizationOnType(self, m: 'MEDCouplingMesh', type: 'INTERP_KERNEL::NormalizedCellType', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        r"""
        setGaussLocalizationOnType(MEDCouplingFieldDiscretization self, MEDCouplingMesh m, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_setGaussLocalizationOnType(self, m, type, refCoo, gsCoo, wg)

    def clearGaussLocalizations(self) -> "void":
        r"""
        clearGaussLocalizations(MEDCouplingFieldDiscretization self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_clearGaussLocalizations(self)

    def getGaussLocalization(self, locId: 'int') -> "MEDCoupling::MEDCouplingGaussLocalization &":
        r"""
        getGaussLocalization(MEDCouplingFieldDiscretization self, int locId) -> MEDCouplingGaussLocalization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalization(self, locId)

    def getNbOfGaussLocalization(self) -> "int":
        r"""
        getNbOfGaussLocalization(MEDCouplingFieldDiscretization self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, cellId: 'int') -> "int":
        r"""
        getGaussLocalizationIdOfOneCell(MEDCouplingFieldDiscretization self, int cellId) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneCell(self, cellId)

    def getGaussLocalizationIdOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        r"""
        getGaussLocalizationIdOfOneType(MEDCouplingFieldDiscretization self, INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalizationIdOfOneType(self, type)

    def clonePart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
        r"""
        clonePart(MEDCouplingFieldDiscretization self, PyObject * li) -> MEDCouplingFieldDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_clonePart(self, li)

    def buildSubMeshDataRange(self, mesh: 'MEDCouplingMesh', beginCellIds: 'int', endCellIds: 'int', stepCellIds: 'int', beginOut: 'int &', endOut: 'int &', stepOut: 'int &', di: 'MEDCoupling::DataArrayInt *&') -> "PyObject *":
        r"""
        buildSubMeshDataRange(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, int beginCellIds, int endCellIds, int stepCellIds, int & beginOut, int & endOut, int & stepOut, MEDCoupling::DataArrayInt *& di) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_buildSubMeshDataRange(self, mesh, beginCellIds, endCellIds, stepCellIds, beginOut, endOut, stepOut, di)

    def getNumberOfTuplesExpectedRegardingCode(self, code: 'PyObject *', idsPerType: 'PyObject *') -> "int":
        r"""
        getNumberOfTuplesExpectedRegardingCode(MEDCouplingFieldDiscretization self, PyObject * code, PyObject * idsPerType) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType)

    def computeMeshRestrictionFromTupleIds(self, mesh: 'MEDCouplingMesh', tupleIds: 'PyObject *') -> "PyObject *":
        r"""
        computeMeshRestrictionFromTupleIds(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * tupleIds) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_computeMeshRestrictionFromTupleIds(self, mesh, tupleIds)

    def normL1(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble') -> "PyObject *":
        r"""
        normL1(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_normL1(self, mesh, arr)

    def normL2(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble') -> "PyObject *":
        r"""
        normL2(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_normL2(self, mesh, arr)

    def integral(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble', isWAbs: 'bool') -> "PyObject *":
        r"""
        integral(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, DataArrayDouble arr, bool isWAbs) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_integral(self, mesh, arr, isWAbs)

    def getCellIdsHavingGaussLocalization(self, locId: 'int') -> "PyObject *":
        r"""
        getCellIdsHavingGaussLocalization(MEDCouplingFieldDiscretization self, int locId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getCellIdsHavingGaussLocalization(self, locId)

    def setGaussLocalizationOnCells(self, m: 'MEDCouplingMesh', li: 'PyObject *', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        r"""
        setGaussLocalizationOnCells(MEDCouplingFieldDiscretization self, MEDCouplingMesh m, PyObject * li, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_setGaussLocalizationOnCells(self, m, li, refCoo, gsCoo, wg)

    def getGaussLocalizationIdsOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        r"""
        getGaussLocalizationIdsOfOneType(MEDCouplingFieldDiscretization self, INTERP_KERNEL::NormalizedCellType type) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getGaussLocalizationIdsOfOneType(self, type)

    def getValueOn(self, arr: 'DataArrayDouble', mesh: 'MEDCouplingMesh', sl: 'PyObject *') -> "PyObject *":
        r"""
        getValueOn(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, PyObject * sl) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getValueOn(self, arr, mesh, sl)

    def getValueOnPos(self, arr: 'DataArrayDouble', mesh: 'MEDCouplingMesh', i: 'int', j: 'int', k: 'int') -> "PyObject *":
        r"""
        getValueOnPos(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, int i, int j, int k) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getValueOnPos(self, arr, mesh, i, j, k)

    def getValueOnMulti(self, arr: 'DataArrayDouble', mesh: 'MEDCouplingMesh', loc: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        getValueOnMulti(MEDCouplingFieldDiscretization self, DataArrayDouble arr, MEDCouplingMesh mesh, PyObject * loc) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_getValueOnMulti(self, arr, mesh, loc)

    def renumberCells(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        r"""
        renumberCells(MEDCouplingFieldDiscretization self, PyObject * li, bool check=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberCells(self, li, check)

    def renumberArraysForCell(self, mesh: 'MEDCouplingMesh', arrays: 'PyObject *', old2New: 'PyObject *', check: 'bool') -> "void":
        r"""
        renumberArraysForCell(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * arrays, PyObject * old2New, bool check)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberArraysForCell(self, mesh, arrays, old2New, check)

    def computeTupleIdsToSelectFromCellIds(self, mesh: 'MEDCouplingMesh', cellIds: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        computeTupleIdsToSelectFromCellIds(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * cellIds) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_computeTupleIdsToSelectFromCellIds(self, mesh, cellIds)

    def buildSubMeshData(self, mesh: 'MEDCouplingMesh', ids: 'PyObject *') -> "PyObject *":
        r"""
        buildSubMeshData(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * ids) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_buildSubMeshData(self, mesh, ids)

    def renumberValuesOnNodes(self, epsOnVals: 'double', old2New: 'PyObject *', newNbOfNodes: 'int', arr: 'DataArrayDouble') -> "void":
        r"""
        renumberValuesOnNodes(MEDCouplingFieldDiscretization self, double epsOnVals, PyObject * old2New, int newNbOfNodes, DataArrayDouble arr)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberValuesOnNodes(self, epsOnVals, old2New, newNbOfNodes, arr)

    def renumberValuesOnCells(self, epsOnVals: 'double', mesh: 'MEDCouplingMesh', old2New: 'PyObject *', newSz: 'int', arr: 'DataArrayDouble') -> "void":
        r"""
        renumberValuesOnCells(MEDCouplingFieldDiscretization self, double epsOnVals, MEDCouplingMesh mesh, PyObject * old2New, int newSz, DataArrayDouble arr)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberValuesOnCells(self, epsOnVals, mesh, old2New, newSz, arr)

    def renumberValuesOnCellsR(self, mesh: 'MEDCouplingMesh', new2old: 'PyObject *', newSz: 'int', arr: 'DataArrayDouble') -> "void":
        r"""
        renumberValuesOnCellsR(MEDCouplingFieldDiscretization self, MEDCouplingMesh mesh, PyObject * new2old, int newSz, DataArrayDouble arr)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_renumberValuesOnCellsR(self, mesh, new2old, newSz, arr)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretization

# Register MEDCouplingFieldDiscretization in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretization_swigregister(MEDCouplingFieldDiscretization)

def MEDCouplingFieldDiscretization_New(type: 'MEDCoupling::TypeOfField') -> "MEDCoupling::MEDCouplingFieldDiscretization *":
    r"""
    MEDCouplingFieldDiscretization_New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldDiscretization
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_New(type)

def MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(repr: 'std::string const &') -> "MEDCoupling::TypeOfField":
    r"""
    MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(std::string const & repr) -> MEDCoupling::TypeOfField
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretization_GetTypeOfFieldFromStringRepr(repr)

class MEDCouplingFieldDiscretizationP0(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationP0

# Register MEDCouplingFieldDiscretizationP0 in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretizationP0_swigregister(MEDCouplingFieldDiscretizationP0)

class MEDCouplingFieldDiscretizationOnNodes(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationOnNodes

# Register MEDCouplingFieldDiscretizationOnNodes in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretizationOnNodes_swigregister(MEDCouplingFieldDiscretizationOnNodes)

class MEDCouplingFieldDiscretizationP1(MEDCouplingFieldDiscretizationOnNodes):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationP1

# Register MEDCouplingFieldDiscretizationP1 in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretizationP1_swigregister(MEDCouplingFieldDiscretizationP1)

class MEDCouplingFieldDiscretizationPerCell(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setArrayOfDiscIds(self, adids: 'DataArrayInt') -> "void":
        r"""
        setArrayOfDiscIds(MEDCouplingFieldDiscretizationPerCell self, DataArrayInt adids)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationPerCell_setArrayOfDiscIds(self, adids)

    def checkNoOrphanCells(self) -> "void":
        r"""
        checkNoOrphanCells(MEDCouplingFieldDiscretizationPerCell self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationPerCell_checkNoOrphanCells(self)

    def getArrayOfDiscIds(self) -> "PyObject *":
        r"""
        getArrayOfDiscIds(MEDCouplingFieldDiscretizationPerCell self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationPerCell_getArrayOfDiscIds(self)

    def splitIntoSingleGaussDicrPerCellType(self) -> "PyObject *":
        r"""
        splitIntoSingleGaussDicrPerCellType(MEDCouplingFieldDiscretizationPerCell self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationPerCell_splitIntoSingleGaussDicrPerCellType(self)

# Register MEDCouplingFieldDiscretizationPerCell in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretizationPerCell_swigregister(MEDCouplingFieldDiscretizationPerCell)

class MEDCouplingFieldDiscretizationGauss(MEDCouplingFieldDiscretizationPerCell):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(MEDCouplingFieldDiscretizationGauss self) -> MEDCouplingFieldDiscretizationGauss
        1
        """
        _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingFieldDiscretizationGauss())
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationGauss

# Register MEDCouplingFieldDiscretizationGauss in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretizationGauss_swigregister(MEDCouplingFieldDiscretizationGauss)

class MEDCouplingFieldDiscretizationGaussNE(MEDCouplingFieldDiscretization):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def GetWeightArrayFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        r"""
        GetWeightArrayFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(geoType)

    @staticmethod
    def GetRefCoordsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        r"""
        GetRefCoordsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(geoType)

    @staticmethod
    def GetLocsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        r"""
        GetLocsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(geoType)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationGaussNE

# Register MEDCouplingFieldDiscretizationGaussNE in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_swigregister(MEDCouplingFieldDiscretizationGaussNE)

def MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
    r"""
    MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_GetWeightArrayFromGeometricType(geoType)

def MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
    r"""
    MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_GetRefCoordsFromGeometricType(geoType)

def MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(geoType: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
    r"""
    MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(INTERP_KERNEL::NormalizedCellType geoType) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationGaussNE_GetLocsFromGeometricType(geoType)

class MEDCouplingFieldDiscretizationKriging(MEDCouplingFieldDiscretizationOnNodes):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def PerformDriftOfVec(arr: 'DataArrayDouble', isDrift: 'int') -> "MEDCoupling::DataArrayDouble *":
        r"""
        PerformDriftOfVec(DataArrayDouble arr, int isDrift) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(arr, isDrift)

    def computeVectorOfCoefficients(self, mesh: 'MEDCouplingMesh', arr: 'DataArrayDouble') -> "PyObject *":
        r"""
        computeVectorOfCoefficients(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_computeVectorOfCoefficients(self, mesh, arr)

    def computeInverseMatrix(self, mesh: 'MEDCouplingMesh') -> "PyObject *":
        r"""
        computeInverseMatrix(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_computeInverseMatrix(self, mesh)

    def computeMatrix(self, mesh: 'MEDCouplingMesh') -> "PyObject *":
        r"""
        computeMatrix(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_computeMatrix(self, mesh)

    def computeEvaluationMatrixOnGivenPts(self, mesh: 'MEDCouplingMesh', locs: 'PyObject *') -> "PyObject *":
        r"""
        computeEvaluationMatrixOnGivenPts(MEDCouplingFieldDiscretizationKriging self, MEDCouplingMesh mesh, PyObject * locs) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_computeEvaluationMatrixOnGivenPts(self, mesh, locs)

    def operateOnDenseMatrix(self, spaceDimension: 'int', myMatrix: 'DataArrayDouble') -> "void":
        r"""
        operateOnDenseMatrix(MEDCouplingFieldDiscretizationKriging self, int spaceDimension, DataArrayDouble myMatrix)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_operateOnDenseMatrix(self, spaceDimension, myMatrix)

    def performDrift(self, matr: 'DataArrayDouble', arr: 'DataArrayDouble') -> "PyObject *":
        r"""
        performDrift(MEDCouplingFieldDiscretizationKriging self, DataArrayDouble matr, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_performDrift(self, matr, arr)

    @staticmethod
    def PerformDriftRect(matr: 'DataArrayDouble', arr: 'DataArrayDouble') -> "PyObject *":
        r"""
        PerformDriftRect(DataArrayDouble matr, DataArrayDouble arr) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_PerformDriftRect(matr, arr)

    @staticmethod
    def OperateOnDenseMatrixH3(myMatrix: 'DataArrayDouble') -> "void":
        r"""
        OperateOnDenseMatrixH3(DataArrayDouble myMatrix)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(myMatrix)

    @staticmethod
    def OperateOnDenseMatrixH2Ln(myMatrix: 'DataArrayDouble') -> "void":
        r"""
        OperateOnDenseMatrixH2Ln(DataArrayDouble myMatrix)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(myMatrix)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDiscretizationKriging

# Register MEDCouplingFieldDiscretizationKriging in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_swigregister(MEDCouplingFieldDiscretizationKriging)

def MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(arr: 'DataArrayDouble', isDrift: 'int') -> "MEDCoupling::DataArrayDouble *":
    r"""
    MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(DataArrayDouble arr, int isDrift) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_PerformDriftOfVec(arr, isDrift)

def MEDCouplingFieldDiscretizationKriging_PerformDriftRect(matr: 'DataArrayDouble', arr: 'DataArrayDouble') -> "PyObject *":
    r"""
    MEDCouplingFieldDiscretizationKriging_PerformDriftRect(DataArrayDouble matr, DataArrayDouble arr) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_PerformDriftRect(matr, arr)

def MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(myMatrix: 'DataArrayDouble') -> "void":
    r"""
    MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(DataArrayDouble myMatrix)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH3(myMatrix)

def MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(myMatrix: 'DataArrayDouble') -> "void":
    r"""
    MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(DataArrayDouble myMatrix)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDiscretizationKriging_OperateOnDenseMatrixH2Ln(myMatrix)

class MEDCouplingPointSet(MEDCouplingMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setCoords(self, coords: 'DataArrayDouble') -> "void":
        r"""
        setCoords(MEDCouplingPointSet self, DataArrayDouble coords)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_setCoords(self, coords)

    def getCoordinatesAndOwner(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getCoordinatesAndOwner(MEDCouplingPointSet self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCoordinatesAndOwner(self)

    def areCoordsEqual(self, other: 'MEDCouplingPointSet', prec: 'double') -> "bool":
        r"""
        areCoordsEqual(MEDCouplingPointSet self, MEDCouplingPointSet other, double prec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_areCoordsEqual(self, other, prec)

    def zipCoords(self) -> "void":
        r"""
        zipCoords(MEDCouplingPointSet self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_zipCoords(self)

    def getCaracteristicDimension(self) -> "double":
        r"""
        getCaracteristicDimension(MEDCouplingPointSet self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCaracteristicDimension(self)

    def recenterForMaxPrecision(self, eps: 'double') -> "void":
        r"""
        recenterForMaxPrecision(MEDCouplingPointSet self, double eps)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_recenterForMaxPrecision(self, eps)

    def changeSpaceDimension(self, newSpaceDim: 'int', dftVal: 'double'=0.) -> "void":
        r"""
        changeSpaceDimension(MEDCouplingPointSet self, int newSpaceDim, double dftVal=0.)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_changeSpaceDimension(self, newSpaceDim, dftVal)

    def tryToShareSameCoords(self, other: 'MEDCouplingPointSet', epsilon: 'double') -> "void":
        r"""
        tryToShareSameCoords(MEDCouplingPointSet self, MEDCouplingPointSet other, double epsilon)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_tryToShareSameCoords(self, other, epsilon)

    def shallowCopyConnectivityFrom(self, other: 'MEDCouplingPointSet') -> "void":
        r"""
        shallowCopyConnectivityFrom(MEDCouplingPointSet self, MEDCouplingPointSet other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_shallowCopyConnectivityFrom(self, other)

    def buildPartOfMySelfSlice(self, start: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingPointSet *":
        r"""
        buildPartOfMySelfSlice(MEDCouplingPointSet self, int start, int end, int step) -> MEDCouplingPointSet
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelfSlice(self, start, end, step)

    def tryToShareSameCoordsPermute(self, other: 'MEDCouplingPointSet', epsilon: 'double') -> "void":
        r"""
        tryToShareSameCoordsPermute(MEDCouplingPointSet self, MEDCouplingPointSet other, double epsilon)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_tryToShareSameCoordsPermute(self, other, epsilon)

    @staticmethod
    def MergeNodesArray(m1: 'MEDCouplingPointSet', m2: 'MEDCouplingPointSet') -> "MEDCoupling::DataArrayDouble *":
        r"""
        MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_MergeNodesArray(m1, m2)

    @staticmethod
    def BuildInstanceFromMeshType(type: 'MEDCoupling::MEDCouplingMeshType') -> "MEDCoupling::MEDCouplingPointSet *":
        r"""
        BuildInstanceFromMeshType(MEDCoupling::MEDCouplingMeshType type) -> MEDCouplingPointSet
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_BuildInstanceFromMeshType(type)

    @staticmethod
    def ComputeNbOfInteractionsWithSrcCells(srcMesh: 'MEDCouplingPointSet', trgMesh: 'MEDCouplingPointSet', eps: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        ComputeNbOfInteractionsWithSrcCells(MEDCouplingPointSet srcMesh, MEDCouplingPointSet trgMesh, double eps) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(srcMesh, trgMesh, eps)

    def computeFetchedNodeIds(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        computeFetchedNodeIds(MEDCouplingPointSet self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_computeFetchedNodeIds(self)

    def getNumberOfNodesInCell(self, cellId: 'int') -> "int":
        r"""
        getNumberOfNodesInCell(MEDCouplingPointSet self, int cellId) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getNumberOfNodesInCell(self, cellId)

    def buildBoundaryMesh(self, keepCoords: 'bool') -> "MEDCoupling::MEDCouplingPointSet *":
        r"""
        buildBoundaryMesh(MEDCouplingPointSet self, bool keepCoords) -> MEDCouplingPointSet
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildBoundaryMesh(self, keepCoords)

    def zipCoordsTraducer(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        zipCoordsTraducer(MEDCouplingPointSet self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_zipCoordsTraducer(self)

    def findBoundaryNodes(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        findBoundaryNodes(MEDCouplingPointSet self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findBoundaryNodes(self)

    def zipConnectivityTraducer(self, compType: 'int', startCellId: 'int'=0) -> "MEDCoupling::DataArrayInt *":
        r"""
        zipConnectivityTraducer(MEDCouplingPointSet self, int compType, int startCellId=0) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_zipConnectivityTraducer(self, compType, startCellId)

    def mergeMyselfWithOnSameCoords(self, other: 'MEDCouplingPointSet') -> "MEDCoupling::MEDCouplingPointSet *":
        r"""
        mergeMyselfWithOnSameCoords(MEDCouplingPointSet self, MEDCouplingPointSet other) -> MEDCouplingPointSet
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_mergeMyselfWithOnSameCoords(self, other)

    def checkFullyDefined(self) -> "void":
        r"""
        checkFullyDefined(MEDCouplingPointSet self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_checkFullyDefined(self)

    def isEmptyMesh(self, tinyInfo: 'ivec') -> "bool":
        r"""
        isEmptyMesh(MEDCouplingPointSet self, ivec tinyInfo) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_isEmptyMesh(self, tinyInfo)

    def deepCopyConnectivityOnly(self) -> "MEDCoupling::MEDCouplingPointSet *":
        r"""
        deepCopyConnectivityOnly(MEDCouplingPointSet self) -> MEDCouplingPointSet
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_deepCopyConnectivityOnly(self)

    def getBoundingBoxForBBTree(self, arcDetEps: 'double'=1e-12) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getBoundingBoxForBBTree(MEDCouplingPointSet self, double arcDetEps=1e-12) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getBoundingBoxForBBTree(self, arcDetEps)

    def renumberNodesWithOffsetInConn(self, offset: 'int') -> "void":
        r"""
        renumberNodesWithOffsetInConn(MEDCouplingPointSet self, int offset)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_renumberNodesWithOffsetInConn(self, offset)

    def areAllNodesFetched(self) -> "bool":
        r"""
        areAllNodesFetched(MEDCouplingPointSet self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_areAllNodesFetched(self)

    def computeDiameterField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        computeDiameterField(MEDCouplingPointSet self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_computeDiameterField(self)

    def invertOrientationOfAllCells(self) -> "void":
        r"""
        invertOrientationOfAllCells(MEDCouplingPointSet self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_invertOrientationOfAllCells(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingPointSet self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet___str__(self)

    def buildNewNumberingFromCommonNodesFormat(self, comm: 'DataArrayInt', commIndex: 'DataArrayInt') -> "PyObject *":
        r"""
        buildNewNumberingFromCommonNodesFormat(MEDCouplingPointSet self, DataArrayInt comm, DataArrayInt commIndex) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildNewNumberingFromCommonNodesFormat(self, comm, commIndex)

    def findCommonNodes(self, prec: 'double', limitTupleId: 'int'=-1) -> "PyObject *":
        r"""
        findCommonNodes(MEDCouplingPointSet self, double prec, int limitTupleId=-1) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findCommonNodes(self, prec, limitTupleId)

    def getCoords(self) -> "PyObject *":
        r"""
        getCoords(MEDCouplingPointSet self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCoords(self)

    def buildPartOfMySelf(self, li: 'PyObject *', keepCoords: 'bool'=True) -> "PyObject *":
        r"""
        buildPartOfMySelf(MEDCouplingPointSet self, PyObject * li, bool keepCoords=True) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelf(self, li, keepCoords)

    def buildPartOfMySelfNode(self, li: 'PyObject *', fullyIn: 'bool') -> "PyObject *":
        r"""
        buildPartOfMySelfNode(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelfNode(self, li, fullyIn)

    def buildPartOfMySelfKeepCoords(self, li: 'PyObject *') -> "PyObject *":
        r"""
        buildPartOfMySelfKeepCoords(MEDCouplingPointSet self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelfKeepCoords(self, li)

    def buildPartOfMySelfKeepCoordsSlice(self, start: 'int', end: 'int', step: 'int') -> "PyObject *":
        r"""
        buildPartOfMySelfKeepCoordsSlice(MEDCouplingPointSet self, int start, int end, int step) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildPartOfMySelfKeepCoordsSlice(self, start, end, step)

    def buildFacePartOfMySelfNode(self, li: 'PyObject *', fullyIn: 'bool') -> "PyObject *":
        r"""
        buildFacePartOfMySelfNode(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_buildFacePartOfMySelfNode(self, li, fullyIn)

    def renumberNodes(self, li: 'PyObject *', newNbOfNodes: 'int') -> "void":
        r"""
        renumberNodes(MEDCouplingPointSet self, PyObject * li, int newNbOfNodes)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_renumberNodes(self, li, newNbOfNodes)

    def renumberNodesCenter(self, li: 'PyObject *', newNbOfNodes: 'int') -> "void":
        r"""
        renumberNodesCenter(MEDCouplingPointSet self, PyObject * li, int newNbOfNodes)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_renumberNodesCenter(self, li, newNbOfNodes)

    def findNodesOnLine(self, pt: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        r"""
        findNodesOnLine(MEDCouplingPointSet self, PyObject * pt, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findNodesOnLine(self, pt, vec, eps)

    def findNodesOnPlane(self, pt: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        r"""
        findNodesOnPlane(MEDCouplingPointSet self, PyObject * pt, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findNodesOnPlane(self, pt, vec, eps)

    def getNodeIdsNearPoint(self, pt: 'PyObject *', eps: 'double') -> "PyObject *":
        r"""
        getNodeIdsNearPoint(MEDCouplingPointSet self, PyObject * pt, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getNodeIdsNearPoint(self, pt, eps)

    def getNodeIdsNearPoints(self, *args) -> "PyObject *":
        r"""
        getNodeIdsNearPoints(MEDCouplingPointSet self, PyObject * pt, int nbOfPoints, double eps) -> PyObject
        getNodeIdsNearPoints(MEDCouplingPointSet self, PyObject * pt, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getNodeIdsNearPoints(self, *args)

    def getCellsInBoundingBox(self, *args) -> "PyObject *":
        r"""
        getCellsInBoundingBox(MEDCouplingPointSet self, INTERP_KERNEL::DirectedBoundingBox const & bbox, double eps) -> DataArrayInt
        getCellsInBoundingBox(MEDCouplingPointSet self, PyObject * bbox, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCellsInBoundingBox(self, *args)

    def duplicateNodesInCoords(self, li: 'PyObject *') -> "void":
        r"""
        duplicateNodesInCoords(MEDCouplingPointSet self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_duplicateNodesInCoords(self, li)

    def findCommonCells(self, compType: 'int', startCellId: 'int'=0) -> "PyObject *":
        r"""
        findCommonCells(MEDCouplingPointSet self, int compType, int startCellId=0) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_findCommonCells(self, compType, startCellId)

    def renumberNodesInConn(self, li: 'PyObject *') -> "void":
        r"""
        renumberNodesInConn(MEDCouplingPointSet self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_renumberNodesInConn(self, li)

    def getNodeIdsInUse(self) -> "PyObject *":
        r"""
        getNodeIdsInUse(MEDCouplingPointSet self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getNodeIdsInUse(self)

    def fillCellIdsToKeepFromNodeIds(self, li: 'PyObject *', fullyIn: 'bool') -> "MEDCoupling::DataArrayInt *":
        r"""
        fillCellIdsToKeepFromNodeIds(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_fillCellIdsToKeepFromNodeIds(self, li, fullyIn)

    def mergeNodes(self, precision: 'double') -> "PyObject *":
        r"""
        mergeNodes(MEDCouplingPointSet self, double precision) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_mergeNodes(self, precision)

    def mergeNodesCenter(self, precision: 'double') -> "PyObject *":
        r"""
        mergeNodesCenter(MEDCouplingPointSet self, double precision) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_mergeNodesCenter(self, precision)

    def getCellIdsLyingOnNodes(self, li: 'PyObject *', fullyIn: 'bool') -> "MEDCoupling::DataArrayInt *":
        r"""
        getCellIdsLyingOnNodes(MEDCouplingPointSet self, PyObject * li, bool fullyIn) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_getCellIdsLyingOnNodes(self, li, fullyIn)

    def __getitem__(self, listOrDataArrI: 'PyObject *') -> "MEDCoupling::MEDCouplingPointSet *":
        r"""
        __getitem__(MEDCouplingPointSet self, PyObject * listOrDataArrI) -> MEDCouplingPointSet
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet___getitem__(self, listOrDataArrI)

    @staticmethod
    def Rotate2DAlg(*args) -> "void":
        r"""
        Rotate2DAlg(PyObject * center, double angle, int nbNodes, PyObject * coords)
        Rotate2DAlg(PyObject * center, double angle, PyObject * coords)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate2DAlg(*args)

    @staticmethod
    def Rotate3DAlg(*args) -> "void":
        r"""
        Rotate3DAlg(PyObject * center, PyObject * vect, double angle, int nbNodes, PyObject * coords)
        Rotate3DAlg(PyObject * center, PyObject * vect, double angle, PyObject * coords)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate3DAlg(*args)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingPointSet

# Register MEDCouplingPointSet in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingPointSet_swigregister(MEDCouplingPointSet)

def MEDCouplingPointSet_MergeNodesArray(m1: 'MEDCouplingPointSet', m2: 'MEDCouplingPointSet') -> "MEDCoupling::DataArrayDouble *":
    r"""
    MEDCouplingPointSet_MergeNodesArray(MEDCouplingPointSet m1, MEDCouplingPointSet m2) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingPointSet_MergeNodesArray(m1, m2)

def MEDCouplingPointSet_BuildInstanceFromMeshType(type: 'MEDCoupling::MEDCouplingMeshType') -> "MEDCoupling::MEDCouplingPointSet *":
    r"""
    MEDCouplingPointSet_BuildInstanceFromMeshType(MEDCoupling::MEDCouplingMeshType type) -> MEDCouplingPointSet
    1
    """
    return _MEDCouplingRemapper.MEDCouplingPointSet_BuildInstanceFromMeshType(type)

def MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(srcMesh: 'MEDCouplingPointSet', trgMesh: 'MEDCouplingPointSet', eps: 'double') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(MEDCouplingPointSet srcMesh, MEDCouplingPointSet trgMesh, double eps) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingPointSet_ComputeNbOfInteractionsWithSrcCells(srcMesh, trgMesh, eps)

def MEDCouplingPointSet_Rotate2DAlg(*args) -> "void":
    r"""
    MEDCouplingPointSet_Rotate2DAlg(PyObject * center, double angle, int nbNodes, PyObject * coords)
    MEDCouplingPointSet_Rotate2DAlg(PyObject * center, double angle, PyObject * coords)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate2DAlg(*args)

def MEDCouplingPointSet_Rotate3DAlg(*args) -> "void":
    r"""
    MEDCouplingPointSet_Rotate3DAlg(PyObject * center, PyObject * vect, double angle, int nbNodes, PyObject * coords)
    MEDCouplingPointSet_Rotate3DAlg(PyObject * center, PyObject * vect, double angle, PyObject * coords)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingPointSet_Rotate3DAlg(*args)

class MEDCouplingUMeshCell(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getType(self) -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        getType(MEDCouplingUMeshCell self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCell_getType(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingUMeshCell self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCell___str__(self)

    def getAllConn(self) -> "PyObject *":
        r"""
        getAllConn(MEDCouplingUMeshCell self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCell_getAllConn(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCell

# Register MEDCouplingUMeshCell in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingUMeshCell_swigregister(MEDCouplingUMeshCell)

class MEDCouplingUMeshCellIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def next(self) -> "PyObject *":
        r"""
        next(MEDCouplingUMeshCellIterator self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellIterator_next(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellIterator

# Register MEDCouplingUMeshCellIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingUMeshCellIterator_swigregister(MEDCouplingUMeshCellIterator)

class MEDCouplingUMeshCellByTypeIterator(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellByTypeIterator

    def next(self) -> "PyObject *":
        r"""
        next(MEDCouplingUMeshCellByTypeIterator self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellByTypeIterator_next(self)

# Register MEDCouplingUMeshCellByTypeIterator in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingUMeshCellByTypeIterator_swigregister(MEDCouplingUMeshCellByTypeIterator)

class MEDCouplingUMeshCellByTypeEntry(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellByTypeEntry

    def __iter__(self) -> "MEDCoupling::MEDCouplingUMeshCellByTypeIterator *":
        r"""
        __iter__(MEDCouplingUMeshCellByTypeEntry self) -> MEDCouplingUMeshCellByTypeIterator
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellByTypeEntry___iter__(self)

# Register MEDCouplingUMeshCellByTypeEntry in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingUMeshCellByTypeEntry_swigregister(MEDCouplingUMeshCellByTypeEntry)

class MEDCouplingUMeshCellEntry(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getType(self) -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        getType(MEDCouplingUMeshCellEntry self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellEntry_getType(self)

    def getNumberOfElems(self) -> "int":
        r"""
        getNumberOfElems(MEDCouplingUMeshCellEntry self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellEntry_getNumberOfElems(self)

    def __iter__(self) -> "MEDCoupling::MEDCouplingUMeshCellIterator *":
        r"""
        __iter__(MEDCouplingUMeshCellEntry self) -> MEDCouplingUMeshCellIterator
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMeshCellEntry___iter__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMeshCellEntry

# Register MEDCouplingUMeshCellEntry in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingUMeshCellEntry_swigregister(MEDCouplingUMeshCellEntry)

class MEDCouplingUMesh(MEDCouplingPointSet):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        New() -> MEDCouplingUMesh
        New(char const * meshName, int meshDim) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_New(*args)

    def checkConsistencyLight(self) -> "void":
        r"""
        checkConsistencyLight(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkConsistencyLight(self)

    def setMeshDimension(self, meshDim: 'int') -> "void":
        r"""
        setMeshDimension(MEDCouplingUMesh self, int meshDim)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setMeshDimension(self, meshDim)

    def allocateCells(self, nbOfCells: 'int'=0) -> "void":
        r"""
        allocateCells(MEDCouplingUMesh self, int nbOfCells=0)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_allocateCells(self, nbOfCells)

    def finishInsertingCells(self) -> "void":
        r"""
        finishInsertingCells(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_finishInsertingCells(self)

    def cellsByType(self) -> "MEDCoupling::MEDCouplingUMeshCellByTypeEntry *":
        r"""
        cellsByType(MEDCouplingUMesh self) -> MEDCouplingUMeshCellByTypeEntry
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_cellsByType(self)

    def setConnectivity(self, conn: 'DataArrayInt', connIndex: 'DataArrayInt', isComputingTypes: 'bool'=True) -> "void":
        r"""
        setConnectivity(MEDCouplingUMesh self, DataArrayInt conn, DataArrayInt connIndex, bool isComputingTypes=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setConnectivity(self, conn, connIndex, isComputingTypes)

    def getTypeOfCell(self, cellId: 'int') -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        getTypeOfCell(MEDCouplingUMesh self, int cellId) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getTypeOfCell(self, cellId)

    def setPartOfMySelfSlice(self, start: 'int', end: 'int', step: 'int', otherOnSameCoordsThanThis: 'MEDCouplingUMesh') -> "void":
        r"""
        setPartOfMySelfSlice(MEDCouplingUMesh self, int start, int end, int step, MEDCouplingUMesh otherOnSameCoordsThanThis)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setPartOfMySelfSlice(self, start, end, step, otherOnSameCoordsThanThis)

    def getNodalConnectivityArrayLen(self) -> "int":
        r"""
        getNodalConnectivityArrayLen(MEDCouplingUMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getNodalConnectivityArrayLen(self)

    def computeTypes(self) -> "void":
        r"""
        computeTypes(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeTypes(self)

    def reprConnectivityOfThis(self) -> "std::string":
        r"""
        reprConnectivityOfThis(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_reprConnectivityOfThis(self)

    def buildSetInstanceFromThis(self, spaceDim: 'int') -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        buildSetInstanceFromThis(MEDCouplingUMesh self, int spaceDim) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSetInstanceFromThis(self, spaceDim)

    def conformize2D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        conformize2D(MEDCouplingUMesh self, double eps) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_conformize2D(self, eps)

    def conformize3D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        conformize3D(MEDCouplingUMesh self, double eps) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_conformize3D(self, eps)

    def colinearize2D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        colinearize2D(MEDCouplingUMesh self, double eps) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_colinearize2D(self, eps)

    def colinearizeKeepingConform2D(self, eps: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        colinearizeKeepingConform2D(MEDCouplingUMesh self, double eps) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_colinearizeKeepingConform2D(self, eps)

    def shiftNodeNumbersInConn(self, delta: 'int') -> "void":
        r"""
        shiftNodeNumbersInConn(MEDCouplingUMesh self, int delta)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_shiftNodeNumbersInConn(self, delta)

    def getQuadraticStatus(self) -> "std::vector< bool,std::allocator< bool > >":
        r"""
        getQuadraticStatus(MEDCouplingUMesh self) -> std::vector< bool,std::allocator< bool > >
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getQuadraticStatus(self)

    def findCellIdsOnBoundary(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        findCellIdsOnBoundary(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findCellIdsOnBoundary(self)

    def computeSkin(self) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        computeSkin(MEDCouplingUMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeSkin(self)

    def checkConsecutiveCellTypes(self) -> "bool":
        r"""
        checkConsecutiveCellTypes(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkConsecutiveCellTypes(self)

    def checkConsecutiveCellTypesForMEDFileFrmt(self) -> "bool":
        r"""
        checkConsecutiveCellTypesForMEDFileFrmt(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkConsecutiveCellTypesForMEDFileFrmt(self)

    def rearrange2ConsecutiveCellTypes(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        rearrange2ConsecutiveCellTypes(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_rearrange2ConsecutiveCellTypes(self)

    def sortCellsInMEDFileFrmt(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        sortCellsInMEDFileFrmt(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_sortCellsInMEDFileFrmt(self)

    def getRenumArrForMEDFileFrmt(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getRenumArrForMEDFileFrmt(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getRenumArrForMEDFileFrmt(self)

    def convertCellArrayPerGeoType(self, da: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        convertCellArrayPerGeoType(MEDCouplingUMesh self, DataArrayInt da) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertCellArrayPerGeoType(self, da)

    def orientCorrectlyPolyhedrons(self) -> "void":
        r"""
        orientCorrectlyPolyhedrons(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_orientCorrectlyPolyhedrons(self)

    def isPresenceOfQuadratic(self) -> "bool":
        r"""
        isPresenceOfQuadratic(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_isPresenceOfQuadratic(self)

    def isFullyQuadratic(self) -> "bool":
        r"""
        isFullyQuadratic(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_isFullyQuadratic(self)

    def buildDirectionVectorField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildDirectionVectorField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildDirectionVectorField(self)

    def isContiguous1D(self) -> "bool":
        r"""
        isContiguous1D(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_isContiguous1D(self)

    def tessellate2D(self, eps: 'double') -> "void":
        r"""
        tessellate2D(MEDCouplingUMesh self, double eps)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_tessellate2D(self, eps)

    def convertQuadraticCellsToLinear(self) -> "void":
        r"""
        convertQuadraticCellsToLinear(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertQuadraticCellsToLinear(self)

    def convertLinearCellsToQuadratic(self, conversionType: 'int'=0) -> "MEDCoupling::DataArrayInt *":
        r"""
        convertLinearCellsToQuadratic(MEDCouplingUMesh self, int conversionType=0) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertLinearCellsToQuadratic(self, conversionType)

    def convertDegeneratedCells(self) -> "void":
        r"""
        convertDegeneratedCells(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertDegeneratedCells(self)

    def convertDegeneratedCellsAndRemoveFlatOnes(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        convertDegeneratedCellsAndRemoveFlatOnes(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertDegeneratedCellsAndRemoveFlatOnes(self)

    def removeDegenerated1DCells(self) -> "bool":
        r"""
        removeDegenerated1DCells(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_removeDegenerated1DCells(self)

    def areOnlySimplexCells(self) -> "bool":
        r"""
        areOnlySimplexCells(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_areOnlySimplexCells(self)

    def getEdgeRatioField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        getEdgeRatioField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getEdgeRatioField(self)

    def getAspectRatioField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        getAspectRatioField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getAspectRatioField(self)

    def getWarpField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        getWarpField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getWarpField(self)

    def getSkewField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        getSkewField(MEDCouplingUMesh self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getSkewField(self)

    def computePlaneEquationOf3DFaces(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        computePlaneEquationOf3DFaces(MEDCouplingUMesh self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computePlaneEquationOf3DFaces(self)

    def convexEnvelop2D(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        convexEnvelop2D(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convexEnvelop2D(self)

    def cppRepr(self) -> "std::string":
        r"""
        cppRepr(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_cppRepr(self)

    def findAndCorrectBadOriented3DExtrudedCells(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        findAndCorrectBadOriented3DExtrudedCells(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findAndCorrectBadOriented3DExtrudedCells(self)

    def findAndCorrectBadOriented3DCells(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        findAndCorrectBadOriented3DCells(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findAndCorrectBadOriented3DCells(self)

    def convertIntoSingleGeoTypeMesh(self) -> "MEDCoupling::MEDCoupling1GTUMesh *":
        r"""
        convertIntoSingleGeoTypeMesh(MEDCouplingUMesh self) -> MEDCoupling1GTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertIntoSingleGeoTypeMesh(self)

    def generateGraph(self) -> "MEDCoupling::MEDCouplingSkyLineArray *":
        r"""
        generateGraph(MEDCouplingUMesh self) -> MEDCouplingSkyLineArray
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_generateGraph(self)

    def convertNodalConnectivityToStaticGeoTypeMesh(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        convertNodalConnectivityToStaticGeoTypeMesh(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertNodalConnectivityToStaticGeoTypeMesh(self)

    def buildUnionOf2DMesh(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        buildUnionOf2DMesh(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildUnionOf2DMesh(self)

    def buildUnionOf3DMesh(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        buildUnionOf3DMesh(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildUnionOf3DMesh(self)

    def orderConsecutiveCells1D(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        orderConsecutiveCells1D(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_orderConsecutiveCells1D(self)

    def getBoundingBoxForBBTreeFast(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getBoundingBoxForBBTreeFast(MEDCouplingUMesh self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getBoundingBoxForBBTreeFast(self)

    def getBoundingBoxForBBTree2DQuadratic(self, arcDetEps: 'double'=1e-12) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getBoundingBoxForBBTree2DQuadratic(MEDCouplingUMesh self, double arcDetEps=1e-12) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getBoundingBoxForBBTree2DQuadratic(self, arcDetEps)

    def getBoundingBoxForBBTree1DQuadratic(self, arcDetEps: 'double'=1e-12) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getBoundingBoxForBBTree1DQuadratic(MEDCouplingUMesh self, double arcDetEps=1e-12) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getBoundingBoxForBBTree1DQuadratic(self, arcDetEps)

    def changeOrientationOfCells(self) -> "void":
        r"""
        changeOrientationOfCells(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_changeOrientationOfCells(self)

    def computeCellCenterOfMassWithPrecision(self, eps: 'double') -> "MEDCoupling::DataArrayDouble *":
        r"""
        computeCellCenterOfMassWithPrecision(MEDCouplingUMesh self, double eps) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeCellCenterOfMassWithPrecision(self, eps)

    def split2DCells(self, desc: 'DataArrayInt', descI: 'DataArrayInt', subNodesInSeg: 'DataArrayInt', subNodesInSegI: 'DataArrayInt', midOpt: 'DataArrayInt'=None, midOptI: 'DataArrayInt'=None) -> "int":
        r"""
        split2DCells(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descI, DataArrayInt subNodesInSeg, DataArrayInt subNodesInSegI, DataArrayInt midOpt=None, DataArrayInt midOptI=None) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_split2DCells(self, desc, descI, subNodesInSeg, subNodesInSegI, midOpt, midOptI)

    @staticmethod
    def Build0DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_Build0DMeshFromCoords(da)

    @staticmethod
    def ComputeSpreadZoneGradually(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeSpreadZoneGradually(arrIn, arrIndxIn)

    @staticmethod
    def ComputeRangesFromTypeDistribution(code: 'ivec') -> "MEDCoupling::DataArrayInt *":
        r"""
        ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(code)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingUMesh self) -> MEDCouplingUMesh
        __init__(MEDCouplingUMesh self, char const * meshName, int meshDim) -> MEDCouplingUMesh
        1
        """
        _MEDCouplingRemapper.MEDCouplingUMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingUMesh(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___repr__(self)

    def __iter__(self) -> "MEDCoupling::MEDCouplingUMeshCellIterator *":
        r"""
        __iter__(MEDCouplingUMesh self) -> MEDCouplingUMeshCellIterator
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___iter__(self)

    @staticmethod
    def Build1DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        Build1DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_Build1DMeshFromCoords(da)

    def getAllGeoTypesSorted(self) -> "PyObject *":
        r"""
        getAllGeoTypesSorted(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getAllGeoTypesSorted(self)

    def setPartOfMySelf(self, li: 'PyObject *', otherOnSameCoordsThanThis: 'MEDCouplingUMesh') -> "void":
        r"""
        setPartOfMySelf(MEDCouplingUMesh self, PyObject * li, MEDCouplingUMesh otherOnSameCoordsThanThis)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_setPartOfMySelf(self, li, otherOnSameCoordsThanThis)

    def __setitem__(self, li: 'PyObject *', otherOnSameCoordsThanThis: 'MEDCouplingUMesh') -> "void":
        r"""
        __setitem__(MEDCouplingUMesh self, PyObject * li, MEDCouplingUMesh otherOnSameCoordsThanThis)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh___setitem__(self, li, otherOnSameCoordsThanThis)

    def insertNextCell(self, *args) -> "void":
        r"""
        insertNextCell(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, int size, PyObject * li)
        insertNextCell(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_insertNextCell(self, *args)

    def getNodalConnectivity(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getNodalConnectivity(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getNodalConnectivity(self)

    def getNodalConnectivityIndex(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getNodalConnectivityIndex(MEDCouplingUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getNodalConnectivityIndex(self)

    @staticmethod
    def ComputeSpreadZoneGraduallyFromSeed(seed: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', nbOfDepthPeeling: 'int'=-1) -> "PyObject *":
        r"""
        ComputeSpreadZoneGraduallyFromSeed(PyObject * seed, DataArrayInt arrIn, DataArrayInt arrIndxIn, int nbOfDepthPeeling=-1) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(seed, arrIn, arrIndxIn, nbOfDepthPeeling)

    @staticmethod
    def FindCommonCellsAlg(compType: 'int', startCellId: 'int', nodal: 'DataArrayInt', nodalI: 'DataArrayInt', revNodal: 'DataArrayInt', revNodalI: 'DataArrayInt') -> "PyObject *":
        r"""
        FindCommonCellsAlg(int compType, int startCellId, DataArrayInt nodal, DataArrayInt nodalI, DataArrayInt revNodal, DataArrayInt revNodalI) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_FindCommonCellsAlg(compType, startCellId, nodal, nodalI, revNodal, revNodalI)

    def distanceToPoint(self, point: 'PyObject *') -> "PyObject *":
        r"""
        distanceToPoint(MEDCouplingUMesh self, PyObject * point) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_distanceToPoint(self, point)

    def distanceToPoints(self, pts: 'DataArrayDouble') -> "PyObject *":
        r"""
        distanceToPoints(MEDCouplingUMesh self, DataArrayDouble pts) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_distanceToPoints(self, pts)

    def tetrahedrize(self, policy: 'int') -> "PyObject *":
        r"""
        tetrahedrize(MEDCouplingUMesh self, int policy) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_tetrahedrize(self, policy)

    def checkButterflyCells(self, eps: 'double'=1e-12) -> "PyObject *":
        r"""
        checkButterflyCells(MEDCouplingUMesh self, double eps=1e-12) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkButterflyCells(self, eps)

    def splitByType(self) -> "PyObject *":
        r"""
        splitByType(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_splitByType(self)

    def partitionBySpreadZone(self) -> "PyObject *":
        r"""
        partitionBySpreadZone(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_partitionBySpreadZone(self)

    @staticmethod
    def PartitionBySpreadZone(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
        r"""
        PartitionBySpreadZone(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_PartitionBySpreadZone(arrIn, arrIndxIn)

    def keepSpecifiedCells(self, type: 'INTERP_KERNEL::NormalizedCellType', ids: 'PyObject *') -> "PyObject *":
        r"""
        keepSpecifiedCells(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, PyObject * ids) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_keepSpecifiedCells(self, type, ids)

    def checkConsecutiveCellTypesAndOrder(self, li: 'PyObject *') -> "bool":
        r"""
        checkConsecutiveCellTypesAndOrder(MEDCouplingUMesh self, PyObject * li) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_checkConsecutiveCellTypesAndOrder(self, li)

    def getRenumArrForConsecutiveCellTypesSpec(self, li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        getRenumArrForConsecutiveCellTypesSpec(MEDCouplingUMesh self, PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getRenumArrForConsecutiveCellTypesSpec(self, li)

    def findNodesToDuplicate(self, otherDimM1OnSameCoords: 'MEDCouplingUMesh') -> "PyObject *":
        r"""
        findNodesToDuplicate(MEDCouplingUMesh self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findNodesToDuplicate(self, otherDimM1OnSameCoords)

    def findCellIdsLyingOn(self, otherDimM1OnSameCoords: 'MEDCouplingUMesh') -> "PyObject *":
        r"""
        findCellIdsLyingOn(MEDCouplingUMesh self, MEDCouplingUMesh otherDimM1OnSameCoords) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_findCellIdsLyingOn(self, otherDimM1OnSameCoords)

    def duplicateNodes(self, li: 'PyObject *') -> "void":
        r"""
        duplicateNodes(MEDCouplingUMesh self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_duplicateNodes(self, li)

    def duplicateNodesInConn(self, li: 'PyObject *', offset: 'int') -> "void":
        r"""
        duplicateNodesInConn(MEDCouplingUMesh self, PyObject * li, int offset)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_duplicateNodesInConn(self, li, offset)

    def attractSeg3MidPtsAroundNodes(self, ratio: 'double', nodeIds: 'PyObject *') -> "void":
        r"""
        attractSeg3MidPtsAroundNodes(MEDCouplingUMesh self, double ratio, PyObject * nodeIds)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_attractSeg3MidPtsAroundNodes(self, ratio, nodeIds)

    def getLevArrPerCellTypes(self, li: 'PyObject *') -> "PyObject *":
        r"""
        getLevArrPerCellTypes(MEDCouplingUMesh self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getLevArrPerCellTypes(self, li)

    def convertNodalConnectivityToDynamicGeoTypeMesh(self) -> "PyObject *":
        r"""
        convertNodalConnectivityToDynamicGeoTypeMesh(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertNodalConnectivityToDynamicGeoTypeMesh(self)

    @staticmethod
    def AggregateSortedByTypeMeshesOnSameCoords(ms: 'PyObject *') -> "PyObject *":
        r"""
        AggregateSortedByTypeMeshesOnSameCoords(PyObject * ms) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(ms)

    @staticmethod
    def MergeUMeshesOnSameCoords(*args) -> "PyObject *":
        r"""
        MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshesOnSameCoords(PyObject * ms) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

    @staticmethod
    def FuseUMeshesOnSameCoords(ms: 'PyObject *', compType: 'int') -> "PyObject *":
        r"""
        FuseUMeshesOnSameCoords(PyObject * ms, int compType) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_FuseUMeshesOnSameCoords(ms, compType)

    @staticmethod
    def PutUMeshesOnSameAggregatedCoords(ms: 'PyObject *') -> "void":
        r"""
        PutUMeshesOnSameAggregatedCoords(PyObject * ms)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(ms)

    @staticmethod
    def MergeNodesOnUMeshesSharingSameCoords(ms: 'PyObject *', eps: 'double') -> "void":
        r"""
        MergeNodesOnUMeshesSharingSameCoords(PyObject * ms, double eps)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(ms, eps)

    def are2DCellsNotCorrectlyOriented(self, vec: 'PyObject *', polyOnly: 'bool') -> "PyObject *":
        r"""
        are2DCellsNotCorrectlyOriented(MEDCouplingUMesh self, PyObject * vec, bool polyOnly) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_are2DCellsNotCorrectlyOriented(self, vec, polyOnly)

    def orientCorrectly2DCells(self, vec: 'PyObject *', polyOnly: 'bool') -> "void":
        r"""
        orientCorrectly2DCells(MEDCouplingUMesh self, PyObject * vec, bool polyOnly)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_orientCorrectly2DCells(self, vec, polyOnly)

    def arePolyhedronsNotCorrectlyOriented(self) -> "PyObject *":
        r"""
        arePolyhedronsNotCorrectlyOriented(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_arePolyhedronsNotCorrectlyOriented(self)

    def getFastAveragePlaneOfThis(self) -> "PyObject *":
        r"""
        getFastAveragePlaneOfThis(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getFastAveragePlaneOfThis(self)

    @staticmethod
    def MergeUMeshes(*args) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
        MergeUMeshes(PyObject * li) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshes(*args)

    def areCellsIncludedIn(self, other: 'MEDCouplingUMesh', compType: 'int') -> "PyObject *":
        r"""
        areCellsIncludedIn(MEDCouplingUMesh self, MEDCouplingUMesh other, int compType) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_areCellsIncludedIn(self, other, compType)

    def areCellsIncludedInPolicy7(self, other: 'MEDCouplingUMesh') -> "PyObject *":
        r"""
        areCellsIncludedInPolicy7(MEDCouplingUMesh self, MEDCouplingUMesh other) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_areCellsIncludedInPolicy7(self, other)

    def explode3DMeshTo1D(self, *args) -> "PyObject *":
        r"""
        explode3DMeshTo1D(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        explode3DMeshTo1D(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_explode3DMeshTo1D(self, *args)

    def explodeIntoEdges(self) -> "PyObject *":
        r"""
        explodeIntoEdges(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_explodeIntoEdges(self)

    def explodeMeshIntoMicroEdges(self, *args) -> "PyObject *":
        r"""
        explodeMeshIntoMicroEdges(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        explodeMeshIntoMicroEdges(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_explodeMeshIntoMicroEdges(self, *args)

    def buildDescendingConnectivity(self, *args) -> "PyObject *":
        r"""
        buildDescendingConnectivity(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildDescendingConnectivity(self, *args)

    def buildDescendingConnectivity2(self, *args) -> "PyObject *":
        r"""
        buildDescendingConnectivity2(MEDCouplingUMesh self, DataArrayInt desc, DataArrayInt descIndx, DataArrayInt revDesc, DataArrayInt revDescIndx) -> MEDCouplingUMesh
        buildDescendingConnectivity2(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildDescendingConnectivity2(self, *args)

    def computeNeighborsOfCells(self) -> "PyObject *":
        r"""
        computeNeighborsOfCells(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeNeighborsOfCells(self)

    def computeNeighborsOfNodes(self) -> "PyObject *":
        r"""
        computeNeighborsOfNodes(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeNeighborsOfNodes(self)

    def computeEnlargedNeighborsOfNodes(self) -> "PyObject *":
        r"""
        computeEnlargedNeighborsOfNodes(MEDCouplingUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeEnlargedNeighborsOfNodes(self)

    def computeCellNeighborhoodFromNodesOne(self, nodeNeigh: 'DataArrayInt', nodeNeighI: 'DataArrayInt') -> "PyObject *":
        r"""
        computeCellNeighborhoodFromNodesOne(MEDCouplingUMesh self, DataArrayInt nodeNeigh, DataArrayInt nodeNeighI) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_computeCellNeighborhoodFromNodesOne(self, nodeNeigh, nodeNeighI)

    @staticmethod
    def ComputeNeighborsOfCellsAdv(desc: 'DataArrayInt', descI: 'DataArrayInt', revDesc: 'DataArrayInt', revDescI: 'DataArrayInt') -> "PyObject *":
        r"""
        ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, DataArrayInt revDescI) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(desc, descI, revDesc, revDescI)

    def emulateMEDMEMBDC(self, nM1LevMesh: 'MEDCouplingUMesh') -> "PyObject *":
        r"""
        emulateMEDMEMBDC(MEDCouplingUMesh self, MEDCouplingUMesh nM1LevMesh) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_emulateMEDMEMBDC(self, nM1LevMesh)

    def getPartBarycenterAndOwner(self, da: 'DataArrayInt') -> "MEDCoupling::DataArrayDouble *":
        r"""
        getPartBarycenterAndOwner(MEDCouplingUMesh self, DataArrayInt da) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getPartBarycenterAndOwner(self, da)

    def getPartMeasureField(self, isAbs: 'bool', da: 'DataArrayInt') -> "MEDCoupling::DataArrayDouble *":
        r"""
        getPartMeasureField(MEDCouplingUMesh self, bool isAbs, DataArrayInt da) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getPartMeasureField(self, isAbs, da)

    def buildPartOrthogonalField(self, da: 'DataArrayInt') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildPartOrthogonalField(MEDCouplingUMesh self, DataArrayInt da) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildPartOrthogonalField(self, da)

    def getTypesOfPart(self, da: 'DataArrayInt') -> "PyObject *":
        r"""
        getTypesOfPart(MEDCouplingUMesh self, DataArrayInt da) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getTypesOfPart(self, da)

    def keepCellIdsByType(self, type: 'INTERP_KERNEL::NormalizedCellType', da: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
        r"""
        keepCellIdsByType(MEDCouplingUMesh self, INTERP_KERNEL::NormalizedCellType type, DataArrayInt da) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_keepCellIdsByType(self, type, da)

    @staticmethod
    def Intersect2DMeshes(m1: 'MEDCouplingUMesh', m2: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
        r"""
        Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_Intersect2DMeshes(m1, m2, eps)

    @staticmethod
    def Intersect2DMeshWith1DLine(mesh2D: 'MEDCouplingUMesh', mesh1D: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
        r"""
        Intersect2DMeshWith1DLine(MEDCouplingUMesh mesh2D, MEDCouplingUMesh mesh1D, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_Intersect2DMeshWith1DLine(mesh2D, mesh1D, eps)

    def buildSlice3D(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        r"""
        buildSlice3D(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSlice3D(self, origin, vec, eps)

    def buildSlice3DSurf(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "PyObject *":
        r"""
        buildSlice3DSurf(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSlice3DSurf(self, origin, vec, eps)

    def clipSingle3DCellByPlane(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        clipSingle3DCellByPlane(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_clipSingle3DCellByPlane(self, origin, vec, eps)

    def getCellIdsCrossingPlane(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        getCellIdsCrossingPlane(MEDCouplingUMesh self, PyObject * origin, PyObject * vec, double eps) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_getCellIdsCrossingPlane(self, origin, vec, eps)

    def convertToPolyTypes(self, li: 'PyObject *') -> "void":
        r"""
        convertToPolyTypes(MEDCouplingUMesh self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertToPolyTypes(self, li)

    def convertAllToPoly(self) -> "void":
        r"""
        convertAllToPoly(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertAllToPoly(self)

    def convertExtrudedPolyhedra(self) -> "void":
        r"""
        convertExtrudedPolyhedra(MEDCouplingUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_convertExtrudedPolyhedra(self)

    def unPolyze(self) -> "bool":
        r"""
        unPolyze(MEDCouplingUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_unPolyze(self)

    def simplifyPolyhedra(self, eps: 'double') -> "void":
        r"""
        simplifyPolyhedra(MEDCouplingUMesh self, double eps)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_simplifyPolyhedra(self, eps)

    def buildSpreadZonesWithPoly(self) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        buildSpreadZonesWithPoly(MEDCouplingUMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildSpreadZonesWithPoly(self)

    def buildExtrudedMesh(self, mesh1D: 'MEDCouplingUMesh', policy: 'int') -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        buildExtrudedMesh(MEDCouplingUMesh self, MEDCouplingUMesh mesh1D, int policy) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingUMesh_buildExtrudedMesh(self, mesh1D, policy)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingUMesh

# Register MEDCouplingUMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingUMesh_swigregister(MEDCouplingUMesh)

def MEDCouplingUMesh_New(*args) -> "MEDCoupling::MEDCouplingUMesh *":
    r"""
    MEDCouplingUMesh_New() -> MEDCouplingUMesh
    MEDCouplingUMesh_New(char const * meshName, int meshDim) -> MEDCouplingUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_New(*args)

def MEDCouplingUMesh_Build0DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
    r"""
    MEDCouplingUMesh_Build0DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_Build0DMeshFromCoords(da)

def MEDCouplingUMesh_ComputeSpreadZoneGradually(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCouplingUMesh_ComputeSpreadZoneGradually(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeSpreadZoneGradually(arrIn, arrIndxIn)

def MEDCouplingUMesh_ComputeRangesFromTypeDistribution(code: 'ivec') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCouplingUMesh_ComputeRangesFromTypeDistribution(ivec code) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeRangesFromTypeDistribution(code)

def MEDCouplingUMesh_Build1DMeshFromCoords(da: 'DataArrayDouble') -> "MEDCoupling::MEDCouplingUMesh *":
    r"""
    MEDCouplingUMesh_Build1DMeshFromCoords(DataArrayDouble da) -> MEDCouplingUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_Build1DMeshFromCoords(da)

def MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(seed: 'PyObject *', arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt', nbOfDepthPeeling: 'int'=-1) -> "PyObject *":
    r"""
    MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(PyObject * seed, DataArrayInt arrIn, DataArrayInt arrIndxIn, int nbOfDepthPeeling=-1) -> PyObject
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeSpreadZoneGraduallyFromSeed(seed, arrIn, arrIndxIn, nbOfDepthPeeling)

def MEDCouplingUMesh_FindCommonCellsAlg(compType: 'int', startCellId: 'int', nodal: 'DataArrayInt', nodalI: 'DataArrayInt', revNodal: 'DataArrayInt', revNodalI: 'DataArrayInt') -> "PyObject *":
    r"""
    MEDCouplingUMesh_FindCommonCellsAlg(int compType, int startCellId, DataArrayInt nodal, DataArrayInt nodalI, DataArrayInt revNodal, DataArrayInt revNodalI) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_FindCommonCellsAlg(compType, startCellId, nodal, nodalI, revNodal, revNodalI)

def MEDCouplingUMesh_PartitionBySpreadZone(arrIn: 'DataArrayInt', arrIndxIn: 'DataArrayInt') -> "PyObject *":
    r"""
    MEDCouplingUMesh_PartitionBySpreadZone(DataArrayInt arrIn, DataArrayInt arrIndxIn) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_PartitionBySpreadZone(arrIn, arrIndxIn)

def MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(ms: 'PyObject *') -> "PyObject *":
    r"""
    MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(PyObject * ms) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_AggregateSortedByTypeMeshesOnSameCoords(ms)

def MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args) -> "PyObject *":
    r"""
    MEDCouplingUMesh_MergeUMeshesOnSameCoords(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshesOnSameCoords(PyObject * ms) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshesOnSameCoords(*args)

def MEDCouplingUMesh_FuseUMeshesOnSameCoords(ms: 'PyObject *', compType: 'int') -> "PyObject *":
    r"""
    MEDCouplingUMesh_FuseUMeshesOnSameCoords(PyObject * ms, int compType) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_FuseUMeshesOnSameCoords(ms, compType)

def MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(ms: 'PyObject *') -> "void":
    r"""
    MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(PyObject * ms)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_PutUMeshesOnSameAggregatedCoords(ms)

def MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(ms: 'PyObject *', eps: 'double') -> "void":
    r"""
    MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(PyObject * ms, double eps)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_MergeNodesOnUMeshesSharingSameCoords(ms, eps)

def MEDCouplingUMesh_MergeUMeshes(*args) -> "MEDCoupling::MEDCouplingUMesh *":
    r"""
    MEDCouplingUMesh_MergeUMeshes(MEDCouplingUMesh mesh1, MEDCouplingUMesh mesh2) -> MEDCouplingUMesh
    MEDCouplingUMesh_MergeUMeshes(PyObject * li) -> MEDCouplingUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_MergeUMeshes(*args)

def MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(desc: 'DataArrayInt', descI: 'DataArrayInt', revDesc: 'DataArrayInt', revDescI: 'DataArrayInt') -> "PyObject *":
    r"""
    MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(DataArrayInt desc, DataArrayInt descI, DataArrayInt revDesc, DataArrayInt revDescI) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_ComputeNeighborsOfCellsAdv(desc, descI, revDesc, revDescI)

def MEDCouplingUMesh_Intersect2DMeshes(m1: 'MEDCouplingUMesh', m2: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
    r"""
    MEDCouplingUMesh_Intersect2DMeshes(MEDCouplingUMesh m1, MEDCouplingUMesh m2, double eps) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_Intersect2DMeshes(m1, m2, eps)

def MEDCouplingUMesh_Intersect2DMeshWith1DLine(mesh2D: 'MEDCouplingUMesh', mesh1D: 'MEDCouplingUMesh', eps: 'double') -> "PyObject *":
    r"""
    MEDCouplingUMesh_Intersect2DMeshWith1DLine(MEDCouplingUMesh mesh2D, MEDCouplingUMesh mesh1D, double eps) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingUMesh_Intersect2DMeshWith1DLine(mesh2D, mesh1D, eps)

class MEDCouplingMappedExtrudedMesh(MEDCouplingMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingMappedExtrudedMesh *":
        r"""
        New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingMappedExtrudedMesh
        New(MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_New(*args)

    def build3DUnstructuredMesh(self) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        build3DUnstructuredMesh(MEDCouplingMappedExtrudedMesh self) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_build3DUnstructuredMesh(self)

    def get2DCellIdForExtrusion(self) -> "int":
        r"""
        get2DCellIdForExtrusion(MEDCouplingMappedExtrudedMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_get2DCellIdForExtrusion(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingMappedExtrudedMesh self, MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingMappedExtrudedMesh
        __init__(MEDCouplingMappedExtrudedMesh self, MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh
        __init__(MEDCouplingMappedExtrudedMesh self) -> MEDCouplingMappedExtrudedMesh
        1
        """
        _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingMappedExtrudedMesh(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingMappedExtrudedMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingMappedExtrudedMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh___repr__(self)

    def getMesh2D(self) -> "PyObject *":
        r"""
        getMesh2D(MEDCouplingMappedExtrudedMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_getMesh2D(self)

    def getMesh1D(self) -> "PyObject *":
        r"""
        getMesh1D(MEDCouplingMappedExtrudedMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_getMesh1D(self)

    def getMesh3DIds(self) -> "PyObject *":
        r"""
        getMesh3DIds(MEDCouplingMappedExtrudedMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_getMesh3DIds(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingMappedExtrudedMesh

# Register MEDCouplingMappedExtrudedMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_swigregister(MEDCouplingMappedExtrudedMesh)

def MEDCouplingMappedExtrudedMesh_New(*args) -> "MEDCoupling::MEDCouplingMappedExtrudedMesh *":
    r"""
    MEDCouplingMappedExtrudedMesh_New(MEDCouplingUMesh mesh3D, MEDCouplingUMesh mesh2D, int cell2DId) -> MEDCouplingMappedExtrudedMesh
    MEDCouplingMappedExtrudedMesh_New(MEDCouplingCMesh mesh3D) -> MEDCouplingMappedExtrudedMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMappedExtrudedMesh_New(*args)

class MEDCoupling1GTUMesh(MEDCouplingPointSet):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCoupling1GTUMesh *":
        r"""
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1GTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1GTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_New(*args)

    def getCellModelEnum(self) -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        getCellModelEnum(MEDCoupling1GTUMesh self) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_getCellModelEnum(self)

    def getNodalConnectivityLength(self) -> "int":
        r"""
        getNodalConnectivityLength(MEDCoupling1GTUMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_getNodalConnectivityLength(self)

    def allocateCells(self, nbOfCells: 'int'=0) -> "void":
        r"""
        allocateCells(MEDCoupling1GTUMesh self, int nbOfCells=0)
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_allocateCells(self, nbOfCells)

    def checkConsistencyOfConnectivity(self) -> "void":
        r"""
        checkConsistencyOfConnectivity(MEDCoupling1GTUMesh self)
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_checkConsistencyOfConnectivity(self)

    def insertNextCell(self, li: 'PyObject *') -> "void":
        r"""
        insertNextCell(MEDCoupling1GTUMesh self, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_insertNextCell(self, li)

    def getNodalConnectivity(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getNodalConnectivity(MEDCoupling1GTUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_getNodalConnectivity(self)

    @staticmethod
    def AggregateOnSameCoordsToUMesh(li: 'PyObject *') -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        AggregateOnSameCoordsToUMesh(PyObject * li) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(li)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCoupling1GTUMesh

# Register MEDCoupling1GTUMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCoupling1GTUMesh_swigregister(MEDCoupling1GTUMesh)

def MEDCoupling1GTUMesh_New(*args) -> "MEDCoupling::MEDCoupling1GTUMesh *":
    r"""
    MEDCoupling1GTUMesh_New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1GTUMesh
    MEDCoupling1GTUMesh_New(MEDCouplingUMesh m) -> MEDCoupling1GTUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1GTUMesh_New(*args)

def MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(li: 'PyObject *') -> "MEDCoupling::MEDCouplingUMesh *":
    r"""
    MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(PyObject * li) -> MEDCouplingUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1GTUMesh_AggregateOnSameCoordsToUMesh(li)

class MEDCoupling1SGTUMesh(MEDCoupling1GTUMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_New(*args)

    def setNodalConnectivity(self, nodalConn: 'DataArrayInt') -> "void":
        r"""
        setNodalConnectivity(MEDCoupling1SGTUMesh self, DataArrayInt nodalConn)
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_setNodalConnectivity(self, nodalConn)

    def getNumberOfNodesPerCell(self) -> "int":
        r"""
        getNumberOfNodesPerCell(MEDCoupling1SGTUMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_getNumberOfNodesPerCell(self)

    def buildSetInstanceFromThis(self, spaceDim: 'int') -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        buildSetInstanceFromThis(MEDCoupling1SGTUMesh self, int spaceDim) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_buildSetInstanceFromThis(self, spaceDim)

    def computeDualMesh(self) -> "MEDCoupling::MEDCoupling1GTUMesh *":
        r"""
        computeDualMesh(MEDCoupling1SGTUMesh self) -> MEDCoupling1GTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_computeDualMesh(self)

    def explodeEachHexa8To6Quad4(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        explodeEachHexa8To6Quad4(MEDCoupling1SGTUMesh self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_explodeEachHexa8To6Quad4(self)

    def sortHexa8EachOther(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        sortHexa8EachOther(MEDCoupling1SGTUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_sortHexa8EachOther(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCoupling1SGTUMesh self) -> MEDCoupling1SGTUMesh
        __init__(MEDCoupling1SGTUMesh self, std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
        __init__(MEDCoupling1SGTUMesh self, MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh
        1
        """
        _MEDCouplingRemapper.MEDCoupling1SGTUMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCoupling1SGTUMesh(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCoupling1SGTUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCoupling1SGTUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh___repr__(self)

    def structurizeMe(self, eps: 'double'=1e-12) -> "PyObject *":
        r"""
        structurizeMe(MEDCoupling1SGTUMesh self, double eps=1e-12) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_structurizeMe(self, eps)

    @staticmethod
    def Merge1SGTUMeshes(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        Merge1SGTUMeshes(MEDCoupling1SGTUMesh mesh1, MEDCoupling1SGTUMesh mesh2) -> MEDCoupling1SGTUMesh
        Merge1SGTUMeshes(PyObject * li) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_Merge1SGTUMeshes(*args)

    @staticmethod
    def Merge1SGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        Merge1SGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(li)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCoupling1SGTUMesh

# Register MEDCoupling1SGTUMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCoupling1SGTUMesh_swigregister(MEDCoupling1SGTUMesh)

def MEDCoupling1SGTUMesh_New(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
    r"""
    MEDCoupling1SGTUMesh_New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1SGTUMesh
    MEDCoupling1SGTUMesh_New(MEDCouplingUMesh m) -> MEDCoupling1SGTUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_New(*args)

def MEDCoupling1SGTUMesh_Merge1SGTUMeshes(*args) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
    r"""
    MEDCoupling1SGTUMesh_Merge1SGTUMeshes(MEDCoupling1SGTUMesh mesh1, MEDCoupling1SGTUMesh mesh2) -> MEDCoupling1SGTUMesh
    MEDCoupling1SGTUMesh_Merge1SGTUMeshes(PyObject * li) -> MEDCoupling1SGTUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_Merge1SGTUMeshes(*args)

def MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1SGTUMesh *":
    r"""
    MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1SGTUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1SGTUMesh_Merge1SGTUMeshesOnSameCoords(li)

class MEDCoupling1DGTUMesh(MEDCoupling1GTUMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        r"""
        New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
        New(MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_New(*args)

    def setNodalConnectivity(self, nodalConn: 'DataArrayInt', nodalConnIndex: 'DataArrayInt') -> "void":
        r"""
        setNodalConnectivity(MEDCoupling1DGTUMesh self, DataArrayInt nodalConn, DataArrayInt nodalConnIndex)
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_setNodalConnectivity(self, nodalConn, nodalConnIndex)

    def buildSetInstanceFromThis(self, spaceDim: 'int') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        r"""
        buildSetInstanceFromThis(MEDCoupling1DGTUMesh self, int spaceDim) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_buildSetInstanceFromThis(self, spaceDim)

    def isPacked(self) -> "bool":
        r"""
        isPacked(MEDCoupling1DGTUMesh self) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_isPacked(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCoupling1DGTUMesh self) -> MEDCoupling1DGTUMesh
        __init__(MEDCoupling1DGTUMesh self, std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
        __init__(MEDCoupling1DGTUMesh self, MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh
        1
        """
        _MEDCouplingRemapper.MEDCoupling1DGTUMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCoupling1DGTUMesh(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCoupling1DGTUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCoupling1DGTUMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh___repr__(self)

    def getNodalConnectivityIndex(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getNodalConnectivityIndex(MEDCoupling1DGTUMesh self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_getNodalConnectivityIndex(self)

    def retrievePackedNodalConnectivity(self) -> "PyObject *":
        r"""
        retrievePackedNodalConnectivity(MEDCoupling1DGTUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_retrievePackedNodalConnectivity(self)

    def copyWithNodalConnectivityPacked(self) -> "PyObject *":
        r"""
        copyWithNodalConnectivityPacked(MEDCoupling1DGTUMesh self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_copyWithNodalConnectivityPacked(self)

    @staticmethod
    def Merge1DGTUMeshes(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        r"""
        Merge1DGTUMeshes(PyObject * li) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_Merge1DGTUMeshes(li)

    @staticmethod
    def Merge1DGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
        r"""
        Merge1DGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1DGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(li)

    @staticmethod
    def AggregateNodalConnAndShiftNodeIds(li: 'PyObject *', offsetInNodeIdsPerElt: 'ivec') -> "MEDCoupling::DataArrayInt *":
        r"""
        AggregateNodalConnAndShiftNodeIds(PyObject * li, ivec offsetInNodeIdsPerElt) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(li, offsetInNodeIdsPerElt)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCoupling1DGTUMesh

# Register MEDCoupling1DGTUMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCoupling1DGTUMesh_swigregister(MEDCoupling1DGTUMesh)

def MEDCoupling1DGTUMesh_New(*args) -> "MEDCoupling::MEDCoupling1DGTUMesh *":
    r"""
    MEDCoupling1DGTUMesh_New(std::string const & name, INTERP_KERNEL::NormalizedCellType type) -> MEDCoupling1DGTUMesh
    MEDCoupling1DGTUMesh_New(MEDCouplingUMesh m) -> MEDCoupling1DGTUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_New(*args)

def MEDCoupling1DGTUMesh_Merge1DGTUMeshes(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
    r"""
    MEDCoupling1DGTUMesh_Merge1DGTUMeshes(PyObject * li) -> MEDCoupling1DGTUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_Merge1DGTUMeshes(li)

def MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(li: 'PyObject *') -> "MEDCoupling::MEDCoupling1DGTUMesh *":
    r"""
    MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(PyObject * li) -> MEDCoupling1DGTUMesh
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_Merge1DGTUMeshesOnSameCoords(li)

def MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(li: 'PyObject *', offsetInNodeIdsPerElt: 'ivec') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(PyObject * li, ivec offsetInNodeIdsPerElt) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCoupling1DGTUMesh_AggregateNodalConnAndShiftNodeIds(li, offsetInNodeIdsPerElt)

class MEDCouplingStructuredMesh(MEDCouplingMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getCellIdFromPos(self, i: 'int', j: 'int', k: 'int') -> "int":
        r"""
        getCellIdFromPos(MEDCouplingStructuredMesh self, int i, int j, int k) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getCellIdFromPos(self, i, j, k)

    def getNodeIdFromPos(self, i: 'int', j: 'int', k: 'int') -> "int":
        r"""
        getNodeIdFromPos(MEDCouplingStructuredMesh self, int i, int j, int k) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getNodeIdFromPos(self, i, j, k)

    def getNumberOfCellsOfSubLevelMesh(self) -> "int":
        r"""
        getNumberOfCellsOfSubLevelMesh(MEDCouplingStructuredMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getNumberOfCellsOfSubLevelMesh(self)

    def getSpaceDimensionOnNodeStruct(self) -> "int":
        r"""
        getSpaceDimensionOnNodeStruct(MEDCouplingStructuredMesh self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getSpaceDimensionOnNodeStruct(self)

    def computeSquareness(self) -> "double":
        r"""
        computeSquareness(MEDCouplingStructuredMesh self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_computeSquareness(self)

    def getNodeGridStructure(self) -> "std::vector< int,std::allocator< int > >":
        r"""
        getNodeGridStructure(MEDCouplingStructuredMesh self) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getNodeGridStructure(self)

    def getCellGridStructure(self) -> "std::vector< int,std::allocator< int > >":
        r"""
        getCellGridStructure(MEDCouplingStructuredMesh self) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getCellGridStructure(self)

    def build1SGTUnstructured(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        build1SGTUnstructured(MEDCouplingStructuredMesh self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_build1SGTUnstructured(self)

    def getLocationFromCellId(self, cellId: 'int') -> "std::vector< int,std::allocator< int > >":
        r"""
        getLocationFromCellId(MEDCouplingStructuredMesh self, int cellId) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getLocationFromCellId(self, cellId)

    def getLocationFromNodeId(self, cellId: 'int') -> "std::vector< int,std::allocator< int > >":
        r"""
        getLocationFromNodeId(MEDCouplingStructuredMesh self, int cellId) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_getLocationFromNodeId(self, cellId)

    @staticmethod
    def GetGeoTypeGivenMeshDimension(meshDim: 'int') -> "INTERP_KERNEL::NormalizedCellType":
        r"""
        GetGeoTypeGivenMeshDimension(int meshDim) -> INTERP_KERNEL::NormalizedCellType
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(meshDim)

    def build1SGTSubLevelMesh(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        build1SGTSubLevelMesh(MEDCouplingStructuredMesh self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_build1SGTSubLevelMesh(self)

    @staticmethod
    def DeduceNumberOfGivenStructure(st: 'ivec') -> "int":
        r"""
        DeduceNumberOfGivenStructure(ivec st) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(st)

    @staticmethod
    def ComputeCornersGhost(st: 'ivec', ghostLev: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        ComputeCornersGhost(ivec st, int ghostLev) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ComputeCornersGhost(st, ghostLev)

    @staticmethod
    def GetSplitVectFromStruct(strct: 'ivec') -> "std::vector< int,std::allocator< int > >":
        r"""
        GetSplitVectFromStruct(ivec strct) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetSplitVectFromStruct(strct)

    def buildStructuredSubPart(self, cellPart: 'PyObject *') -> "MEDCoupling::MEDCouplingStructuredMesh *":
        r"""
        buildStructuredSubPart(MEDCouplingStructuredMesh self, PyObject * cellPart) -> MEDCouplingStructuredMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_buildStructuredSubPart(self, cellPart)

    @staticmethod
    def BuildExplicitIdsFrom(st: 'PyObject *', part: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        BuildExplicitIdsFrom(PyObject * st, PyObject * part) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_BuildExplicitIdsFrom(st, part)

    @staticmethod
    def MultiplyPartOf(st: 'ivec', part: 'PyObject *', factor: 'double', da: 'DataArrayDouble') -> "void":
        r"""
        MultiplyPartOf(ivec st, PyObject * part, double factor, DataArrayDouble da)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_MultiplyPartOf(st, part, factor, da)

    @staticmethod
    def MultiplyPartOfByGhost(st: 'ivec', part: 'PyObject *', ghostSize: 'int', factor: 'double', da: 'DataArrayDouble') -> "void":
        r"""
        MultiplyPartOfByGhost(ivec st, PyObject * part, int ghostSize, double factor, DataArrayDouble da)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_MultiplyPartOfByGhost(st, part, ghostSize, factor, da)

    @staticmethod
    def PutInGhostFormat(ghostSize: 'int', st: 'ivec', part: 'PyObject *') -> "PyObject *":
        r"""
        PutInGhostFormat(int ghostSize, ivec st, PyObject * part) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_PutInGhostFormat(ghostSize, st, part)

    @staticmethod
    def ExtractFieldOfDoubleFrom(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        ExtractFieldOfDoubleFrom(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(st, fieldOfDbl, partCompactFormat)

    @staticmethod
    def AssignPartOfFieldOfDoubleUsing(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *', other: 'DataArrayDouble') -> "void":
        r"""
        AssignPartOfFieldOfDoubleUsing(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat, DataArrayDouble other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(st, fieldOfDbl, partCompactFormat, other)

    @staticmethod
    def DeduceNumberOfGivenRangeInCompactFrmt(part: 'PyObject *') -> "int":
        r"""
        DeduceNumberOfGivenRangeInCompactFrmt(PyObject * part) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(part)

    @staticmethod
    def Build1GTNodalConnectivity(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        Build1GTNodalConnectivity(PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_Build1GTNodalConnectivity(li)

    @staticmethod
    def Build1GTNodalConnectivityOfSubLevelMesh(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        Build1GTNodalConnectivityOfSubLevelMesh(PyObject * li) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(li)

    @staticmethod
    def GetDimensionsFromCompactFrmt(partCompactFormat: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
        r"""
        GetDimensionsFromCompactFrmt(PyObject * partCompactFormat) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(partCompactFormat)

    @staticmethod
    def GetCompactFrmtFromDimensions(dims: 'ivec') -> "PyObject *":
        r"""
        GetCompactFrmtFromDimensions(ivec dims) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(dims)

    @staticmethod
    def IntersectRanges(r1: 'PyObject *', r2: 'PyObject *') -> "PyObject *":
        r"""
        IntersectRanges(PyObject * r1, PyObject * r2) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_IntersectRanges(r1, r2)

    @staticmethod
    def AreRangesIntersect(r1: 'PyObject *', r2: 'PyObject *') -> "bool":
        r"""
        AreRangesIntersect(PyObject * r1, PyObject * r2) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_AreRangesIntersect(r1, r2)

    @staticmethod
    def IsPartStructured(li: 'PyObject *', st: 'PyObject *') -> "PyObject *":
        r"""
        IsPartStructured(PyObject * li, PyObject * st) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_IsPartStructured(li, st)

    @staticmethod
    def ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigInAbs: 'PyObject *', check: 'bool'=True) -> "PyObject *":
        r"""
        ChangeReferenceFromGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigInAbs, bool check=True) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs, partOfBigInAbs, check)

    @staticmethod
    def TranslateCompactFrmt(part: 'PyObject *', translation: 'ivec') -> "PyObject *":
        r"""
        TranslateCompactFrmt(PyObject * part, ivec translation) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_TranslateCompactFrmt(part, translation)

    @staticmethod
    def FindTranslationFrom(startingFrom: 'PyObject *', goingTo: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
        r"""
        FindTranslationFrom(PyObject * startingFrom, PyObject * goingTo) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_FindTranslationFrom(startingFrom, goingTo)

    @staticmethod
    def ChangeReferenceToGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigRelativeToBig: 'PyObject *', check: 'bool'=True) -> "PyObject *":
        r"""
        ChangeReferenceToGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigRelativeToBig, bool check=True) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(bigInAbs, partOfBigRelativeToBig, check)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingStructuredMesh

# Register MEDCouplingStructuredMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingStructuredMesh_swigregister(MEDCouplingStructuredMesh)

def MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(meshDim: 'int') -> "INTERP_KERNEL::NormalizedCellType":
    r"""
    MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(int meshDim) -> INTERP_KERNEL::NormalizedCellType
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetGeoTypeGivenMeshDimension(meshDim)

def MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(st: 'ivec') -> "int":
    r"""
    MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(ivec st) -> int
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_DeduceNumberOfGivenStructure(st)

def MEDCouplingStructuredMesh_ComputeCornersGhost(st: 'ivec', ghostLev: 'int') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCouplingStructuredMesh_ComputeCornersGhost(ivec st, int ghostLev) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ComputeCornersGhost(st, ghostLev)

def MEDCouplingStructuredMesh_GetSplitVectFromStruct(strct: 'ivec') -> "std::vector< int,std::allocator< int > >":
    r"""
    MEDCouplingStructuredMesh_GetSplitVectFromStruct(ivec strct) -> ivec
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetSplitVectFromStruct(strct)

def MEDCouplingStructuredMesh_BuildExplicitIdsFrom(st: 'PyObject *', part: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCouplingStructuredMesh_BuildExplicitIdsFrom(PyObject * st, PyObject * part) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_BuildExplicitIdsFrom(st, part)

def MEDCouplingStructuredMesh_MultiplyPartOf(st: 'ivec', part: 'PyObject *', factor: 'double', da: 'DataArrayDouble') -> "void":
    r"""
    MEDCouplingStructuredMesh_MultiplyPartOf(ivec st, PyObject * part, double factor, DataArrayDouble da)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_MultiplyPartOf(st, part, factor, da)

def MEDCouplingStructuredMesh_MultiplyPartOfByGhost(st: 'ivec', part: 'PyObject *', ghostSize: 'int', factor: 'double', da: 'DataArrayDouble') -> "void":
    r"""
    MEDCouplingStructuredMesh_MultiplyPartOfByGhost(ivec st, PyObject * part, int ghostSize, double factor, DataArrayDouble da)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_MultiplyPartOfByGhost(st, part, ghostSize, factor, da)

def MEDCouplingStructuredMesh_PutInGhostFormat(ghostSize: 'int', st: 'ivec', part: 'PyObject *') -> "PyObject *":
    r"""
    MEDCouplingStructuredMesh_PutInGhostFormat(int ghostSize, ivec st, PyObject * part) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_PutInGhostFormat(ghostSize, st, part)

def MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
    r"""
    MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ExtractFieldOfDoubleFrom(st, fieldOfDbl, partCompactFormat)

def MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(st: 'ivec', fieldOfDbl: 'DataArrayDouble', partCompactFormat: 'PyObject *', other: 'DataArrayDouble') -> "void":
    r"""
    MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(ivec st, DataArrayDouble fieldOfDbl, PyObject * partCompactFormat, DataArrayDouble other)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_AssignPartOfFieldOfDoubleUsing(st, fieldOfDbl, partCompactFormat, other)

def MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(part: 'PyObject *') -> "int":
    r"""
    MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(PyObject * part) -> int
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_DeduceNumberOfGivenRangeInCompactFrmt(part)

def MEDCouplingStructuredMesh_Build1GTNodalConnectivity(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCouplingStructuredMesh_Build1GTNodalConnectivity(PyObject * li) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_Build1GTNodalConnectivity(li)

def MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(li: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
    r"""
    MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(PyObject * li) -> DataArrayInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_Build1GTNodalConnectivityOfSubLevelMesh(li)

def MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(partCompactFormat: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
    r"""
    MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(PyObject * partCompactFormat) -> ivec
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetDimensionsFromCompactFrmt(partCompactFormat)

def MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(dims: 'ivec') -> "PyObject *":
    r"""
    MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(ivec dims) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_GetCompactFrmtFromDimensions(dims)

def MEDCouplingStructuredMesh_IntersectRanges(r1: 'PyObject *', r2: 'PyObject *') -> "PyObject *":
    r"""
    MEDCouplingStructuredMesh_IntersectRanges(PyObject * r1, PyObject * r2) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_IntersectRanges(r1, r2)

def MEDCouplingStructuredMesh_AreRangesIntersect(r1: 'PyObject *', r2: 'PyObject *') -> "bool":
    r"""
    MEDCouplingStructuredMesh_AreRangesIntersect(PyObject * r1, PyObject * r2) -> bool
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_AreRangesIntersect(r1, r2)

def MEDCouplingStructuredMesh_IsPartStructured(li: 'PyObject *', st: 'PyObject *') -> "PyObject *":
    r"""
    MEDCouplingStructuredMesh_IsPartStructured(PyObject * li, PyObject * st) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_IsPartStructured(li, st)

def MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigInAbs: 'PyObject *', check: 'bool'=True) -> "PyObject *":
    r"""
    MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigInAbs, bool check=True) -> PyObject
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ChangeReferenceFromGlobalOfCompactFrmt(bigInAbs, partOfBigInAbs, check)

def MEDCouplingStructuredMesh_TranslateCompactFrmt(part: 'PyObject *', translation: 'ivec') -> "PyObject *":
    r"""
    MEDCouplingStructuredMesh_TranslateCompactFrmt(PyObject * part, ivec translation) -> PyObject *
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_TranslateCompactFrmt(part, translation)

def MEDCouplingStructuredMesh_FindTranslationFrom(startingFrom: 'PyObject *', goingTo: 'PyObject *') -> "std::vector< int,std::allocator< int > >":
    r"""
    MEDCouplingStructuredMesh_FindTranslationFrom(PyObject * startingFrom, PyObject * goingTo) -> ivec
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_FindTranslationFrom(startingFrom, goingTo)

def MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(bigInAbs: 'PyObject *', partOfBigRelativeToBig: 'PyObject *', check: 'bool'=True) -> "PyObject *":
    r"""
    MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(PyObject * bigInAbs, PyObject * partOfBigRelativeToBig, bool check=True) -> PyObject
    1
    """
    return _MEDCouplingRemapper.MEDCouplingStructuredMesh_ChangeReferenceToGlobalOfCompactFrmt(bigInAbs, partOfBigRelativeToBig, check)

class MEDCouplingCMesh(MEDCouplingStructuredMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingCMesh *":
        r"""
        New() -> MEDCouplingCMesh
        New(std::string const & meshName) -> MEDCouplingCMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_New(*args)

    def setCoords(self, coordsX: 'DataArrayDouble', coordsY: 'DataArrayDouble'=None, coordsZ: 'DataArrayDouble'=None) -> "void":
        r"""
        setCoords(MEDCouplingCMesh self, DataArrayDouble coordsX, DataArrayDouble coordsY=None, DataArrayDouble coordsZ=None)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_setCoords(self, coordsX, coordsY, coordsZ)

    def setCoordsAt(self, i: 'int', arr: 'DataArrayDouble') -> "void":
        r"""
        setCoordsAt(MEDCouplingCMesh self, int i, DataArrayDouble arr)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_setCoordsAt(self, i, arr)

    def buildCurveLinear(self) -> "MEDCoupling::MEDCouplingCurveLinearMesh *":
        r"""
        buildCurveLinear(MEDCouplingCMesh self) -> MEDCouplingCurveLinearMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_buildCurveLinear(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingCMesh self) -> MEDCouplingCMesh
        __init__(MEDCouplingCMesh self, std::string const & meshName) -> MEDCouplingCMesh
        1
        """
        _MEDCouplingRemapper.MEDCouplingCMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingCMesh(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingCMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingCMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh___repr__(self)

    def getCoordsAt(self, i: 'int') -> "MEDCoupling::DataArrayDouble *":
        r"""
        getCoordsAt(MEDCouplingCMesh self, int i) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCMesh_getCoordsAt(self, i)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCMesh

# Register MEDCouplingCMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCMesh_swigregister(MEDCouplingCMesh)

def MEDCouplingCMesh_New(*args) -> "MEDCoupling::MEDCouplingCMesh *":
    r"""
    MEDCouplingCMesh_New() -> MEDCouplingCMesh
    MEDCouplingCMesh_New(std::string const & meshName) -> MEDCouplingCMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingCMesh_New(*args)

class MEDCouplingCurveLinearMesh(MEDCouplingStructuredMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingCurveLinearMesh *":
        r"""
        New() -> MEDCouplingCurveLinearMesh
        New(std::string const & meshName) -> MEDCouplingCurveLinearMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCurveLinearMesh_New(*args)

    def setCoords(self, coords: 'DataArrayDouble') -> "void":
        r"""
        setCoords(MEDCouplingCurveLinearMesh self, DataArrayDouble coords)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCurveLinearMesh_setCoords(self, coords)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingCurveLinearMesh self) -> MEDCouplingCurveLinearMesh
        __init__(MEDCouplingCurveLinearMesh self, std::string const & meshName) -> MEDCouplingCurveLinearMesh
        1
        """
        _MEDCouplingRemapper.MEDCouplingCurveLinearMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingCurveLinearMesh(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingCurveLinearMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCurveLinearMesh___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingCurveLinearMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCurveLinearMesh___repr__(self)

    def getCoords(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getCoords(MEDCouplingCurveLinearMesh self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCurveLinearMesh_getCoords(self)

    def setNodeGridStructure(self, gridStruct: 'PyObject *') -> "void":
        r"""
        setNodeGridStructure(MEDCouplingCurveLinearMesh self, PyObject * gridStruct)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCurveLinearMesh_setNodeGridStructure(self, gridStruct)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCurveLinearMesh

# Register MEDCouplingCurveLinearMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCurveLinearMesh_swigregister(MEDCouplingCurveLinearMesh)

def MEDCouplingCurveLinearMesh_New(*args) -> "MEDCoupling::MEDCouplingCurveLinearMesh *":
    r"""
    MEDCouplingCurveLinearMesh_New() -> MEDCouplingCurveLinearMesh
    MEDCouplingCurveLinearMesh_New(std::string const & meshName) -> MEDCouplingCurveLinearMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingCurveLinearMesh_New(*args)

class MEDCouplingIMesh(MEDCouplingStructuredMesh):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def setSpaceDimension(self, spaceDim: 'int') -> "void":
        r"""
        setSpaceDimension(MEDCouplingIMesh self, int spaceDim)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_setSpaceDimension(self, spaceDim)

    def getNodeStruct(self) -> "std::vector< int,std::allocator< int > >":
        r"""
        getNodeStruct(MEDCouplingIMesh self) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_getNodeStruct(self)

    def getOrigin(self) -> "std::vector< double,std::allocator< double > >":
        r"""
        getOrigin(MEDCouplingIMesh self) -> dvec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_getOrigin(self)

    def getDXYZ(self) -> "std::vector< double,std::allocator< double > >":
        r"""
        getDXYZ(MEDCouplingIMesh self) -> dvec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_getDXYZ(self)

    def setAxisUnit(self, unitName: 'std::string const &') -> "void":
        r"""
        setAxisUnit(MEDCouplingIMesh self, std::string const & unitName)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_setAxisUnit(self, unitName)

    def getAxisUnit(self) -> "std::string":
        r"""
        getAxisUnit(MEDCouplingIMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_getAxisUnit(self)

    def getMeasureOfAnyCell(self) -> "double":
        r"""
        getMeasureOfAnyCell(MEDCouplingIMesh self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_getMeasureOfAnyCell(self)

    def convertToCartesian(self) -> "MEDCoupling::MEDCouplingCMesh *":
        r"""
        convertToCartesian(MEDCouplingIMesh self) -> MEDCouplingCMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_convertToCartesian(self)

    def refineWithFactor(self, factors: 'ivec') -> "void":
        r"""
        refineWithFactor(MEDCouplingIMesh self, ivec factors)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_refineWithFactor(self, factors)

    def asSingleCell(self) -> "MEDCoupling::MEDCouplingIMesh *":
        r"""
        asSingleCell(MEDCouplingIMesh self) -> MEDCouplingIMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_asSingleCell(self)

    def buildWithGhost(self, ghostLev: 'int') -> "MEDCoupling::MEDCouplingIMesh *":
        r"""
        buildWithGhost(MEDCouplingIMesh self, int ghostLev) -> MEDCouplingIMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_buildWithGhost(self, ghostLev)

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingIMesh *":
        r"""
        New() -> MEDCouplingIMesh
        New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_New(*args)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingIMesh self) -> MEDCouplingIMesh
        __init__(MEDCouplingIMesh self, std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh
        1
        """
        _MEDCouplingRemapper.MEDCouplingIMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingIMesh(*args))

    def setNodeStruct(self, nodeStrct: 'PyObject *') -> "void":
        r"""
        setNodeStruct(MEDCouplingIMesh self, PyObject * nodeStrct)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_setNodeStruct(self, nodeStrct)

    def setOrigin(self, origin: 'PyObject *') -> "void":
        r"""
        setOrigin(MEDCouplingIMesh self, PyObject * origin)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_setOrigin(self, origin)

    def setDXYZ(self, dxyz: 'PyObject *') -> "void":
        r"""
        setDXYZ(MEDCouplingIMesh self, PyObject * dxyz)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_setDXYZ(self, dxyz)

    @staticmethod
    def CondenseFineToCoarse(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble') -> "void":
        r"""
        CondenseFineToCoarse(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_CondenseFineToCoarse(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA)

    @staticmethod
    def CondenseFineToCoarseGhost(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble', ghostSize: 'int') -> "void":
        r"""
        CondenseFineToCoarseGhost(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA, int ghostSize)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_CondenseFineToCoarseGhost(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA, ghostSize)

    @staticmethod
    def SpreadCoarseToFine(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec') -> "void":
        r"""
        SpreadCoarseToFine(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_SpreadCoarseToFine(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts)

    @staticmethod
    def SpreadCoarseToFineGhost(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
        r"""
        SpreadCoarseToFineGhost(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_SpreadCoarseToFineGhost(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

    @staticmethod
    def SpreadCoarseToFineGhostZone(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
        r"""
        SpreadCoarseToFineGhostZone(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh_SpreadCoarseToFineGhostZone(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingIMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingIMesh self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingIMesh___repr__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingIMesh

# Register MEDCouplingIMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingIMesh_swigregister(MEDCouplingIMesh)

def MEDCouplingIMesh_New(*args) -> "MEDCoupling::MEDCouplingIMesh *":
    r"""
    MEDCouplingIMesh_New() -> MEDCouplingIMesh
    MEDCouplingIMesh_New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingIMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingIMesh_New(*args)

def MEDCouplingIMesh_CondenseFineToCoarse(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble') -> "void":
    r"""
    MEDCouplingIMesh_CondenseFineToCoarse(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingIMesh_CondenseFineToCoarse(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA)

def MEDCouplingIMesh_CondenseFineToCoarseGhost(coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', coarseDA: 'DataArrayDouble', ghostSize: 'int') -> "void":
    r"""
    MEDCouplingIMesh_CondenseFineToCoarseGhost(ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, DataArrayDouble coarseDA, int ghostSize)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingIMesh_CondenseFineToCoarseGhost(coarseSt, fineDA, fineLocInCoarse, facts, coarseDA, ghostSize)

def MEDCouplingIMesh_SpreadCoarseToFine(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec') -> "void":
    r"""
    MEDCouplingIMesh_SpreadCoarseToFine(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingIMesh_SpreadCoarseToFine(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts)

def MEDCouplingIMesh_SpreadCoarseToFineGhost(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
    r"""
    MEDCouplingIMesh_SpreadCoarseToFineGhost(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingIMesh_SpreadCoarseToFineGhost(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

def MEDCouplingIMesh_SpreadCoarseToFineGhostZone(coarseDA: 'DataArrayDouble', coarseSt: 'ivec', fineDA: 'DataArrayDouble', fineLocInCoarse: 'PyObject *', facts: 'ivec', ghostSize: 'int') -> "void":
    r"""
    MEDCouplingIMesh_SpreadCoarseToFineGhostZone(DataArrayDouble coarseDA, ivec coarseSt, DataArrayDouble fineDA, PyObject * fineLocInCoarse, ivec facts, int ghostSize)
    1
    """
    return _MEDCouplingRemapper.MEDCouplingIMesh_SpreadCoarseToFineGhostZone(coarseDA, coarseSt, fineDA, fineLocInCoarse, facts, ghostSize)

class MEDCouplingField(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def checkConsistencyLight(self) -> "void":
        r"""
        checkConsistencyLight(MEDCouplingField self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_checkConsistencyLight(self)

    def areCompatibleForMerge(self, other: 'MEDCouplingField') -> "bool":
        r"""
        areCompatibleForMerge(MEDCouplingField self, MEDCouplingField other) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_areCompatibleForMerge(self, other)

    def copyTinyStringsFrom(self, other: 'MEDCouplingField') -> "void":
        r"""
        copyTinyStringsFrom(MEDCouplingField self, MEDCouplingField other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_copyTinyStringsFrom(self, other)

    def setMesh(self, mesh: 'MEDCouplingMesh') -> "void":
        r"""
        setMesh(MEDCouplingField self, MEDCouplingMesh mesh)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setMesh(self, mesh)

    def setName(self, name: 'char const *') -> "void":
        r"""
        setName(MEDCouplingField self, char const * name)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setName(self, name)

    def getDescription(self) -> "std::string":
        r"""
        getDescription(MEDCouplingField self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getDescription(self)

    def setDescription(self, desc: 'char const *') -> "void":
        r"""
        setDescription(MEDCouplingField self, char const * desc)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setDescription(self, desc)

    def getName(self) -> "std::string":
        r"""
        getName(MEDCouplingField self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getName(self)

    def getTypeOfField(self) -> "MEDCoupling::TypeOfField":
        r"""
        getTypeOfField(MEDCouplingField self) -> MEDCoupling::TypeOfField
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getTypeOfField(self)

    def getNature(self) -> "MEDCoupling::NatureOfField":
        r"""
        getNature(MEDCouplingField self) -> MEDCoupling::NatureOfField
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNature(self)

    def setNature(self, nat: 'MEDCoupling::NatureOfField') -> "void":
        r"""
        setNature(MEDCouplingField self, MEDCoupling::NatureOfField nat)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setNature(self, nat)

    def getLocalizationOfDiscr(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getLocalizationOfDiscr(MEDCouplingField self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getLocalizationOfDiscr(self)

    def buildMeasureField(self, isAbs: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildMeasureField(MEDCouplingField self, bool isAbs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_buildMeasureField(self, isAbs)

    def getNumberOfTuplesExpected(self) -> "int":
        r"""
        getNumberOfTuplesExpected(MEDCouplingField self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNumberOfTuplesExpected(self)

    def getNumberOfMeshPlacesExpected(self) -> "int":
        r"""
        getNumberOfMeshPlacesExpected(MEDCouplingField self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNumberOfMeshPlacesExpected(self)

    def setGaussLocalizationOnType(self, type: 'INTERP_KERNEL::NormalizedCellType', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        r"""
        setGaussLocalizationOnType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setGaussLocalizationOnType(self, type, refCoo, gsCoo, wg)

    def clearGaussLocalizations(self) -> "void":
        r"""
        clearGaussLocalizations(MEDCouplingField self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_clearGaussLocalizations(self)

    def getNbOfGaussLocalization(self) -> "int":
        r"""
        getNbOfGaussLocalization(MEDCouplingField self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNbOfGaussLocalization(self)

    def getGaussLocalizationIdOfOneCell(self, cellId: 'int') -> "int":
        r"""
        getGaussLocalizationIdOfOneCell(MEDCouplingField self, int cellId) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalizationIdOfOneCell(self, cellId)

    def getGaussLocalization(self, *args) -> "MEDCoupling::MEDCouplingGaussLocalization const &":
        r"""
        getGaussLocalization(MEDCouplingField self, int locId) -> MEDCouplingGaussLocalization
        getGaussLocalization(MEDCouplingField self, int locId) -> MEDCouplingGaussLocalization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalization(self, *args)

    def getGaussLocalizationIdOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "int":
        r"""
        getGaussLocalizationIdOfOneType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalizationIdOfOneType(self, type)

    def setDiscretization(self, newDisc: 'MEDCouplingFieldDiscretization') -> "void":
        r"""
        setDiscretization(MEDCouplingField self, MEDCouplingFieldDiscretization newDisc)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setDiscretization(self, newDisc)

    def getMesh(self) -> "PyObject *":
        r"""
        getMesh(MEDCouplingField self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getMesh(self)

    def getDiscretization(self) -> "PyObject *":
        r"""
        getDiscretization(MEDCouplingField self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getDiscretization(self)

    def getGaussLocalizationIdsOfOneType(self, type: 'INTERP_KERNEL::NormalizedCellType') -> "PyObject *":
        r"""
        getGaussLocalizationIdsOfOneType(MEDCouplingField self, INTERP_KERNEL::NormalizedCellType type) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getGaussLocalizationIdsOfOneType(self, type)

    def buildSubMeshData(self, li: 'PyObject *') -> "PyObject *":
        r"""
        buildSubMeshData(MEDCouplingField self, PyObject * li) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_buildSubMeshData(self, li)

    def buildSubMeshDataRange(self, begin: 'int', end: 'int', step: 'int') -> "PyObject *":
        r"""
        buildSubMeshDataRange(MEDCouplingField self, int begin, int end, int step) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_buildSubMeshDataRange(self, begin, end, step)

    def computeTupleIdsToSelectFromCellIds(self, cellIds: 'PyObject *') -> "MEDCoupling::DataArrayInt *":
        r"""
        computeTupleIdsToSelectFromCellIds(MEDCouplingField self, PyObject * cellIds) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_computeTupleIdsToSelectFromCellIds(self, cellIds)

    def setGaussLocalizationOnCells(self, li: 'PyObject *', refCoo: 'dvec', gsCoo: 'dvec', wg: 'dvec') -> "void":
        r"""
        setGaussLocalizationOnCells(MEDCouplingField self, PyObject * li, dvec refCoo, dvec gsCoo, dvec wg)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_setGaussLocalizationOnCells(self, li, refCoo, gsCoo, wg)

    def getCellIdsHavingGaussLocalization(self, locId: 'int') -> "PyObject *":
        r"""
        getCellIdsHavingGaussLocalization(MEDCouplingField self, int locId) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getCellIdsHavingGaussLocalization(self, locId)

    def getNumberOfTuplesExpectedRegardingCode(self, code: 'PyObject *', idsPerType: 'PyObject *') -> "int":
        r"""
        getNumberOfTuplesExpectedRegardingCode(MEDCouplingField self, PyObject * code, PyObject * idsPerType) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingField_getNumberOfTuplesExpectedRegardingCode(self, code, idsPerType)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingField

# Register MEDCouplingField in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingField_swigregister(MEDCouplingField)

class MEDCouplingFieldTemplate(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingFieldTemplate *":
        r"""
        New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        New(MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
        New(MEDCouplingFieldInt const & f) -> MEDCouplingFieldTemplate
        New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_New(*args)

    def simpleRepr(self) -> "std::string":
        r"""
        simpleRepr(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_simpleRepr(self)

    def advancedRepr(self) -> "std::string":
        r"""
        advancedRepr(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_advancedRepr(self)

    def isEqual(self, other: 'MEDCouplingFieldTemplate', meshPrec: 'double') -> "bool":
        r"""
        isEqual(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_isEqual(self, other, meshPrec)

    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldTemplate', meshPrec: 'double') -> "bool":
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_isEqualWithoutConsideringStr(self, other, meshPrec)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldTemplate self, MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
        __init__(MEDCouplingFieldTemplate self, MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
        __init__(MEDCouplingFieldTemplate self, MEDCouplingFieldInt const & f) -> MEDCouplingFieldTemplate
        __init__(MEDCouplingFieldTemplate self, MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate
        1
        """
        _MEDCouplingRemapper.MEDCouplingFieldTemplate_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingFieldTemplate(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingFieldTemplate self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate___repr__(self)

    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldTemplate', meshPrec: 'double') -> "PyObject *":
        r"""
        isEqualIfNotWhy(MEDCouplingFieldTemplate self, MEDCouplingFieldTemplate other, double meshPrec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTemplate_isEqualIfNotWhy(self, other, meshPrec)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldTemplate

# Register MEDCouplingFieldTemplate in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldTemplate_swigregister(MEDCouplingFieldTemplate)

def MEDCouplingFieldTemplate_New(*args) -> "MEDCoupling::MEDCouplingFieldTemplate *":
    r"""
    MEDCouplingFieldTemplate_New(MEDCouplingFieldDouble f) -> MEDCouplingFieldTemplate
    MEDCouplingFieldTemplate_New(MEDCouplingFieldFloat const & f) -> MEDCouplingFieldTemplate
    MEDCouplingFieldTemplate_New(MEDCouplingFieldInt const & f) -> MEDCouplingFieldTemplate
    MEDCouplingFieldTemplate_New(MEDCoupling::TypeOfField type) -> MEDCouplingFieldTemplate
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldTemplate_New(*args)

class MEDCouplingFieldTdouble(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self) -> "MEDCoupling::TypeOfTimeDiscretization":
        r"""
        getTimeDiscretization(MEDCouplingFieldTdouble self) -> MEDCoupling::TypeOfTimeDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTdouble_getTimeDiscretization(self)

# Register MEDCouplingFieldTdouble in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldTdouble_swigregister(MEDCouplingFieldTdouble)

class MEDCouplingFieldTfloat(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self) -> "MEDCoupling::TypeOfTimeDiscretization":
        r"""
        getTimeDiscretization(MEDCouplingFieldTfloat self) -> MEDCoupling::TypeOfTimeDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTfloat_getTimeDiscretization(self)

# Register MEDCouplingFieldTfloat in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldTfloat_swigregister(MEDCouplingFieldTfloat)

class MEDCouplingFieldTint(MEDCouplingField):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getTimeDiscretization(self) -> "MEDCoupling::TypeOfTimeDiscretization":
        r"""
        getTimeDiscretization(MEDCouplingFieldTint self) -> MEDCoupling::TypeOfTimeDiscretization
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldTint_getTimeDiscretization(self)

# Register MEDCouplingFieldTint in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldTint_swigregister(MEDCouplingFieldTint)

class MEDCouplingFieldDouble(MEDCouplingFieldTdouble):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_New(*args)

    def isEqual(self, other: 'MEDCouplingFieldDouble', meshPrec: 'double', valsPrec: 'double') -> "bool":
        r"""
        isEqual(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldDouble', meshPrec: 'double', valsPrec: 'double') -> "bool":
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        r"""
        setTimeUnit(MEDCouplingFieldDouble self, std::string const & unit)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTimeUnit(self, unit)

    def getTimeUnit(self) -> "std::string":
        r"""
        getTimeUnit(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTimeUnit(self)

    def synchronizeTimeWithSupport(self) -> "void":
        r"""
        synchronizeTimeWithSupport(MEDCouplingFieldDouble self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_synchronizeTimeWithSupport(self)

    def copyTinyAttrFrom(self, other: 'MEDCouplingFieldDouble') -> "void":
        r"""
        copyTinyAttrFrom(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_copyTinyAttrFrom(self, other)

    def copyAllTinyAttrFrom(self, other: 'MEDCouplingFieldDouble') -> "void":
        r"""
        copyAllTinyAttrFrom(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_copyAllTinyAttrFrom(self, other)

    def simpleRepr(self) -> "std::string":
        r"""
        simpleRepr(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_simpleRepr(self)

    def advancedRepr(self) -> "std::string":
        r"""
        advancedRepr(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_advancedRepr(self)

    def writeVTK(self, fileName: 'std::string const &', isBinary: 'bool'=True) -> "std::string":
        r"""
        writeVTK(MEDCouplingFieldDouble self, std::string const & fileName, bool isBinary=True) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_writeVTK(self, fileName, isBinary)

    def convertToIntField(self) -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        convertToIntField(MEDCouplingFieldDouble self) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_convertToIntField(self)

    def convertToFloatField(self) -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        convertToFloatField(MEDCouplingFieldDouble self) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_convertToFloatField(self)

    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        clone(MEDCouplingFieldDouble self, bool recDeepCpy) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_clone(self, recDeepCpy)

    def cloneWithMesh(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        cloneWithMesh(MEDCouplingFieldDouble self, bool recDeepCpy) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_cloneWithMesh(self, recDeepCpy)

    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        deepCopy(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_deepCopy(self)

    def buildNewTimeReprFromThis(self, td: 'MEDCoupling::TypeOfTimeDiscretization', deepCopy: 'bool') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildNewTimeReprFromThis(MEDCouplingFieldDouble self, MEDCoupling::TypeOfTimeDiscretization td, bool deepCopy) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_buildNewTimeReprFromThis(self, td, deepCopy)

    def nodeToCellDiscretization(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        nodeToCellDiscretization(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_nodeToCellDiscretization(self)

    def cellToNodeDiscretization(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        cellToNodeDiscretization(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_cellToNodeDiscretization(self)

    def getIJ(self, tupleId: 'int', compoId: 'int') -> "double":
        r"""
        getIJ(MEDCouplingFieldDouble self, int tupleId, int compoId) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getIJ(self, tupleId, compoId)

    def getIJK(self, cellId: 'int', nodeIdInCell: 'int', compoId: 'int') -> "double":
        r"""
        getIJK(MEDCouplingFieldDouble self, int cellId, int nodeIdInCell, int compoId) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getIJK(self, cellId, nodeIdInCell, compoId)

    def synchronizeTimeWithMesh(self) -> "void":
        r"""
        synchronizeTimeWithMesh(MEDCouplingFieldDouble self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_synchronizeTimeWithMesh(self)

    def setArray(self, array: 'DataArrayDouble') -> "void":
        r"""
        setArray(MEDCouplingFieldDouble self, DataArrayDouble array)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setArray(self, array)

    def setEndArray(self, array: 'DataArrayDouble') -> "void":
        r"""
        setEndArray(MEDCouplingFieldDouble self, DataArrayDouble array)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndArray(self, array)

    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        r"""
        setTime(MEDCouplingFieldDouble self, double val, int iteration, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTime(self, val, iteration, order)

    def setStartTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        r"""
        setStartTime(MEDCouplingFieldDouble self, double val, int iteration, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setStartTime(self, val, iteration, order)

    def setEndTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        r"""
        setEndTime(MEDCouplingFieldDouble self, double val, int iteration, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndTime(self, val, iteration, order)

    def applyLin(self, *args) -> "void":
        r"""
        applyLin(MEDCouplingFieldDouble self, double a, double b, int compoId)
        applyLin(MEDCouplingFieldDouble self, double a, double b)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyLin(self, *args)

    def getNumberOfComponents(self) -> "int":
        r"""
        getNumberOfComponents(MEDCouplingFieldDouble self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getNumberOfComponents(self)

    def getNumberOfTuples(self) -> "int":
        r"""
        getNumberOfTuples(MEDCouplingFieldDouble self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getNumberOfTuples(self)

    def getNumberOfValues(self) -> "int":
        r"""
        getNumberOfValues(MEDCouplingFieldDouble self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getNumberOfValues(self)

    def setTimeTolerance(self, val: 'double') -> "void":
        r"""
        setTimeTolerance(MEDCouplingFieldDouble self, double val)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTimeTolerance(self, val)

    def getTimeTolerance(self) -> "double":
        r"""
        getTimeTolerance(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTimeTolerance(self)

    def setIteration(self, it: 'int') -> "void":
        r"""
        setIteration(MEDCouplingFieldDouble self, int it)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setIteration(self, it)

    def setEndIteration(self, it: 'int') -> "void":
        r"""
        setEndIteration(MEDCouplingFieldDouble self, int it)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndIteration(self, it)

    def setOrder(self, order: 'int') -> "void":
        r"""
        setOrder(MEDCouplingFieldDouble self, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setOrder(self, order)

    def setEndOrder(self, order: 'int') -> "void":
        r"""
        setEndOrder(MEDCouplingFieldDouble self, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndOrder(self, order)

    def setTimeValue(self, val: 'double') -> "void":
        r"""
        setTimeValue(MEDCouplingFieldDouble self, double val)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setTimeValue(self, val)

    def setEndTimeValue(self, val: 'double') -> "void":
        r"""
        setEndTimeValue(MEDCouplingFieldDouble self, double val)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setEndTimeValue(self, val)

    def changeUnderlyingMesh(self, other: 'MEDCouplingMesh', levOfCheck: 'int', precOnMesh: 'double', eps: 'double'=1e-15) -> "void":
        r"""
        changeUnderlyingMesh(MEDCouplingFieldDouble self, MEDCouplingMesh other, int levOfCheck, double precOnMesh, double eps=1e-15)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_changeUnderlyingMesh(self, other, levOfCheck, precOnMesh, eps)

    def substractInPlaceDM(self, f: 'MEDCouplingFieldDouble', levOfCheck: 'int', precOnMesh: 'double', eps: 'double'=1e-15) -> "void":
        r"""
        substractInPlaceDM(MEDCouplingFieldDouble self, MEDCouplingFieldDouble f, int levOfCheck, double precOnMesh, double eps=1e-15)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_substractInPlaceDM(self, f, levOfCheck, precOnMesh, eps)

    def mergeNodes(self, eps: 'double', epsOnVals: 'double'=1e-15) -> "bool":
        r"""
        mergeNodes(MEDCouplingFieldDouble self, double eps, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_mergeNodes(self, eps, epsOnVals)

    def mergeNodesCenter(self, eps: 'double', epsOnVals: 'double'=1e-15) -> "bool":
        r"""
        mergeNodesCenter(MEDCouplingFieldDouble self, double eps, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_mergeNodesCenter(self, eps, epsOnVals)

    def zipCoords(self, epsOnVals: 'double'=1e-15) -> "bool":
        r"""
        zipCoords(MEDCouplingFieldDouble self, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_zipCoords(self, epsOnVals)

    def zipConnectivity(self, compType: 'int', epsOnVals: 'double'=1e-15) -> "bool":
        r"""
        zipConnectivity(MEDCouplingFieldDouble self, int compType, double epsOnVals=1e-15) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_zipConnectivity(self, compType, epsOnVals)

    def simplexize(self, policy: 'int') -> "bool":
        r"""
        simplexize(MEDCouplingFieldDouble self, int policy) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_simplexize(self, policy)

    def doublyContractedProduct(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        doublyContractedProduct(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_doublyContractedProduct(self)

    def determinant(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        determinant(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_determinant(self)

    def eigenValues(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        eigenValues(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_eigenValues(self)

    def eigenVectors(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        eigenVectors(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_eigenVectors(self)

    def inverse(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        inverse(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_inverse(self)

    def trace(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        trace(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_trace(self)

    def deviator(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        deviator(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_deviator(self)

    def magnitude(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        magnitude(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_magnitude(self)

    def maxPerTuple(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        maxPerTuple(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_maxPerTuple(self)

    def changeNbOfComponents(self, newNbOfComp: 'int', dftValue: 'double'=0.) -> "void":
        r"""
        changeNbOfComponents(MEDCouplingFieldDouble self, int newNbOfComp, double dftValue=0.)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_changeNbOfComponents(self, newNbOfComp, dftValue)

    def sortPerTuple(self, asc: 'bool') -> "void":
        r"""
        sortPerTuple(MEDCouplingFieldDouble self, bool asc)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_sortPerTuple(self, asc)

    def assign(self, value: 'double') -> "MEDCoupling::MEDCouplingFieldDouble &":
        r"""
        assign(MEDCouplingFieldDouble self, double value) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_assign(self, value)

    def fillFromAnalytic(self, nbOfComp: 'int', func: 'std::string const &') -> "void":
        r"""
        fillFromAnalytic(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_fillFromAnalytic(self, nbOfComp, func)

    def fillFromAnalyticCompo(self, nbOfComp: 'int', func: 'std::string const &') -> "void":
        r"""
        fillFromAnalyticCompo(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_fillFromAnalyticCompo(self, nbOfComp, func)

    def fillFromAnalyticNamedCompo(self, nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &') -> "void":
        r"""
        fillFromAnalyticNamedCompo(MEDCouplingFieldDouble self, int nbOfComp, svec varsOrder, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_fillFromAnalyticNamedCompo(self, nbOfComp, varsOrder, func)

    def applyFuncCompo(self, nbOfComp: 'int', func: 'std::string const &') -> "void":
        r"""
        applyFuncCompo(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFuncCompo(self, nbOfComp, func)

    def applyFuncNamedCompo(self, nbOfComp: 'int', varsOrder: 'svec', func: 'std::string const &') -> "void":
        r"""
        applyFuncNamedCompo(MEDCouplingFieldDouble self, int nbOfComp, svec varsOrder, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFuncNamedCompo(self, nbOfComp, varsOrder, func)

    def applyFunc(self, *args) -> "void":
        r"""
        applyFunc(MEDCouplingFieldDouble self, int nbOfComp, std::string const & func)
        applyFunc(MEDCouplingFieldDouble self, int nbOfComp, double val)
        applyFunc(MEDCouplingFieldDouble self, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFunc(self, *args)

    def applyFuncFast32(self, func: 'std::string const &') -> "void":
        r"""
        applyFuncFast32(MEDCouplingFieldDouble self, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFuncFast32(self, func)

    def applyFuncFast64(self, func: 'std::string const &') -> "void":
        r"""
        applyFuncFast64(MEDCouplingFieldDouble self, std::string const & func)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_applyFuncFast64(self, func)

    def getMaxValue(self) -> "double":
        r"""
        getMaxValue(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMaxValue(self)

    def getMinValue(self) -> "double":
        r"""
        getMinValue(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMinValue(self)

    def getAverageValue(self) -> "double":
        r"""
        getAverageValue(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getAverageValue(self)

    def norm2(self) -> "double":
        r"""
        norm2(MEDCouplingFieldDouble self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_norm2(self)

    def findIdsInRange(self, vmin: 'double', vmax: 'double') -> "MEDCoupling::DataArrayInt *":
        r"""
        findIdsInRange(MEDCouplingFieldDouble self, double vmin, double vmax) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_findIdsInRange(self, vmin, vmax)

    def buildSubPartRange(self, begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildSubPartRange(MEDCouplingFieldDouble self, int begin, int end, int step) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_buildSubPartRange(self, begin, end, step)

    @staticmethod
    def MeldFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MeldFields(f1, f2)

    @staticmethod
    def DotFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_DotFields(f1, f2)

    def dot(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        dot(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_dot(self, other)

    @staticmethod
    def CrossProductFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_CrossProductFields(f1, f2)

    def crossProduct(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        crossProduct(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_crossProduct(self, other)

    @staticmethod
    def MaxFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MaxFields(f1, f2)

    def max(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        max(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_max(self, other)

    @staticmethod
    def MinFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MinFields(f1, f2)

    @staticmethod
    def AddFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_AddFields(f1, f2)

    @staticmethod
    def SubstractFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_SubstractFields(f1, f2)

    @staticmethod
    def MultiplyFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MultiplyFields(f1, f2)

    @staticmethod
    def DivideFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_DivideFields(f1, f2)

    def min(self, other: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        min(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_min(self, other)

    def negate(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        negate(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_negate(self)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldDouble self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        __init__(MEDCouplingFieldDouble self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
        1
        """
        _MEDCouplingRemapper.MEDCouplingFieldDouble_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingFieldDouble(*args))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingFieldDouble self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___repr__(self)

    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldDouble', meshPrec: 'double', valsPrec: 'double') -> "PyObject *":
        r"""
        isEqualIfNotWhy(MEDCouplingFieldDouble self, MEDCouplingFieldDouble other, double meshPrec, double valsPrec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_isEqualIfNotWhy(self, other, meshPrec, valsPrec)

    def voronoize(self, eps: 'double') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        voronoize(MEDCouplingFieldDouble self, double eps) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_voronoize(self, eps)

    def convertQuadraticCellsToLinear(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        convertQuadraticCellsToLinear(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_convertQuadraticCellsToLinear(self)

    def computeVectorFieldCyl(self, center: 'PyObject *', vector: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        computeVectorFieldCyl(MEDCouplingFieldDouble self, PyObject * center, PyObject * vector) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_computeVectorFieldCyl(self, center, vector)

    def getArray(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getArray(MEDCouplingFieldDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getArray(self)

    def getArrays(self) -> "PyObject *":
        r"""
        getArrays(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getArrays(self)

    def setArrays(self, ls: 'PyObject *') -> "void":
        r"""
        setArrays(MEDCouplingFieldDouble self, PyObject * ls)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setArrays(self, ls)

    def getEndArray(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getEndArray(MEDCouplingFieldDouble self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getEndArray(self)

    def getValueOnPos(self, i: 'int', j: 'int', k: 'int') -> "PyObject *":
        r"""
        getValueOnPos(MEDCouplingFieldDouble self, int i, int j, int k) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getValueOnPos(self, i, j, k)

    def getValueOnMulti(self, locs: 'PyObject *') -> "MEDCoupling::DataArrayDouble *":
        r"""
        getValueOnMulti(MEDCouplingFieldDouble self, PyObject * locs) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getValueOnMulti(self, locs)

    def getValueOn(self, *args) -> "PyObject *":
        r"""
        getValueOn(MEDCouplingFieldDouble self, PyObject * sl) -> PyObject
        getValueOn(MEDCouplingFieldDouble self, PyObject * sl, double time) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getValueOn(self, *args)

    def setValues(self, li: 'PyObject *', nbOfTuples: 'PyObject *'=None, nbOfComp: 'PyObject *'=None) -> "void":
        r"""
        setValues(MEDCouplingFieldDouble self, PyObject * li, PyObject * nbOfTuples=None, PyObject * nbOfComp=None)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setValues(self, li, nbOfTuples, nbOfComp)

    def getTime(self) -> "PyObject *":
        r"""
        getTime(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTime(self)

    def getStartTime(self) -> "PyObject *":
        r"""
        getStartTime(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getStartTime(self)

    def getEndTime(self) -> "PyObject *":
        r"""
        getEndTime(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getEndTime(self)

    def accumulate(self, *args) -> "PyObject *":
        r"""
        accumulate(MEDCouplingFieldDouble self, int compId) -> double
        accumulate(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_accumulate(self, *args)

    def integral(self, *args) -> "PyObject *":
        r"""
        integral(MEDCouplingFieldDouble self, int compId, bool isWAbs) -> double
        integral(MEDCouplingFieldDouble self, bool isWAbs) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_integral(self, *args)

    def getWeightedAverageValue(self, *args) -> "PyObject *":
        r"""
        getWeightedAverageValue(MEDCouplingFieldDouble self, int compId, bool isWAbs) -> double
        getWeightedAverageValue(MEDCouplingFieldDouble self, bool isWAbs=True) -> PyObject
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getWeightedAverageValue(self, *args)

    def normL1(self, *args) -> "PyObject *":
        r"""
        normL1(MEDCouplingFieldDouble self, int compId) -> double
        normL1(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_normL1(self, *args)

    def normL2(self, *args) -> "PyObject *":
        r"""
        normL2(MEDCouplingFieldDouble self, int compId) -> double
        normL2(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_normL2(self, *args)

    def normMax(self, *args) -> "PyObject *":
        r"""
        normMax(MEDCouplingFieldDouble self, int compId) -> double
        normMax(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_normMax(self, *args)

    def renumberCells(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        r"""
        renumberCells(MEDCouplingFieldDouble self, PyObject * li, bool check=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_renumberCells(self, li, check)

    def renumberCellsWithoutMesh(self, li: 'PyObject *', check: 'bool'=True) -> "void":
        r"""
        renumberCellsWithoutMesh(MEDCouplingFieldDouble self, PyObject * li, bool check=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_renumberCellsWithoutMesh(self, li, check)

    def renumberNodes(self, li: 'PyObject *', eps: 'double'=1e-15) -> "void":
        r"""
        renumberNodes(MEDCouplingFieldDouble self, PyObject * li, double eps=1e-15)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_renumberNodes(self, li, eps)

    def renumberNodesWithoutMesh(self, li: 'PyObject *', newNbOfNodes: 'int', eps: 'double'=1e-15) -> "void":
        r"""
        renumberNodesWithoutMesh(MEDCouplingFieldDouble self, PyObject * li, int newNbOfNodes, double eps=1e-15)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_renumberNodesWithoutMesh(self, li, newNbOfNodes, eps)

    def buildSubPart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildSubPart(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_buildSubPart(self, li)

    def __getitem__(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __getitem__(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___getitem__(self, li)

    def getMaxValue2(self) -> "PyObject *":
        r"""
        getMaxValue2(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMaxValue2(self)

    def getMinValue2(self) -> "PyObject *":
        r"""
        getMinValue2(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getMinValue2(self)

    def keepSelectedComponents(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        keepSelectedComponents(MEDCouplingFieldDouble self, PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_keepSelectedComponents(self, li)

    def setSelectedComponents(self, f: 'MEDCouplingFieldDouble', li: 'PyObject *') -> "void":
        r"""
        setSelectedComponents(MEDCouplingFieldDouble self, MEDCouplingFieldDouble f, PyObject * li)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_setSelectedComponents(self, f, li)

    def extractSlice3D(self, origin: 'PyObject *', vec: 'PyObject *', eps: 'double') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        extractSlice3D(MEDCouplingFieldDouble self, PyObject * origin, PyObject * vec, double eps) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_extractSlice3D(self, origin, vec, eps)

    def __add__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __add__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___add__(self, obj)

    def __radd__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __radd__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___radd__(self, obj)

    def __sub__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __sub__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___sub__(self, obj)

    def __rsub__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __rsub__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___rsub__(self, obj)

    def __mul__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __mul__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___mul__(self, obj)

    def __rmul__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __rmul__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___rmul__(self, obj)

    def __div__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __div__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___div__(self, obj)

    def __rdiv__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __rdiv__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___rdiv__(self, obj)

    def __pow__(self, obj: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __pow__(MEDCouplingFieldDouble self, PyObject * obj) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___pow__(self, obj)

    def __neg__(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        __neg__(MEDCouplingFieldDouble self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___neg__(self)

    def ___iadd___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___iadd___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____iadd___(self, trueSelf, obj)

    def ___isub___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___isub___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____isub___(self, trueSelf, obj)

    def ___imul___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___imul___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____imul___(self, trueSelf, obj)

    def ___idiv___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___idiv___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____idiv___(self, trueSelf, obj)

    def ___ipow___(self, trueSelf: 'PyObject *', obj: 'PyObject *') -> "PyObject *":
        r"""
        ___ipow___(MEDCouplingFieldDouble self, PyObject * trueSelf, PyObject * obj) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble____ipow___(self, trueSelf, obj)

    @staticmethod
    def MergeFields(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
        MergeFields(PyObject * li) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_MergeFields(*args)

    @staticmethod
    def WriteVTK(fileName: 'char const *', li: 'PyObject *', isBinary: 'bool'=True) -> "std::string":
        r"""
        WriteVTK(char const * fileName, PyObject * li, bool isBinary=True) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_WriteVTK(fileName, li, isBinary)

    def getTinySerializationInformation(self) -> "PyObject *":
        r"""
        getTinySerializationInformation(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_getTinySerializationInformation(self)

    def serialize(self) -> "PyObject *":
        r"""
        serialize(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble_serialize(self)

    def __getstate__(self) -> "PyObject *":
        r"""
        __getstate__(MEDCouplingFieldDouble self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___getstate__(self)

    def __setstate__(self, inp: 'PyObject *') -> "void":
        r"""
        __setstate__(MEDCouplingFieldDouble self, PyObject * inp)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldDouble___setstate__(self, inp)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldDouble

# Register MEDCouplingFieldDouble in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldDouble_swigregister(MEDCouplingFieldDouble)

def MEDCouplingFieldDouble_New(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_New(*args)

def MEDCouplingFieldDouble_MeldFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_MeldFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_MeldFields(f1, f2)

def MEDCouplingFieldDouble_DotFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_DotFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_DotFields(f1, f2)

def MEDCouplingFieldDouble_CrossProductFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_CrossProductFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_CrossProductFields(f1, f2)

def MEDCouplingFieldDouble_MaxFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_MaxFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_MaxFields(f1, f2)

def MEDCouplingFieldDouble_MinFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_MinFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_MinFields(f1, f2)

def MEDCouplingFieldDouble_AddFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_AddFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_AddFields(f1, f2)

def MEDCouplingFieldDouble_SubstractFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_SubstractFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_SubstractFields(f1, f2)

def MEDCouplingFieldDouble_MultiplyFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_MultiplyFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_MultiplyFields(f1, f2)

def MEDCouplingFieldDouble_DivideFields(f1: 'MEDCouplingFieldDouble', f2: 'MEDCouplingFieldDouble') -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_DivideFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_DivideFields(f1, f2)

def MEDCouplingFieldDouble_MergeFields(*args) -> "MEDCoupling::MEDCouplingFieldDouble *":
    r"""
    MEDCouplingFieldDouble_MergeFields(MEDCouplingFieldDouble f1, MEDCouplingFieldDouble f2) -> MEDCouplingFieldDouble
    MEDCouplingFieldDouble_MergeFields(PyObject * li) -> MEDCouplingFieldDouble
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_MergeFields(*args)

def MEDCouplingFieldDouble_WriteVTK(fileName: 'char const *', li: 'PyObject *', isBinary: 'bool'=True) -> "std::string":
    r"""
    MEDCouplingFieldDouble_WriteVTK(char const * fileName, PyObject * li, bool isBinary=True) -> std::string
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldDouble_WriteVTK(fileName, li, isBinary)

class MEDCouplingMultiFields(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getNumberOfFields(self) -> "int":
        r"""
        getNumberOfFields(MEDCouplingMultiFields self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getNumberOfFields(self)

    def deepCopy(self) -> "MEDCoupling::MEDCouplingMultiFields *":
        r"""
        deepCopy(MEDCouplingMultiFields self) -> MEDCouplingMultiFields
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_deepCopy(self)

    def simpleRepr(self) -> "std::string":
        r"""
        simpleRepr(MEDCouplingMultiFields self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_simpleRepr(self)

    def advancedRepr(self) -> "std::string":
        r"""
        advancedRepr(MEDCouplingMultiFields self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_advancedRepr(self)

    def isEqual(self, other: 'MEDCouplingMultiFields', meshPrec: 'double', valsPrec: 'double') -> "bool":
        r"""
        isEqual(MEDCouplingMultiFields self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingMultiFields', meshPrec: 'double', valsPrec: 'double') -> "bool":
        r"""
        isEqualWithoutConsideringStr(MEDCouplingMultiFields self, MEDCouplingMultiFields other, double meshPrec, double valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def checkConsistencyLight(self) -> "void":
        r"""
        checkConsistencyLight(MEDCouplingMultiFields self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_checkConsistencyLight(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingMultiFields self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields___str__(self)

    @staticmethod
    def New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingMultiFields *":
        r"""
        New(PyObject * li) -> MEDCouplingMultiFields
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_New(li)

    def __init__(self, li: 'PyObject *'):
        r"""
        __init__(MEDCouplingMultiFields self, PyObject * li) -> MEDCouplingMultiFields
        1
        """
        _MEDCouplingRemapper.MEDCouplingMultiFields_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingMultiFields(li))

    def getFields(self) -> "PyObject *":
        r"""
        getFields(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getFields(self)

    def getFieldAtPos(self, id: 'int') -> "PyObject *":
        r"""
        getFieldAtPos(MEDCouplingMultiFields self, int id) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getFieldAtPos(self, id)

    def getMeshes(self) -> "PyObject *":
        r"""
        getMeshes(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getMeshes(self)

    def getDifferentMeshes(self) -> "PyObject *":
        r"""
        getDifferentMeshes(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getDifferentMeshes(self)

    def getArrays(self) -> "PyObject *":
        r"""
        getArrays(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getArrays(self)

    def getDifferentArrays(self) -> "PyObject *":
        r"""
        getDifferentArrays(MEDCouplingMultiFields self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingMultiFields_getDifferentArrays(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingMultiFields

# Register MEDCouplingMultiFields in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingMultiFields_swigregister(MEDCouplingMultiFields)

def MEDCouplingMultiFields_New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingMultiFields *":
    r"""
    MEDCouplingMultiFields_New(PyObject * li) -> MEDCouplingMultiFields
    1
    """
    return _MEDCouplingRemapper.MEDCouplingMultiFields_New(li)

class MEDCouplingFieldInt(MEDCouplingFieldTint):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_New(*args)

    def isEqual(self, other: 'MEDCouplingFieldInt', meshPrec: 'double', valsPrec: 'int') -> "bool":
        r"""
        isEqual(MEDCouplingFieldInt self, MEDCouplingFieldInt other, double meshPrec, int valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldInt', meshPrec: 'double', valsPrec: 'int') -> "bool":
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldInt self, MEDCouplingFieldInt other, double meshPrec, int valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        r"""
        setTimeUnit(MEDCouplingFieldInt self, std::string const & unit)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_setTimeUnit(self, unit)

    def getTimeUnit(self) -> "std::string":
        r"""
        getTimeUnit(MEDCouplingFieldInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_getTimeUnit(self)

    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        r"""
        setTime(MEDCouplingFieldInt self, double val, int iteration, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_setTime(self, val, iteration, order)

    def setArray(self, array: 'DataArrayInt') -> "void":
        r"""
        setArray(MEDCouplingFieldInt self, DataArrayInt array)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_setArray(self, array)

    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        deepCopy(MEDCouplingFieldInt self) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_deepCopy(self)

    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        clone(MEDCouplingFieldInt self, bool recDeepCpy) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_clone(self, recDeepCpy)

    def cloneWithMesh(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        cloneWithMesh(MEDCouplingFieldInt self, bool recDeepCpy) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_cloneWithMesh(self, recDeepCpy)

    def convertToDblField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        convertToDblField(MEDCouplingFieldInt self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_convertToDblField(self)

    def buildSubPartRange(self, begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        buildSubPartRange(MEDCouplingFieldInt self, int begin, int end, int step) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_buildSubPartRange(self, begin, end, step)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldInt self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt
        __init__(MEDCouplingFieldInt self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt
        1
        """
        _MEDCouplingRemapper.MEDCouplingFieldInt_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingFieldInt(*args))

    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldInt', meshPrec: 'double', valsPrec: 'int') -> "PyObject *":
        r"""
        isEqualIfNotWhy(MEDCouplingFieldInt self, MEDCouplingFieldInt other, double meshPrec, int valsPrec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_isEqualIfNotWhy(self, other, meshPrec, valsPrec)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingFieldInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingFieldInt self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt___repr__(self)

    def buildSubPart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        buildSubPart(MEDCouplingFieldInt self, PyObject * li) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_buildSubPart(self, li)

    def __getitem__(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldInt *":
        r"""
        __getitem__(MEDCouplingFieldInt self, PyObject * li) -> MEDCouplingFieldInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt___getitem__(self, li)

    def getArray(self) -> "MEDCoupling::DataArrayInt *":
        r"""
        getArray(MEDCouplingFieldInt self) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_getArray(self)

    def getTime(self) -> "PyObject *":
        r"""
        getTime(MEDCouplingFieldInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_getTime(self)

    def getTinySerializationInformation(self) -> "PyObject *":
        r"""
        getTinySerializationInformation(MEDCouplingFieldInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_getTinySerializationInformation(self)

    def serialize(self) -> "PyObject *":
        r"""
        serialize(MEDCouplingFieldInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt_serialize(self)

    def __getstate__(self) -> "PyObject *":
        r"""
        __getstate__(MEDCouplingFieldInt self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt___getstate__(self)

    def __setstate__(self, inp: 'PyObject *') -> "void":
        r"""
        __setstate__(MEDCouplingFieldInt self, PyObject * inp)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldInt___setstate__(self, inp)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldInt

# Register MEDCouplingFieldInt in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldInt_swigregister(MEDCouplingFieldInt)

def MEDCouplingFieldInt_New(*args) -> "MEDCoupling::MEDCouplingFieldInt *":
    r"""
    MEDCouplingFieldInt_New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt
    MEDCouplingFieldInt_New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldInt
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldInt_New(*args)

class MEDCouplingFieldFloat(MEDCouplingFieldTfloat):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_New(*args)

    def isEqual(self, other: 'MEDCouplingFieldFloat', meshPrec: 'double', valsPrec: 'float') -> "bool":
        r"""
        isEqual(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_isEqual(self, other, meshPrec, valsPrec)

    def isEqualWithoutConsideringStr(self, other: 'MEDCouplingFieldFloat', meshPrec: 'double', valsPrec: 'float') -> "bool":
        r"""
        isEqualWithoutConsideringStr(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_isEqualWithoutConsideringStr(self, other, meshPrec, valsPrec)

    def setTimeUnit(self, unit: 'std::string const &') -> "void":
        r"""
        setTimeUnit(MEDCouplingFieldFloat self, std::string const & unit)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_setTimeUnit(self, unit)

    def getTimeUnit(self) -> "std::string":
        r"""
        getTimeUnit(MEDCouplingFieldFloat self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_getTimeUnit(self)

    def setTime(self, val: 'double', iteration: 'int', order: 'int') -> "void":
        r"""
        setTime(MEDCouplingFieldFloat self, double val, int iteration, int order)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_setTime(self, val, iteration, order)

    def setArray(self, array: 'DataArrayFloat') -> "void":
        r"""
        setArray(MEDCouplingFieldFloat self, DataArrayFloat array)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_setArray(self, array)

    def deepCopy(self) -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        deepCopy(MEDCouplingFieldFloat self) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_deepCopy(self)

    def clone(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        clone(MEDCouplingFieldFloat self, bool recDeepCpy) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_clone(self, recDeepCpy)

    def cloneWithMesh(self, recDeepCpy: 'bool') -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        cloneWithMesh(MEDCouplingFieldFloat self, bool recDeepCpy) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_cloneWithMesh(self, recDeepCpy)

    def convertToDblField(self) -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        convertToDblField(MEDCouplingFieldFloat self) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_convertToDblField(self)

    def buildSubPartRange(self, begin: 'int', end: 'int', step: 'int') -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        buildSubPartRange(MEDCouplingFieldFloat self, int begin, int end, int step) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_buildSubPartRange(self, begin, end, step)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingFieldFloat self, MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        __init__(MEDCouplingFieldFloat self, MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
        1
        """
        _MEDCouplingRemapper.MEDCouplingFieldFloat_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingFieldFloat(*args))

    def isEqualIfNotWhy(self, other: 'MEDCouplingFieldFloat', meshPrec: 'double', valsPrec: 'float') -> "PyObject *":
        r"""
        isEqualIfNotWhy(MEDCouplingFieldFloat self, MEDCouplingFieldFloat other, double meshPrec, float valsPrec) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_isEqualIfNotWhy(self, other, meshPrec, valsPrec)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingFieldFloat self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat___str__(self)

    def __repr__(self) -> "std::string":
        r"""
        __repr__(MEDCouplingFieldFloat self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat___repr__(self)

    def buildSubPart(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        buildSubPart(MEDCouplingFieldFloat self, PyObject * li) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_buildSubPart(self, li)

    def __getitem__(self, li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldFloat *":
        r"""
        __getitem__(MEDCouplingFieldFloat self, PyObject * li) -> MEDCouplingFieldFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat___getitem__(self, li)

    def getArray(self) -> "MEDCoupling::DataArrayFloat *":
        r"""
        getArray(MEDCouplingFieldFloat self) -> DataArrayFloat
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_getArray(self)

    def getTime(self) -> "PyObject *":
        r"""
        getTime(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_getTime(self)

    def getTinySerializationInformation(self) -> "PyObject *":
        r"""
        getTinySerializationInformation(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_getTinySerializationInformation(self)

    def serialize(self) -> "PyObject *":
        r"""
        serialize(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat_serialize(self)

    def __getstate__(self) -> "PyObject *":
        r"""
        __getstate__(MEDCouplingFieldFloat self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat___getstate__(self)

    def __setstate__(self, inp: 'PyObject *') -> "void":
        r"""
        __setstate__(MEDCouplingFieldFloat self, PyObject * inp)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldFloat___setstate__(self, inp)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldFloat

# Register MEDCouplingFieldFloat in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldFloat_swigregister(MEDCouplingFieldFloat)

def MEDCouplingFieldFloat_New(*args) -> "MEDCoupling::MEDCouplingFieldFloat *":
    r"""
    MEDCouplingFieldFloat_New(MEDCoupling::TypeOfField type, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
    MEDCouplingFieldFloat_New(MEDCouplingFieldTemplate ft, MEDCoupling::TypeOfTimeDiscretization td=ONE_TIME) -> MEDCouplingFieldFloat
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldFloat_New(*args)

class MEDCouplingDefinitionTime(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(MEDCouplingDefinitionTime self) -> MEDCouplingDefinitionTime
        1
        """
        _MEDCouplingRemapper.MEDCouplingDefinitionTime_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingDefinitionTime())

    def assign(self, other: 'MEDCouplingDefinitionTime') -> "void":
        r"""
        assign(MEDCouplingDefinitionTime self, MEDCouplingDefinitionTime other)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_assign(self, other)

    def isEqual(self, other: 'MEDCouplingDefinitionTime') -> "bool":
        r"""
        isEqual(MEDCouplingDefinitionTime self, MEDCouplingDefinitionTime other) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_isEqual(self, other)

    def getTimeResolution(self) -> "double":
        r"""
        getTimeResolution(MEDCouplingDefinitionTime self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getTimeResolution(self)

    def getHotSpotsTime(self) -> "std::vector< double,std::allocator< double > >":
        r"""
        getHotSpotsTime(MEDCouplingDefinitionTime self) -> dvec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getHotSpotsTime(self)

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingDefinitionTime self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime___str__(self)

    def getIdsOnTimeRight(self, tm: 'double') -> "PyObject *":
        r"""
        getIdsOnTimeRight(MEDCouplingDefinitionTime self, double tm) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getIdsOnTimeRight(self, tm)

    def getIdsOnTimeLeft(self, tm: 'double') -> "PyObject *":
        r"""
        getIdsOnTimeLeft(MEDCouplingDefinitionTime self, double tm) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDefinitionTime_getIdsOnTimeLeft(self, tm)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingDefinitionTime

# Register MEDCouplingDefinitionTime in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingDefinitionTime_swigregister(MEDCouplingDefinitionTime)

class MEDCouplingFieldOverTime(MEDCouplingMultiFields):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getTimeTolerance(self) -> "double":
        r"""
        getTimeTolerance(MEDCouplingFieldOverTime self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime_getTimeTolerance(self)

    def getDefinitionTimeZone(self) -> "MEDCoupling::MEDCouplingDefinitionTime":
        r"""
        getDefinitionTimeZone(MEDCouplingFieldOverTime self) -> MEDCouplingDefinitionTime
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime_getDefinitionTimeZone(self)

    def __init__(self, li: 'PyObject *'):
        r"""
        __init__(MEDCouplingFieldOverTime self, PyObject * li) -> MEDCouplingFieldOverTime
        1
        """
        _MEDCouplingRemapper.MEDCouplingFieldOverTime_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingFieldOverTime(li))

    def __str__(self) -> "std::string":
        r"""
        __str__(MEDCouplingFieldOverTime self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime___str__(self)

    @staticmethod
    def New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldOverTime *":
        r"""
        New(PyObject * li) -> MEDCouplingFieldOverTime
        1
        """
        return _MEDCouplingRemapper.MEDCouplingFieldOverTime_New(li)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingFieldOverTime

# Register MEDCouplingFieldOverTime in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingFieldOverTime_swigregister(MEDCouplingFieldOverTime)

def MEDCouplingFieldOverTime_New(li: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldOverTime *":
    r"""
    MEDCouplingFieldOverTime_New(PyObject * li) -> MEDCouplingFieldOverTime
    1
    """
    return _MEDCouplingRemapper.MEDCouplingFieldOverTime_New(li)

class MEDCouplingCartesianAMRPatchGen(RefCountObject):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfCellsRecursiveWithOverlap(self) -> "int":
        r"""
        getNumberOfCellsRecursiveWithOverlap(MEDCouplingCartesianAMRPatchGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatchGen_getNumberOfCellsRecursiveWithOverlap(self)

    def getNumberOfCellsRecursiveWithoutOverlap(self) -> "int":
        r"""
        getNumberOfCellsRecursiveWithoutOverlap(MEDCouplingCartesianAMRPatchGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatchGen_getNumberOfCellsRecursiveWithoutOverlap(self)

    def getMaxNumberOfLevelsRelativeToThis(self) -> "int":
        r"""
        getMaxNumberOfLevelsRelativeToThis(MEDCouplingCartesianAMRPatchGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatchGen_getMaxNumberOfLevelsRelativeToThis(self)

    def getMesh(self) -> "MEDCouplingCartesianAMRMeshGen *":
        r"""
        getMesh(MEDCouplingCartesianAMRPatchGen self) -> MEDCouplingCartesianAMRMeshGen *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatchGen_getMesh(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCartesianAMRPatchGen

# Register MEDCouplingCartesianAMRPatchGen in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCartesianAMRPatchGen_swigregister(MEDCouplingCartesianAMRPatchGen)

class MEDCouplingCartesianAMRPatch(MEDCouplingCartesianAMRPatchGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfOverlapedCellsForFather(self) -> "int":
        r"""
        getNumberOfOverlapedCellsForFather(MEDCouplingCartesianAMRPatch self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch_getNumberOfOverlapedCellsForFather(self)

    def isInMyNeighborhood(self, other: 'MEDCouplingCartesianAMRPatch', ghostLev: 'int') -> "bool":
        r"""
        isInMyNeighborhood(MEDCouplingCartesianAMRPatch self, MEDCouplingCartesianAMRPatch other, int ghostLev) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch_isInMyNeighborhood(self, other, ghostLev)

    def computeCellGridSt(self) -> "std::vector< int,std::allocator< int > >":
        r"""
        computeCellGridSt(MEDCouplingCartesianAMRPatch self) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch_computeCellGridSt(self)

    def getBLTRRange(self) -> "PyObject *":
        r"""
        getBLTRRange(MEDCouplingCartesianAMRPatch self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch_getBLTRRange(self)

    def getBLTRRangeRelativeToGF(self) -> "PyObject *":
        r"""
        getBLTRRangeRelativeToGF(MEDCouplingCartesianAMRPatch self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch_getBLTRRangeRelativeToGF(self)

    def addPatch(self, bottomLeftTopRight: 'PyObject *', factors: 'ivec') -> "void":
        r"""
        addPatch(MEDCouplingCartesianAMRPatch self, PyObject * bottomLeftTopRight, ivec factors)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch_addPatch(self, bottomLeftTopRight, factors)

    def __getitem__(self, patchId: 'int') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        r"""
        __getitem__(MEDCouplingCartesianAMRPatch self, int patchId) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch___getitem__(self, patchId)

    def __delitem__(self, patchId: 'int') -> "void":
        r"""
        __delitem__(MEDCouplingCartesianAMRPatch self, int patchId)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch___delitem__(self, patchId)

    def __len__(self) -> "int":
        r"""
        __len__(MEDCouplingCartesianAMRPatch self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRPatch___len__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCartesianAMRPatch

# Register MEDCouplingCartesianAMRPatch in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCartesianAMRPatch_swigregister(MEDCouplingCartesianAMRPatch)

class MEDCouplingCartesianAMRPatchGF(MEDCouplingCartesianAMRPatchGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCartesianAMRPatchGF

# Register MEDCouplingCartesianAMRPatchGF in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCartesianAMRPatchGF_swigregister(MEDCouplingCartesianAMRPatchGF)

class MEDCouplingCartesianAMRMeshGen(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getAbsoluteLevel(self) -> "int":
        r"""
        getAbsoluteLevel(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getAbsoluteLevel(self)

    def getAbsoluteLevelRelativeTo(self, ref: 'MEDCouplingCartesianAMRMeshGen') -> "int":
        r"""
        getAbsoluteLevelRelativeTo(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen ref) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getAbsoluteLevelRelativeTo(self, ref)

    def getPositionRelativeTo(self, ref: 'MEDCouplingCartesianAMRMeshGen') -> "std::vector< int,std::allocator< int > >":
        r"""
        getPositionRelativeTo(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen ref) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getPositionRelativeTo(self, ref)

    def getSpaceDimension(self) -> "int":
        r"""
        getSpaceDimension(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getSpaceDimension(self)

    def getFactors(self) -> "std::vector< int,std::allocator< int > > const &":
        r"""
        getFactors(MEDCouplingCartesianAMRMeshGen self) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getFactors(self)

    def setFactors(self, newFactors: 'ivec') -> "void":
        r"""
        setFactors(MEDCouplingCartesianAMRMeshGen self, ivec newFactors)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_setFactors(self, newFactors)

    def getMaxNumberOfLevelsRelativeToThis(self) -> "int":
        r"""
        getMaxNumberOfLevelsRelativeToThis(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getMaxNumberOfLevelsRelativeToThis(self)

    def getNumberOfCellsAtCurrentLevel(self) -> "int":
        r"""
        getNumberOfCellsAtCurrentLevel(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsAtCurrentLevel(self)

    def getNumberOfCellsAtCurrentLevelGhost(self, ghostLev: 'int') -> "int":
        r"""
        getNumberOfCellsAtCurrentLevelGhost(MEDCouplingCartesianAMRMeshGen self, int ghostLev) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsAtCurrentLevelGhost(self, ghostLev)

    def getNumberOfCellsRecursiveWithOverlap(self) -> "int":
        r"""
        getNumberOfCellsRecursiveWithOverlap(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsRecursiveWithOverlap(self)

    def getNumberOfCellsRecursiveWithoutOverlap(self) -> "int":
        r"""
        getNumberOfCellsRecursiveWithoutOverlap(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getNumberOfCellsRecursiveWithoutOverlap(self)

    def isPatchInNeighborhoodOf(self, patchId1: 'int', patchId2: 'int', ghostLev: 'int') -> "bool":
        r"""
        isPatchInNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, int patchId1, int patchId2, int ghostLev) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_isPatchInNeighborhoodOf(self, patchId1, patchId2, ghostLev)

    def detachFromFather(self) -> "void":
        r"""
        detachFromFather(MEDCouplingCartesianAMRMeshGen self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_detachFromFather(self)

    def getNumberOfPatches(self) -> "int":
        r"""
        getNumberOfPatches(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getNumberOfPatches(self)

    def getPatchIdFromChildMesh(self, mesh: 'MEDCouplingCartesianAMRMeshGen') -> "int":
        r"""
        getPatchIdFromChildMesh(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen mesh) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getPatchIdFromChildMesh(self, mesh)

    def buildUnstructured(self) -> "MEDCoupling::MEDCouplingUMesh *":
        r"""
        buildUnstructured(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_buildUnstructured(self)

    def extractGhostFrom(self, ghostSz: 'int', arr: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        extractGhostFrom(MEDCouplingCartesianAMRMeshGen self, int ghostSz, DataArrayDouble arr) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_extractGhostFrom(self, ghostSz, arr)

    def getPatchIdsInTheNeighborhoodOf(self, patchId: 'int', ghostLev: 'int') -> "std::vector< int,std::allocator< int > >":
        r"""
        getPatchIdsInTheNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, int patchId, int ghostLev) -> ivec
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getPatchIdsInTheNeighborhoodOf(self, patchId, ghostLev)

    def buildMeshFromPatchEnvelop(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        buildMeshFromPatchEnvelop(MEDCouplingCartesianAMRMeshGen self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_buildMeshFromPatchEnvelop(self)

    def buildMeshOfDirectChildrenOnly(self) -> "MEDCoupling::MEDCoupling1SGTUMesh *":
        r"""
        buildMeshOfDirectChildrenOnly(MEDCouplingCartesianAMRMeshGen self) -> MEDCoupling1SGTUMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_buildMeshOfDirectChildrenOnly(self)

    def removeAllPatches(self) -> "void":
        r"""
        removeAllPatches(MEDCouplingCartesianAMRMeshGen self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_removeAllPatches(self)

    def removePatch(self, patchId: 'int') -> "void":
        r"""
        removePatch(MEDCouplingCartesianAMRMeshGen self, int patchId)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_removePatch(self, patchId)

    def createPatchesFromCriterion(self, *args) -> "void":
        r"""
        createPatchesFromCriterion(MEDCouplingCartesianAMRMeshGen self, BoxSplittingOptions bso, DataArrayByte criterion, ivec factors)
        createPatchesFromCriterion(MEDCouplingCartesianAMRMeshGen self, BoxSplittingOptions bso, DataArrayDouble criterion, ivec factors, double eps)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_createPatchesFromCriterion(self, *args)

    def createCellFieldOnPatch(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        createCellFieldOnPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_createCellFieldOnPatch(self, patchId, cellFieldOnThis)

    def fillCellFieldOnPatch(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', cellFieldOnPatch: 'DataArrayDouble', isConservative: 'bool'=True) -> "void":
        r"""
        fillCellFieldOnPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, bool isConservative=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatch(self, patchId, cellFieldOnThis, cellFieldOnPatch, isConservative)

    def fillCellFieldOnPatchGhost(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', cellFieldOnPatch: 'DataArrayDouble', ghostLev: 'int', isConservative: 'bool'=True) -> "void":
        r"""
        fillCellFieldOnPatchGhost(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, int ghostLev, bool isConservative=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchGhost(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev, isConservative)

    def fillCellFieldOnPatchOnlyOnGhostZone(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', cellFieldOnPatch: 'DataArrayDouble', ghostLev: 'int') -> "void":
        r"""
        fillCellFieldOnPatchOnlyOnGhostZone(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, DataArrayDouble cellFieldOnPatch, int ghostLev)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyOnGhostZone(self, patchId, cellFieldOnThis, cellFieldOnPatch, ghostLev)

    def fillCellFieldOnPatchOnlyOnGhostZoneWith(self, ghostLev: 'int', patchToBeModified: 'MEDCouplingCartesianAMRPatch', neighborPatch: 'MEDCouplingCartesianAMRPatch', cellFieldOnPatch: 'DataArrayDouble', cellFieldNeighbor: 'DataArrayDouble') -> "void":
        r"""
        fillCellFieldOnPatchOnlyOnGhostZoneWith(MEDCouplingCartesianAMRMeshGen self, int ghostLev, MEDCouplingCartesianAMRPatch patchToBeModified, MEDCouplingCartesianAMRPatch neighborPatch, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldNeighbor)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyOnGhostZoneWith(self, ghostLev, patchToBeModified, neighborPatch, cellFieldOnPatch, cellFieldNeighbor)

    def fillCellFieldComingFromPatch(self, patchId: 'int', cellFieldOnPatch: 'DataArrayDouble', cellFieldOnThis: 'DataArrayDouble', isConservative: 'bool'=True) -> "void":
        r"""
        fillCellFieldComingFromPatch(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis, bool isConservative=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldComingFromPatch(self, patchId, cellFieldOnPatch, cellFieldOnThis, isConservative)

    def fillCellFieldComingFromPatchGhost(self, patchId: 'int', cellFieldOnPatch: 'DataArrayDouble', cellFieldOnThis: 'DataArrayDouble', ghostLev: 'int', isConservative: 'bool'=True) -> "void":
        r"""
        fillCellFieldComingFromPatchGhost(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnPatch, DataArrayDouble cellFieldOnThis, int ghostLev, bool isConservative=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldComingFromPatchGhost(self, patchId, cellFieldOnPatch, cellFieldOnThis, ghostLev, isConservative)

    def findPatchesInTheNeighborhoodOf(self, patchId: 'int', ghostLev: 'int') -> "MEDCoupling::DataArrayInt *":
        r"""
        findPatchesInTheNeighborhoodOf(MEDCouplingCartesianAMRMeshGen self, int patchId, int ghostLev) -> DataArrayInt
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_findPatchesInTheNeighborhoodOf(self, patchId, ghostLev)

    def buildPythonDumpOfThis(self) -> "std::string":
        r"""
        buildPythonDumpOfThis(MEDCouplingCartesianAMRMeshGen self) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_buildPythonDumpOfThis(self)

    def addPatch(self, bottomLeftTopRight: 'PyObject *', factors: 'ivec') -> "void":
        r"""
        addPatch(MEDCouplingCartesianAMRMeshGen self, PyObject * bottomLeftTopRight, ivec factors)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_addPatch(self, bottomLeftTopRight, factors)

    def getPatches(self) -> "PyObject *":
        r"""
        getPatches(MEDCouplingCartesianAMRMeshGen self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getPatches(self)

    def deepCopy(self, father: 'MEDCouplingCartesianAMRMeshGen') -> "PyObject *":
        r"""
        deepCopy(MEDCouplingCartesianAMRMeshGen self, MEDCouplingCartesianAMRMeshGen father) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_deepCopy(self, father)

    def getPatchAtPosition(self, pos: 'ivec') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        r"""
        getPatchAtPosition(MEDCouplingCartesianAMRMeshGen self, ivec pos) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getPatchAtPosition(self, pos)

    def getMeshAtPosition(self, pos: 'ivec') -> "MEDCoupling::MEDCouplingCartesianAMRMeshGen *":
        r"""
        getMeshAtPosition(MEDCouplingCartesianAMRMeshGen self, ivec pos) -> MEDCouplingCartesianAMRMeshGen
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getMeshAtPosition(self, pos)

    def positionRelativeToGodFather(self) -> "PyObject *":
        r"""
        positionRelativeToGodFather(MEDCouplingCartesianAMRMeshGen self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_positionRelativeToGodFather(self)

    def retrieveGridsAt(self, absoluteLev: 'int') -> "PyObject *":
        r"""
        retrieveGridsAt(MEDCouplingCartesianAMRMeshGen self, int absoluteLev) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_retrieveGridsAt(self, absoluteLev)

    def buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, ghostSz: 'int', recurseArrs: 'PyObject *') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildCellFieldOnRecurseWithoutOverlapWithoutGhost(MEDCouplingCartesianAMRMeshGen self, int ghostSz, PyObject * recurseArrs) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, ghostSz, recurseArrs)

    def getFather(self) -> "MEDCoupling::MEDCouplingCartesianAMRMeshGen *":
        r"""
        getFather(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingCartesianAMRMeshGen
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getFather(self)

    def getGodFather(self) -> "MEDCoupling::MEDCouplingCartesianAMRMeshGen *":
        r"""
        getGodFather(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingCartesianAMRMeshGen
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getGodFather(self)

    def getPatch(self, patchId: 'int') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        r"""
        getPatch(MEDCouplingCartesianAMRMeshGen self, int patchId) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getPatch(self, patchId)

    def getImageMesh(self) -> "MEDCoupling::MEDCouplingIMesh *":
        r"""
        getImageMesh(MEDCouplingCartesianAMRMeshGen self) -> MEDCouplingIMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_getImageMesh(self)

    def __getitem__(self, patchId: 'int') -> "MEDCoupling::MEDCouplingCartesianAMRPatch *":
        r"""
        __getitem__(MEDCouplingCartesianAMRMeshGen self, int patchId) -> MEDCouplingCartesianAMRPatch
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen___getitem__(self, patchId)

    def fillCellFieldOnPatchGhostAdv(self, patchId: 'int', cellFieldOnThis: 'DataArrayDouble', ghostLev: 'int', arrsOnPatches: 'PyObject *', isConservative: 'bool'=True) -> "void":
        r"""
        fillCellFieldOnPatchGhostAdv(MEDCouplingCartesianAMRMeshGen self, int patchId, DataArrayDouble cellFieldOnThis, int ghostLev, PyObject * arrsOnPatches, bool isConservative=True)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchGhostAdv(self, patchId, cellFieldOnThis, ghostLev, arrsOnPatches, isConservative)

    def fillCellFieldOnPatchOnlyGhostAdv(self, patchId: 'int', ghostLev: 'int', arrsOnPatches: 'PyObject *') -> "void":
        r"""
        fillCellFieldOnPatchOnlyGhostAdv(MEDCouplingCartesianAMRMeshGen self, int patchId, int ghostLev, PyObject * arrsOnPatches)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_fillCellFieldOnPatchOnlyGhostAdv(self, patchId, ghostLev, arrsOnPatches)

    def __delitem__(self, patchId: 'int') -> "void":
        r"""
        __delitem__(MEDCouplingCartesianAMRMeshGen self, int patchId)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen___delitem__(self, patchId)

    def __len__(self) -> "int":
        r"""
        __len__(MEDCouplingCartesianAMRMeshGen self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen___len__(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCartesianAMRMeshGen

# Register MEDCouplingCartesianAMRMeshGen in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCartesianAMRMeshGen_swigregister(MEDCouplingCartesianAMRMeshGen)

class MEDCouplingCartesianAMRMeshSub(MEDCouplingCartesianAMRMeshGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCartesianAMRMeshSub

# Register MEDCouplingCartesianAMRMeshSub in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCartesianAMRMeshSub_swigregister(MEDCouplingCartesianAMRMeshSub)

class MEDCouplingCartesianAMRMesh(MEDCouplingCartesianAMRMeshGen):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def New(*args) -> "MEDCoupling::MEDCouplingCartesianAMRMesh *":
        r"""
        New(MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh
        New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMesh_New(*args)

    def createPatchesFromCriterionML(self, bso: 'PyObject *', criterion: 'DataArrayDouble', factors: 'PyObject *', eps: 'double') -> "void":
        r"""
        createPatchesFromCriterionML(MEDCouplingCartesianAMRMesh self, PyObject * bso, DataArrayDouble criterion, PyObject * factors, double eps)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingCartesianAMRMesh_createPatchesFromCriterionML(self, bso, criterion, factors, eps)

    def __init__(self, *args):
        r"""
        __init__(MEDCouplingCartesianAMRMesh self, std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh
        __init__(MEDCouplingCartesianAMRMesh self, MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh
        1
        """
        _MEDCouplingRemapper.MEDCouplingCartesianAMRMesh_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingCartesianAMRMesh(*args))
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingCartesianAMRMesh

# Register MEDCouplingCartesianAMRMesh in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingCartesianAMRMesh_swigregister(MEDCouplingCartesianAMRMesh)

def MEDCouplingCartesianAMRMesh_New(*args) -> "MEDCoupling::MEDCouplingCartesianAMRMesh *":
    r"""
    MEDCouplingCartesianAMRMesh_New(MEDCouplingIMesh mesh) -> MEDCouplingCartesianAMRMesh
    MEDCouplingCartesianAMRMesh_New(std::string const & meshName, int spaceDim, PyObject * nodeStrct, PyObject * origin, PyObject * dxyz) -> MEDCouplingCartesianAMRMesh
    1
    """
    return _MEDCouplingRemapper.MEDCouplingCartesianAMRMesh_New(*args)

class MEDCouplingDataForGodFather(RefCountObject):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def synchronizeFineToCoarse(self) -> "void":
        r"""
        synchronizeFineToCoarse(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeFineToCoarse(self)

    def synchronizeFineToCoarseBetween(self, fromLev: 'int', toLev: 'int') -> "void":
        r"""
        synchronizeFineToCoarseBetween(MEDCouplingDataForGodFather self, int fromLev, int toLev)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeFineToCoarseBetween(self, fromLev, toLev)

    def synchronizeCoarseToFine(self) -> "void":
        r"""
        synchronizeCoarseToFine(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeCoarseToFine(self)

    def synchronizeCoarseToFineBetween(self, fromLev: 'int', toLev: 'int') -> "void":
        r"""
        synchronizeCoarseToFineBetween(MEDCouplingDataForGodFather self, int fromLev, int toLev)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeCoarseToFineBetween(self, fromLev, toLev)

    def synchronizeAllGhostZones(self) -> "void":
        r"""
        synchronizeAllGhostZones(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeAllGhostZones(self)

    def synchronizeAllGhostZonesOfDirectChidrenOf(self, mesh: 'MEDCouplingCartesianAMRMeshGen') -> "void":
        r"""
        synchronizeAllGhostZonesOfDirectChidrenOf(MEDCouplingDataForGodFather self, MEDCouplingCartesianAMRMeshGen mesh)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeAllGhostZonesOfDirectChidrenOf(self, mesh)

    def synchronizeAllGhostZonesAtASpecifiedLevel(self, level: 'int') -> "void":
        r"""
        synchronizeAllGhostZonesAtASpecifiedLevel(MEDCouplingDataForGodFather self, int level)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeAllGhostZonesAtASpecifiedLevel(self, level)

    def synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(self, level: 'int') -> "void":
        r"""
        synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(MEDCouplingDataForGodFather self, int level)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_synchronizeAllGhostZonesAtASpecifiedLevelUsingOnlyFather(self, level)

    def alloc(self) -> "void":
        r"""
        alloc(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_alloc(self)

    def dealloc(self) -> "void":
        r"""
        dealloc(MEDCouplingDataForGodFather self)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_dealloc(self)

    def getMyGodFather(self) -> "MEDCoupling::MEDCouplingCartesianAMRMesh *":
        r"""
        getMyGodFather(MEDCouplingDataForGodFather self) -> MEDCouplingCartesianAMRMesh
        1
        """
        return _MEDCouplingRemapper.MEDCouplingDataForGodFather_getMyGodFather(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingDataForGodFather

# Register MEDCouplingDataForGodFather in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingDataForGodFather_swigregister(MEDCouplingDataForGodFather)

class MEDCouplingAMRAttribute(MEDCouplingDataForGodFather, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def getNumberOfLevels(self) -> "int":
        r"""
        getNumberOfLevels(MEDCouplingAMRAttribute self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_getNumberOfLevels(self)

    def deepCopy(self) -> "MEDCoupling::MEDCouplingAMRAttribute *":
        r"""
        deepCopy(MEDCouplingAMRAttribute self) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_deepCopy(self)

    def deepCpyWithoutGodFather(self) -> "MEDCoupling::MEDCouplingAMRAttribute *":
        r"""
        deepCpyWithoutGodFather(MEDCouplingAMRAttribute self) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_deepCpyWithoutGodFather(self)

    def buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildCellFieldOnRecurseWithoutOverlapWithoutGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_buildCellFieldOnRecurseWithoutOverlapWithoutGhost(self, mesh, fieldName)

    def buildCellFieldOnWithGhost(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildCellFieldOnWithGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_buildCellFieldOnWithGhost(self, mesh, fieldName)

    def buildCellFieldOnWithoutGhost(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        buildCellFieldOnWithoutGhost(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_buildCellFieldOnWithoutGhost(self, mesh, fieldName)

    def changeGodFather(self, gf: 'MEDCouplingCartesianAMRMesh') -> "bool":
        r"""
        changeGodFather(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh gf) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_changeGodFather(self, gf)

    def projectTo(self, targetGF: 'MEDCouplingCartesianAMRMesh') -> "MEDCoupling::MEDCouplingAMRAttribute *":
        r"""
        projectTo(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh targetGF) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_projectTo(self, targetGF)

    def writeVTHB(self, fileName: 'std::string const &') -> "std::string":
        r"""
        writeVTHB(MEDCouplingAMRAttribute self, std::string const & fileName) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_writeVTHB(self, fileName)

    @staticmethod
    def New(gf: 'MEDCouplingCartesianAMRMesh', fieldNames: 'PyObject *', ghostLev: 'int') -> "MEDCoupling::MEDCouplingAMRAttribute *":
        r"""
        New(MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, int ghostLev) -> MEDCouplingAMRAttribute
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_New(gf, fieldNames, ghostLev)

    def __init__(self, gf: 'MEDCouplingCartesianAMRMesh', fieldNames: 'PyObject *', ghostLev: 'int'):
        r"""
        __init__(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, int ghostLev) -> MEDCouplingAMRAttribute
        1
        """
        _MEDCouplingRemapper.MEDCouplingAMRAttribute_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingAMRAttribute(gf, fieldNames, ghostLev))

    def getFieldOn(self, mesh: 'MEDCouplingCartesianAMRMeshGen', fieldName: 'std::string const &') -> "MEDCoupling::DataArrayDouble *":
        r"""
        getFieldOn(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh, std::string const & fieldName) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_getFieldOn(self, mesh, fieldName)

    def spillInfoOnComponents(self, compNames: 'PyObject *') -> "void":
        r"""
        spillInfoOnComponents(MEDCouplingAMRAttribute self, PyObject * compNames)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_spillInfoOnComponents(self, compNames)

    def spillNatures(self, nfs: 'PyObject *') -> "void":
        r"""
        spillNatures(MEDCouplingAMRAttribute self, PyObject * nfs)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_spillNatures(self, nfs)

    def retrieveFieldsOn(self, mesh: 'MEDCouplingCartesianAMRMeshGen') -> "PyObject *":
        r"""
        retrieveFieldsOn(MEDCouplingAMRAttribute self, MEDCouplingCartesianAMRMeshGen mesh) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingAMRAttribute_retrieveFieldsOn(self, mesh)
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingAMRAttribute

# Register MEDCouplingAMRAttribute in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingAMRAttribute_swigregister(MEDCouplingAMRAttribute)

def MEDCouplingAMRAttribute_New(gf: 'MEDCouplingCartesianAMRMesh', fieldNames: 'PyObject *', ghostLev: 'int') -> "MEDCoupling::MEDCouplingAMRAttribute *":
    r"""
    MEDCouplingAMRAttribute_New(MEDCouplingCartesianAMRMesh gf, PyObject * fieldNames, int ghostLev) -> MEDCouplingAMRAttribute
    1
    """
    return _MEDCouplingRemapper.MEDCouplingAMRAttribute_New(gf, fieldNames, ghostLev)

class DenseMatrix(RefCountObject, TimeLabel):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @staticmethod
    def New(*args) -> "MEDCoupling::DenseMatrix *":
        r"""
        New(int nbRows, int nbCols) -> DenseMatrix
        New(DataArrayDouble array, int nbRows, int nbCols) -> DenseMatrix
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_New(*args)

    def deepCopy(self) -> "MEDCoupling::DenseMatrix *":
        r"""
        deepCopy(DenseMatrix self) -> DenseMatrix
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_deepCopy(self)

    def shallowCpy(self) -> "MEDCoupling::DenseMatrix *":
        r"""
        shallowCpy(DenseMatrix self) -> DenseMatrix
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_shallowCpy(self)

    def getNumberOfRows(self) -> "int":
        r"""
        getNumberOfRows(DenseMatrix self) -> int
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_getNumberOfRows(self)

    def getNumberOfCols(self) -> "int":
        r"""
        getNumberOfCols(DenseMatrix self) -> int
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_getNumberOfCols(self)

    def getNbOfElems(self) -> "int":
        r"""
        getNbOfElems(DenseMatrix self) -> int
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_getNbOfElems(self)

    def reBuild(self, array: 'DataArrayDouble', nbRows: 'int'=-1, nbCols: 'int'=-1) -> "void":
        r"""
        reBuild(DenseMatrix self, DataArrayDouble array, int nbRows=-1, int nbCols=-1)
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_reBuild(self, array, nbRows, nbCols)

    def reShape(self, nbRows: 'int', nbCols: 'int') -> "void":
        r"""
        reShape(DenseMatrix self, int nbRows, int nbCols)
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_reShape(self, nbRows, nbCols)

    def transpose(self) -> "void":
        r"""
        transpose(DenseMatrix self)
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_transpose(self)

    def isEqual(self, other: 'DenseMatrix', eps: 'double') -> "bool":
        r"""
        isEqual(DenseMatrix self, DenseMatrix other, double eps) -> bool
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_isEqual(self, other, eps)

    def matVecMult(self, vec: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        matVecMult(DenseMatrix self, DataArrayDouble vec) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_matVecMult(self, vec)

    @staticmethod
    def MatVecMult(mat: 'DenseMatrix', vec: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
        r"""
        MatVecMult(DenseMatrix mat, DataArrayDouble vec) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_MatVecMult(mat, vec)

    def __init__(self, *args):
        r"""
        __init__(DenseMatrix self, int nbRows, int nbCols) -> DenseMatrix
        __init__(DenseMatrix self, DataArrayDouble array, int nbRows, int nbCols) -> DenseMatrix
        1
        """
        _MEDCouplingRemapper.DenseMatrix_swiginit(self, _MEDCouplingRemapper.new_DenseMatrix(*args))

    def isEqualIfNotWhy(self, other: 'DenseMatrix', eps: 'double') -> "PyObject *":
        r"""
        isEqualIfNotWhy(DenseMatrix self, DenseMatrix other, double eps) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_isEqualIfNotWhy(self, other, eps)

    def getData(self) -> "MEDCoupling::DataArrayDouble *":
        r"""
        getData(DenseMatrix self) -> DataArrayDouble
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_getData(self)

    def __add__(self, other: 'DenseMatrix') -> "MEDCoupling::DenseMatrix *":
        r"""
        __add__(DenseMatrix self, DenseMatrix other) -> DenseMatrix
        1
        """
        return _MEDCouplingRemapper.DenseMatrix___add__(self, other)

    def __sub__(self, other: 'DenseMatrix') -> "MEDCoupling::DenseMatrix *":
        r"""
        __sub__(DenseMatrix self, DenseMatrix other) -> DenseMatrix
        1
        """
        return _MEDCouplingRemapper.DenseMatrix___sub__(self, other)

    def __mul__(self, *args) -> "MEDCoupling::DenseMatrix *":
        r"""
        __mul__(DenseMatrix self, DenseMatrix other) -> DenseMatrix
        __mul__(DenseMatrix self, DataArrayDouble other) -> DenseMatrix
        1
        """
        return _MEDCouplingRemapper.DenseMatrix___mul__(self, *args)

    def ___iadd___(self, trueSelf: 'PyObject *', other: 'DenseMatrix') -> "PyObject *":
        r"""
        ___iadd___(DenseMatrix self, PyObject * trueSelf, DenseMatrix other) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DenseMatrix____iadd___(self, trueSelf, other)

    def ___isub___(self, trueSelf: 'PyObject *', other: 'DenseMatrix') -> "PyObject *":
        r"""
        ___isub___(DenseMatrix self, PyObject * trueSelf, DenseMatrix other) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DenseMatrix____isub___(self, trueSelf, other)

    def toNumPyMatrix(self) -> "PyObject *":
        r"""
        toNumPyMatrix(DenseMatrix self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.DenseMatrix_toNumPyMatrix(self)
    __swig_destroy__ = _MEDCouplingRemapper.delete_DenseMatrix

# Register DenseMatrix in _MEDCouplingRemapper:
_MEDCouplingRemapper.DenseMatrix_swigregister(DenseMatrix)

def DenseMatrix_New(*args) -> "MEDCoupling::DenseMatrix *":
    r"""
    DenseMatrix_New(int nbRows, int nbCols) -> DenseMatrix
    DenseMatrix_New(DataArrayDouble array, int nbRows, int nbCols) -> DenseMatrix
    1
    """
    return _MEDCouplingRemapper.DenseMatrix_New(*args)

def DenseMatrix_MatVecMult(mat: 'DenseMatrix', vec: 'DataArrayDouble') -> "MEDCoupling::DataArrayDouble *":
    r"""
    DenseMatrix_MatVecMult(DenseMatrix mat, DataArrayDouble vec) -> DataArrayDouble
    1
    """
    return _MEDCouplingRemapper.DenseMatrix_MatVecMult(mat, vec)


def MEDCouplingUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingUMesh,((),(self.__getstate__()),))
def MEDCouplingCMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingCMesh,((),(self.__getstate__()),))
def MEDCouplingIMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingIMesh,((),(self.__getstate__()),))
def MEDCouplingMappedExtrudedMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingMappedExtrudedMesh,((),(self.__getstate__()),))
def MEDCouplingCurveLinearMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCouplingCurveLinearMesh,((),(self.__getstate__()),))
def MEDCoupling1SGTUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCoupling1SGTUMesh,((),(self.__getstate__()),))
def MEDCoupling1DGTUMeshReduce(self):
    return MEDCouplingStdReduceFunct,(MEDCoupling1DGTUMesh,((),(self.__getstate__()),))
def MEDCouplingFieldDoubleReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldDouble,(d,(self.__getstate__()),))
def MEDCouplingFieldIntReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldInt,(d,(self.__getstate__()),))
def MEDCouplingFieldFloatReduce(self):
    self.checkConsistencyLight()
    d=(self.getTypeOfField(),self.getTimeDiscretization())
    return MEDCouplingStdReduceFunct,(MEDCouplingFieldFloat,(d,(self.__getstate__()),))
def MEDCouplingFTReduceFunct(cls,params):
    a,b=params
    ret=object.__new__(cls)
    ret.__init__(*a)
    return ret

def MEDCouplingFieldTemplateReduce(self):
    ret = MEDCouplingFieldDouble(self)
    nbTuples = self.getNumberOfTuplesExpected()
    arr = DataArrayDouble(nbTuples) ; arr[:] = 0.
    ret.setArray(arr)
    return MEDCouplingFTReduceFunct,(MEDCouplingFieldTemplate,((ret,),()))
#
# Forwarding DataArrayInt functions to MEDCouplingUMesh:
#
MEDCouplingUMesh.ExtractFromIndexedArrays           = DataArrayInt.ExtractFromIndexedArrays
MEDCouplingUMesh.ExtractFromIndexedArraysSlice      = DataArrayInt.ExtractFromIndexedArraysSlice
MEDCouplingUMesh.SetPartOfIndexedArrays             = DataArrayInt.SetPartOfIndexedArrays
##MEDCouplingUMesh.SetPartOfIndexedArraysSlice        = DataArrayInt.SetPartOfIndexedArraysSlice
MEDCouplingUMesh.SetPartOfIndexedArraysSameIdx      = DataArrayInt.SetPartOfIndexedArraysSameIdx
MEDCouplingUMesh.RemoveIdsFromIndexedArrays         = DataArrayInt.RemoveIdsFromIndexedArrays
##MEDCouplingUMesh.SetPartOfIndexedArraysSameIdxSlice = DataArrayInt.SetPartOfIndexedArraysSameIdxSlice



import os
__filename=os.environ.get('PYTHONSTARTUP')
if __filename and os.path.isfile(__filename):
    with open(__filename) as __fp:
        exec(__fp.read())

Triangulation = _MEDCouplingRemapper.Triangulation
r"""1"""
Convex = _MEDCouplingRemapper.Convex
r"""1"""
Geometric2D = _MEDCouplingRemapper.Geometric2D
r"""1"""
PointLocator = _MEDCouplingRemapper.PointLocator
r"""1"""
Barycentric = _MEDCouplingRemapper.Barycentric
r"""1"""
BarycentricGeo2D = _MEDCouplingRemapper.BarycentricGeo2D
r"""1"""
MappedBarycentric = _MEDCouplingRemapper.MappedBarycentric
r"""1"""
class InterpolationOptions(object):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(InterpolationOptions self) -> InterpolationOptions
        1
        """
        _MEDCouplingRemapper.InterpolationOptions_swiginit(self, _MEDCouplingRemapper.new_InterpolationOptions())

    def getPrintLevel(self) -> "int":
        r"""
        getPrintLevel(InterpolationOptions self) -> int
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getPrintLevel(self)

    def setPrintLevel(self, pl: 'int') -> "void":
        r"""
        setPrintLevel(InterpolationOptions self, int pl)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setPrintLevel(self, pl)

    def getIntersectionType(self) -> "INTERP_KERNEL::IntersectionType":
        r"""
        getIntersectionType(InterpolationOptions self) -> INTERP_KERNEL::IntersectionType
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getIntersectionType(self)

    def setIntersectionType(self, it: 'INTERP_KERNEL::IntersectionType') -> "void":
        r"""
        setIntersectionType(InterpolationOptions self, INTERP_KERNEL::IntersectionType it)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setIntersectionType(self, it)

    def getIntersectionTypeRepr(self) -> "std::string":
        r"""
        getIntersectionTypeRepr(InterpolationOptions self) -> std::string
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getIntersectionTypeRepr(self)

    def getPrecision(self) -> "double":
        r"""
        getPrecision(InterpolationOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getPrecision(self)

    def setPrecision(self, p: 'double') -> "void":
        r"""
        setPrecision(InterpolationOptions self, double p)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setPrecision(self, p)

    def getMedianPlane(self) -> "double":
        r"""
        getMedianPlane(InterpolationOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getMedianPlane(self)

    def setMedianPlane(self, mp: 'double') -> "void":
        r"""
        setMedianPlane(InterpolationOptions self, double mp)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setMedianPlane(self, mp)

    def getDoRotate(self) -> "bool":
        r"""
        getDoRotate(InterpolationOptions self) -> bool
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getDoRotate(self)

    def setDoRotate(self, dr: 'bool') -> "void":
        r"""
        setDoRotate(InterpolationOptions self, bool dr)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setDoRotate(self, dr)

    def getBoundingBoxAdjustment(self) -> "double":
        r"""
        getBoundingBoxAdjustment(InterpolationOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getBoundingBoxAdjustment(self)

    def setBoundingBoxAdjustment(self, bba: 'double') -> "void":
        r"""
        setBoundingBoxAdjustment(InterpolationOptions self, double bba)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setBoundingBoxAdjustment(self, bba)

    def getBoundingBoxAdjustmentAbs(self) -> "double":
        r"""
        getBoundingBoxAdjustmentAbs(InterpolationOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getBoundingBoxAdjustmentAbs(self)

    def setBoundingBoxAdjustmentAbs(self, bba: 'double') -> "void":
        r"""
        setBoundingBoxAdjustmentAbs(InterpolationOptions self, double bba)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setBoundingBoxAdjustmentAbs(self, bba)

    def getMaxDistance3DSurfIntersect(self) -> "double":
        r"""
        getMaxDistance3DSurfIntersect(InterpolationOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getMaxDistance3DSurfIntersect(self)

    def setMaxDistance3DSurfIntersect(self, bba: 'double') -> "void":
        r"""
        setMaxDistance3DSurfIntersect(InterpolationOptions self, double bba)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setMaxDistance3DSurfIntersect(self, bba)

    def getMinDotBtwPlane3DSurfIntersect(self) -> "double":
        r"""
        getMinDotBtwPlane3DSurfIntersect(InterpolationOptions self) -> double
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getMinDotBtwPlane3DSurfIntersect(self)

    def setMinDotBtwPlane3DSurfIntersect(self, v: 'double') -> "void":
        r"""
        setMinDotBtwPlane3DSurfIntersect(InterpolationOptions self, double v)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setMinDotBtwPlane3DSurfIntersect(self, v)

    def getOrientation(self) -> "int":
        r"""
        getOrientation(InterpolationOptions self) -> int
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getOrientation(self)

    def setOrientation(self, o: 'int') -> "void":
        r"""
        setOrientation(InterpolationOptions self, int o)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOrientation(self, o)

    def getMeasureAbsStatus(self) -> "bool":
        r"""
        getMeasureAbsStatus(InterpolationOptions self) -> bool
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getMeasureAbsStatus(self)

    def setMeasureAbsStatus(self, newStatus: 'bool') -> "void":
        r"""
        setMeasureAbsStatus(InterpolationOptions self, bool newStatus)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setMeasureAbsStatus(self, newStatus)

    def getSplittingPolicy(self) -> "INTERP_KERNEL::SplittingPolicy":
        r"""
        getSplittingPolicy(InterpolationOptions self) -> INTERP_KERNEL::SplittingPolicy
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getSplittingPolicy(self)

    def setSplittingPolicy(self, sp: 'INTERP_KERNEL::SplittingPolicy') -> "void":
        r"""
        setSplittingPolicy(InterpolationOptions self, INTERP_KERNEL::SplittingPolicy sp)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setSplittingPolicy(self, sp)

    def getSplittingPolicyRepr(self) -> "std::string":
        r"""
        getSplittingPolicyRepr(InterpolationOptions self) -> std::string
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_getSplittingPolicyRepr(self)

    def filterInterpolationMethod(self, meth: 'std::string const &') -> "std::string":
        r"""
        filterInterpolationMethod(InterpolationOptions self, std::string const & meth) -> std::string
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_filterInterpolationMethod(self, meth)

    def init(self) -> "void":
        r"""
        init(InterpolationOptions self)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_init(self)

    def setInterpolationOptions(self, print_level: 'long', intersection_type: 'std::string', precision: 'double', median_plane: 'double', do_rotate: 'bool', bounding_box_adjustment: 'double', bounding_box_adjustment_abs: 'double', max_distance_for_3Dsurf_intersect: 'double', orientation: 'long', measure_abs: 'bool', splitting_policy: 'std::string') -> "bool":
        r"""
        setInterpolationOptions(InterpolationOptions self, long print_level, std::string intersection_type, double precision, double median_plane, bool do_rotate, double bounding_box_adjustment, double bounding_box_adjustment_abs, double max_distance_for_3Dsurf_intersect, long orientation, bool measure_abs, std::string splitting_policy) -> bool
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setInterpolationOptions(self, print_level, intersection_type, precision, median_plane, do_rotate, bounding_box_adjustment, bounding_box_adjustment_abs, max_distance_for_3Dsurf_intersect, orientation, measure_abs, splitting_policy)

    def copyOptions(self, other: 'InterpolationOptions') -> "void":
        r"""
        copyOptions(InterpolationOptions self, InterpolationOptions other)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_copyOptions(self, other)

    def setOptionDouble(self, key: 'std::string const &', value: 'double') -> "bool":
        r"""
        setOptionDouble(InterpolationOptions self, std::string const & key, double value) -> bool
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOptionDouble(self, key, value)

    def setOptionInt(self, key: 'std::string const &', value: 'int') -> "bool":
        r"""
        setOptionInt(InterpolationOptions self, std::string const & key, int value) -> bool
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOptionInt(self, key, value)

    def setOptionString(self, key: 'std::string const &', value: 'std::string const &') -> "bool":
        r"""
        setOptionString(InterpolationOptions self, std::string const & key, std::string const & value) -> bool
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_setOptionString(self, key, value)

    def printOptions(self) -> "std::string":
        r"""
        printOptions(InterpolationOptions self) -> std::string
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_printOptions(self)

    @staticmethod
    def CheckAndSplitInterpolationMethod(method: 'std::string const &', srcMeth: 'std::string &', trgMeth: 'std::string &') -> "void":
        r"""
        CheckAndSplitInterpolationMethod(std::string const & method, std::string & srcMeth, std::string & trgMeth)
        1
        """
        return _MEDCouplingRemapper.InterpolationOptions_CheckAndSplitInterpolationMethod(method, srcMeth, trgMeth)
    __swig_destroy__ = _MEDCouplingRemapper.delete_InterpolationOptions

# Register InterpolationOptions in _MEDCouplingRemapper:
_MEDCouplingRemapper.InterpolationOptions_swigregister(InterpolationOptions)

def InterpolationOptions_CheckAndSplitInterpolationMethod(method: 'std::string const &', srcMeth: 'std::string &', trgMeth: 'std::string &') -> "void":
    r"""
    InterpolationOptions_CheckAndSplitInterpolationMethod(std::string const & method, std::string & srcMeth, std::string & trgMeth)
    1
    """
    return _MEDCouplingRemapper.InterpolationOptions_CheckAndSplitInterpolationMethod(method, srcMeth, trgMeth)
cvar = _MEDCouplingRemapper.cvar
InterpolationOptions.PRECISION_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PRECISION_STR
InterpolationOptions.MEDIANE_PLANE_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_MEDIANE_PLANE_STR
InterpolationOptions.BOUNDING_BOX_ADJ_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_BOUNDING_BOX_ADJ_STR
InterpolationOptions.BOUNDING_BOX_ADJ_ABS_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_BOUNDING_BOX_ADJ_ABS_STR
InterpolationOptions.MAX_DISTANCE_3DSURF_INSECT_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_MAX_DISTANCE_3DSURF_INSECT_STR
InterpolationOptions.MIN_DOT_BTW_3DSURF_INSECT_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_MIN_DOT_BTW_3DSURF_INSECT_STR
InterpolationOptions.PRINT_LEV_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PRINT_LEV_STR
InterpolationOptions.DO_ROTATE_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_DO_ROTATE_STR
InterpolationOptions.ORIENTATION_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_ORIENTATION_STR
InterpolationOptions.MEASURE_ABS_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_MEASURE_ABS_STR
InterpolationOptions.INTERSEC_TYPE_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_INTERSEC_TYPE_STR
InterpolationOptions.SPLITTING_POLICY_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_SPLITTING_POLICY_STR
InterpolationOptions.TRIANGULATION_INTERSECT2D_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_TRIANGULATION_INTERSECT2D_STR
InterpolationOptions.CONVEX_INTERSECT2D_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_CONVEX_INTERSECT2D_STR
InterpolationOptions.GEOMETRIC_INTERSECT2D_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_GEOMETRIC_INTERSECT2D_STR
InterpolationOptions.POINTLOCATOR_INTERSECT_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_POINTLOCATOR_INTERSECT_STR
InterpolationOptions.BARYCENTRIC_INTERSECT_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_BARYCENTRIC_INTERSECT_STR
InterpolationOptions.BARYCENTRICGEO2D_INTERSECT_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_BARYCENTRICGEO2D_INTERSECT_STR
InterpolationOptions.PLANAR_SPLIT_FACE_5_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PLANAR_SPLIT_FACE_5_STR
InterpolationOptions.PLANAR_SPLIT_FACE_6_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_PLANAR_SPLIT_FACE_6_STR
InterpolationOptions.GENERAL_SPLIT_24_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_GENERAL_SPLIT_24_STR
InterpolationOptions.GENERAL_SPLIT_48_STR = _MEDCouplingRemapper.cvar.InterpolationOptions_GENERAL_SPLIT_48_STR

IK_ONLY_PREFERED = _MEDCouplingRemapper.IK_ONLY_PREFERED
r"""1"""
NOT_IK_ONLY_PREFERED = _MEDCouplingRemapper.NOT_IK_ONLY_PREFERED
r"""1"""
IK_ONLY_FORCED = _MEDCouplingRemapper.IK_ONLY_FORCED
r"""1"""
NOT_IK_ONLY_FORCED = _MEDCouplingRemapper.NOT_IK_ONLY_FORCED
r"""1"""
class MEDCouplingRemapper(TimeLabel, InterpolationOptions):
    r"""1"""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(MEDCouplingRemapper self) -> MEDCouplingRemapper
        1
        """
        _MEDCouplingRemapper.MEDCouplingRemapper_swiginit(self, _MEDCouplingRemapper.new_MEDCouplingRemapper())
    __swig_destroy__ = _MEDCouplingRemapper.delete_MEDCouplingRemapper

    def prepare(self, srcMesh: 'MEDCouplingMesh', targetMesh: 'MEDCouplingMesh', method: 'std::string const &') -> "int":
        r"""
        prepare(MEDCouplingRemapper self, MEDCouplingMesh srcMesh, MEDCouplingMesh targetMesh, std::string const & method) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_prepare(self, srcMesh, targetMesh, method)

    def prepareEx(self, src: 'MEDCouplingFieldTemplate', target: 'MEDCouplingFieldTemplate') -> "int":
        r"""
        prepareEx(MEDCouplingRemapper self, MEDCouplingFieldTemplate src, MEDCouplingFieldTemplate target) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_prepareEx(self, src, target)

    def transfer(self, srcField: 'MEDCouplingFieldDouble', targetField: 'MEDCouplingFieldDouble', dftValue: 'double') -> "void":
        r"""
        transfer(MEDCouplingRemapper self, MEDCouplingFieldDouble srcField, MEDCouplingFieldDouble targetField, double dftValue)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_transfer(self, srcField, targetField, dftValue)

    def partialTransfer(self, srcField: 'MEDCouplingFieldDouble', targetField: 'MEDCouplingFieldDouble') -> "void":
        r"""
        partialTransfer(MEDCouplingRemapper self, MEDCouplingFieldDouble srcField, MEDCouplingFieldDouble targetField)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_partialTransfer(self, srcField, targetField)

    def reverseTransfer(self, srcField: 'MEDCouplingFieldDouble', targetField: 'MEDCouplingFieldDouble', dftValue: 'double') -> "void":
        r"""
        reverseTransfer(MEDCouplingRemapper self, MEDCouplingFieldDouble srcField, MEDCouplingFieldDouble targetField, double dftValue)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_reverseTransfer(self, srcField, targetField, dftValue)

    def transferField(self, srcField: 'MEDCouplingFieldDouble', dftValue: 'double') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        transferField(MEDCouplingRemapper self, MEDCouplingFieldDouble srcField, double dftValue) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_transferField(self, srcField, dftValue)

    def reverseTransferField(self, targetField: 'MEDCouplingFieldDouble', dftValue: 'double') -> "MEDCoupling::MEDCouplingFieldDouble *":
        r"""
        reverseTransferField(MEDCouplingRemapper self, MEDCouplingFieldDouble targetField, double dftValue) -> MEDCouplingFieldDouble
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_reverseTransferField(self, targetField, dftValue)

    def setOptionInt(self, key: 'std::string const &', value: 'int') -> "bool":
        r"""
        setOptionInt(MEDCouplingRemapper self, std::string const & key, int value) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setOptionInt(self, key, value)

    def setOptionDouble(self, key: 'std::string const &', value: 'double') -> "bool":
        r"""
        setOptionDouble(MEDCouplingRemapper self, std::string const & key, double value) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setOptionDouble(self, key, value)

    def setOptionString(self, key: 'std::string const &', value: 'std::string const &') -> "bool":
        r"""
        setOptionString(MEDCouplingRemapper self, std::string const & key, std::string const & value) -> bool
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setOptionString(self, key, value)

    def getInterpolationMatrixPolicy(self) -> "int":
        r"""
        getInterpolationMatrixPolicy(MEDCouplingRemapper self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_getInterpolationMatrixPolicy(self)

    def setInterpolationMatrixPolicy(self, newInterpMatPol: 'int') -> "void":
        r"""
        setInterpolationMatrixPolicy(MEDCouplingRemapper self, int newInterpMatPol)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setInterpolationMatrixPolicy(self, newInterpMatPol)

    def nullifiedTinyCoeffInCrudeMatrixAbs(self, maxValAbs: 'double') -> "int":
        r"""
        nullifiedTinyCoeffInCrudeMatrixAbs(MEDCouplingRemapper self, double maxValAbs) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_nullifiedTinyCoeffInCrudeMatrixAbs(self, maxValAbs)

    def nullifiedTinyCoeffInCrudeMatrix(self, scaleFactor: 'double') -> "int":
        r"""
        nullifiedTinyCoeffInCrudeMatrix(MEDCouplingRemapper self, double scaleFactor) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_nullifiedTinyCoeffInCrudeMatrix(self, scaleFactor)

    def getMaxValueInCrudeMatrix(self) -> "double":
        r"""
        getMaxValueInCrudeMatrix(MEDCouplingRemapper self) -> double
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_getMaxValueInCrudeMatrix(self)

    def getNumberOfColsOfMatrix(self) -> "int":
        r"""
        getNumberOfColsOfMatrix(MEDCouplingRemapper self) -> int
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_getNumberOfColsOfMatrix(self)

    @staticmethod
    def BuildMethodFrom(meth1: 'std::string const &', meth2: 'std::string const &') -> "std::string":
        r"""
        BuildMethodFrom(std::string const & meth1, std::string const & meth2) -> std::string
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_BuildMethodFrom(meth1, meth2)

    def getCrudeMatrix(self) -> "PyObject *":
        r"""
        getCrudeMatrix(MEDCouplingRemapper self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_getCrudeMatrix(self)

    def getCrudeCSRMatrix(self) -> "PyObject *":
        r"""
        getCrudeCSRMatrix(MEDCouplingRemapper self) -> PyObject *
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_getCrudeCSRMatrix(self)

    def setCrudeMatrix(self, srcMesh: 'MEDCouplingMesh', targetMesh: 'MEDCouplingMesh', method: 'std::string const &', m: 'PyObject *') -> "void":
        r"""
        setCrudeMatrix(MEDCouplingRemapper self, MEDCouplingMesh srcMesh, MEDCouplingMesh targetMesh, std::string const & method, PyObject * m)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setCrudeMatrix(self, srcMesh, targetMesh, method, m)

    def setCrudeMatrixEx(self, src: 'MEDCouplingFieldTemplate', target: 'MEDCouplingFieldTemplate', m: 'PyObject *') -> "void":
        r"""
        setCrudeMatrixEx(MEDCouplingRemapper self, MEDCouplingFieldTemplate src, MEDCouplingFieldTemplate target, PyObject * m)
        1
        """
        return _MEDCouplingRemapper.MEDCouplingRemapper_setCrudeMatrixEx(self, src, target, m)

# Register MEDCouplingRemapper in _MEDCouplingRemapper:
_MEDCouplingRemapper.MEDCouplingRemapper_swigregister(MEDCouplingRemapper)

def MEDCouplingRemapper_BuildMethodFrom(meth1: 'std::string const &', meth2: 'std::string const &') -> "std::string":
    r"""
    MEDCouplingRemapper_BuildMethodFrom(std::string const & meth1, std::string const & meth2) -> std::string
    1
    """
    return _MEDCouplingRemapper.MEDCouplingRemapper_BuildMethodFrom(meth1, meth2)


def MEDCouplingDataArrayDoubleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____iadd___(self, self, *args)
def MEDCouplingDataArrayDoubleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____isub___(self, self, *args)
def MEDCouplingDataArrayDoubleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____imul___(self, self, *args)
def MEDCouplingDataArrayDoubleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____idiv___(self, self, *args)
def MEDCouplingDataArrayDoubleIpow(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDouble____ipow___(self, self, *args)
def MEDCouplingFieldDoubleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____iadd___(self, self, *args)
def MEDCouplingFieldDoubleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____isub___(self, self, *args)
def MEDCouplingFieldDoubleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____imul___(self, self, *args)
def MEDCouplingFieldDoubleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____idiv___(self, self, *args)
def MEDCouplingFieldDoubleIpow(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.MEDCouplingFieldDouble____ipow___(self, self, *args)
def MEDCouplingDataArrayFloatIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayFloat____iadd___(self, self, *args)
def MEDCouplingDataArrayFloatIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayFloat____isub___(self, self, *args)
def MEDCouplingDataArrayFloatImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayFloat____imul___(self, self, *args)
def MEDCouplingDataArrayFloatIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayFloat____idiv___(self, self, *args)
def MEDCouplingDataArrayIntIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____iadd___(self, self, *args)
def MEDCouplingDataArrayIntIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____isub___(self, self, *args)
def MEDCouplingDataArrayIntImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____imul___(self, self, *args)
def MEDCouplingDataArrayIntIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____idiv___(self, self, *args)
def MEDCouplingDataArrayIntImod(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____imod___(self, self, *args)
def MEDCouplingDataArrayIntIpow(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayInt____ipow___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____iadd___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____isub___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____imul___(self, self, *args)
def MEDCouplingDataArrayDoubleTupleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayDoubleTuple____idiv___(self, self, *args)
def MEDCouplingDataArrayIntTupleIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____iadd___(self, self, *args)
def MEDCouplingDataArrayIntTupleIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____isub___(self, self, *args)
def MEDCouplingDataArrayIntTupleImul(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____imul___(self, self, *args)
def MEDCouplingDataArrayIntTupleIdiv(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____idiv___(self, self, *args)
def MEDCouplingDataArrayIntTupleImod(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DataArrayIntTuple____imod___(self, self, *args)
def MEDCouplingDenseMatrixIadd(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DenseMatrix____iadd___(self, self, *args)
def MEDCouplingDenseMatrixIsub(self,*args):
    import _MEDCouplingRemapper
    return _MEDCouplingRemapper.DenseMatrix____isub___(self, self, *args)


InterpKernelException.__reduce__=INTERPKERNELExceptionReduce

DataArrayDouble.__reduce__=MEDCouplingDataArrayDoubleReduce
DataArrayDouble.__iadd__=MEDCouplingDataArrayDoubleIadd
DataArrayDouble.__isub__=MEDCouplingDataArrayDoubleIsub
DataArrayDouble.__imul__=MEDCouplingDataArrayDoubleImul
DataArrayDouble.__idiv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__ipow__=MEDCouplingDataArrayDoubleIpow
DataArrayDouble.__truediv__=DataArrayDouble.__div__
DataArrayDouble.__itruediv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__rtruediv__=DataArrayDouble.__rdiv__
DataArrayDouble.__floordiv__=DataArrayDouble.__div__
DataArrayDouble.__ifloordiv__=MEDCouplingDataArrayDoubleIdiv
DataArrayDouble.__rfloordiv__=DataArrayDouble.__rdiv__

DataArrayInt.__reduce__=MEDCouplingDataArrayIntReduce
DataArrayInt.__iadd__=MEDCouplingDataArrayIntIadd
DataArrayInt.__isub__=MEDCouplingDataArrayIntIsub
DataArrayInt.__imul__=MEDCouplingDataArrayIntImul
DataArrayInt.__idiv__=MEDCouplingDataArrayIntIdiv
DataArrayInt.__imod__=MEDCouplingDataArrayIntImod
DataArrayInt.__ipow__=MEDCouplingDataArrayIntIpow
DataArrayInt.__truediv__=DataArrayInt.__div__
DataArrayInt.__itruediv__=MEDCouplingDataArrayIntIdiv
DataArrayInt.__rtruediv__=DataArrayInt.__rdiv__
DataArrayInt.__floordiv__=DataArrayInt.__div__
DataArrayInt.__ifloordiv__=MEDCouplingDataArrayIntIdiv
DataArrayInt.__rfloordiv__=DataArrayInt.__rdiv__

DataArrayByte.__reduce__=MEDCouplingDataArrayByteReduce

DataArrayFloat.__reduce__=MEDCouplingDataArrayFloatReduce
DataArrayFloat.__iadd__=MEDCouplingDataArrayFloatIadd
DataArrayFloat.__isub__=MEDCouplingDataArrayFloatIsub
DataArrayFloat.__imul__=MEDCouplingDataArrayFloatImul
DataArrayFloat.__idiv__=MEDCouplingDataArrayFloatIdiv
DataArrayFloat.__itruediv__=MEDCouplingDataArrayFloatIdiv
DataArrayFloat.__ifloordiv__=MEDCouplingDataArrayFloatIdiv

MEDCouplingFieldDouble.__reduce__=MEDCouplingFieldDoubleReduce
MEDCouplingFieldDouble.__iadd__=MEDCouplingFieldDoubleIadd
MEDCouplingFieldDouble.__isub__=MEDCouplingFieldDoubleIsub
MEDCouplingFieldDouble.__imul__=MEDCouplingFieldDoubleImul
MEDCouplingFieldDouble.__idiv__=MEDCouplingFieldDoubleIdiv
MEDCouplingFieldDouble.__ipow__=MEDCouplingFieldDoubleIpow
MEDCouplingFieldDouble.__truediv__=MEDCouplingFieldDouble.__div__
MEDCouplingFieldDouble.__rtruediv__=MEDCouplingFieldDouble.__rdiv__
MEDCouplingFieldDouble.__itruediv__=MEDCouplingFieldDoubleIdiv
MEDCouplingFieldDouble.__floordiv__=MEDCouplingFieldDouble.__div__
MEDCouplingFieldDouble.__rfloordiv__=MEDCouplingFieldDouble.__rdiv__
MEDCouplingFieldDouble.__ifloordiv__=MEDCouplingFieldDoubleIdiv

MEDCouplingFieldTemplate.__reduce__=MEDCouplingFieldTemplateReduce

MEDCouplingFieldInt.__reduce__=MEDCouplingFieldIntReduce

MEDCouplingFieldFloat.__reduce__=MEDCouplingFieldFloatReduce

DataArrayDoubleTuple.__iadd__=MEDCouplingDataArrayDoubleTupleIadd
DataArrayDoubleTuple.__isub__=MEDCouplingDataArrayDoubleTupleIsub
DataArrayDoubleTuple.__imul__=MEDCouplingDataArrayDoubleTupleImul
DataArrayDoubleTuple.__idiv__=MEDCouplingDataArrayDoubleTupleIdiv
DataArrayDoubleTuple.__itruediv__=MEDCouplingDataArrayDoubleTupleIdiv
DataArrayDoubleTuple.__ifloordiv__=MEDCouplingDataArrayDoubleTupleIdiv

DataArrayIntTuple.__iadd__=MEDCouplingDataArrayIntTupleIadd
DataArrayIntTuple.__isub__=MEDCouplingDataArrayIntTupleIsub
DataArrayIntTuple.__imul__=MEDCouplingDataArrayIntTupleImul
DataArrayIntTuple.__idiv__=MEDCouplingDataArrayIntTupleIdiv
DataArrayIntTuple.__itruediv__=MEDCouplingDataArrayIntTupleIdiv
DataArrayIntTuple.__ifloordiv__=MEDCouplingDataArrayIntTupleIdiv
DataArrayIntTuple.__imod__=MEDCouplingDataArrayIntTupleImod

DenseMatrix.__iadd__=MEDCouplingDenseMatrixIadd
DenseMatrix.__isub__=MEDCouplingDenseMatrixIsub

MEDCouplingUMesh.__reduce__=MEDCouplingUMeshReduce
MEDCoupling1DGTUMesh.__reduce__=MEDCoupling1DGTUMeshReduce
MEDCoupling1SGTUMesh.__reduce__=MEDCoupling1SGTUMeshReduce
MEDCouplingCurveLinearMesh.__reduce__=MEDCouplingCurveLinearMeshReduce
MEDCouplingCMesh.__reduce__=MEDCouplingCMeshReduce
MEDCouplingIMesh.__reduce__=MEDCouplingIMeshReduce
MEDCouplingMappedExtrudedMesh.__reduce__=MEDCouplingMappedExtrudedMeshReduce

DataArrayAsciiCharIterator.__next__ = DataArrayAsciiCharIterator.next
DataArrayIntIterator.__next__ = DataArrayIntIterator.next
DataArrayDoubleIterator.__next__ = DataArrayDoubleIterator.next
MEDCouplingUMeshCellIterator.__next__ = MEDCouplingUMeshCellIterator.next
MEDCouplingUMeshCellByTypeIterator.__next__ = MEDCouplingUMeshCellByTypeIterator.next

del INTERPKERNELExceptionReduce
del MEDCouplingDataArrayDoubleReduce
del MEDCouplingDataArrayFloatReduce
del MEDCouplingDataArrayIntReduce
del MEDCouplingDataArrayByteReduce
del MEDCouplingUMeshReduce
del MEDCouplingCMeshReduce
del MEDCouplingIMeshReduce
del MEDCouplingMappedExtrudedMeshReduce
del MEDCouplingCurveLinearMeshReduce
del MEDCoupling1SGTUMeshReduce
del MEDCoupling1DGTUMeshReduce
del MEDCouplingFieldDoubleReduce
del MEDCouplingFieldFloatReduce
del MEDCouplingFieldIntReduce
del MEDCouplingFieldTemplateReduce
del MEDCouplingDataArrayDoubleIadd
del MEDCouplingDataArrayDoubleIsub
del MEDCouplingDataArrayDoubleImul
del MEDCouplingDataArrayDoubleIdiv
del MEDCouplingFieldDoubleIadd
del MEDCouplingFieldDoubleIsub
del MEDCouplingFieldDoubleImul
del MEDCouplingFieldDoubleIdiv
del MEDCouplingFieldDoubleIpow
del MEDCouplingDataArrayIntIadd
del MEDCouplingDataArrayIntIsub
del MEDCouplingDataArrayIntImul
del MEDCouplingDataArrayIntIdiv
del MEDCouplingDataArrayIntImod
del MEDCouplingDataArrayFloatIadd
del MEDCouplingDataArrayFloatIsub
del MEDCouplingDataArrayFloatImul
del MEDCouplingDataArrayFloatIdiv
del MEDCouplingDataArrayDoubleTupleIadd
del MEDCouplingDataArrayDoubleTupleIsub
del MEDCouplingDataArrayDoubleTupleImul
del MEDCouplingDataArrayDoubleTupleIdiv
del MEDCouplingDataArrayIntTupleIadd
del MEDCouplingDataArrayIntTupleIsub
del MEDCouplingDataArrayIntTupleImul
del MEDCouplingDataArrayIntTupleIdiv
del MEDCouplingDataArrayIntTupleImod
del MEDCouplingDenseMatrixIadd
del MEDCouplingDenseMatrixIsub



