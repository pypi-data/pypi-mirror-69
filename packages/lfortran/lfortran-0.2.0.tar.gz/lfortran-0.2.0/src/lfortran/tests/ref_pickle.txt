(+ 1 (* 2 3))
(+ 1 (* 2 3))
(+ (* 1 2) 3)
(* (+ 1 2) 3)
(+ 1 (* 2 (** 3 4)))
(+ 1 (* 2 (** 3 4)))
(+ 1 (** (* 2 3) 4))
(** (+ 1 (* 2 3)) 4)
(+ 1 (* (** 2 3) 4))
(+ 1 (** 2 (* 3 4)))
(- 1 2)
(- (- 1 2) 3)
(- 1 (* 2 3))
(- 1 (** 2 3))
(+ (u- 2) 1)
(+ (* (u- 2) 3) 1)
(+ (u- (** 2 3)) 1)
(+ 1 (u- 2))
(+ 1 (* (u- 2) 3))
(+ 1 (- (u- 2) 3))
(* 3 (u- 2))
(* (u- 2) 3)
(* (u- 2) 3)
(+ (u+ 2) 1)
(+ (* (u+ 2) 3) 1)
(+ (u+ (** 2 3)) 1)
(+ 1 (u+ 2))
(+ 1 (* (u+ 2) 3))
(+ 1 (- (u+ 2) 3))
(* 3 (u+ 2))
(* (u+ 2) 3)
(* (u+ 2) 3)
(constant Unimplementedconstant)
(constant Unimplementedconstant)
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray log [] [])
(* u (funccallorarray sqrt [] []))
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray f [] [])
(funccallorarray f [] [])
(arrayinitializer [1])
(arrayinitializer [1 b])
(arrayinitializer [1 b c])
(arrayinitializer [(funccallorarray f [] []) (+ b c) (+ (** c 2) 1)])
1
(real "1.")
(real "1._dp")
(real "1.03_dp")
(real "1.e5_dp")
(+ 2 3)
(* (+ 1 3) 4)
(+ 1 (* 3 4))
x
yx
(+ x y)
(+ 2 x)
(** (+ x y) 2)
(* (+ x y) 3)
(+ x (* y 3))
(* (+ (+ 1 2) a) 3)
(+ (funccallorarray f [] []) 6)
(funccallorarray f [] [])
(funccallorarray real [] [])
(- (* 2 u) 1)
(funccallorarray sum [] [])
(funccallorarray u [] [])
(* u (funccallorarray sqrt [] []))
(not first)
(- a (/ (real "1._dp") 3))
(/ 1 (funccallorarray sqrt [] []))
(** (+ 1 (* c x)) 3)
(+ i 1)
(str ""s"")
(str ""some test"")
(funccallorarray a [] [])
(funccallorarray b [] [])
(+ (funccallorarray a [] []) (funccallorarray b [] []))
(arrayinitializer [1 2 3 i])
(funccallorarray f [] [])
a
(funccallorarray a [] [])
(funccallorarray b [] [])
(funccallorarray c [] [])
a
(funccallorarray b [] [])
(funccallorarray c [] [])
(str ""a'b'c"")
(str "'a"b"c'")
(str "'a""bc""x'")
(str ""a""c"")
(str ""a""b""c"")
(str """"zippo"""")
(str "'a''c'")
(str "'a''b''c'")
(str "'''zippo'''")
(str ""aaa"")
(str ""a"")
(boolop 1 boolopType0 2)
(boolop a boolopType0 b)
(boolop (== a 1) boolopType0 (== b 2))
(boolop (== a 1) boolopType1 (== b 2))
(boolop (boolop a boolopType0 b) boolopType0 c)
(boolop (boolop a boolopType1 b) boolopType1 c)
(not (== a 1))
(boolop (== a 1) boolopType0 (not (== b 2)))
(boolop a boolopType2 b)
(boolop a boolopType3 b)
(decl [(x "integer" [] [] ())])
(decl [(x "integer" [] [] ())])
(decl [(x "integer" [] [(attribute parameter [])] ())])
(decl [(x "integer" [] [(attribute parameter []) (attribute pointer [])] ())])
(decl [(x "character" [] [] ())])
(decl [(x "character" [] [] ())])
(decl [(c "character" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(a "real" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(x "real" [] [] ())])
(decl [(x "real" [] [(attribute intent [(in)])] ())])
(decl [(x "real" [] [(attribute intent [(out)])] ())])
(decl [(x "real" [] [(attribute intent [(inout)])] ())])
(decl [(a "real" [] [] ()) (b "real" [] [] ())])
(decl [(a "real" [(1 9) (1 10)] [] ()) (b "real" [(1 10)] [] ())])
(decl [(a "real" [(1 m) (1 n)] [] ())])
(decl [(a "real" [(() ()) (() ())] [(attribute allocatable [])] ())])
(decl [(y "real" [] [] 5)])
(decl [(f "real" [] [] ())])
(decl [(x "complex" [] [] ())])
(decl [(x "logical" [] [] ())])
(decl [(x "type" [] [] ())])
(decl [(x "type" [] [(attribute intent [(inout)])] ()) (y "type" [] [(attribute intent [(inout)])] ())])
(decl [(x "integer" [] [] 3)])
(decl [(x "integer" [(1 5)] [] ())])
(decl [(x "integer" [(5 ())] [] ())])
(decl [(x "integer" [(5 ())] [] ())])
(decl [(a "integer" [(1 9) (1 10)] [] ()) (b "integer" [(1 10)] [] ())])
(decl [(x "integer" [(() 5)] [] ())])
(decl [(x "integer" [(() ())] [] ())])
(decl [(x "integer" [(3 5)] [] ())])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] ())])
(decl [(x "integer" [] [(attribute dimension [])] ())])
(decl [(c "integer" [] [(attribute dimension [])] ())])
(decl [(e "integer" [] [(attribute dimension []) (attribute intent [(in)])] ())])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] 3)])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] (+ 3 2))])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] 3) (y "integer" [(() 3)] [] 4)])
(decl [(x "integer" [(1 5) (() ()) (() 3) (3 ())] [] x)])
(decl [(i "integer" [] [] ())])
(fn g [] () () () [] [(decl [(x "integer" [] [] ())])] [(= x 1)] [])
(sub g [] [] [(decl [(x "integer" [] [] ()) (y "integer" [] [] ())])] [] [])
(sub g [] [] [(decl [(x "integer" [] [] ()) (y "integer" [] [] ()) (z "integer" [] [] ())])] [] [])
(fn g [] () () () [] [(decl [(x "integer" [] [] ())]) (decl [(y "real" [] [] ()) (z "real" [] [] ())])] [(= x 1)] [])
(sub g [] [] [(decl [(x "integer" [] [] ())])] [(= x 1)] [])
(sub g [] [] [(decl [(x "integer" [] [] ())]) (decl [(x "character" [] [] ())])] [(= x 1)] [])
(prog g [] [(decl [(x "integer" [] [] ())])] [(= x 1)] [])
(prog g [] [(decl [(x "integer" [] [] ())]) (decl [(x "complex" [] [] ())])] [(= x 1)] [])
(subroutinecall random_number [])
(subroutinecall random_number [])
(subroutinecall random_number [])
(= u (- (* 2 u) 1))
(= r2 (funccallorarray sum [] []))
(= u (* u (funccallorarray sqrt [] [])))
(= x (funccallorarray u [] []))
(= x (funccallorarray u [] []))
(= first (not first))
(= d (- a (/ (real "1._dp") 3)))
(= c (/ 1 (funccallorarray sqrt [] [])))
(= v (** (+ 1 (* c x)) 3))
(= fn_val (* d v))
exit
cycle
(subroutinecall randn [])
(subroutinecall randn [])
(subroutinecall random_number [])
(subroutinecall rand_gamma0 [])
(subroutinecall rand_gamma0 [])
(subroutinecall rand_gamma0 [])
(subroutinecall rand_gamma_vector_n [])
(subroutinecall f [])
(funccallorarray open [] [])
(funccallorarray allocate [] [])
(funccallorarray close [] [])
(= x 1)
(= y 5)
(= a 5)
(= x 1)
(= y 5)
(= a 5)
a
a
a
a
a
a
a
(translationunit Unimplementedobject)
(translationunit Unimplementedobject)
(translationunit Unimplementedobject)
(translationunit Unimplementedobject)
(translationunit Unimplementedobject)
(stop (str ""OK""))
(stop 1)
stop
(print "(i4)" [45 x])
(print "(i4)" [45])
(print "(i4)" [])
(print "(i4)" [])
(print () [45 (str ""sss"") (+ a 1)])
(print () [a])
(print () [])
(print () [])
(print "(i4)" [45 x])
(print "(i4)" [45])
(print "(i4)" [])
(print () [45 (str ""sss"") (+ a 1)])
(print () [a])
(print () [])
(print "(i4)" [45 x])
(print "(i4)" [45])
(funccallorarray write [] [])
(print () [45 (str ""sss"") (+ a 1)])
(print () [a])
(print () [])
(print () [a b])
(print () [a])
(funccallorarray write [] [])
(=> x y)
(=> x (funccallorarray y [] []))
(subroutinecall g [])
(subroutinecall g [])
(= c (arrayinitializer [1 2 3 i]))
(= a a)
(= b (funccallorarray b [] []))
(= c (funccallorarray c [] []))
(= a a)
(= b (funccallorarray b [] []))
(= c (funccallorarray c [] []))
(= a a)
(= (funccallorarray b [] []) b)
(= (funccallorarray c [] []) c)
(subroutinecall e [])
(while x [(= a 5)])
(while x [])
(while x [(= a 5)])
(while x [(= do 5)])
(while x [(= end 5)])
(while x [(= enddo 5)])
(while (> x 5) [(= a 5)])
(while (> x 5) [(= a 5)])
(while (== x y) [(= i (+ i 1)) (cycle) (exit)])
(select k [(casestmt 1 [(subroutinecall a [])]) (casestmt i [(subroutinecall b []) (subroutinecall c [])])] [])
(select k [(casestmt 1 [(subroutinecall a [])]) (casestmt i [(subroutinecall b []) (= a 5)])] [(subroutinecall c [])])
(where (< a 5) [(= B 1)] [])
(where (< a 5) [(= B 1)] [])
(where (< a 5) [(= B 1)] [(= B 0)])
(where (< a 5) [(= B 1)] [(= B 0)])
(where (< a 5) [(= B 1)] [(where (< a 7) [(= B 0)] [(= B 3)])])
(where (< a 5) [(= B 1)] [(where (< a 7) [(= B 0)] [])])
(do i 1 5 () [(= a (+ a i))])
(do i 1 5 () [])
(do i 1 5 2 [(= a (+ a i))])
(do () () () () [(= a (+ a i)) (= b 3)])
(sub g [] [] [] [(do () () () () [(= a (+ a i)) (= b 3)])] [])
(do () () () () [(= a (+ a i)) (= b 3)])
(do () () () () [(= do (+ a i)) (= enddo 3)])
(do () () () () [(= a (+ a i)) (= b 3)])
do
(sub a [] [] [] [(do () () () () [(= x 1)])] [])
(sub a [] [] [] [(do i 1 5 () [(= x (+ x i))])] [])
(sub a [] [] [] [(do i 1 5 (u- 1) [(= x i)])] [])
(sub g [] [] [] [(= x y) (return) (= x (* 2 y))] [])
(do i 1 5 () [(return)])
(while x [(return)])
(do i 1 5 () [(= return 5)])
return
(+ return 1)
(= return 1)
(= a return)
(do i 1 5 () [(cycle)])
(while x [(cycle)])
(do i 1 5 () [(= cycle 5)])
cycle
(+ cycle 1)
(= cycle 1)
(= a cycle)
(do i 1 5 () [(exit)])
(do () () () () [(exit)])
(while x [(exit)])
(do i 1 5 () [(= exit 5)])
exit
(+ exit 1)
(= exit 1)
(= a exit)
(sub g [] [] [] [(if x [(= a 5) (= b 4)] [])] [])
(sub g [] [] [] [(if x [(= a 5)] [])] [])
(sub g [] [] [] [(if x [(= a 5)] [])] [])
(sub g [] [] [] [(if x [(= endif 5)] [])] [])
(sub g [] [] [] [(if else [(= a 5) (= b 4)] [])] [])
(sub g [] [] [] [(if else [(= then 5) (= else 4)] [])] [])
(sub g [] [] [] [(if x [(= a 5)] [(= b 4)])] [])
(sub g [] [] [] [(if x [] [(= b 4)])] [])
(sub g [] [] [] [(if x [(= a 5)] [])] [])
(sub g [] [] [] [(if x [] [])] [])
(sub g [] [] [] [(if x [] [])] [])
(sub g [] [] [] [(if x [(= a 5) (= c 7)] [(= b 4) (= e 5)])] [])
(sub g [] [] [] [(if else [(= else 5)] [(= else 4)])] [])
(sub g [] [] [] [(if x [(= a 5)] [(if y [(= b 4)] [])])] [])
(sub g [] [] [] [(if x [(= a 5)] [(if y [(= b 4)] [(if z [(= c 3)] [])])])] [])
(sub g [] [] [] [(if else [(= else 5)] [(if else [] [(if else [] [(if else [(= else 3)] [])])])])] [])
(sub g [] [] [] [(if x [(= a 5)] [(if y [(= b 4)] [(= c 3)])])] [])
(sub g [] [] [] [(if x [(= a 5) (if y [(= b 4)] [(= c 3)])] [])] [])
(sub g [] [] [] [(if x [(= a 5) (if y [(= b 4)] [])] [(= c 3)])] [])
(if x [(= a 5) (if y [(= b 4)] [])] [(= c 3)])
(sub a [] [] [] [(if a [(= x 1)] [(= x 2)])] [])
(sub a [] [] [] [(if a [(= x 1)] [(if b [(= x 2)] [])])] [])
(sub a [] [] [] [(if a [(= x 1)] [(if b [(= x 2)] [(if c [(= x 2)] [])])])] [])
(sub a [] [] [] [(if a [(= x 1)] [])] [])
(sub a [] [] [] [(if a [(= x 1) (= y 2)] [])] [])
(sub a [] [] [] [(if a [(= x 1)] [])] [])
(if a [(= x 1)] [])
(prog g [] [] [(= x y) (= x (* 2 y))] [])
(prog g [] [] [] [])
(prog g [] [] [(= x y) (= x (* 2 y))] [])
(prog g [] [] [(= x y) (= x (* 2 y))] [])
(prog f [] [] [(= subroutine y) (= x (* 2 subroutine))] [])
(prog g [] [] [(= x y)] [])
(prog TESTFortran90 [] [(decl [(stop "integer" [] [] ())])] [(= stop 1) (while (== stop 0) [])] [])
(fn g [] () () () [] [] [(= x y) (= x (* 2 y))] [])
(fn g [] () () () [] [] [] [])
(fn g [] () () () [] [] [(= x y) (= x (* 2 y))] [])
(fn g [] () () () [] [] [(= x y) (= x (* 2 y))] [])
(fn f [] () () () [] [] [(= subroutine y) (= x (* 2 subroutine))] [])
(fn f [] () () () [] [(decl [(f "integer" [] [] ())])] [(= f 5)] [])
(fn f [] () () () [] [] [(= f 1)] [])
(fn f [(e)] () () () [] [] [(= f 1)] [])
(fn f [(e) (b)] () () () [] [] [(= f 1)] [])
(fn f [(e) (b)] () () () [] [] [(= f 1)] [])
(fn f [(e)] () () () [] [] [(= r 1)] [])
(fn f [(e)] () () () [] [] [(= r 1)] [])
(fn f [(e)] () () () [] [] [(= f 1)] [])
(fn f [(e)] () () () [] [] [(= f 1)] [])
(sub g [] [] [] [(= x y) (= x (* 2 y))] [])
(sub g [] [] [] [] [])
(sub g [] [] [] [(= x y) (= x (* 2 y))] [])
(sub g [] [] [] [(= x y) (= x (* 2 y))] [])
(sub g [] [] [] [(= x y) (= x (* 2 y))] [])
(sub g [] [] [] [(= x y) (= x (* 2 y))] [])
(sub g [] [] [] [(= x y) (= x (* 2 y))] [])
(sub g [] [] [] [(= x y) (= x (* 2 y))] [])
(sub f [] [] [] [(= subroutine y) (= x (* 2 subroutine))] [])
(sub f [] [] [(decl [(x "integer" [] [] ())])] [] [])
(sub f [] [] [(decl [(x "integer" [] [] ())])] [] [])
(sub f [(a) (b) (c) (d)] [] [(decl [(a "integer" [] [(attribute intent [(in)])] ()) (b "integer" [] [(attribute intent [(in)])] ())]) (decl [(c "integer" [] [(attribute intent [(in)])] ()) (d "integer" [] [(attribute intent [(in)])] ())]) (decl [(z "integer" [] [] ())]) (decl [(y "integer" [] [] ())])] [] [])
(sub f [(a) (b) (c) (d)] [] [(decl [(a "integer" [] [(attribute intent [(out)])] ()) (b "integer" [] [(attribute intent [(out)])] ())]) (decl [(c "integer" [] [(attribute intent [(inout)])] ()) (d "integer" [] [(attribute intent [(inout)])] ())]) (decl [(z "integer" [] [] ())]) (decl [(y "integer" [] [] ())])] [] [])
(sub saxpy [(n) (a) (x) (y)] [] [(decl [(x "real" [(() ())] [(attribute intent [(in)])] ()) (a "real" [] [(attribute intent [(in)])] ())]) (decl [(y "real" [(() ())] [(attribute intent [(inout)])] ())]) (decl [(n "integer" [] [(attribute intent [(in)])] ())]) (decl [(i "integer" [] [] ())])] [(do i 1 n () [(= (funccallorarray y [] []) (+ (* a (funccallorarray x [] [])) (funccallorarray y [] [])))])] [])
(use b [])
(use a [(usesymbol b ()) (usesymbol c ())])
(use a [(usesymbol b x) (usesymbol c ()) (usesymbol a d)])
(prog test [] [(decl [(x "integer" [] [] ())])] [(= x 1) (subroutinecall a [])] [])
(prog test [] [(decl [(x "integer" [] [] ())])] [(= x 1) (subroutinecall a [])] [])
(prog test [] [(decl [(x "integer" [] [] ())])] [(= x 1) (subroutinecall a [])] [])
(prog test [] [(decl [(x "integer" [] [] ())])] [(= x 1) (subroutinecall a [])] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(module test [] [] [])
(decl [(x "Integer" [] [] ())])
(decl [(x "INTEGER" [] [] ())])
(decl [(x "iNteger" [] [] ())])
(decl [(c "integeR" [] [(attribute dImenSion [])] ())])
(decl [(e "integer" [] [(attribute DIMENSION []) (attribute intenT [(In)])] ())])
(decl [(i "integer" [] [] ())])
(decl [(a "Real" [] [] ())])
(decl [(a "REAL" [] [] ())])
(decl [(a "real" [(() ()) (() ())] [(attribute aLLocatable [])] ())])
(decl [(c "cHAracter" [] [] ())])
(decl [(x "tYPe" [] [(attribute inTEnt [(inOUt)])] ()) (y "tYPe" [] [(attribute inTEnt [(inOUt)])] ())])
(= a 5)
(= a 5)
(= a 5)
(= a 5)
(use a [(usesymbol i ())])
(use a [(usesymbol i ())])
(= x (arrayinitializer [1 2 3]))
