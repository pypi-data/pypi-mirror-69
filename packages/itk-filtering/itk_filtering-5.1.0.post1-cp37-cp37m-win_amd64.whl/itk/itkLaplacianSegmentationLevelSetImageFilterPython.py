# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLaplacianSegmentationLevelSetImageFilterPython
else:
    import _itkLaplacianSegmentationLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLaplacianSegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLaplacianSegmentationLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSegmentationLevelSetImageFilterPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython

def itkLaplacianSegmentationLevelSetImageFilterID2ID2D_New():
    return itkLaplacianSegmentationLevelSetImageFilterID2ID2D.New()

class itkLaplacianSegmentationLevelSetImageFilterID2ID2D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    r"""Proxy of C++ itkLaplacianSegmentationLevelSetImageFilterID2ID2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID2ID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID2ID2D_Clone)
    __swig_destroy__ = _itkLaplacianSegmentationLevelSetImageFilterPython.delete_itkLaplacianSegmentationLevelSetImageFilterID2ID2D
    cast = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID2ID2D_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkLaplacianSegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSegmentationLevelSetImageFilterID2ID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSegmentationLevelSetImageFilterID2ID2D in _itkLaplacianSegmentationLevelSetImageFilterPython:
_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID2ID2D_swigregister(itkLaplacianSegmentationLevelSetImageFilterID2ID2D)
itkLaplacianSegmentationLevelSetImageFilterID2ID2D___New_orig__ = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID2ID2D___New_orig__
itkLaplacianSegmentationLevelSetImageFilterID2ID2D_cast = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID2ID2D_cast


def itkLaplacianSegmentationLevelSetImageFilterID3ID3D_New():
    return itkLaplacianSegmentationLevelSetImageFilterID3ID3D.New()

class itkLaplacianSegmentationLevelSetImageFilterID3ID3D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    r"""Proxy of C++ itkLaplacianSegmentationLevelSetImageFilterID3ID3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID3ID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID3ID3D_Clone)
    __swig_destroy__ = _itkLaplacianSegmentationLevelSetImageFilterPython.delete_itkLaplacianSegmentationLevelSetImageFilterID3ID3D
    cast = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID3ID3D_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkLaplacianSegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSegmentationLevelSetImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSegmentationLevelSetImageFilterID3ID3D in _itkLaplacianSegmentationLevelSetImageFilterPython:
_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID3ID3D_swigregister(itkLaplacianSegmentationLevelSetImageFilterID3ID3D)
itkLaplacianSegmentationLevelSetImageFilterID3ID3D___New_orig__ = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID3ID3D___New_orig__
itkLaplacianSegmentationLevelSetImageFilterID3ID3D_cast = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterID3ID3D_cast


def itkLaplacianSegmentationLevelSetImageFilterIF2IF2F_New():
    return itkLaplacianSegmentationLevelSetImageFilterIF2IF2F.New()

class itkLaplacianSegmentationLevelSetImageFilterIF2IF2F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    r"""Proxy of C++ itkLaplacianSegmentationLevelSetImageFilterIF2IF2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF2IF2F___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF2IF2F_Clone)
    __swig_destroy__ = _itkLaplacianSegmentationLevelSetImageFilterPython.delete_itkLaplacianSegmentationLevelSetImageFilterIF2IF2F
    cast = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF2IF2F_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkLaplacianSegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSegmentationLevelSetImageFilterIF2IF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSegmentationLevelSetImageFilterIF2IF2F in _itkLaplacianSegmentationLevelSetImageFilterPython:
_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF2IF2F_swigregister(itkLaplacianSegmentationLevelSetImageFilterIF2IF2F)
itkLaplacianSegmentationLevelSetImageFilterIF2IF2F___New_orig__ = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF2IF2F___New_orig__
itkLaplacianSegmentationLevelSetImageFilterIF2IF2F_cast = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF2IF2F_cast


def itkLaplacianSegmentationLevelSetImageFilterIF3IF3F_New():
    return itkLaplacianSegmentationLevelSetImageFilterIF3IF3F.New()

class itkLaplacianSegmentationLevelSetImageFilterIF3IF3F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    r"""Proxy of C++ itkLaplacianSegmentationLevelSetImageFilterIF3IF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF3IF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF3IF3F_Clone)
    __swig_destroy__ = _itkLaplacianSegmentationLevelSetImageFilterPython.delete_itkLaplacianSegmentationLevelSetImageFilterIF3IF3F
    cast = _swig_new_static_method(_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF3IF3F_cast)

    def New(*args, **kargs):
        """New() -> itkLaplacianSegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkLaplacianSegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLaplacianSegmentationLevelSetImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLaplacianSegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLaplacianSegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLaplacianSegmentationLevelSetImageFilterIF3IF3F in _itkLaplacianSegmentationLevelSetImageFilterPython:
_itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF3IF3F_swigregister(itkLaplacianSegmentationLevelSetImageFilterIF3IF3F)
itkLaplacianSegmentationLevelSetImageFilterIF3IF3F___New_orig__ = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF3IF3F___New_orig__
itkLaplacianSegmentationLevelSetImageFilterIF3IF3F_cast = _itkLaplacianSegmentationLevelSetImageFilterPython.itkLaplacianSegmentationLevelSetImageFilterIF3IF3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def laplacian_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for LaplacianSegmentationLevelSetImageFilter"""
    import itk
    instance = itk.LaplacianSegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def laplacian_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LaplacianSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LaplacianSegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.LaplacianSegmentationLevelSetImageFilter

    laplacian_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    laplacian_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    laplacian_segmentation_level_set_image_filter.__doc__ += "Available Keyword Arguments:\n"
    laplacian_segmentation_level_set_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



