# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAntiAliasBinaryImageFilterPython
else:
    import _itkAntiAliasBinaryImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAntiAliasBinaryImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAntiAliasBinaryImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython

def itkAntiAliasBinaryImageFilterID2ID2_New():
    return itkAntiAliasBinaryImageFilterID2ID2.New()

class itkAntiAliasBinaryImageFilterID2ID2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID2ID2):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterID2ID2
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterID2ID2

        Create a new object of the class itkAntiAliasBinaryImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterID2ID2 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_swigregister(itkAntiAliasBinaryImageFilterID2ID2)
itkAntiAliasBinaryImageFilterID2ID2___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2___New_orig__
itkAntiAliasBinaryImageFilterID2ID2_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID2ID2_cast


def itkAntiAliasBinaryImageFilterID3ID3_New():
    return itkAntiAliasBinaryImageFilterID3ID3.New()

class itkAntiAliasBinaryImageFilterID3ID3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterID3ID3):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterID3ID3
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterID3ID3

        Create a new object of the class itkAntiAliasBinaryImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterID3ID3 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_swigregister(itkAntiAliasBinaryImageFilterID3ID3)
itkAntiAliasBinaryImageFilterID3ID3___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3___New_orig__
itkAntiAliasBinaryImageFilterID3ID3_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterID3ID3_cast


def itkAntiAliasBinaryImageFilterIF2IF2_New():
    return itkAntiAliasBinaryImageFilterIF2IF2.New()

class itkAntiAliasBinaryImageFilterIF2IF2(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF2IF2):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterIF2IF2
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterIF2IF2

        Create a new object of the class itkAntiAliasBinaryImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterIF2IF2 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_swigregister(itkAntiAliasBinaryImageFilterIF2IF2)
itkAntiAliasBinaryImageFilterIF2IF2___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2___New_orig__
itkAntiAliasBinaryImageFilterIF2IF2_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF2IF2_cast


def itkAntiAliasBinaryImageFilterIF3IF3_New():
    return itkAntiAliasBinaryImageFilterIF3IF3.New()

class itkAntiAliasBinaryImageFilterIF3IF3(itk.itkSparseFieldLevelSetImageFilterPython.itkSparseFieldLevelSetImageFilterIF3IF3):
    r"""Proxy of C++ itkAntiAliasBinaryImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_Clone)
    GetUpperBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetUpperBinaryValue)
    GetLowerBinaryValue = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetLowerBinaryValue)
    SetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_GetMaximumIterations)
    DoubleConvertibleToOutputCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    InputOStreamWritableCheck = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkAntiAliasBinaryImageFilterPython.delete_itkAntiAliasBinaryImageFilterIF3IF3
    cast = _swig_new_static_method(_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAntiAliasBinaryImageFilterIF3IF3

        Create a new object of the class itkAntiAliasBinaryImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAntiAliasBinaryImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAntiAliasBinaryImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAntiAliasBinaryImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAntiAliasBinaryImageFilterIF3IF3 in _itkAntiAliasBinaryImageFilterPython:
_itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_swigregister(itkAntiAliasBinaryImageFilterIF3IF3)
itkAntiAliasBinaryImageFilterIF3IF3___New_orig__ = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3___New_orig__
itkAntiAliasBinaryImageFilterIF3IF3_cast = _itkAntiAliasBinaryImageFilterPython.itkAntiAliasBinaryImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def anti_alias_binary_image_filter(*args, **kwargs):
    """Procedural interface for AntiAliasBinaryImageFilter"""
    import itk
    instance = itk.AntiAliasBinaryImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def anti_alias_binary_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AntiAliasBinaryImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AntiAliasBinaryImageFilter.values()[0]
    else:
        filter_object = itk.AntiAliasBinaryImageFilter

    anti_alias_binary_image_filter.__doc__ = filter_object.__doc__
    anti_alias_binary_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    anti_alias_binary_image_filter.__doc__ += "Available Keyword Arguments:\n"
    anti_alias_binary_image_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



